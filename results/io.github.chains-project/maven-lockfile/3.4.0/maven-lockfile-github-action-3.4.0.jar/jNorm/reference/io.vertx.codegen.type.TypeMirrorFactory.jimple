public class io.vertx.codegen.type.TypeMirrorFactory extends java.lang.Object
{
private static final io.vertx.codegen.ModuleInfo VERTX_CORE_MOD;
private static final io.vertx.codegen.type.ClassTypeInfo JSON_OBJECT;
private static final io.vertx.codegen.type.ClassTypeInfo STRING;
final javax.lang.model.util.Elements elementUtils;
final javax.lang.model.util.Types typeUtils;
final java.util.Map serializers;
final java.util.Map deserializers;
public void <init>(javax.lang.model.util.Elements, javax.lang.model.util.Types)
{
io.vertx.codegen.type.TypeMirrorFactory v0;
java.util.HashMap v3, v4;
javax.lang.model.util.Types v2;
javax.lang.model.util.Elements v1;
v0 := @this: io.vertx.codegen.type.TypeMirrorFactory;
v1 := @parameter0: javax.lang.model.util.Elements;
v2 := @parameter1: javax.lang.model.util.Types;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map serializers> = v3;
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map deserializers> = v4;
v0.<io.vertx.codegen.type.TypeMirrorFactory: javax.lang.model.util.Elements elementUtils> = v1;
v0.<io.vertx.codegen.type.TypeMirrorFactory: javax.lang.model.util.Types typeUtils> = v2;
return;
}
public void addDataObjectDeserializer(javax.lang.model.element.Element, javax.lang.model.type.TypeMirror, io.vertx.codegen.type.MapperInfo)
{
io.vertx.codegen.type.TypeMirrorFactory v0;
io.vertx.codegen.type.TypeInfo v10, v9;
io.vertx.codegen.type.MapperInfo v3;
javax.lang.model.element.Element v1;
io.vertx.codegen.GenException v12;
javax.lang.model.type.TypeMirror v2;
java.util.Map v13, v5, v7;
java.lang.Object v8;
java.lang.String v4;
boolean v11, v6;
v0 := @this: io.vertx.codegen.type.TypeMirrorFactory;
v1 := @parameter0: javax.lang.model.element.Element;
v2 := @parameter1: javax.lang.model.type.TypeMirror;
v3 := @parameter2: io.vertx.codegen.type.MapperInfo;
v4 = interfaceinvoke v2.<javax.lang.model.type.TypeMirror: java.lang.String toString()>();
v5 = v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map serializers>;
v6 = interfaceinvoke v5.<java.util.Map: boolean containsKey(java.lang.Object)>(v4);
if v6 == 0 goto label1;
v7 = v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map serializers>;
v8 = interfaceinvoke v7.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
v9 = virtualinvoke v8.<io.vertx.codegen.type.MapperInfo: io.vertx.codegen.type.TypeInfo getJsonType()>();
v10 = virtualinvoke v3.<io.vertx.codegen.type.MapperInfo: io.vertx.codegen.type.TypeInfo getJsonType()>();
v11 = virtualinvoke v9.<io.vertx.codegen.type.TypeInfo: boolean equals(java.lang.Object)>(v10);
if v11 != 0 goto label1;
v12 = new io.vertx.codegen.GenException;
specialinvoke v12.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v1, "Mapper cannot declare mixed JSON types");
throw v12;
label1:
v13 = v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map deserializers>;
interfaceinvoke v13.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v4, v3);
return;
}
public void addDataObjectSerializer(javax.lang.model.element.Element, javax.lang.model.type.TypeMirror, io.vertx.codegen.type.MapperInfo)
{
io.vertx.codegen.type.MapperInfo v3;
io.vertx.codegen.GenException v12;
java.util.Map v13, v18, v5, v7;
java.lang.String v17, v4;
boolean v11, v6;
io.vertx.codegen.type.TypeMirrorFactory v0;
io.vertx.codegen.type.TypeInfo v10, v15, v16, v9;
javax.lang.model.element.Element v1;
javax.lang.model.type.TypeMirror v2;
java.lang.Object v14, v8;
v0 := @this: io.vertx.codegen.type.TypeMirrorFactory;
v1 := @parameter0: javax.lang.model.element.Element;
v2 := @parameter1: javax.lang.model.type.TypeMirror;
v3 := @parameter2: io.vertx.codegen.type.MapperInfo;
v4 = interfaceinvoke v2.<javax.lang.model.type.TypeMirror: java.lang.String toString()>();
v5 = v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map deserializers>;
v6 = interfaceinvoke v5.<java.util.Map: boolean containsKey(java.lang.Object)>(v4);
if v6 == 0 goto label1;
v7 = v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map deserializers>;
v8 = interfaceinvoke v7.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
v9 = virtualinvoke v8.<io.vertx.codegen.type.MapperInfo: io.vertx.codegen.type.TypeInfo getJsonType()>();
v10 = virtualinvoke v3.<io.vertx.codegen.type.MapperInfo: io.vertx.codegen.type.TypeInfo getJsonType()>();
v11 = virtualinvoke v9.<io.vertx.codegen.type.TypeInfo: boolean equals(java.lang.Object)>(v10);
if v11 != 0 goto label1;
v12 = new io.vertx.codegen.GenException;
v13 = v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map deserializers>;
v14 = interfaceinvoke v13.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
v15 = virtualinvoke v14.<io.vertx.codegen.type.MapperInfo: io.vertx.codegen.type.TypeInfo getJsonType()>();
v16 = virtualinvoke v3.<io.vertx.codegen.type.MapperInfo: io.vertx.codegen.type.TypeInfo getJsonType()>();
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.vertx.codegen.type.TypeInfo,io.vertx.codegen.type.TypeInfo)>(v15, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Mapper cannot declare mixed JSON types \u0001 \u0001");
specialinvoke v12.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v1, v17);
throw v12;
label1:
v18 = v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map serializers>;
interfaceinvoke v18.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v4, v3);
return;
}
public io.vertx.codegen.type.TypeInfo create(javax.lang.model.type.TypeMirror)
{
io.vertx.codegen.type.TypeMirrorFactory v0;
javax.lang.model.type.TypeMirror v1;
io.vertx.codegen.type.TypeInfo v2;
v0 := @this: io.vertx.codegen.type.TypeMirrorFactory;
v1 := @parameter0: javax.lang.model.type.TypeMirror;
v2 = virtualinvoke v0.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.TypeInfo create(io.vertx.codegen.type.TypeUse,javax.lang.model.type.TypeMirror)>(null, v1);
return v2;
}
public io.vertx.codegen.type.TypeInfo create(io.vertx.codegen.type.TypeUse, javax.lang.model.type.TypeMirror)
{
java.util.HashMap v11;
io.vertx.codegen.type.ArrayTypeInfo v17;
int[] v3;
int v5, v6;
java.lang.String v13, v14, v20;
io.vertx.codegen.type.TypeVariableInfo v16;
boolean v9;
io.vertx.codegen.type.TypeMirrorFactory v0;
io.vertx.codegen.type.TypeInfo v7, v8;
java.lang.IllegalArgumentException v10, v18;
javax.lang.model.type.TypeKind v12, v19, v4;
javax.lang.model.type.TypeMirror v2;
io.vertx.codegen.type.TypeUse v1;
java.lang.Object v15;
v0 := @this: io.vertx.codegen.type.TypeMirrorFactory;
v1 := @parameter0: io.vertx.codegen.type.TypeUse;
v2 := @parameter1: javax.lang.model.type.TypeMirror;
v3 = <io.vertx.codegen.type.TypeMirrorFactory$1: int[] $SwitchMap$javax$lang$model$type$TypeKind>;
v4 = interfaceinvoke v2.<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>();
v5 = virtualinvoke v4.<javax.lang.model.type.TypeKind: int ordinal()>();
v6 = v3[v5];
tableswitch(v6)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label2;
case 4: goto label3;
case 5: goto label3;
case 6: goto label3;
case 7: goto label3;
case 8: goto label3;
case 9: goto label3;
case 10: goto label3;
case 11: goto label3;
case 12: goto label5;
case 13: goto label6;
default: goto label7;
};
label1:
v7 = <io.vertx.codegen.type.VoidTypeInfo: io.vertx.codegen.type.TypeInfo INSTANCE>;
return v7;
label2:
v8 = virtualinvoke v0.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.TypeInfo create(io.vertx.codegen.type.TypeUse,javax.lang.model.type.DeclaredType)>(v1, v2);
return v8;
label3:
if v1 == null goto label4;
v9 = virtualinvoke v1.<io.vertx.codegen.type.TypeUse: boolean isNullable()>();
if v9 == 0 goto label4;
v10 = new java.lang.IllegalArgumentException;
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Primitive types cannot be annotated with @Nullable");
throw v10;
label4:
v11 = <io.vertx.codegen.type.PrimitiveTypeInfo: java.util.HashMap PRIMITIVES>;
v12 = interfaceinvoke v2.<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>();
v13 = virtualinvoke v12.<javax.lang.model.type.TypeKind: java.lang.String name()>();
v14 = virtualinvoke v13.<java.lang.String: java.lang.String toLowerCase()>();
v15 = virtualinvoke v11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v14);
return v15;
label5:
v16 = virtualinvoke v0.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.TypeVariableInfo create(io.vertx.codegen.type.TypeUse,javax.lang.model.type.TypeVariable)>(v1, v2);
return v16;
label6:
v17 = virtualinvoke v0.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.ArrayTypeInfo create(io.vertx.codegen.type.TypeUse,javax.lang.model.type.ArrayType)>(v1, v2);
return v17;
label7:
v18 = new java.lang.IllegalArgumentException;
v19 = interfaceinvoke v2.<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>();
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeKind)>(v2, v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Illegal type \u0001 of kind \u0001");
specialinvoke v18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v20);
throw v18;
}
public io.vertx.codegen.type.TypeInfo create(javax.lang.model.type.DeclaredType)
{
io.vertx.codegen.type.TypeMirrorFactory v0;
io.vertx.codegen.type.TypeInfo v2;
javax.lang.model.type.DeclaredType v1;
v0 := @this: io.vertx.codegen.type.TypeMirrorFactory;
v1 := @parameter0: javax.lang.model.type.DeclaredType;
v2 = virtualinvoke v0.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.TypeInfo create(io.vertx.codegen.type.TypeUse,javax.lang.model.type.DeclaredType)>(null, v1);
return v2;
}
public io.vertx.codegen.type.TypeInfo create(io.vertx.codegen.type.TypeUse, javax.lang.model.type.DeclaredType)
{
io.vertx.codegen.type.TypeMirrorFactory v0;
io.vertx.codegen.type.TypeUse v1;
io.vertx.codegen.type.TypeInfo v3;
javax.lang.model.type.DeclaredType v2;
v0 := @this: io.vertx.codegen.type.TypeMirrorFactory;
v1 := @parameter0: io.vertx.codegen.type.TypeUse;
v2 := @parameter1: javax.lang.model.type.DeclaredType;
v3 = virtualinvoke v0.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.TypeInfo create(io.vertx.codegen.type.TypeUse,javax.lang.model.type.DeclaredType,boolean)>(v1, v2, 1);
return v3;
}
public io.vertx.codegen.type.TypeInfo create(io.vertx.codegen.type.TypeUse, javax.lang.model.type.DeclaredType, boolean)
{
io.vertx.codegen.type.ApiTypeInfo v110;
io.vertx.codegen.MapperKind v76, v83;
javax.lang.model.element.TypeElement v94;
javax.lang.model.util.Elements v10, v70, v72, v8, v93;
io.vertx.codegen.type.DataObjectInfo v37, v38, v68, v87, v88;
java.util.Map v31, v34, v64, v66;
io.vertx.codegen.type.TypeMirrorFactory v0;
javax.lang.model.element.Element v106, v52, v7;
io.vertx.codegen.ModuleInfo v11, v62;
javax.lang.model.element.PackageElement v9;
java.util.ArrayList v19, v45;
io.vertx.codegen.type.ParameterizedTypeInfo v55;
javax.lang.model.type.DeclaredType v2;
java.lang.String v108, v13, v27, v32, v35, v61;
io.vertx.codegen.type.ClassTypeInfo v112, v59, v78, v80, v85, v86;
io.vertx.codegen.type.TypeUse v1, v49;
io.vertx.codegen.type.MapperInfo v75, v82;
io.vertx.codegen.type.ClassKind v42, v56, v60, v71, v74, v77, v84, v90;
boolean v109, v111, v15, v16, v22, v29, v3, v30, v4, v41, v5, v6, v99;
io.vertx.codegen.type.EnumTypeInfo v39;
io.vertx.codegen.type.TypeInfo v51, v54, v92;
javax.lang.model.util.Types v100, v73, v96, v98;
javax.lang.model.type.TypeKind v104, v105;
java.util.List v101, v20, v43, v63, v79, v81, v89;
java.lang.'annotation'.Annotation v14, v28, v40, v69, v91;
java.util.HashMap v57;
int v44, v46, v47, v48;
javax.lang.model.element.Name v107, v12, v26;
java.util.Iterator v21;
javax.lang.model.element.ElementKind v17, v18, v24, v25;
javax.lang.model.type.TypeMirror v103, v53, v95, v97;
java.lang.Object v102, v23, v33, v36, v50, v58, v65, v67;
v0 := @this: io.vertx.codegen.type.TypeMirrorFactory;
v1 := @parameter0: io.vertx.codegen.type.TypeUse;
v2 := @parameter1: javax.lang.model.type.DeclaredType;
v3 := @parameter2: boolean;
if v1 == null goto label01;
v4 = virtualinvoke v1.<io.vertx.codegen.type.TypeUse: boolean isNullable()>();
if v4 == 0 goto label01;
v5 = 1;
goto label02;
label01:
v5 = 0;
label02:
v6 = v5;
v7 = interfaceinvoke v2.<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>();
v8 = v0.<io.vertx.codegen.type.TypeMirrorFactory: javax.lang.model.util.Elements elementUtils>;
v9 = interfaceinvoke v8.<javax.lang.model.util.Elements: javax.lang.model.element.PackageElement getPackageOf(javax.lang.model.element.Element)>(v7);
v10 = v0.<io.vertx.codegen.type.TypeMirrorFactory: javax.lang.model.util.Elements elementUtils>;
v11 = staticinvoke <io.vertx.codegen.ModuleInfo: io.vertx.codegen.ModuleInfo resolve(javax.lang.model.util.Elements,javax.lang.model.element.PackageElement)>(v10, v9);
v12 = interfaceinvoke v7.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();
v13 = virtualinvoke v12.<java.lang.Object: java.lang.String toString()>();
v14 = interfaceinvoke v7.<javax.lang.model.element.TypeElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/codegen/annotations/ProxyGen;");
if v14 == null goto label03;
v15 = 1;
goto label04;
label03:
v15 = 0;
label04:
v16 = v15;
v17 = interfaceinvoke v7.<javax.lang.model.element.TypeElement: javax.lang.model.element.ElementKind getKind()>();
v18 = <javax.lang.model.element.ElementKind: javax.lang.model.element.ElementKind ENUM>;
if v17 != v18 goto label11;
v19 = new java.util.ArrayList;
specialinvoke v19.<java.util.ArrayList: void <init>()>();
v20 = interfaceinvoke v7.<javax.lang.model.element.TypeElement: java.util.List getEnclosedElements()>();
v21 = interfaceinvoke v20.<java.util.List: java.util.Iterator iterator()>();
label05:
v22 = interfaceinvoke v21.<java.util.Iterator: boolean hasNext()>();
if v22 == 0 goto label06;
v23 = interfaceinvoke v21.<java.util.Iterator: java.lang.Object next()>();
v24 = interfaceinvoke v23.<javax.lang.model.element.Element: javax.lang.model.element.ElementKind getKind()>();
v25 = <javax.lang.model.element.ElementKind: javax.lang.model.element.ElementKind ENUM_CONSTANT>;
if v24 != v25 goto label05;
v26 = interfaceinvoke v23.<javax.lang.model.element.Element: javax.lang.model.element.Name getSimpleName()>();
v27 = virtualinvoke v26.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v19.<java.util.ArrayList: boolean add(java.lang.Object)>(v27);
goto label05;
label06:
v28 = interfaceinvoke v7.<javax.lang.model.element.TypeElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/codegen/annotations/VertxGen;");
if v28 == null goto label07;
v29 = 1;
goto label08;
label07:
v29 = 0;
label08:
v30 = v29;
v31 = v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map serializers>;
v32 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
v33 = interfaceinvoke v31.<java.util.Map: java.lang.Object get(java.lang.Object)>(v32);
v34 = v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map deserializers>;
v35 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
v36 = interfaceinvoke v34.<java.util.Map: java.lang.Object get(java.lang.Object)>(v35);
v37 = null;
if v33 != null goto label09;
if v36 == null goto label10;
label09:
v38 = new io.vertx.codegen.type.DataObjectInfo;
specialinvoke v38.<io.vertx.codegen.type.DataObjectInfo: void <init>(boolean,io.vertx.codegen.type.MapperInfo,io.vertx.codegen.type.MapperInfo)>(0, v33, v36);
v37 = v38;
label10:
v39 = new io.vertx.codegen.type.EnumTypeInfo;
specialinvoke v39.<io.vertx.codegen.type.EnumTypeInfo: void <init>(java.lang.String,boolean,java.util.List,io.vertx.codegen.ModuleInfo,boolean,io.vertx.codegen.type.DataObjectInfo)>(v13, v30, v19, v11, v6, v37);
return v39;
label11:
v40 = interfaceinvoke v7.<javax.lang.model.element.TypeElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/codegen/annotations/VertxGen;");
if v40 == null goto label12;
v41 = 1;
goto label13;
label12:
v41 = 0;
label13:
v42 = staticinvoke <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind getKind(java.lang.String,boolean)>(v13, v41);
v43 = interfaceinvoke v2.<javax.lang.model.type.DeclaredType: java.util.List getTypeArguments()>();
if v3 == 0 goto label18;
v44 = interfaceinvoke v43.<java.util.List: int size()>();
if v44 <= 0 goto label18;
v45 = new java.util.ArrayList;
v46 = interfaceinvoke v43.<java.util.List: int size()>();
specialinvoke v45.<java.util.ArrayList: void <init>(int)>(v46);
v47 = 0;
label14:
v48 = interfaceinvoke v43.<java.util.List: int size()>();
if v47 >= v48 goto label17;
if v1 == null goto label15;
v49 = virtualinvoke v1.<io.vertx.codegen.type.TypeUse: io.vertx.codegen.type.TypeUse getArg(java.lang.String,int)>(v13, v47);
goto label16;
label15:
v49 = null;
label16:
v50 = interfaceinvoke v43.<java.util.List: java.lang.Object get(int)>(v47);
v51 = virtualinvoke v0.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.TypeInfo create(io.vertx.codegen.type.TypeUse,javax.lang.model.type.TypeMirror)>(v49, v50);
interfaceinvoke v45.<java.util.List: boolean add(java.lang.Object)>(v51);
v47 = v47 + 1;
goto label14;
label17:
v52 = interfaceinvoke v2.<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>();
v53 = interfaceinvoke v52.<javax.lang.model.element.Element: javax.lang.model.type.TypeMirror asType()>();
v54 = virtualinvoke v0.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.TypeInfo create(io.vertx.codegen.type.TypeUse,javax.lang.model.type.DeclaredType,boolean)>(null, v53, 0);
v55 = new io.vertx.codegen.type.ParameterizedTypeInfo;
specialinvoke v55.<io.vertx.codegen.type.ParameterizedTypeInfo: void <init>(io.vertx.codegen.type.ClassTypeInfo,boolean,java.util.List)>(v54, v6, v45);
return v55;
label18:
v56 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind BOXED_PRIMITIVE>;
if v42 != v56 goto label19;
v57 = <io.vertx.codegen.type.ClassTypeInfo: java.util.HashMap PRIMITIVES>;
v58 = virtualinvoke v57.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v13);
if v6 == 0 goto label30;
v59 = new io.vertx.codegen.type.ClassTypeInfo;
v60 = v58.<io.vertx.codegen.type.ClassTypeInfo: io.vertx.codegen.type.ClassKind kind>;
v61 = v58.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String name>;
v62 = v58.<io.vertx.codegen.type.ClassTypeInfo: io.vertx.codegen.ModuleInfo module>;
v63 = v58.<io.vertx.codegen.type.ClassTypeInfo: java.util.List params>;
specialinvoke v59.<io.vertx.codegen.type.ClassTypeInfo: void <init>(io.vertx.codegen.type.ClassKind,java.lang.String,io.vertx.codegen.ModuleInfo,boolean,java.util.List,io.vertx.codegen.type.DataObjectInfo)>(v60, v61, v62, 1, v63, null);
v58 = v59;
goto label30;
label19:
v64 = v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map serializers>;
v65 = interfaceinvoke v64.<java.util.Map: java.lang.Object get(java.lang.Object)>(v13);
v66 = v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.Map deserializers>;
v67 = interfaceinvoke v66.<java.util.Map: java.lang.Object get(java.lang.Object)>(v13);
v68 = null;
v69 = interfaceinvoke v7.<javax.lang.model.element.TypeElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/codegen/annotations/DataObject;");
if v69 == null goto label24;
v70 = v0.<io.vertx.codegen.type.TypeMirrorFactory: javax.lang.model.util.Elements elementUtils>;
v71 = staticinvoke <io.vertx.codegen.Helper: io.vertx.codegen.type.ClassKind getAnnotatedDataObjectAnnotatedSerializationType(javax.lang.model.util.Elements,javax.lang.model.element.TypeElement)>(v70, v7);
v72 = v0.<io.vertx.codegen.type.TypeMirrorFactory: javax.lang.model.util.Elements elementUtils>;
v73 = v0.<io.vertx.codegen.type.TypeMirrorFactory: javax.lang.model.util.Types typeUtils>;
v74 = staticinvoke <io.vertx.codegen.Helper: io.vertx.codegen.type.ClassKind getAnnotatedDataObjectDeserialisationType(javax.lang.model.util.Elements,javax.lang.model.util.Types,javax.lang.model.element.TypeElement)>(v72, v73, v7);
if v65 != null goto label21;
if v71 == null goto label21;
v75 = new io.vertx.codegen.type.MapperInfo;
specialinvoke v75.<io.vertx.codegen.type.MapperInfo: void <init>()>();
v65 = v75;
virtualinvoke v75.<io.vertx.codegen.type.MapperInfo: void setQualifiedName(java.lang.String)>(v13);
v76 = <io.vertx.codegen.MapperKind: io.vertx.codegen.MapperKind SELF>;
virtualinvoke v75.<io.vertx.codegen.type.MapperInfo: void setKind(io.vertx.codegen.MapperKind)>(v76);
v77 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind JSON_OBJECT>;
if v71 != v77 goto label20;
v78 = <io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.ClassTypeInfo JSON_OBJECT>;
virtualinvoke v75.<io.vertx.codegen.type.MapperInfo: void setTargetType(io.vertx.codegen.type.TypeInfo)>(v78);
v79 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("toJson");
virtualinvoke v75.<io.vertx.codegen.type.MapperInfo: void setSelectors(java.util.List)>(v79);
goto label21;
label20:
v80 = <io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.ClassTypeInfo STRING>;
virtualinvoke v75.<io.vertx.codegen.type.MapperInfo: void setTargetType(io.vertx.codegen.type.TypeInfo)>(v80);
v81 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("toJson");
virtualinvoke v75.<io.vertx.codegen.type.MapperInfo: void setSelectors(java.util.List)>(v81);
label21:
if v67 != null goto label23;
if v74 == null goto label23;
v82 = new io.vertx.codegen.type.MapperInfo;
specialinvoke v82.<io.vertx.codegen.type.MapperInfo: void <init>()>();
v67 = v82;
virtualinvoke v82.<io.vertx.codegen.type.MapperInfo: void setQualifiedName(java.lang.String)>(v13);
v83 = <io.vertx.codegen.MapperKind: io.vertx.codegen.MapperKind SELF>;
virtualinvoke v82.<io.vertx.codegen.type.MapperInfo: void setKind(io.vertx.codegen.MapperKind)>(v83);
v84 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind JSON_OBJECT>;
if v74 != v84 goto label22;
v85 = <io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.ClassTypeInfo JSON_OBJECT>;
virtualinvoke v82.<io.vertx.codegen.type.MapperInfo: void setTargetType(io.vertx.codegen.type.TypeInfo)>(v85);
goto label23;
label22:
v86 = <io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.ClassTypeInfo STRING>;
virtualinvoke v82.<io.vertx.codegen.type.MapperInfo: void setTargetType(io.vertx.codegen.type.TypeInfo)>(v86);
label23:
v87 = new io.vertx.codegen.type.DataObjectInfo;
specialinvoke v87.<io.vertx.codegen.type.DataObjectInfo: void <init>(boolean,io.vertx.codegen.type.MapperInfo,io.vertx.codegen.type.MapperInfo)>(1, v65, v67);
v68 = v87;
goto label26;
label24:
if v65 != null goto label25;
if v67 == null goto label26;
label25:
v88 = new io.vertx.codegen.type.DataObjectInfo;
specialinvoke v88.<io.vertx.codegen.type.DataObjectInfo: void <init>(boolean,io.vertx.codegen.type.MapperInfo,io.vertx.codegen.type.MapperInfo)>(0, v65, v67);
v68 = v88;
label26:
v89 = specialinvoke v0.<io.vertx.codegen.type.TypeMirrorFactory: java.util.List createTypeParams(javax.lang.model.type.DeclaredType)>(v2);
v90 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind API>;
if v42 != v90 goto label29;
v91 = interfaceinvoke v7.<javax.lang.model.element.TypeElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/codegen/annotations/VertxGen;");
v92 = null;
v93 = v0.<io.vertx.codegen.type.TypeMirrorFactory: javax.lang.model.util.Elements elementUtils>;
v94 = interfaceinvoke v93.<javax.lang.model.util.Elements: javax.lang.model.element.TypeElement getTypeElement(java.lang.CharSequence)>("io.vertx.core.Handler");
v95 = interfaceinvoke v94.<javax.lang.model.element.TypeElement: javax.lang.model.type.TypeMirror asType()>();
v96 = v0.<io.vertx.codegen.type.TypeMirrorFactory: javax.lang.model.util.Types typeUtils>;
v97 = interfaceinvoke v96.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>(v95);
v98 = v0.<io.vertx.codegen.type.TypeMirrorFactory: javax.lang.model.util.Types typeUtils>;
v99 = interfaceinvoke v98.<javax.lang.model.util.Types: boolean isSubtype(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>(v2, v97);
if v99 == 0 goto label28;
v100 = v0.<io.vertx.codegen.type.TypeMirrorFactory: javax.lang.model.util.Types typeUtils>;
v101 = interfaceinvoke v94.<javax.lang.model.element.TypeElement: java.util.List getTypeParameters()>();
v102 = interfaceinvoke v101.<java.util.List: java.lang.Object get(int)>(0);
v103 = staticinvoke <io.vertx.codegen.Helper: javax.lang.model.type.TypeMirror resolveTypeParameter(javax.lang.model.util.Types,javax.lang.model.type.DeclaredType,javax.lang.model.element.TypeParameterElement)>(v100, v2, v102);
v104 = interfaceinvoke v103.<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>();
v105 = <javax.lang.model.type.TypeKind: javax.lang.model.type.TypeKind DECLARED>;
if v104 != v105 goto label27;
v106 = interfaceinvoke v103.<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>();
v107 = interfaceinvoke v106.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();
v108 = virtualinvoke v107.<java.lang.Object: java.lang.String toString()>();
v109 = virtualinvoke v108.<java.lang.String: boolean equals(java.lang.Object)>("io.vertx.core.AsyncResult");
if v109 != 0 goto label28;
v92 = virtualinvoke v0.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.TypeInfo create(javax.lang.model.type.TypeMirror)>(v103);
goto label28;
label27:
v92 = virtualinvoke v0.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.TypeInfo create(javax.lang.model.type.TypeMirror)>(v103);
label28:
v110 = new io.vertx.codegen.type.ApiTypeInfo;
v111 = interfaceinvoke v91.<io.vertx.codegen.annotations.VertxGen: boolean concrete()>();
specialinvoke v110.<io.vertx.codegen.type.ApiTypeInfo: void <init>(java.lang.String,boolean,java.util.List,io.vertx.codegen.type.TypeInfo,io.vertx.codegen.ModuleInfo,boolean,boolean,io.vertx.codegen.type.DataObjectInfo)>(v13, v111, v89, v92, v11, v6, v16, v68);
v58 = v110;
goto label30;
label29:
v112 = new io.vertx.codegen.type.ClassTypeInfo;
specialinvoke v112.<io.vertx.codegen.type.ClassTypeInfo: void <init>(io.vertx.codegen.type.ClassKind,java.lang.String,io.vertx.codegen.ModuleInfo,boolean,java.util.List,io.vertx.codegen.type.DataObjectInfo)>(v42, v13, v11, v6, v89, v68);
v58 = v112;
label30:
return v58;
}
public io.vertx.codegen.type.TypeVariableInfo create(io.vertx.codegen.type.TypeUse, javax.lang.model.type.TypeVariable)
{
io.vertx.codegen.type.TypeMirrorFactory v0;
javax.lang.model.element.Element v3;
io.vertx.codegen.TypeParamInfo v4;
io.vertx.codegen.type.TypeUse v1;
javax.lang.model.type.TypeVariable v2;
java.lang.String v9;
io.vertx.codegen.type.TypeVariableInfo v5;
boolean v6, v7;
javax.lang.model.element.Name v8;
v0 := @this: io.vertx.codegen.type.TypeMirrorFactory;
v1 := @parameter0: io.vertx.codegen.type.TypeUse;
v2 := @parameter1: javax.lang.model.type.TypeVariable;
v3 = interfaceinvoke v2.<javax.lang.model.type.TypeVariable: javax.lang.model.element.Element asElement()>();
v4 = staticinvoke <io.vertx.codegen.TypeParamInfo: io.vertx.codegen.TypeParamInfo create(javax.lang.model.element.TypeParameterElement)>(v3);
v5 = new io.vertx.codegen.type.TypeVariableInfo;
if v1 == null goto label1;
v6 = virtualinvoke v1.<io.vertx.codegen.type.TypeUse: boolean isNullable()>();
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
v8 = interfaceinvoke v3.<javax.lang.model.element.TypeParameterElement: javax.lang.model.element.Name getSimpleName()>();
v9 = virtualinvoke v8.<java.lang.Object: java.lang.String toString()>();
specialinvoke v5.<io.vertx.codegen.type.TypeVariableInfo: void <init>(io.vertx.codegen.TypeParamInfo,boolean,java.lang.String)>(v4, v7, v9);
return v5;
}
public io.vertx.codegen.type.ArrayTypeInfo create(io.vertx.codegen.type.TypeUse, javax.lang.model.type.ArrayType)
{
io.vertx.codegen.type.TypeMirrorFactory v0;
javax.lang.model.type.ArrayType v2;
io.vertx.codegen.type.TypeInfo v5;
io.vertx.codegen.type.ArrayTypeInfo v4;
javax.lang.model.type.TypeMirror v3;
io.vertx.codegen.type.TypeUse v1;
boolean v6, v7;
v0 := @this: io.vertx.codegen.type.TypeMirrorFactory;
v1 := @parameter0: io.vertx.codegen.type.TypeUse;
v2 := @parameter1: javax.lang.model.type.ArrayType;
v3 = interfaceinvoke v2.<javax.lang.model.type.ArrayType: javax.lang.model.type.TypeMirror getComponentType()>();
v4 = new io.vertx.codegen.type.ArrayTypeInfo;
v5 = virtualinvoke v0.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.TypeInfo create(javax.lang.model.type.TypeMirror)>(v3);
if v1 == null goto label1;
v6 = virtualinvoke v1.<io.vertx.codegen.type.TypeUse: boolean isNullable()>();
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
specialinvoke v4.<io.vertx.codegen.type.ArrayTypeInfo: void <init>(io.vertx.codegen.type.TypeInfo,boolean)>(v5, v7);
return v4;
}
private java.util.List createTypeParams(javax.lang.model.type.DeclaredType)
{
io.vertx.codegen.type.TypeMirrorFactory v0;
javax.lang.model.element.Element v3;
java.util.ArrayList v2;
io.vertx.codegen.TypeParamInfo$Class v8;
java.util.List v4;
javax.lang.model.type.DeclaredType v1;
int v5, v6;
java.lang.Object v7;
java.lang.String v10, v12;
javax.lang.model.element.Name v11, v9;
v0 := @this: io.vertx.codegen.type.TypeMirrorFactory;
v1 := @parameter0: javax.lang.model.type.DeclaredType;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = interfaceinvoke v1.<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>();
v4 = interfaceinvoke v3.<javax.lang.model.element.TypeElement: java.util.List getTypeParameters()>();
v5 = 0;
label1:
v6 = interfaceinvoke v4.<java.util.List: int size()>();
if v5 >= v6 goto label2;
v7 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(v5);
v8 = new io.vertx.codegen.TypeParamInfo$Class;
v9 = interfaceinvoke v3.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();
v10 = virtualinvoke v9.<java.lang.Object: java.lang.String toString()>();
v11 = interfaceinvoke v7.<javax.lang.model.element.TypeParameterElement: javax.lang.model.element.Name getSimpleName()>();
v12 = virtualinvoke v11.<java.lang.Object: java.lang.String toString()>();
specialinvoke v8.<io.vertx.codegen.TypeParamInfo$Class: void <init>(java.lang.String,int,java.lang.String)>(v10, v5, v12);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v8);
v5 = v5 + 1;
goto label1;
label2:
return v2;
}
static void <clinit>()
{
io.vertx.codegen.type.ClassTypeInfo v1, v5;
java.util.List v4, v7;
io.vertx.codegen.ModuleInfo v0, v3;
io.vertx.codegen.type.ClassKind v2, v6;
v0 = new io.vertx.codegen.ModuleInfo;
specialinvoke v0.<io.vertx.codegen.ModuleInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>("io.vertx.core", "vertx", "io.vertx", 0);
<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.ModuleInfo VERTX_CORE_MOD> = v0;
v1 = new io.vertx.codegen.type.ClassTypeInfo;
v2 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind JSON_OBJECT>;
v3 = <io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.ModuleInfo VERTX_CORE_MOD>;
v4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
specialinvoke v1.<io.vertx.codegen.type.ClassTypeInfo: void <init>(io.vertx.codegen.type.ClassKind,java.lang.String,io.vertx.codegen.ModuleInfo,boolean,java.util.List,io.vertx.codegen.type.DataObjectInfo)>(v2, "io.vertx.core.json.JsonObject", v3, 0, v4, null);
<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.ClassTypeInfo JSON_OBJECT> = v1;
v5 = new io.vertx.codegen.type.ClassTypeInfo;
v6 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind STRING>;
v7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
specialinvoke v5.<io.vertx.codegen.type.ClassTypeInfo: void <init>(io.vertx.codegen.type.ClassKind,java.lang.String,io.vertx.codegen.ModuleInfo,boolean,java.util.List,io.vertx.codegen.type.DataObjectInfo)>(v6, "java.lang.String", null, 0, v7, null);
<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.ClassTypeInfo STRING> = v5;
return;
}
}