public class io.vertx.codegen.type.TypeUse extends java.lang.Object
{
static final java.lang.String NULLABLE;
private static final java.util.List providers;
private final io.vertx.codegen.type.TypeUse$TypeInternal[] types;
public static io.vertx.codegen.type.TypeUse createParamTypeUse(javax.'annotation'.processing.ProcessingEnvironment, javax.lang.model.element.ExecutableElement[], int)
{
java.util.Iterator v8;
io.vertx.codegen.type.TypeUse$TypeInternal v12, v13;
javax.lang.model.element.ExecutableElement v11;
io.vertx.codegen.type.TypeUse$TypeInternal[] v4;
java.util.List v7;
io.vertx.codegen.type.TypeUse v14;
javax.lang.model.element.ExecutableElement[] v1;
int v2, v3, v5, v6;
javax.'annotation'.processing.ProcessingEnvironment v0;
java.lang.Object v10;
boolean v9;
v0 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;
v1 := @parameter1: javax.lang.model.element.ExecutableElement[];
v2 := @parameter2: int;
v3 = lengthof v1;
v4 = newarray (io.vertx.codegen.type.TypeUse$TypeInternal)[v3];
v5 = 0;
label1:
v6 = lengthof v1;
if v5 >= v6 goto label4;
v7 = <io.vertx.codegen.type.TypeUse: java.util.List providers>;
v8 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
label2:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label3;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = v1[v5];
v12 = interfaceinvoke v10.<io.vertx.codegen.type.TypeUse$TypeInternalProvider: io.vertx.codegen.type.TypeUse$TypeInternal forParam(javax.'annotation'.processing.ProcessingEnvironment,javax.lang.model.element.ExecutableElement,int)>(v0, v11, v2);
v4[v5] = v12;
v13 = v4[v5];
if v13 == null goto label2;
label3:
v5 = v5 + 1;
goto label1;
label4:
v14 = new io.vertx.codegen.type.TypeUse;
specialinvoke v14.<io.vertx.codegen.type.TypeUse: void <init>(io.vertx.codegen.type.TypeUse$TypeInternal[])>(v4);
return v14;
}
public static transient io.vertx.codegen.type.TypeUse createReturnTypeUse(javax.'annotation'.processing.ProcessingEnvironment, javax.lang.model.element.ExecutableElement[])
{
java.util.Iterator v7;
io.vertx.codegen.type.TypeUse$TypeInternal v11, v12;
javax.lang.model.element.ExecutableElement v10;
io.vertx.codegen.type.TypeUse$TypeInternal[] v3;
java.util.List v6;
io.vertx.codegen.type.TypeUse v13;
javax.lang.model.element.ExecutableElement[] v1;
int v2, v4, v5;
javax.'annotation'.processing.ProcessingEnvironment v0;
java.lang.Object v9;
boolean v8;
v0 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;
v1 := @parameter1: javax.lang.model.element.ExecutableElement[];
v2 = lengthof v1;
v3 = newarray (io.vertx.codegen.type.TypeUse$TypeInternal)[v2];
v4 = 0;
label1:
v5 = lengthof v1;
if v4 >= v5 goto label4;
v6 = <io.vertx.codegen.type.TypeUse: java.util.List providers>;
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
label2:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label3;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = v1[v4];
v11 = interfaceinvoke v9.<io.vertx.codegen.type.TypeUse$TypeInternalProvider: io.vertx.codegen.type.TypeUse$TypeInternal forReturn(javax.'annotation'.processing.ProcessingEnvironment,javax.lang.model.element.ExecutableElement)>(v0, v10);
v3[v4] = v11;
v12 = v3[v4];
if v12 == null goto label2;
label3:
v4 = v4 + 1;
goto label1;
label4:
v13 = new io.vertx.codegen.type.TypeUse;
specialinvoke v13.<io.vertx.codegen.type.TypeUse: void <init>(io.vertx.codegen.type.TypeUse$TypeInternal[])>(v3);
return v13;
}
private void <init>(io.vertx.codegen.type.TypeUse$TypeInternal[])
{
io.vertx.codegen.type.TypeUse$TypeInternal[] v1;
io.vertx.codegen.type.TypeUse v0;
v0 := @this: io.vertx.codegen.type.TypeUse;
v1 := @parameter0: io.vertx.codegen.type.TypeUse$TypeInternal[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.codegen.type.TypeUse: io.vertx.codegen.type.TypeUse$TypeInternal[] types> = v1;
return;
}
public io.vertx.codegen.type.TypeUse getArg(java.lang.String, int)
{
java.lang.Object[] v14;
io.vertx.codegen.type.TypeUse$TypeInternal v10, v7;
java.util.ArrayList v3;
io.vertx.codegen.type.TypeUse$TypeInternal[] v13, v4;
io.vertx.codegen.type.TypeUse v0, v11;
int v12, v2, v5, v6;
java.lang.String v1, v8;
boolean v9;
v0 := @this: io.vertx.codegen.type.TypeUse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = v0.<io.vertx.codegen.type.TypeUse: io.vertx.codegen.type.TypeUse$TypeInternal[] types>;
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label2;
v7 = v4[v6];
v8 = interfaceinvoke v7.<io.vertx.codegen.type.TypeUse$TypeInternal: java.lang.String rawName()>();
v9 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label2;
v10 = interfaceinvoke v7.<io.vertx.codegen.type.TypeUse$TypeInternal: io.vertx.codegen.type.TypeUse$TypeInternal getArgAt(int)>(v2);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v10);
v6 = v6 + 1;
goto label1;
label2:
v11 = new io.vertx.codegen.type.TypeUse;
v12 = interfaceinvoke v3.<java.util.List: int size()>();
v13 = newarray (io.vertx.codegen.type.TypeUse$TypeInternal)[v12];
v14 = interfaceinvoke v3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v13);
specialinvoke v11.<io.vertx.codegen.type.TypeUse: void <init>(io.vertx.codegen.type.TypeUse$TypeInternal[])>(v14);
return v11;
}
public boolean isNullable()
{
io.vertx.codegen.type.TypeUse$TypeInternal v5;
java.lang.RuntimeException v7;
io.vertx.codegen.type.TypeUse$TypeInternal[] v2;
io.vertx.codegen.type.TypeUse v0;
int v3, v4;
boolean v1, v6;
v0 := @this: io.vertx.codegen.type.TypeUse;
v1 = 0;
v2 = v0.<io.vertx.codegen.type.TypeUse: io.vertx.codegen.type.TypeUse$TypeInternal[] types>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label4;
v5 = v2[v4];
v6 = interfaceinvoke v5.<io.vertx.codegen.type.TypeUse$TypeInternal: boolean isNullable()>();
if v6 == 0 goto label2;
v1 = 1;
goto label3;
label2:
if v1 == 0 goto label3;
v7 = new java.lang.RuntimeException;
specialinvoke v7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Nullable type cannot override non nullable");
throw v7;
label3:
v4 = v4 + 1;
goto label1;
label4:
return v1;
}
static void <clinit>()
{
java.lang.Throwable v16, v5;
java.util.ArrayList v2;
java.lang.String v1, v8, v9;
java.lang.Package v7;
java.lang.reflect.Field v13;
io.vertx.codegen.type.TypeUse$1 v18;
io.vertx.codegen.type.TypeUse$2 v20;
java.util.List v15, v17, v19;
java.lang.Class v0, v10, v12, v3, v6;
java.lang.Object v14;
java.lang.ClassLoader v11, v4;
v0 = class "Lio/vertx/codegen/annotations/Nullable;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
<io.vertx.codegen.type.TypeUse: java.lang.String NULLABLE> = v1;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
<io.vertx.codegen.type.TypeUse: java.util.List providers> = v2;
label1:
v3 = class "Lio/vertx/codegen/type/TypeUse;";
v4 = virtualinvoke v3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
virtualinvoke v4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("java.lang.invoke.VarHandle");
label2:
goto label7;
label3:
v5 := @caughtexception;
label4:
v6 = class "Lio/vertx/codegen/type/TypeUse;";
v7 = virtualinvoke v6.<java.lang.Class: java.lang.Package getPackage()>();
v8 = virtualinvoke v7.<java.lang.Package: java.lang.String getName()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.TreeTypeInternal");
v10 = class "Lio/vertx/codegen/type/TypeUse;";
v11 = virtualinvoke v10.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v12 = virtualinvoke v11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(v9);
v13 = virtualinvoke v12.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("PROVIDER");
v14 = virtualinvoke v13.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);
v15 = <io.vertx.codegen.type.TypeUse: java.util.List providers>;
interfaceinvoke v15.<java.util.List: boolean add(java.lang.Object)>(v14);
label5:
goto label7;
label6:
v16 := @caughtexception;
label7:
v17 = <io.vertx.codegen.type.TypeUse: java.util.List providers>;
v18 = new io.vertx.codegen.type.TypeUse$1;
specialinvoke v18.<io.vertx.codegen.type.TypeUse$1: void <init>()>();
interfaceinvoke v17.<java.util.List: boolean add(java.lang.Object)>(v18);
v19 = <io.vertx.codegen.type.TypeUse: java.util.List providers>;
v20 = new io.vertx.codegen.type.TypeUse$2;
specialinvoke v20.<io.vertx.codegen.type.TypeUse$2: void <init>()>();
interfaceinvoke v19.<java.util.List: boolean add(java.lang.Object)>(v20);
return;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label4 to label5 with label6;
}
}