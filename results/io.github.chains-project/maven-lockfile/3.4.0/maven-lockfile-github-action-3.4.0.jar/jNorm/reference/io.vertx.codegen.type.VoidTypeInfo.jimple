public class io.vertx.codegen.type.VoidTypeInfo extends io.vertx.codegen.type.TypeInfo
{
public static io.vertx.codegen.type.TypeInfo INSTANCE;
private void <init>()
{
io.vertx.codegen.type.VoidTypeInfo v0;
v0 := @this: io.vertx.codegen.type.VoidTypeInfo;
specialinvoke v0.<io.vertx.codegen.type.TypeInfo: void <init>()>();
return;
}
public io.vertx.codegen.type.ClassKind getKind()
{
io.vertx.codegen.type.ClassKind v1;
io.vertx.codegen.type.VoidTypeInfo v0;
v0 := @this: io.vertx.codegen.type.VoidTypeInfo;
v1 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind VOID>;
return v1;
}
public boolean equals(java.lang.Object)
{
java.lang.Object v1;
io.vertx.codegen.type.VoidTypeInfo v0;
boolean v2;
v0 := @this: io.vertx.codegen.type.VoidTypeInfo;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof io.vertx.codegen.type.VoidTypeInfo;
return v2;
}
public java.lang.String format(boolean)
{
io.vertx.codegen.type.VoidTypeInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.type.VoidTypeInfo;
v1 := @parameter0: boolean;
return "void";
}
public boolean isVoid()
{
io.vertx.codegen.type.VoidTypeInfo v0;
v0 := @this: io.vertx.codegen.type.VoidTypeInfo;
return 1;
}
static void <clinit>()
{
io.vertx.codegen.type.VoidTypeInfo$1 v0;
v0 = new io.vertx.codegen.type.VoidTypeInfo$1;
specialinvoke v0.<io.vertx.codegen.type.VoidTypeInfo$1: void <init>()>();
<io.vertx.codegen.type.VoidTypeInfo: io.vertx.codegen.type.TypeInfo INSTANCE> = v0;
return;
}
}