public class io.vertx.codegen.writer.CodeWriter extends java.io.PrintWriter
{
private int indentSize;
private int indent;
private boolean first;
public void <init>(java.io.Writer)
{
java.io.Writer v1;
io.vertx.codegen.writer.CodeWriter v0;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: java.io.Writer;
specialinvoke v0.<java.io.PrintWriter: void <init>(java.io.Writer)>(v1);
v0.<io.vertx.codegen.writer.CodeWriter: int indentSize> = 2;
v0.<io.vertx.codegen.writer.CodeWriter: int indent> = 0;
v0.<io.vertx.codegen.writer.CodeWriter: boolean first> = 1;
return;
}
public java.io.Writer writer()
{
java.io.Writer v1;
io.vertx.codegen.writer.CodeWriter v0;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 = v0.<io.vertx.codegen.writer.CodeWriter: java.io.Writer out>;
return v1;
}
public int indentSize()
{
int v1;
io.vertx.codegen.writer.CodeWriter v0;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 = v0.<io.vertx.codegen.writer.CodeWriter: int indentSize>;
return v1;
}
public io.vertx.codegen.writer.CodeWriter indentSize(int)
{
int v1;
io.vertx.codegen.writer.CodeWriter v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>()>();
throw v2;
label1:
v0.<io.vertx.codegen.writer.CodeWriter: int indentSize> = v1;
return v0;
}
public java.lang.String indentation()
{
int v2, v3, v4, v5;
io.vertx.codegen.writer.CodeWriter v0;
java.lang.StringBuilder v1;
java.lang.String v6;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = 0;
label1:
v3 = v0.<io.vertx.codegen.writer.CodeWriter: int indent>;
v4 = v0.<io.vertx.codegen.writer.CodeWriter: int indentSize>;
v5 = v3 * v4;
if v2 >= v5 goto label2;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
v2 = v2 + 1;
goto label1;
label2:
v6 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v6;
}
public io.vertx.codegen.writer.CodeWriter indent()
{
int v1, v2;
io.vertx.codegen.writer.CodeWriter v0;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 = v0.<io.vertx.codegen.writer.CodeWriter: int indent>;
v2 = v1 + 1;
v0.<io.vertx.codegen.writer.CodeWriter: int indent> = v2;
return v0;
}
public io.vertx.codegen.writer.CodeWriter unindent()
{
java.lang.IllegalStateException v2;
int v1, v3, v4;
io.vertx.codegen.writer.CodeWriter v0;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 = v0.<io.vertx.codegen.writer.CodeWriter: int indent>;
if v1 != 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.vertx.codegen.writer.CodeWriter: int indent>;
v4 = v3 - 1;
v0.<io.vertx.codegen.writer.CodeWriter: int indent> = v4;
return v0;
}
public io.vertx.codegen.writer.CodeWriter indented(java.lang.Runnable)
{
io.vertx.codegen.writer.CodeWriter v0;
java.lang.Runnable v1;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: java.lang.Runnable;
virtualinvoke v0.<io.vertx.codegen.writer.CodeWriter: io.vertx.codegen.writer.CodeWriter indent()>();
interfaceinvoke v1.<java.lang.Runnable: void run()>();
virtualinvoke v0.<io.vertx.codegen.writer.CodeWriter: io.vertx.codegen.writer.CodeWriter unindent()>();
return v0;
}
public io.vertx.codegen.writer.CodeWriter javaImport(java.lang.String)
{
io.vertx.codegen.writer.CodeWriter v0, v2, v3, v4, v5;
java.lang.String v1;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.codegen.writer.CodeWriter: io.vertx.codegen.writer.CodeWriter append(java.lang.CharSequence)>("import ");
v3 = virtualinvoke v2.<io.vertx.codegen.writer.CodeWriter: io.vertx.codegen.writer.CodeWriter append(java.lang.CharSequence)>(v1);
v4 = virtualinvoke v3.<io.vertx.codegen.writer.CodeWriter: io.vertx.codegen.writer.CodeWriter append(java.lang.CharSequence)>(";");
v5 = virtualinvoke v4.<io.vertx.codegen.writer.CodeWriter: io.vertx.codegen.writer.CodeWriter newLine()>();
return v5;
}
public io.vertx.codegen.writer.CodeWriter code(java.lang.String)
{
io.vertx.codegen.writer.CodeWriter v0;
java.lang.String v1;
boolean v2;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.codegen.writer.CodeWriter: boolean first>;
if v2 != 0 goto label1;
virtualinvoke v0.<io.vertx.codegen.writer.CodeWriter: void println()>();
label1:
virtualinvoke v0.<io.vertx.codegen.writer.CodeWriter: void print(java.lang.String)>(v1);
return v0;
}
public io.vertx.codegen.writer.CodeWriter codeln(java.lang.String)
{
io.vertx.codegen.writer.CodeWriter v0, v2, v3;
java.lang.String v1;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.codegen.writer.CodeWriter: io.vertx.codegen.writer.CodeWriter code(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.codegen.writer.CodeWriter: io.vertx.codegen.writer.CodeWriter newLine()>();
return v3;
}
public io.vertx.codegen.writer.CodeWriter stmt(java.lang.String)
{
io.vertx.codegen.writer.CodeWriter v0, v2, v3, v4;
java.lang.String v1;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.codegen.writer.CodeWriter: io.vertx.codegen.writer.CodeWriter code(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.codegen.writer.CodeWriter: io.vertx.codegen.writer.CodeWriter append(java.lang.CharSequence)>(";");
v4 = virtualinvoke v3.<io.vertx.codegen.writer.CodeWriter: io.vertx.codegen.writer.CodeWriter newLine()>();
return v4;
}
public io.vertx.codegen.writer.CodeWriter newLine()
{
io.vertx.codegen.writer.CodeWriter v0;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
virtualinvoke v0.<io.vertx.codegen.writer.CodeWriter: void println()>();
return v0;
}
public io.vertx.codegen.writer.CodeWriter writeSeq(java.util.stream.Stream, java.lang.String)
{
java.util.stream.Stream v1;
io.vertx.codegen.writer.CodeWriter v0, v5;
java.lang.Object v4;
java.lang.String v2;
java.util.stream.Collector v3;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: java.util.stream.Stream;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(v2);
v4 = interfaceinvoke v1.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v3);
v5 = virtualinvoke v0.<io.vertx.codegen.writer.CodeWriter: io.vertx.codegen.writer.CodeWriter append(java.lang.CharSequence)>(v4);
return v5;
}
public void println()
{
io.vertx.codegen.writer.CodeWriter v0;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
virtualinvoke v0.<io.vertx.codegen.writer.CodeWriter: void print(char)>(10);
return;
}
public void write(java.lang.String, int, int)
{
int v2, v3, v4, v5;
char v6;
io.vertx.codegen.writer.CodeWriter v0;
java.lang.String v1;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2 + v4;
v6 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v5);
virtualinvoke v0.<io.vertx.codegen.writer.CodeWriter: void write(int)>(v6);
v4 = v4 + 1;
goto label1;
label2:
return;
}
public void write(int)
{
int v1, v3, v4, v5, v6;
io.vertx.codegen.writer.CodeWriter v0;
boolean v2;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: int;
if v1 != 10 goto label1;
v0.<io.vertx.codegen.writer.CodeWriter: boolean first> = 1;
goto label3;
label1:
v2 = v0.<io.vertx.codegen.writer.CodeWriter: boolean first>;
if v2 == 0 goto label3;
v0.<io.vertx.codegen.writer.CodeWriter: boolean first> = 0;
v3 = 0;
label2:
v4 = v0.<io.vertx.codegen.writer.CodeWriter: int indent>;
v5 = v0.<io.vertx.codegen.writer.CodeWriter: int indentSize>;
v6 = v4 * v5;
if v3 >= v6 goto label3;
specialinvoke v0.<java.io.PrintWriter: void write(int)>(32);
v3 = v3 + 1;
goto label2;
label3:
specialinvoke v0.<java.io.PrintWriter: void write(int)>(v1);
return;
}
public io.vertx.codegen.writer.CodeWriter append(java.lang.CharSequence)
{
java.io.PrintWriter v2;
io.vertx.codegen.writer.CodeWriter v0;
java.lang.CharSequence v1;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(v1);
return v2;
}
public io.vertx.codegen.writer.CodeWriter append(java.lang.CharSequence, int, int)
{
java.io.PrintWriter v4;
java.lang.CharSequence v1;
int v2, v3;
io.vertx.codegen.writer.CodeWriter v0;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = specialinvoke v0.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence,int,int)>(v1, v2, v3);
return v4;
}
public io.vertx.codegen.writer.CodeWriter append(char)
{
java.io.PrintWriter v2;
char v1;
io.vertx.codegen.writer.CodeWriter v0;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: char;
v2 = specialinvoke v0.<java.io.PrintWriter: java.io.PrintWriter append(char)>(v1);
return v2;
}
public transient io.vertx.codegen.writer.CodeWriter format(java.lang.String, java.lang.Object[])
{
java.io.PrintWriter v3;
java.lang.Object[] v2;
io.vertx.codegen.writer.CodeWriter v0;
java.lang.String v1;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object[];
v3 = specialinvoke v0.<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>(v1, v2);
return v3;
}
public transient io.vertx.codegen.writer.CodeWriter format(java.util.Locale, java.lang.String, java.lang.Object[])
{
java.io.PrintWriter v4;
java.lang.Object[] v3;
java.util.Locale v1;
io.vertx.codegen.writer.CodeWriter v0;
java.lang.String v2;
v0 := @this: io.vertx.codegen.writer.CodeWriter;
v1 := @parameter0: java.util.Locale;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Object[];
v4 = specialinvoke v0.<java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object[])>(v1, v2, v3);
return v4;
}
}