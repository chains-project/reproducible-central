public interface  io.vertx.core.Vertx extends java.lang.Object implements io.vertx.core.metrics.Measured
{
public static io.vertx.core.Vertx vertx()
{
io.vertx.core.Vertx v1;
io.vertx.core.VertxOptions v0;
v0 = new io.vertx.core.VertxOptions;
specialinvoke v0.<io.vertx.core.VertxOptions: void <init>()>();
v1 = staticinvoke <io.vertx.core.Vertx: io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)>(v0);
return v1;
}
public static io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)
{
io.vertx.core.Vertx v3;
io.vertx.core.VertxOptions v0;
io.vertx.core.impl.VertxBuilder v1, v2;
v0 := @parameter0: io.vertx.core.VertxOptions;
v1 = new io.vertx.core.impl.VertxBuilder;
specialinvoke v1.<io.vertx.core.impl.VertxBuilder: void <init>(io.vertx.core.VertxOptions)>(v0);
v2 = virtualinvoke v1.<io.vertx.core.impl.VertxBuilder: io.vertx.core.impl.VertxBuilder init()>();
v3 = virtualinvoke v2.<io.vertx.core.impl.VertxBuilder: io.vertx.core.Vertx vertx()>();
return v3;
}
public static void clusteredVertx(io.vertx.core.VertxOptions, io.vertx.core.Handler)
{
io.vertx.core.VertxOptions v0;
io.vertx.core.impl.VertxBuilder v2, v3;
io.vertx.core.Handler v1;
v0 := @parameter0: io.vertx.core.VertxOptions;
v1 := @parameter1: io.vertx.core.Handler;
v2 = new io.vertx.core.impl.VertxBuilder;
specialinvoke v2.<io.vertx.core.impl.VertxBuilder: void <init>(io.vertx.core.VertxOptions)>(v0);
v3 = virtualinvoke v2.<io.vertx.core.impl.VertxBuilder: io.vertx.core.impl.VertxBuilder init()>();
virtualinvoke v3.<io.vertx.core.impl.VertxBuilder: void clusteredVertx(io.vertx.core.Handler)>(v1);
return;
}
public static io.vertx.core.Future clusteredVertx(io.vertx.core.VertxOptions)
{
io.vertx.core.VertxOptions v0;
io.vertx.core.Future v2;
io.vertx.core.Promise v1;
v0 := @parameter0: io.vertx.core.VertxOptions;
v1 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
staticinvoke <io.vertx.core.Vertx: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)>(v0, v1);
v2 = interfaceinvoke v1.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v2;
}
public static io.vertx.core.Context currentContext()
{
io.vertx.core.impl.ContextInternal v0;
v0 = staticinvoke <io.vertx.core.impl.ContextInternal: io.vertx.core.impl.ContextInternal current()>();
return v0;
}
public abstract io.vertx.core.Context getOrCreateContext();
public abstract io.vertx.core.net.NetServer createNetServer(io.vertx.core.net.NetServerOptions);
public io.vertx.core.net.NetServer createNetServer()
{
io.vertx.core.Vertx v0;
io.vertx.core.net.NetServerOptions v1;
io.vertx.core.net.NetServer v2;
v0 := @this: io.vertx.core.Vertx;
v1 = new io.vertx.core.net.NetServerOptions;
specialinvoke v1.<io.vertx.core.net.NetServerOptions: void <init>()>();
v2 = interfaceinvoke v0.<io.vertx.core.Vertx: io.vertx.core.net.NetServer createNetServer(io.vertx.core.net.NetServerOptions)>(v1);
return v2;
}
public abstract io.vertx.core.net.NetClient createNetClient(io.vertx.core.net.NetClientOptions);
public io.vertx.core.net.NetClient createNetClient()
{
io.vertx.core.Vertx v0;
io.vertx.core.net.NetClient v2;
io.vertx.core.net.NetClientOptions v1;
v0 := @this: io.vertx.core.Vertx;
v1 = new io.vertx.core.net.NetClientOptions;
specialinvoke v1.<io.vertx.core.net.NetClientOptions: void <init>()>();
v2 = interfaceinvoke v0.<io.vertx.core.Vertx: io.vertx.core.net.NetClient createNetClient(io.vertx.core.net.NetClientOptions)>(v1);
return v2;
}
public abstract io.vertx.core.http.HttpServer createHttpServer(io.vertx.core.http.HttpServerOptions);
public io.vertx.core.http.HttpServer createHttpServer()
{
io.vertx.core.Vertx v0;
io.vertx.core.http.HttpServerOptions v1;
io.vertx.core.http.HttpServer v2;
v0 := @this: io.vertx.core.Vertx;
v1 = new io.vertx.core.http.HttpServerOptions;
specialinvoke v1.<io.vertx.core.http.HttpServerOptions: void <init>()>();
v2 = interfaceinvoke v0.<io.vertx.core.Vertx: io.vertx.core.http.HttpServer createHttpServer(io.vertx.core.http.HttpServerOptions)>(v1);
return v2;
}
public abstract io.vertx.core.http.HttpClient createHttpClient(io.vertx.core.http.HttpClientOptions);
public io.vertx.core.http.HttpClient createHttpClient()
{
io.vertx.core.Vertx v0;
io.vertx.core.http.HttpClientOptions v1;
io.vertx.core.http.HttpClient v2;
v0 := @this: io.vertx.core.Vertx;
v1 = new io.vertx.core.http.HttpClientOptions;
specialinvoke v1.<io.vertx.core.http.HttpClientOptions: void <init>()>();
v2 = interfaceinvoke v0.<io.vertx.core.Vertx: io.vertx.core.http.HttpClient createHttpClient(io.vertx.core.http.HttpClientOptions)>(v1);
return v2;
}
public abstract io.vertx.core.datagram.DatagramSocket createDatagramSocket(io.vertx.core.datagram.DatagramSocketOptions);
public io.vertx.core.datagram.DatagramSocket createDatagramSocket()
{
io.vertx.core.Vertx v0;
io.vertx.core.datagram.DatagramSocketOptions v1;
io.vertx.core.datagram.DatagramSocket v2;
v0 := @this: io.vertx.core.Vertx;
v1 = new io.vertx.core.datagram.DatagramSocketOptions;
specialinvoke v1.<io.vertx.core.datagram.DatagramSocketOptions: void <init>()>();
v2 = interfaceinvoke v0.<io.vertx.core.Vertx: io.vertx.core.datagram.DatagramSocket createDatagramSocket(io.vertx.core.datagram.DatagramSocketOptions)>(v1);
return v2;
}
public abstract io.vertx.core.file.FileSystem fileSystem();
public abstract io.vertx.core.eventbus.EventBus eventBus();
public abstract io.vertx.core.dns.DnsClient createDnsClient(int, java.lang.String);
public abstract io.vertx.core.dns.DnsClient createDnsClient();
public abstract io.vertx.core.dns.DnsClient createDnsClient(io.vertx.core.dns.DnsClientOptions);
public abstract io.vertx.core.shareddata.SharedData sharedData();
public abstract long setTimer(long, io.vertx.core.Handler);
public abstract io.vertx.core.TimeoutStream timerStream(long);
public long setPeriodic(long, io.vertx.core.Handler)
{
io.vertx.core.Vertx v0;
long v1, v3;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.Vertx;
v1 := @parameter0: long;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.Vertx: long setPeriodic(long,long,io.vertx.core.Handler)>(v1, v1, v2);
return v3;
}
public abstract long setPeriodic(long, long, io.vertx.core.Handler);
public io.vertx.core.TimeoutStream periodicStream(long)
{
io.vertx.core.TimeoutStream v2;
io.vertx.core.Vertx v0;
long v1;
v0 := @this: io.vertx.core.Vertx;
v1 := @parameter0: long;
v2 = interfaceinvoke v0.<io.vertx.core.Vertx: io.vertx.core.TimeoutStream periodicStream(long,long)>(0L, v1);
return v2;
}
public abstract io.vertx.core.TimeoutStream periodicStream(long, long);
public abstract boolean cancelTimer(long);
public abstract void runOnContext(io.vertx.core.Handler);
public abstract io.vertx.core.Future close();
public abstract void close(io.vertx.core.Handler);
public io.vertx.core.Future deployVerticle(io.vertx.core.Verticle)
{
io.vertx.core.DeploymentOptions v2;
io.vertx.core.Vertx v0;
io.vertx.core.Verticle v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.Vertx;
v1 := @parameter0: io.vertx.core.Verticle;
v2 = new io.vertx.core.DeploymentOptions;
specialinvoke v2.<io.vertx.core.DeploymentOptions: void <init>()>();
v3 = interfaceinvoke v0.<io.vertx.core.Vertx: io.vertx.core.Future deployVerticle(io.vertx.core.Verticle,io.vertx.core.DeploymentOptions)>(v1, v2);
return v3;
}
public abstract void deployVerticle(io.vertx.core.Verticle, io.vertx.core.Handler);
public abstract io.vertx.core.Future deployVerticle(io.vertx.core.Verticle, io.vertx.core.DeploymentOptions);
public abstract io.vertx.core.Future deployVerticle(java.lang.Class, io.vertx.core.DeploymentOptions);
public abstract io.vertx.core.Future deployVerticle(java.util.function.Supplier, io.vertx.core.DeploymentOptions);
public abstract void deployVerticle(io.vertx.core.Verticle, io.vertx.core.DeploymentOptions, io.vertx.core.Handler);
public abstract void deployVerticle(java.lang.Class, io.vertx.core.DeploymentOptions, io.vertx.core.Handler);
public abstract void deployVerticle(java.util.function.Supplier, io.vertx.core.DeploymentOptions, io.vertx.core.Handler);
public io.vertx.core.Future deployVerticle(java.lang.String)
{
io.vertx.core.DeploymentOptions v2;
io.vertx.core.Vertx v0;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.Vertx;
v1 := @parameter0: java.lang.String;
v2 = new io.vertx.core.DeploymentOptions;
specialinvoke v2.<io.vertx.core.DeploymentOptions: void <init>()>();
v3 = interfaceinvoke v0.<io.vertx.core.Vertx: io.vertx.core.Future deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions)>(v1, v2);
return v3;
}
public void deployVerticle(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.DeploymentOptions v3;
io.vertx.core.Vertx v0;
java.lang.String v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.Vertx;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = new io.vertx.core.DeploymentOptions;
specialinvoke v3.<io.vertx.core.DeploymentOptions: void <init>()>();
interfaceinvoke v0.<io.vertx.core.Vertx: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(v1, v3, v2);
return;
}
public abstract io.vertx.core.Future deployVerticle(java.lang.String, io.vertx.core.DeploymentOptions);
public abstract void deployVerticle(java.lang.String, io.vertx.core.DeploymentOptions, io.vertx.core.Handler);
public abstract io.vertx.core.Future undeploy(java.lang.String);
public abstract void undeploy(java.lang.String, io.vertx.core.Handler);
public abstract java.util.Set deploymentIDs();
public abstract void registerVerticleFactory(io.vertx.core.spi.VerticleFactory);
public abstract void unregisterVerticleFactory(io.vertx.core.spi.VerticleFactory);
public abstract java.util.Set verticleFactories();
public abstract boolean isClustered();
public void executeBlocking(io.vertx.core.Handler, boolean, io.vertx.core.Handler)
{
io.vertx.core.Vertx v0;
io.vertx.core.Handler v1, v3;
io.vertx.core.Context v4;
boolean v2;
v0 := @this: io.vertx.core.Vertx;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.Vertx: io.vertx.core.Context getOrCreateContext()>();
interfaceinvoke v4.<io.vertx.core.Context: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>(v1, v2, v3);
return;
}
public void executeBlocking(io.vertx.core.Handler, io.vertx.core.Handler)
{
io.vertx.core.Vertx v0;
io.vertx.core.Handler v1, v2;
v0 := @this: io.vertx.core.Vertx;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.vertx.core.Handler;
interfaceinvoke v0.<io.vertx.core.Vertx: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>(v1, 1, v2);
return;
}
public io.vertx.core.Future executeBlocking(io.vertx.core.Handler, boolean)
{
io.vertx.core.Vertx v0;
io.vertx.core.Handler v1;
io.vertx.core.Context v3;
io.vertx.core.Future v4;
boolean v2;
v0 := @this: io.vertx.core.Vertx;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: boolean;
v3 = interfaceinvoke v0.<io.vertx.core.Vertx: io.vertx.core.Context getOrCreateContext()>();
v4 = interfaceinvoke v3.<io.vertx.core.Context: io.vertx.core.Future executeBlocking(io.vertx.core.Handler,boolean)>(v1, v2);
return v4;
}
public io.vertx.core.Future executeBlocking(io.vertx.core.Handler)
{
io.vertx.core.Vertx v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.Vertx;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.Vertx: io.vertx.core.Future executeBlocking(io.vertx.core.Handler,boolean)>(v1, 1);
return v2;
}
public abstract io.netty.channel.EventLoopGroup nettyEventLoopGroup();
public abstract io.vertx.core.WorkerExecutor createSharedWorkerExecutor(java.lang.String);
public abstract io.vertx.core.WorkerExecutor createSharedWorkerExecutor(java.lang.String, int);
public abstract io.vertx.core.WorkerExecutor createSharedWorkerExecutor(java.lang.String, int, long);
public abstract io.vertx.core.WorkerExecutor createSharedWorkerExecutor(java.lang.String, int, long, java.util.concurrent.TimeUnit);
public abstract boolean isNativeTransportEnabled();
public abstract java.lang.Throwable unavailableNativeTransportCause();
public abstract io.vertx.core.Vertx exceptionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.Handler exceptionHandler();
}