public class io.vertx.core.VertxOptions extends java.lang.Object
{
private static final java.lang.String DISABLE_TCCL_PROP_NAME;
public static final int DEFAULT_EVENT_LOOP_POOL_SIZE;
public static final int DEFAULT_WORKER_POOL_SIZE;
public static final int DEFAULT_INTERNAL_BLOCKING_POOL_SIZE;
public static final long DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL;
public static final java.util.concurrent.TimeUnit DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL_UNIT;
public static final long DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME;
public static final java.util.concurrent.TimeUnit DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME_UNIT;
public static final long DEFAULT_MAX_WORKER_EXECUTE_TIME;
public static final java.util.concurrent.TimeUnit DEFAULT_MAX_WORKER_EXECUTE_TIME_UNIT;
public static final int DEFAULT_QUORUM_SIZE;
public static final java.lang.String DEFAULT_HA_GROUP;
public static final boolean DEFAULT_HA_ENABLED;
public static final boolean DEFAULT_PREFER_NATIVE_TRANSPORT;
private static final long DEFAULT_WARNING_EXCEPTION_TIME;
public static final java.util.concurrent.TimeUnit DEFAULT_WARNING_EXCEPTION_TIME_UNIT;
public static final boolean DEFAULT_DISABLE_TCCL;
public static final boolean DEFAULT_USE_DAEMON_THREAD;
private int eventLoopPoolSize;
private int workerPoolSize;
private int internalBlockingPoolSize;
private long blockedThreadCheckInterval;
private long maxEventLoopExecuteTime;
private long maxWorkerExecuteTime;
private io.vertx.core.spi.cluster.ClusterManager clusterManager;
private boolean haEnabled;
private int quorumSize;
private java.lang.String haGroup;
private io.vertx.core.metrics.MetricsOptions metricsOptions;
private io.vertx.core.tracing.TracingOptions tracingOptions;
private io.vertx.core.file.FileSystemOptions fileSystemOptions;
private long warningExceptionTime;
private io.vertx.core.eventbus.EventBusOptions eventBusOptions;
private io.vertx.core.dns.AddressResolverOptions addressResolverOptions;
private boolean preferNativeTransport;
private java.util.concurrent.TimeUnit maxEventLoopExecuteTimeUnit;
private java.util.concurrent.TimeUnit maxWorkerExecuteTimeUnit;
private java.util.concurrent.TimeUnit warningExceptionTimeUnit;
private java.util.concurrent.TimeUnit blockedThreadCheckIntervalUnit;
private boolean disableTCCL;
private java.lang.Boolean useDaemonThread;
public void <init>()
{
long v2, v3, v4, v7;
io.vertx.core.dns.AddressResolverOptions v9;
int v1;
java.lang.Boolean v15;
io.vertx.core.eventbus.EventBusOptions v8;
boolean v14;
io.vertx.core.file.FileSystemOptions v6;
io.vertx.core.VertxOptions v0;
java.util.concurrent.TimeUnit v10, v11, v12, v13;
io.vertx.core.metrics.MetricsOptions v5;
v0 := @this: io.vertx.core.VertxOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = <io.vertx.core.VertxOptions: int DEFAULT_EVENT_LOOP_POOL_SIZE>;
v0.<io.vertx.core.VertxOptions: int eventLoopPoolSize> = v1;
v0.<io.vertx.core.VertxOptions: int workerPoolSize> = 20;
v0.<io.vertx.core.VertxOptions: int internalBlockingPoolSize> = 20;
v2 = <io.vertx.core.VertxOptions: long DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL>;
v0.<io.vertx.core.VertxOptions: long blockedThreadCheckInterval> = v2;
v3 = <io.vertx.core.VertxOptions: long DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME>;
v0.<io.vertx.core.VertxOptions: long maxEventLoopExecuteTime> = v3;
v4 = <io.vertx.core.VertxOptions: long DEFAULT_MAX_WORKER_EXECUTE_TIME>;
v0.<io.vertx.core.VertxOptions: long maxWorkerExecuteTime> = v4;
v0.<io.vertx.core.VertxOptions: boolean haEnabled> = 0;
v0.<io.vertx.core.VertxOptions: int quorumSize> = 1;
v0.<io.vertx.core.VertxOptions: java.lang.String haGroup> = "__DEFAULT__";
v5 = new io.vertx.core.metrics.MetricsOptions;
specialinvoke v5.<io.vertx.core.metrics.MetricsOptions: void <init>()>();
v0.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions metricsOptions> = v5;
v6 = new io.vertx.core.file.FileSystemOptions;
specialinvoke v6.<io.vertx.core.file.FileSystemOptions: void <init>()>();
v0.<io.vertx.core.VertxOptions: io.vertx.core.file.FileSystemOptions fileSystemOptions> = v6;
v7 = <io.vertx.core.VertxOptions: long DEFAULT_WARNING_EXCEPTION_TIME>;
v0.<io.vertx.core.VertxOptions: long warningExceptionTime> = v7;
v8 = new io.vertx.core.eventbus.EventBusOptions;
specialinvoke v8.<io.vertx.core.eventbus.EventBusOptions: void <init>()>();
v0.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions eventBusOptions> = v8;
v9 = new io.vertx.core.dns.AddressResolverOptions;
specialinvoke v9.<io.vertx.core.dns.AddressResolverOptions: void <init>()>();
v0.<io.vertx.core.VertxOptions: io.vertx.core.dns.AddressResolverOptions addressResolverOptions> = v9;
v0.<io.vertx.core.VertxOptions: boolean preferNativeTransport> = 0;
v10 = <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME_UNIT>;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxEventLoopExecuteTimeUnit> = v10;
v11 = <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_MAX_WORKER_EXECUTE_TIME_UNIT>;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxWorkerExecuteTimeUnit> = v11;
v12 = <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_WARNING_EXCEPTION_TIME_UNIT>;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit warningExceptionTimeUnit> = v12;
v13 = <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL_UNIT>;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit blockedThreadCheckIntervalUnit> = v13;
v14 = <io.vertx.core.VertxOptions: boolean DEFAULT_DISABLE_TCCL>;
v0.<io.vertx.core.VertxOptions: boolean disableTCCL> = v14;
v15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
v0.<io.vertx.core.VertxOptions: java.lang.Boolean useDaemonThread> = v15;
return;
}
public void <init>(io.vertx.core.VertxOptions)
{
io.vertx.core.dns.AddressResolverOptions v10, v36, v37, v38;
io.vertx.core.tracing.TracingOptions v43, v44, v45;
boolean v15, v24, v46;
io.vertx.core.spi.cluster.ClusterManager v23;
io.vertx.core.VertxOptions v0, v1;
io.vertx.core.metrics.MetricsOptions v27, v28, v29, v6;
long v19, v20, v21, v3, v33, v4, v5, v8;
int v17, v18, v2, v22, v25;
java.lang.Boolean v16, v47;
io.vertx.core.eventbus.EventBusOptions v34, v35, v9;
java.lang.String v26;
io.vertx.core.file.FileSystemOptions v30, v31, v32, v7;
java.util.concurrent.TimeUnit v11, v12, v13, v14, v39, v40, v41, v42;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: io.vertx.core.VertxOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = <io.vertx.core.VertxOptions: int DEFAULT_EVENT_LOOP_POOL_SIZE>;
v0.<io.vertx.core.VertxOptions: int eventLoopPoolSize> = v2;
v0.<io.vertx.core.VertxOptions: int workerPoolSize> = 20;
v0.<io.vertx.core.VertxOptions: int internalBlockingPoolSize> = 20;
v3 = <io.vertx.core.VertxOptions: long DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL>;
v0.<io.vertx.core.VertxOptions: long blockedThreadCheckInterval> = v3;
v4 = <io.vertx.core.VertxOptions: long DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME>;
v0.<io.vertx.core.VertxOptions: long maxEventLoopExecuteTime> = v4;
v5 = <io.vertx.core.VertxOptions: long DEFAULT_MAX_WORKER_EXECUTE_TIME>;
v0.<io.vertx.core.VertxOptions: long maxWorkerExecuteTime> = v5;
v0.<io.vertx.core.VertxOptions: boolean haEnabled> = 0;
v0.<io.vertx.core.VertxOptions: int quorumSize> = 1;
v0.<io.vertx.core.VertxOptions: java.lang.String haGroup> = "__DEFAULT__";
v6 = new io.vertx.core.metrics.MetricsOptions;
specialinvoke v6.<io.vertx.core.metrics.MetricsOptions: void <init>()>();
v0.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions metricsOptions> = v6;
v7 = new io.vertx.core.file.FileSystemOptions;
specialinvoke v7.<io.vertx.core.file.FileSystemOptions: void <init>()>();
v0.<io.vertx.core.VertxOptions: io.vertx.core.file.FileSystemOptions fileSystemOptions> = v7;
v8 = <io.vertx.core.VertxOptions: long DEFAULT_WARNING_EXCEPTION_TIME>;
v0.<io.vertx.core.VertxOptions: long warningExceptionTime> = v8;
v9 = new io.vertx.core.eventbus.EventBusOptions;
specialinvoke v9.<io.vertx.core.eventbus.EventBusOptions: void <init>()>();
v0.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions eventBusOptions> = v9;
v10 = new io.vertx.core.dns.AddressResolverOptions;
specialinvoke v10.<io.vertx.core.dns.AddressResolverOptions: void <init>()>();
v0.<io.vertx.core.VertxOptions: io.vertx.core.dns.AddressResolverOptions addressResolverOptions> = v10;
v0.<io.vertx.core.VertxOptions: boolean preferNativeTransport> = 0;
v11 = <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME_UNIT>;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxEventLoopExecuteTimeUnit> = v11;
v12 = <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_MAX_WORKER_EXECUTE_TIME_UNIT>;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxWorkerExecuteTimeUnit> = v12;
v13 = <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_WARNING_EXCEPTION_TIME_UNIT>;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit warningExceptionTimeUnit> = v13;
v14 = <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL_UNIT>;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit blockedThreadCheckIntervalUnit> = v14;
v15 = <io.vertx.core.VertxOptions: boolean DEFAULT_DISABLE_TCCL>;
v0.<io.vertx.core.VertxOptions: boolean disableTCCL> = v15;
v16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
v0.<io.vertx.core.VertxOptions: java.lang.Boolean useDaemonThread> = v16;
v17 = virtualinvoke v1.<io.vertx.core.VertxOptions: int getEventLoopPoolSize()>();
v0.<io.vertx.core.VertxOptions: int eventLoopPoolSize> = v17;
v18 = virtualinvoke v1.<io.vertx.core.VertxOptions: int getWorkerPoolSize()>();
v0.<io.vertx.core.VertxOptions: int workerPoolSize> = v18;
v19 = virtualinvoke v1.<io.vertx.core.VertxOptions: long getBlockedThreadCheckInterval()>();
v0.<io.vertx.core.VertxOptions: long blockedThreadCheckInterval> = v19;
v20 = virtualinvoke v1.<io.vertx.core.VertxOptions: long getMaxEventLoopExecuteTime()>();
v0.<io.vertx.core.VertxOptions: long maxEventLoopExecuteTime> = v20;
v21 = virtualinvoke v1.<io.vertx.core.VertxOptions: long getMaxWorkerExecuteTime()>();
v0.<io.vertx.core.VertxOptions: long maxWorkerExecuteTime> = v21;
v22 = virtualinvoke v1.<io.vertx.core.VertxOptions: int getInternalBlockingPoolSize()>();
v0.<io.vertx.core.VertxOptions: int internalBlockingPoolSize> = v22;
v23 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.spi.cluster.ClusterManager getClusterManager()>();
v0.<io.vertx.core.VertxOptions: io.vertx.core.spi.cluster.ClusterManager clusterManager> = v23;
v24 = virtualinvoke v1.<io.vertx.core.VertxOptions: boolean isHAEnabled()>();
v0.<io.vertx.core.VertxOptions: boolean haEnabled> = v24;
v25 = virtualinvoke v1.<io.vertx.core.VertxOptions: int getQuorumSize()>();
v0.<io.vertx.core.VertxOptions: int quorumSize> = v25;
v26 = virtualinvoke v1.<io.vertx.core.VertxOptions: java.lang.String getHAGroup()>();
v0.<io.vertx.core.VertxOptions: java.lang.String haGroup> = v26;
v27 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions getMetricsOptions()>();
if v27 == null goto label1;
v28 = new io.vertx.core.metrics.MetricsOptions;
v29 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions getMetricsOptions()>();
specialinvoke v28.<io.vertx.core.metrics.MetricsOptions: void <init>(io.vertx.core.metrics.MetricsOptions)>(v29);
goto label2;
label1:
v28 = null;
label2:
v0.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions metricsOptions> = v28;
v30 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.file.FileSystemOptions getFileSystemOptions()>();
if v30 == null goto label3;
v31 = new io.vertx.core.file.FileSystemOptions;
v32 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.file.FileSystemOptions getFileSystemOptions()>();
specialinvoke v31.<io.vertx.core.file.FileSystemOptions: void <init>(io.vertx.core.file.FileSystemOptions)>(v32);
goto label4;
label3:
v31 = null;
label4:
v0.<io.vertx.core.VertxOptions: io.vertx.core.file.FileSystemOptions fileSystemOptions> = v31;
v33 = v1.<io.vertx.core.VertxOptions: long warningExceptionTime>;
v0.<io.vertx.core.VertxOptions: long warningExceptionTime> = v33;
v34 = new io.vertx.core.eventbus.EventBusOptions;
v35 = v1.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions eventBusOptions>;
specialinvoke v34.<io.vertx.core.eventbus.EventBusOptions: void <init>(io.vertx.core.eventbus.EventBusOptions)>(v35);
v0.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions eventBusOptions> = v34;
v36 = v1.<io.vertx.core.VertxOptions: io.vertx.core.dns.AddressResolverOptions addressResolverOptions>;
if v36 == null goto label5;
v37 = new io.vertx.core.dns.AddressResolverOptions;
v38 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.dns.AddressResolverOptions getAddressResolverOptions()>();
specialinvoke v37.<io.vertx.core.dns.AddressResolverOptions: void <init>(io.vertx.core.dns.AddressResolverOptions)>(v38);
goto label6;
label5:
v37 = null;
label6:
v0.<io.vertx.core.VertxOptions: io.vertx.core.dns.AddressResolverOptions addressResolverOptions> = v37;
v39 = v1.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxEventLoopExecuteTimeUnit>;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxEventLoopExecuteTimeUnit> = v39;
v40 = v1.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxWorkerExecuteTimeUnit>;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxWorkerExecuteTimeUnit> = v40;
v41 = v1.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit warningExceptionTimeUnit>;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit warningExceptionTimeUnit> = v41;
v42 = v1.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit blockedThreadCheckIntervalUnit>;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit blockedThreadCheckIntervalUnit> = v42;
v43 = v1.<io.vertx.core.VertxOptions: io.vertx.core.tracing.TracingOptions tracingOptions>;
if v43 == null goto label7;
v44 = v1.<io.vertx.core.VertxOptions: io.vertx.core.tracing.TracingOptions tracingOptions>;
v45 = virtualinvoke v44.<io.vertx.core.tracing.TracingOptions: io.vertx.core.tracing.TracingOptions copy()>();
goto label8;
label7:
v45 = null;
label8:
v0.<io.vertx.core.VertxOptions: io.vertx.core.tracing.TracingOptions tracingOptions> = v45;
v46 = v1.<io.vertx.core.VertxOptions: boolean disableTCCL>;
v0.<io.vertx.core.VertxOptions: boolean disableTCCL> = v46;
v47 = v1.<io.vertx.core.VertxOptions: java.lang.Boolean useDaemonThread>;
v0.<io.vertx.core.VertxOptions: java.lang.Boolean useDaemonThread> = v47;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.VertxOptions v0;
io.vertx.core.json.JsonObject v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.VertxOptions: void <init>()>();
staticinvoke <io.vertx.core.VertxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.VertxOptions)>(v1, v0);
return;
}
public int getEventLoopPoolSize()
{
int v1;
io.vertx.core.VertxOptions v0;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: int eventLoopPoolSize>;
return v1;
}
public io.vertx.core.VertxOptions setEventLoopPoolSize(int)
{
int v1;
io.vertx.core.VertxOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: int;
if v1 >= 1 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("eventLoopPoolSize must be > 0");
throw v2;
label1:
v0.<io.vertx.core.VertxOptions: int eventLoopPoolSize> = v1;
return v0;
}
public int getWorkerPoolSize()
{
int v1;
io.vertx.core.VertxOptions v0;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: int workerPoolSize>;
return v1;
}
public io.vertx.core.VertxOptions setWorkerPoolSize(int)
{
int v1;
io.vertx.core.VertxOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: int;
if v1 >= 1 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("workerPoolSize must be > 0");
throw v2;
label1:
v0.<io.vertx.core.VertxOptions: int workerPoolSize> = v1;
return v0;
}
public long getBlockedThreadCheckInterval()
{
io.vertx.core.VertxOptions v0;
long v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: long blockedThreadCheckInterval>;
return v1;
}
public io.vertx.core.VertxOptions setBlockedThreadCheckInterval(long)
{
byte v2;
io.vertx.core.VertxOptions v0;
long v1;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: long;
v2 = v1 cmp 1L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("blockedThreadCheckInterval must be > 0");
throw v3;
label1:
v0.<io.vertx.core.VertxOptions: long blockedThreadCheckInterval> = v1;
return v0;
}
public long getMaxEventLoopExecuteTime()
{
io.vertx.core.VertxOptions v0;
long v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: long maxEventLoopExecuteTime>;
return v1;
}
public io.vertx.core.VertxOptions setMaxEventLoopExecuteTime(long)
{
byte v2;
io.vertx.core.VertxOptions v0;
long v1;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: long;
v2 = v1 cmp 1L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxEventLoopExecuteTime must be > 0");
throw v3;
label1:
v0.<io.vertx.core.VertxOptions: long maxEventLoopExecuteTime> = v1;
return v0;
}
public long getMaxWorkerExecuteTime()
{
io.vertx.core.VertxOptions v0;
long v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: long maxWorkerExecuteTime>;
return v1;
}
public io.vertx.core.VertxOptions setMaxWorkerExecuteTime(long)
{
byte v2;
io.vertx.core.VertxOptions v0;
long v1;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: long;
v2 = v1 cmp 1L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxWorkerpExecuteTime must be > 0");
throw v3;
label1:
v0.<io.vertx.core.VertxOptions: long maxWorkerExecuteTime> = v1;
return v0;
}
public io.vertx.core.spi.cluster.ClusterManager getClusterManager()
{
io.vertx.core.VertxOptions v0;
io.vertx.core.spi.cluster.ClusterManager v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
return v1;
}
public io.vertx.core.VertxOptions setClusterManager(io.vertx.core.spi.cluster.ClusterManager)
{
io.vertx.core.VertxOptions v0;
io.vertx.core.spi.cluster.ClusterManager v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: io.vertx.core.spi.cluster.ClusterManager;
v0.<io.vertx.core.VertxOptions: io.vertx.core.spi.cluster.ClusterManager clusterManager> = v1;
return v0;
}
public int getInternalBlockingPoolSize()
{
int v1;
io.vertx.core.VertxOptions v0;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: int internalBlockingPoolSize>;
return v1;
}
public io.vertx.core.VertxOptions setInternalBlockingPoolSize(int)
{
int v1;
io.vertx.core.VertxOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: int;
if v1 >= 1 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("internalBlockingPoolSize must be > 0");
throw v2;
label1:
v0.<io.vertx.core.VertxOptions: int internalBlockingPoolSize> = v1;
return v0;
}
public boolean isHAEnabled()
{
io.vertx.core.VertxOptions v0;
boolean v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: boolean haEnabled>;
return v1;
}
public io.vertx.core.VertxOptions setHAEnabled(boolean)
{
io.vertx.core.VertxOptions v0;
boolean v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.VertxOptions: boolean haEnabled> = v1;
return v0;
}
public int getQuorumSize()
{
int v1;
io.vertx.core.VertxOptions v0;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: int quorumSize>;
return v1;
}
public io.vertx.core.VertxOptions setQuorumSize(int)
{
int v1;
io.vertx.core.VertxOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: int;
if v1 >= 1 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("quorumSize should be >= 1");
throw v2;
label1:
v0.<io.vertx.core.VertxOptions: int quorumSize> = v1;
return v0;
}
public java.lang.String getHAGroup()
{
io.vertx.core.VertxOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: java.lang.String haGroup>;
return v1;
}
public io.vertx.core.VertxOptions setHAGroup(java.lang.String)
{
io.vertx.core.VertxOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "ha group cannot be null");
v0.<io.vertx.core.VertxOptions: java.lang.String haGroup> = v1;
return v0;
}
public io.vertx.core.metrics.MetricsOptions getMetricsOptions()
{
io.vertx.core.VertxOptions v0;
io.vertx.core.metrics.MetricsOptions v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions metricsOptions>;
return v1;
}
public io.vertx.core.file.FileSystemOptions getFileSystemOptions()
{
io.vertx.core.VertxOptions v0;
io.vertx.core.file.FileSystemOptions v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: io.vertx.core.file.FileSystemOptions fileSystemOptions>;
return v1;
}
public io.vertx.core.VertxOptions setMetricsOptions(io.vertx.core.metrics.MetricsOptions)
{
io.vertx.core.VertxOptions v0;
io.vertx.core.metrics.MetricsOptions v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: io.vertx.core.metrics.MetricsOptions;
v0.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions metricsOptions> = v1;
return v0;
}
public io.vertx.core.VertxOptions setFileSystemOptions(io.vertx.core.file.FileSystemOptions)
{
io.vertx.core.VertxOptions v0;
io.vertx.core.file.FileSystemOptions v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: io.vertx.core.file.FileSystemOptions;
v0.<io.vertx.core.VertxOptions: io.vertx.core.file.FileSystemOptions fileSystemOptions> = v1;
return v0;
}
public long getWarningExceptionTime()
{
io.vertx.core.VertxOptions v0;
long v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: long warningExceptionTime>;
return v1;
}
public io.vertx.core.VertxOptions setWarningExceptionTime(long)
{
byte v2;
io.vertx.core.VertxOptions v0;
long v1;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: long;
v2 = v1 cmp 1L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("warningExceptionTime must be > 0");
throw v3;
label1:
v0.<io.vertx.core.VertxOptions: long warningExceptionTime> = v1;
return v0;
}
public io.vertx.core.eventbus.EventBusOptions getEventBusOptions()
{
io.vertx.core.VertxOptions v0;
io.vertx.core.eventbus.EventBusOptions v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions eventBusOptions>;
return v1;
}
public io.vertx.core.VertxOptions setEventBusOptions(io.vertx.core.eventbus.EventBusOptions)
{
io.vertx.core.VertxOptions v0;
io.vertx.core.eventbus.EventBusOptions v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: io.vertx.core.eventbus.EventBusOptions;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v0.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions eventBusOptions> = v1;
return v0;
}
public io.vertx.core.dns.AddressResolverOptions getAddressResolverOptions()
{
io.vertx.core.VertxOptions v0;
io.vertx.core.dns.AddressResolverOptions v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: io.vertx.core.dns.AddressResolverOptions addressResolverOptions>;
return v1;
}
public io.vertx.core.VertxOptions setAddressResolverOptions(io.vertx.core.dns.AddressResolverOptions)
{
io.vertx.core.VertxOptions v0;
io.vertx.core.dns.AddressResolverOptions v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: io.vertx.core.dns.AddressResolverOptions;
v0.<io.vertx.core.VertxOptions: io.vertx.core.dns.AddressResolverOptions addressResolverOptions> = v1;
return v0;
}
public boolean getPreferNativeTransport()
{
io.vertx.core.VertxOptions v0;
boolean v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: boolean preferNativeTransport>;
return v1;
}
public io.vertx.core.VertxOptions setPreferNativeTransport(boolean)
{
io.vertx.core.VertxOptions v0;
boolean v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.VertxOptions: boolean preferNativeTransport> = v1;
return v0;
}
public java.util.concurrent.TimeUnit getMaxEventLoopExecuteTimeUnit()
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.VertxOptions v0;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxEventLoopExecuteTimeUnit>;
return v1;
}
public io.vertx.core.VertxOptions setMaxEventLoopExecuteTimeUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.VertxOptions v0;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxEventLoopExecuteTimeUnit> = v1;
return v0;
}
public java.util.concurrent.TimeUnit getMaxWorkerExecuteTimeUnit()
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.VertxOptions v0;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxWorkerExecuteTimeUnit>;
return v1;
}
public io.vertx.core.VertxOptions setMaxWorkerExecuteTimeUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.VertxOptions v0;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxWorkerExecuteTimeUnit> = v1;
return v0;
}
public java.util.concurrent.TimeUnit getWarningExceptionTimeUnit()
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.VertxOptions v0;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit warningExceptionTimeUnit>;
return v1;
}
public io.vertx.core.VertxOptions setWarningExceptionTimeUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.VertxOptions v0;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit warningExceptionTimeUnit> = v1;
return v0;
}
public java.util.concurrent.TimeUnit getBlockedThreadCheckIntervalUnit()
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.VertxOptions v0;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit blockedThreadCheckIntervalUnit>;
return v1;
}
public io.vertx.core.VertxOptions setBlockedThreadCheckIntervalUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.VertxOptions v0;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit blockedThreadCheckIntervalUnit> = v1;
return v0;
}
public io.vertx.core.tracing.TracingOptions getTracingOptions()
{
io.vertx.core.VertxOptions v0;
io.vertx.core.tracing.TracingOptions v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: io.vertx.core.tracing.TracingOptions tracingOptions>;
return v1;
}
public io.vertx.core.VertxOptions setTracingOptions(io.vertx.core.tracing.TracingOptions)
{
io.vertx.core.VertxOptions v0;
io.vertx.core.tracing.TracingOptions v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: io.vertx.core.tracing.TracingOptions;
v0.<io.vertx.core.VertxOptions: io.vertx.core.tracing.TracingOptions tracingOptions> = v1;
return v0;
}
public boolean getDisableTCCL()
{
io.vertx.core.VertxOptions v0;
boolean v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: boolean disableTCCL>;
return v1;
}
public io.vertx.core.VertxOptions setDisableTCCL(boolean)
{
io.vertx.core.VertxOptions v0;
boolean v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.VertxOptions: boolean disableTCCL> = v1;
return v0;
}
public java.lang.Boolean getUseDaemonThread()
{
io.vertx.core.VertxOptions v0;
java.lang.Boolean v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: java.lang.Boolean useDaemonThread>;
return v1;
}
public io.vertx.core.VertxOptions setUseDaemonThread(java.lang.Boolean)
{
io.vertx.core.VertxOptions v0;
java.lang.Boolean v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 := @parameter0: java.lang.Boolean;
v0.<io.vertx.core.VertxOptions: java.lang.Boolean useDaemonThread> = v1;
return v0;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.VertxOptions v0;
io.vertx.core.json.JsonObject v1;
v0 := @this: io.vertx.core.VertxOptions;
v1 = new io.vertx.core.json.JsonObject;
specialinvoke v1.<io.vertx.core.json.JsonObject: void <init>()>();
staticinvoke <io.vertx.core.VertxOptionsConverter: void toJson(io.vertx.core.VertxOptions,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
public java.lang.String toString()
{
long v23, v5, v7, v9;
io.vertx.core.dns.AddressResolverOptions v18;
io.vertx.core.tracing.TracingOptions v16;
int v1, v13, v2, v3;
java.lang.Boolean v25;
io.vertx.core.json.JsonObject v19, v21;
io.vertx.core.eventbus.EventBusOptions v20;
java.lang.String v14, v26;
boolean v11, v12, v24;
io.vertx.core.spi.cluster.ClusterManager v10;
io.vertx.core.file.FileSystemOptions v17;
io.vertx.core.VertxOptions v0;
java.util.concurrent.TimeUnit v22, v4, v6, v8;
io.vertx.core.metrics.MetricsOptions v15;
v0 := @this: io.vertx.core.VertxOptions;
v1 = v0.<io.vertx.core.VertxOptions: int eventLoopPoolSize>;
v2 = v0.<io.vertx.core.VertxOptions: int workerPoolSize>;
v3 = v0.<io.vertx.core.VertxOptions: int internalBlockingPoolSize>;
v4 = v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit blockedThreadCheckIntervalUnit>;
v5 = v0.<io.vertx.core.VertxOptions: long blockedThreadCheckInterval>;
v6 = v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxEventLoopExecuteTimeUnit>;
v7 = v0.<io.vertx.core.VertxOptions: long maxEventLoopExecuteTime>;
v8 = v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit maxWorkerExecuteTimeUnit>;
v9 = v0.<io.vertx.core.VertxOptions: long maxWorkerExecuteTime>;
v10 = v0.<io.vertx.core.VertxOptions: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
v11 = v0.<io.vertx.core.VertxOptions: boolean haEnabled>;
v12 = v0.<io.vertx.core.VertxOptions: boolean preferNativeTransport>;
v13 = v0.<io.vertx.core.VertxOptions: int quorumSize>;
v14 = v0.<io.vertx.core.VertxOptions: java.lang.String haGroup>;
v15 = v0.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions metricsOptions>;
v16 = v0.<io.vertx.core.VertxOptions: io.vertx.core.tracing.TracingOptions tracingOptions>;
v17 = v0.<io.vertx.core.VertxOptions: io.vertx.core.file.FileSystemOptions fileSystemOptions>;
v18 = v0.<io.vertx.core.VertxOptions: io.vertx.core.dns.AddressResolverOptions addressResolverOptions>;
v19 = virtualinvoke v18.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.json.JsonObject toJson()>();
v20 = v0.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions eventBusOptions>;
v21 = virtualinvoke v20.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject toJson()>();
v22 = v0.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit warningExceptionTimeUnit>;
v23 = v0.<io.vertx.core.VertxOptions: long warningExceptionTime>;
v24 = v0.<io.vertx.core.VertxOptions: boolean disableTCCL>;
v25 = v0.<io.vertx.core.VertxOptions: java.lang.Boolean useDaemonThread>;
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit,long,io.vertx.core.spi.cluster.ClusterManager,boolean,boolean,int,java.lang.String,io.vertx.core.metrics.MetricsOptions,io.vertx.core.tracing.TracingOptions,io.vertx.core.file.FileSystemOptions,io.vertx.core.json.JsonObject,io.vertx.core.json.JsonObject,java.util.concurrent.TimeUnit,long,boolean,java.lang.Boolean)>(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v19, v21, v22, v23, v24, v25) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("VertxOptions{eventLoopPoolSize=\u0001, workerPoolSize=\u0001, internalBlockingPoolSize=\u0001, blockedThreadCheckIntervalUnit=\u0001, blockedThreadCheckInterval=\u0001, maxEventLoopExecuteTimeUnit=\u0001, maxEventLoopExecuteTime=\u0001, maxWorkerExecuteTimeUnit=\u0001, maxWorkerExecuteTime=\u0001, clusterManager=\u0001, haEnabled=\u0001, preferNativeTransport=\u0001, quorumSize=\u0001, haGroup=\'\u0001\', metrics=\u0001, tracing=\u0001, fileSystemOptions=\u0001, addressResolver=\u0001, eventbus=\u0001, warningExceptionTimeUnit=\u0001, warningExceptionTime=\u0001, disableTCCL=\u0001, useDaemonThread=\u0001}");
return v26;
}
static void <clinit>()
{
long v12, v3, v6, v9;
java.util.concurrent.TimeUnit v10, v11, v13, v2, v4, v5, v7, v8;
int v0, v1;
boolean v14;
v0 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: int availableProcessors()>();
v1 = 2 * v0;
<io.vertx.core.VertxOptions: int DEFAULT_EVENT_LOOP_POOL_SIZE> = v1;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v3 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);
<io.vertx.core.VertxOptions: long DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL> = v3;
v4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL_UNIT> = v4;
v5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v6 = virtualinvoke v5.<java.util.concurrent.TimeUnit: long toNanos(long)>(2L);
<io.vertx.core.VertxOptions: long DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME> = v6;
v7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME_UNIT> = v7;
v8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v9 = virtualinvoke v8.<java.util.concurrent.TimeUnit: long toNanos(long)>(60L);
<io.vertx.core.VertxOptions: long DEFAULT_MAX_WORKER_EXECUTE_TIME> = v9;
v10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_MAX_WORKER_EXECUTE_TIME_UNIT> = v10;
v11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v12 = virtualinvoke v11.<java.util.concurrent.TimeUnit: long toNanos(long)>(5L);
<io.vertx.core.VertxOptions: long DEFAULT_WARNING_EXCEPTION_TIME> = v12;
v13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_WARNING_EXCEPTION_TIME_UNIT> = v13;
v14 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableTCCL");
<io.vertx.core.VertxOptions: boolean DEFAULT_DISABLE_TCCL> = v14;
return;
}
}