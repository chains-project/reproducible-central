public final class io.vertx.core.cli.converters.ConstructorBasedConverter extends java.lang.Object implements io.vertx.core.cli.converters.Converter
{
private final java.lang.reflect.Constructor constructor;
private void <init>(java.lang.reflect.Constructor)
{
java.lang.reflect.Constructor v1;
io.vertx.core.cli.converters.ConstructorBasedConverter v0;
v0 := @this: io.vertx.core.cli.converters.ConstructorBasedConverter;
v1 := @parameter0: java.lang.reflect.Constructor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.cli.converters.ConstructorBasedConverter: java.lang.reflect.Constructor constructor> = v1;
return;
}
public static io.vertx.core.cli.converters.ConstructorBasedConverter getIfEligible(java.lang.Class)
{
io.vertx.core.cli.converters.ConstructorBasedConverter v4;
java.lang.NoSuchMethodException v5;
java.lang.Class[] v1;
java.lang.Class v0;
java.lang.reflect.Constructor v2;
boolean v3;
v0 := @parameter0: java.lang.Class;
label1:
v1 = newarray (java.lang.Class)[1];
v1[0] = class "Ljava/lang/String;";
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v1);
v3 = virtualinvoke v2.<java.lang.reflect.Constructor: boolean isAccessible()>();
if v3 != 0 goto label2;
virtualinvoke v2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
label2:
v4 = new io.vertx.core.cli.converters.ConstructorBasedConverter;
specialinvoke v4.<io.vertx.core.cli.converters.ConstructorBasedConverter: void <init>(java.lang.reflect.Constructor)>(v2);
label3:
return v4;
label4:
v5 := @caughtexception;
return null;
catch java.lang.NoSuchMethodException from label1 to label3 with label4;
}
public java.lang.Object fromString(java.lang.String) throws java.lang.IllegalArgumentException
{
java.lang.Throwable v6, v8;
java.lang.Object[] v3;
java.lang.ReflectiveOperationException v5;
java.lang.IllegalArgumentException v7, v9;
java.lang.reflect.Constructor v2;
io.vertx.core.cli.converters.ConstructorBasedConverter v0;
java.lang.Object v4;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.converters.ConstructorBasedConverter;
v1 := @parameter0: java.lang.String;
label1:
v2 = v0.<io.vertx.core.cli.converters.ConstructorBasedConverter: java.lang.reflect.Constructor constructor>;
v3 = newarray (java.lang.Object)[1];
v3[0] = v1;
v4 = virtualinvoke v2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v3);
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = virtualinvoke v5.<java.lang.ReflectiveOperationException: java.lang.Throwable getCause()>();
if v6 == null goto label4;
v7 = new java.lang.IllegalArgumentException;
v8 = virtualinvoke v5.<java.lang.ReflectiveOperationException: java.lang.Throwable getCause()>();
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(v8);
throw v7;
label4:
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(v5);
throw v9;
catch java.lang.InstantiationException from label1 to label2 with label3;
catch java.lang.IllegalAccessException from label1 to label2 with label3;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
}
}