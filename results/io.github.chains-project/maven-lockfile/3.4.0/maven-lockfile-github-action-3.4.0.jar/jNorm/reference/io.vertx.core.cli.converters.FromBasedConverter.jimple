public final class io.vertx.core.cli.converters.FromBasedConverter extends java.lang.Object implements io.vertx.core.cli.converters.Converter
{
public static final java.lang.String FROM;
private final java.lang.reflect.Method method;
private final java.lang.Class clazz;
private void <init>(java.lang.Class, java.lang.reflect.Method)
{
io.vertx.core.cli.converters.FromBasedConverter v0;
java.lang.Class v1;
java.lang.reflect.Method v2;
v0 := @this: io.vertx.core.cli.converters.FromBasedConverter;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.reflect.Method;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.cli.converters.FromBasedConverter: java.lang.Class clazz> = v1;
v0.<io.vertx.core.cli.converters.FromBasedConverter: java.lang.reflect.Method method> = v2;
return;
}
public static io.vertx.core.cli.converters.FromBasedConverter getIfEligible(java.lang.Class)
{
io.vertx.core.cli.converters.FromBasedConverter v6;
java.lang.NoSuchMethodException v7;
java.lang.Class[] v1;
int v3;
java.lang.Class v0;
java.lang.reflect.Method v2;
boolean v4, v5;
v0 := @parameter0: java.lang.Class;
label1:
v1 = newarray (java.lang.Class)[1];
v1[0] = class "Ljava/lang/String;";
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("from", v1);
v3 = virtualinvoke v2.<java.lang.reflect.Method: int getModifiers()>();
v4 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v3);
if v4 == 0 goto label4;
v5 = virtualinvoke v2.<java.lang.reflect.Method: boolean isAccessible()>();
if v5 != 0 goto label2;
virtualinvoke v2.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
label2:
v6 = new io.vertx.core.cli.converters.FromBasedConverter;
specialinvoke v6.<io.vertx.core.cli.converters.FromBasedConverter: void <init>(java.lang.Class,java.lang.reflect.Method)>(v0, v2);
label3:
return v6;
label4:
return null;
label5:
v7 := @caughtexception;
return null;
catch java.lang.NoSuchMethodException from label1 to label3 with label5;
}
public java.lang.Object fromString(java.lang.String) throws java.lang.IllegalArgumentException
{
io.vertx.core.cli.converters.FromBasedConverter v0;
java.lang.Throwable v10, v8;
java.lang.Object[] v4;
java.lang.ReflectiveOperationException v7;
java.lang.IllegalArgumentException v11, v9;
java.lang.Class v2;
java.lang.Object v5, v6;
java.lang.String v1;
java.lang.reflect.Method v3;
v0 := @this: io.vertx.core.cli.converters.FromBasedConverter;
v1 := @parameter0: java.lang.String;
label1:
v2 = v0.<io.vertx.core.cli.converters.FromBasedConverter: java.lang.Class clazz>;
v3 = v0.<io.vertx.core.cli.converters.FromBasedConverter: java.lang.reflect.Method method>;
v4 = newarray (java.lang.Object)[1];
v4[0] = v1;
v5 = virtualinvoke v3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v4);
v6 = virtualinvoke v2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v5);
label2:
return v6;
label3:
v7 := @caughtexception;
v8 = virtualinvoke v7.<java.lang.ReflectiveOperationException: java.lang.Throwable getCause()>();
if v8 == null goto label4;
v9 = new java.lang.IllegalArgumentException;
v10 = virtualinvoke v7.<java.lang.ReflectiveOperationException: java.lang.Throwable getCause()>();
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(v10);
throw v9;
label4:
v11 = new java.lang.IllegalArgumentException;
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(v7);
throw v11;
catch java.lang.IllegalAccessException from label1 to label2 with label3;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
}
}