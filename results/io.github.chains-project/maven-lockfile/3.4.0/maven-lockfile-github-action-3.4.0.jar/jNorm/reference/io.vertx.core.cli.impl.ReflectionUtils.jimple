public class io.vertx.core.cli.impl.ReflectionUtils extends java.lang.Object
{
public void <init>()
{
io.vertx.core.cli.impl.ReflectionUtils v0;
v0 := @this: io.vertx.core.cli.impl.ReflectionUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.Object newInstance(java.lang.Class)
{
java.lang.Object[] v3;
java.lang.Class[] v1;
java.lang.IllegalArgumentException v6;
java.lang.reflect.Constructor v2;
java.lang.Exception v5;
java.lang.Class v0;
java.lang.Object v4;
java.lang.String v7, v8;
v0 := @parameter0: java.lang.Class;
label1:
v1 = newarray (java.lang.Class)[0];
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v1);
v3 = newarray (java.lang.Object)[0];
v4 = virtualinvoke v2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v3);
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = new java.lang.IllegalArgumentException;
v7 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot instantiate \u0001");
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v5);
throw v6;
catch java.lang.Exception from label1 to label2 with label3;
}
public static boolean isSetter(java.lang.reflect.Method)
{
int v4;
java.lang.Class[] v3;
java.lang.String v1;
java.lang.reflect.Method v0;
boolean v2, v5;
v0 := @parameter0: java.lang.reflect.Method;
v1 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.String getName()>();
v2 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("set");
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v4 = lengthof v3;
if v4 != 1 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public static java.util.List getSetterMethods(java.lang.Class)
{
java.util.stream.Stream v2, v4;
java.util.function.Predicate v3;
java.lang.Class v0;
java.lang.Object v6;
java.util.stream.Collector v5;
java.lang.reflect.Method[] v1;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();
v2 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(v1);
v3 = staticinvoke <io.vertx.core.cli.impl.ReflectionUtils$isSetter__1223: java.util.function.Predicate bootstrap$()>();
v4 = interfaceinvoke v2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v3);
v5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v5);
return v6;
}
public static boolean isMultiple(java.lang.reflect.Method)
{
java.lang.Class[] v1;
java.lang.Class v2, v4, v6, v8;
java.lang.reflect.Method v0;
boolean v10, v3, v5, v7, v9;
v0 := @parameter0: java.lang.reflect.Method;
v1 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v2 = v1[0];
v3 = virtualinvoke v2.<java.lang.Class: boolean isArray()>();
if v3 != 0 goto label1;
v4 = class "Ljava/util/List;";
v5 = virtualinvoke v4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v5 != 0 goto label1;
v6 = class "Ljava/util/Set;";
v7 = virtualinvoke v6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v7 != 0 goto label1;
v8 = class "Ljava/util/Collection;";
v9 = virtualinvoke v8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v9 == 0 goto label2;
label1:
v10 = 1;
goto label3;
label2:
v10 = 0;
label3:
return v10;
}
public static java.lang.Class getComponentType(java.lang.reflect.Parameter)
{
java.lang.reflect.Type v12, v14, v4, v5, v7, v9;
java.lang.reflect.Parameter v0;
java.lang.reflect.Type[] v13, v6;
java.lang.Class v1, v11, v3, v8;
boolean v10, v2;
v0 := @parameter0: java.lang.reflect.Parameter;
v1 = virtualinvoke v0.<java.lang.reflect.Parameter: java.lang.Class getType()>();
v2 = virtualinvoke v1.<java.lang.Class: boolean isArray()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.Class getComponentType()>();
return v3;
label1:
v4 = virtualinvoke v0.<java.lang.reflect.Parameter: java.lang.reflect.Type getParameterizedType()>();
if v4 == null goto label2;
v5 = virtualinvoke v0.<java.lang.reflect.Parameter: java.lang.reflect.Type getParameterizedType()>();
v6 = interfaceinvoke v5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v7 = v6[0];
return v7;
label2:
v8 = virtualinvoke v0.<java.lang.reflect.Parameter: java.lang.Class getType()>();
v9 = virtualinvoke v8.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
v10 = v9 instanceof java.lang.reflect.ParameterizedType;
if v10 == 0 goto label3;
v11 = virtualinvoke v0.<java.lang.reflect.Parameter: java.lang.Class getType()>();
v12 = virtualinvoke v11.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
v13 = interfaceinvoke v12.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v14 = v13[0];
return v14;
label3:
return null;
}
}