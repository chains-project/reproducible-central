class io.vertx.core.datagram.impl.PacketWriteStreamImpl extends java.lang.Object implements io.vertx.core.streams.WriteStream, io.vertx.core.Handler
{
private io.vertx.core.datagram.impl.DatagramSocketImpl datagramSocket;
private io.vertx.core.Handler exceptionHandler;
private final int port;
private final java.lang.String host;
void <init>(io.vertx.core.datagram.impl.DatagramSocketImpl, int, java.lang.String)
{
io.vertx.core.datagram.impl.DatagramSocketImpl v1;
int v2;
io.vertx.core.datagram.impl.PacketWriteStreamImpl v0;
java.lang.String v3;
v0 := @this: io.vertx.core.datagram.impl.PacketWriteStreamImpl;
v1 := @parameter0: io.vertx.core.datagram.impl.DatagramSocketImpl;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: io.vertx.core.datagram.impl.DatagramSocketImpl datagramSocket> = v1;
v0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: int port> = v2;
v0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: java.lang.String host> = v3;
return;
}
public void handle(io.vertx.core.AsyncResult)
{
java.lang.Throwable v5;
io.vertx.core.datagram.impl.PacketWriteStreamImpl v0;
io.vertx.core.AsyncResult v1;
io.vertx.core.Handler v3, v4;
boolean v2;
v0 := @this: io.vertx.core.datagram.impl.PacketWriteStreamImpl;
v1 := @parameter0: io.vertx.core.AsyncResult;
v2 = interfaceinvoke v1.<io.vertx.core.AsyncResult: boolean failed()>();
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: io.vertx.core.Handler exceptionHandler>;
if v3 == null goto label1;
v4 = v0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: io.vertx.core.Handler exceptionHandler>;
v5 = interfaceinvoke v1.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>();
interfaceinvoke v4.<io.vertx.core.Handler: void handle(java.lang.Object)>(v5);
label1:
return;
}
public io.vertx.core.datagram.impl.PacketWriteStreamImpl exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.datagram.impl.PacketWriteStreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.datagram.impl.PacketWriteStreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: io.vertx.core.Handler exceptionHandler> = v1;
return v0;
}
public io.vertx.core.Future write(io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Promise v2;
io.vertx.core.datagram.impl.PacketWriteStreamImpl v0;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.datagram.impl.PacketWriteStreamImpl;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
virtualinvoke v0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: void write(io.vertx.core.buffer.Buffer,io.vertx.core.Handler)>(v1, v2);
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
public void write(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.datagram.impl.DatagramSocketImpl v3;
io.vertx.core.buffer.Buffer v1;
int v4;
io.vertx.core.datagram.impl.PacketWriteStreamImpl v0;
java.lang.String v5;
io.vertx.core.Handler v2, v6;
v0 := @this: io.vertx.core.datagram.impl.PacketWriteStreamImpl;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: io.vertx.core.datagram.impl.DatagramSocketImpl datagramSocket>;
v4 = v0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: int port>;
v5 = v0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: java.lang.String host>;
v6 = staticinvoke <io.vertx.core.datagram.impl.PacketWriteStreamImpl$lambda_write_0__921: io.vertx.core.Handler bootstrap$(io.vertx.core.datagram.impl.PacketWriteStreamImpl,io.vertx.core.Handler)>(v0, v2);
virtualinvoke v3.<io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.datagram.DatagramSocket send(io.vertx.core.buffer.Buffer,int,java.lang.String,io.vertx.core.Handler)>(v1, v4, v5, v6);
return;
}
public io.vertx.core.datagram.impl.PacketWriteStreamImpl setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.datagram.impl.PacketWriteStreamImpl v0;
v0 := @this: io.vertx.core.datagram.impl.PacketWriteStreamImpl;
v1 := @parameter0: int;
return v0;
}
public boolean writeQueueFull()
{
io.vertx.core.datagram.impl.PacketWriteStreamImpl v0;
v0 := @this: io.vertx.core.datagram.impl.PacketWriteStreamImpl;
return 0;
}
public io.vertx.core.datagram.impl.PacketWriteStreamImpl drainHandler(io.vertx.core.Handler)
{
io.vertx.core.datagram.impl.PacketWriteStreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.datagram.impl.PacketWriteStreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
return v0;
}
public io.vertx.core.Future end()
{
io.vertx.core.datagram.impl.PacketWriteStreamImpl v0;
io.vertx.core.Future v2;
io.vertx.core.Promise v1;
v0 := @this: io.vertx.core.datagram.impl.PacketWriteStreamImpl;
v1 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
virtualinvoke v0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: void end(io.vertx.core.Handler)>(v1);
v2 = interfaceinvoke v1.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v2;
}
public void end(io.vertx.core.Handler)
{
io.vertx.core.datagram.impl.DatagramSocketImpl v2;
io.vertx.core.datagram.impl.PacketWriteStreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.datagram.impl.PacketWriteStreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: io.vertx.core.datagram.impl.DatagramSocketImpl datagramSocket>;
virtualinvoke v2.<io.vertx.core.datagram.impl.DatagramSocketImpl: void close(io.vertx.core.Handler)>(v1);
return;
}
}