public class io.vertx.core.eventbus.DeliveryOptions extends java.lang.Object
{
public static final long DEFAULT_TIMEOUT;
public static final boolean DEFAULT_LOCAL_ONLY;
public static final io.vertx.core.tracing.TracingPolicy DEFAULT_TRACING_POLICY;
private long timeout;
private java.lang.String codecName;
private io.vertx.core.MultiMap headers;
private boolean localOnly;
private io.vertx.core.tracing.TracingPolicy tracingPolicy;
public void <init>()
{
io.vertx.core.eventbus.DeliveryOptions v0;
io.vertx.core.tracing.TracingPolicy v1;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.eventbus.DeliveryOptions: long timeout> = 30000L;
v0.<io.vertx.core.eventbus.DeliveryOptions: boolean localOnly> = 0;
v1 = <io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy DEFAULT_TRACING_POLICY>;
v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v1;
return;
}
public void <init>(io.vertx.core.eventbus.DeliveryOptions)
{
io.vertx.core.eventbus.DeliveryOptions v0, v1;
io.vertx.core.MultiMap v5, v6, v7, v8;
long v3;
java.lang.String v4;
io.vertx.core.tracing.TracingPolicy v10, v2;
boolean v9;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 := @parameter0: io.vertx.core.eventbus.DeliveryOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.eventbus.DeliveryOptions: long timeout> = 30000L;
v0.<io.vertx.core.eventbus.DeliveryOptions: boolean localOnly> = 0;
v2 = <io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy DEFAULT_TRACING_POLICY>;
v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v2;
v3 = virtualinvoke v1.<io.vertx.core.eventbus.DeliveryOptions: long getSendTimeout()>();
v0.<io.vertx.core.eventbus.DeliveryOptions: long timeout> = v3;
v4 = virtualinvoke v1.<io.vertx.core.eventbus.DeliveryOptions: java.lang.String getCodecName()>();
v0.<io.vertx.core.eventbus.DeliveryOptions: java.lang.String codecName> = v4;
v5 = virtualinvoke v1.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap getHeaders()>();
if v5 == null goto label1;
v6 = staticinvoke <io.vertx.core.MultiMap: io.vertx.core.MultiMap caseInsensitiveMultiMap()>();
v7 = virtualinvoke v1.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap getHeaders()>();
v8 = interfaceinvoke v6.<io.vertx.core.MultiMap: io.vertx.core.MultiMap addAll(io.vertx.core.MultiMap)>(v7);
v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap headers> = v8;
label1:
v9 = v1.<io.vertx.core.eventbus.DeliveryOptions: boolean localOnly>;
v0.<io.vertx.core.eventbus.DeliveryOptions: boolean localOnly> = v9;
v10 = v1.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy>;
v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v10;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
java.lang.IllegalStateException v14;
io.vertx.core.eventbus.DeliveryOptions v0;
io.vertx.core.MultiMap v18, v8;
long v5;
java.lang.Long v3, v4;
java.lang.Boolean v21, v22;
io.vertx.core.json.JsonObject v1, v7;
java.lang.String v17, v24, v6;
io.vertx.core.tracing.TracingPolicy v2, v25;
boolean v10, v13, v23;
java.util.Iterator v9;
java.lang.Class v16;
java.lang.Object v11, v12, v15, v19, v20;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.eventbus.DeliveryOptions: long timeout> = 30000L;
v0.<io.vertx.core.eventbus.DeliveryOptions: boolean localOnly> = 0;
v2 = <io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy DEFAULT_TRACING_POLICY>;
v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v2;
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(30000L);
v4 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.lang.Long getLong(java.lang.String,java.lang.Long)>("timeout", v3);
v5 = virtualinvoke v4.<java.lang.Long: long longValue()>();
v0.<io.vertx.core.eventbus.DeliveryOptions: long timeout> = v5;
v6 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.lang.String getString(java.lang.String,java.lang.String)>("codecName", null);
v0.<io.vertx.core.eventbus.DeliveryOptions: java.lang.String codecName> = v6;
v7 = virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject getJsonObject(java.lang.String,io.vertx.core.json.JsonObject)>("headers", null);
if v7 == null goto label3;
v8 = staticinvoke <io.vertx.core.MultiMap: io.vertx.core.MultiMap caseInsensitiveMultiMap()>();
v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap headers> = v8;
v9 = virtualinvoke v7.<io.vertx.core.json.JsonObject: java.util.Iterator iterator()>();
label1:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label3;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = interfaceinvoke v11.<java.util.Map$Entry: java.lang.Object getValue()>();
v13 = v12 instanceof java.lang.String;
if v13 != 0 goto label2;
v14 = new java.lang.IllegalStateException;
v15 = interfaceinvoke v11.<java.util.Map$Entry: java.lang.Object getValue()>();
v16 = virtualinvoke v15.<java.lang.Object: java.lang.Class getClass()>();
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid type for message header value \u0001");
specialinvoke v14.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v17);
throw v14;
label2:
v18 = v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap headers>;
v19 = interfaceinvoke v11.<java.util.Map$Entry: java.lang.Object getKey()>();
v20 = interfaceinvoke v11.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v18.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.String,java.lang.String)>(v19, v20);
goto label1;
label3:
v21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
v22 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.lang.Boolean getBoolean(java.lang.String,java.lang.Boolean)>("localOnly", v21);
v23 = virtualinvoke v22.<java.lang.Boolean: boolean booleanValue()>();
v0.<io.vertx.core.eventbus.DeliveryOptions: boolean localOnly> = v23;
v24 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.lang.String getString(java.lang.String)>("tracingPolicy");
if v24 == null goto label4;
v25 = staticinvoke <io.vertx.core.tracing.TracingPolicy: io.vertx.core.tracing.TracingPolicy valueOf(java.lang.String)>(v24);
goto label5;
label4:
v25 = <io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy DEFAULT_TRACING_POLICY>;
label5:
v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v25;
return;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.eventbus.DeliveryOptions v0;
io.vertx.core.MultiMap v6, v8;
long v2;
java.lang.Long v3;
java.lang.Boolean v12;
io.vertx.core.json.JsonObject v1, v7;
java.lang.String v15, v4, v5;
io.vertx.core.tracing.TracingPolicy v13, v14;
boolean v11;
java.util.function.Consumer v10;
java.util.List v9;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 = new io.vertx.core.json.JsonObject;
specialinvoke v1.<io.vertx.core.json.JsonObject: void <init>()>();
v2 = v0.<io.vertx.core.eventbus.DeliveryOptions: long timeout>;
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>("timeout", v3);
v4 = v0.<io.vertx.core.eventbus.DeliveryOptions: java.lang.String codecName>;
if v4 == null goto label1;
v5 = v0.<io.vertx.core.eventbus.DeliveryOptions: java.lang.String codecName>;
virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>("codecName", v5);
label1:
v6 = v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap headers>;
if v6 == null goto label2;
v7 = new io.vertx.core.json.JsonObject;
specialinvoke v7.<io.vertx.core.json.JsonObject: void <init>()>();
v8 = v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap headers>;
v9 = interfaceinvoke v8.<io.vertx.core.MultiMap: java.util.List entries()>();
v10 = staticinvoke <io.vertx.core.eventbus.DeliveryOptions$lambda_toJson_0__1409: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonObject)>(v7);
interfaceinvoke v9.<java.util.List: void forEach(java.util.function.Consumer)>(v10);
virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>("headers", v7);
label2:
v11 = v0.<io.vertx.core.eventbus.DeliveryOptions: boolean localOnly>;
v12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v11);
virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>("localOnly", v12);
v13 = v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy>;
if v13 == null goto label3;
v14 = v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy>;
v15 = virtualinvoke v14.<io.vertx.core.tracing.TracingPolicy: java.lang.String name()>();
virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>("tracingPolicy", v15);
label3:
return v1;
}
public long getSendTimeout()
{
io.vertx.core.eventbus.DeliveryOptions v0;
long v1;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 = v0.<io.vertx.core.eventbus.DeliveryOptions: long timeout>;
return v1;
}
public io.vertx.core.eventbus.DeliveryOptions setSendTimeout(long)
{
io.vertx.core.eventbus.DeliveryOptions v0;
byte v2;
long v1;
boolean v3;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 := @parameter0: long;
v2 = v1 cmp 1L;
if v2 < 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v3, "sendTimeout must be >= 1");
v0.<io.vertx.core.eventbus.DeliveryOptions: long timeout> = v1;
return v0;
}
public java.lang.String getCodecName()
{
io.vertx.core.eventbus.DeliveryOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 = v0.<io.vertx.core.eventbus.DeliveryOptions: java.lang.String codecName>;
return v1;
}
public io.vertx.core.eventbus.DeliveryOptions setCodecName(java.lang.String)
{
io.vertx.core.eventbus.DeliveryOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.eventbus.DeliveryOptions: java.lang.String codecName> = v1;
return v0;
}
public io.vertx.core.eventbus.DeliveryOptions addHeader(java.lang.String, java.lang.String)
{
io.vertx.core.eventbus.DeliveryOptions v0;
io.vertx.core.MultiMap v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<io.vertx.core.eventbus.DeliveryOptions: void checkHeaders()>();
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "no null key accepted");
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "no null value accepted");
v3 = v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap headers>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.vertx.core.eventbus.DeliveryOptions setHeaders(io.vertx.core.MultiMap)
{
io.vertx.core.MultiMap v1;
io.vertx.core.eventbus.DeliveryOptions v0;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 := @parameter0: io.vertx.core.MultiMap;
v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap headers> = v1;
return v0;
}
public io.vertx.core.MultiMap getHeaders()
{
io.vertx.core.MultiMap v1;
io.vertx.core.eventbus.DeliveryOptions v0;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 = v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap headers>;
return v1;
}
private void checkHeaders()
{
io.vertx.core.MultiMap v1, v2;
io.vertx.core.eventbus.DeliveryOptions v0;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 = v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap headers>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.core.MultiMap: io.vertx.core.MultiMap caseInsensitiveMultiMap()>();
v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap headers> = v2;
label1:
return;
}
public boolean isLocalOnly()
{
io.vertx.core.eventbus.DeliveryOptions v0;
boolean v1;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 = v0.<io.vertx.core.eventbus.DeliveryOptions: boolean localOnly>;
return v1;
}
public io.vertx.core.eventbus.DeliveryOptions setLocalOnly(boolean)
{
io.vertx.core.eventbus.DeliveryOptions v0;
boolean v1;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.eventbus.DeliveryOptions: boolean localOnly> = v1;
return v0;
}
public io.vertx.core.tracing.TracingPolicy getTracingPolicy()
{
io.vertx.core.eventbus.DeliveryOptions v0;
io.vertx.core.tracing.TracingPolicy v1;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 = v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy>;
return v1;
}
public io.vertx.core.eventbus.DeliveryOptions setTracingPolicy(io.vertx.core.tracing.TracingPolicy)
{
io.vertx.core.eventbus.DeliveryOptions v0;
io.vertx.core.tracing.TracingPolicy v1;
v0 := @this: io.vertx.core.eventbus.DeliveryOptions;
v1 := @parameter0: io.vertx.core.tracing.TracingPolicy;
v0.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v1;
return v0;
}
static void <clinit>()
{
io.vertx.core.tracing.TracingPolicy v0;
v0 = <io.vertx.core.tracing.TracingPolicy: io.vertx.core.tracing.TracingPolicy PROPAGATE>;
<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.tracing.TracingPolicy DEFAULT_TRACING_POLICY> = v0;
return;
}
}