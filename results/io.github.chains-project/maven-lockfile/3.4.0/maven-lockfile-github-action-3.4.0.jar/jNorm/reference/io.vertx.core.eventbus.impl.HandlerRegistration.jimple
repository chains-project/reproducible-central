public abstract class io.vertx.core.eventbus.impl.HandlerRegistration extends java.lang.Object implements io.vertx.core.Closeable
{
public final io.vertx.core.impl.ContextInternal context;
public final io.vertx.core.eventbus.impl.EventBusImpl bus;
public final java.lang.String address;
public final boolean src;
private io.vertx.core.eventbus.impl.HandlerHolder registered;
private java.lang.Object metric;
void <init>(io.vertx.core.impl.ContextInternal, io.vertx.core.eventbus.impl.EventBusImpl, java.lang.String, boolean)
{
io.vertx.core.eventbus.impl.EventBusImpl v2;
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.eventbus.impl.HandlerRegistration v0;
java.lang.String v3;
boolean v4;
v0 := @this: io.vertx.core.eventbus.impl.HandlerRegistration;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
v2 := @parameter1: io.vertx.core.eventbus.impl.EventBusImpl;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.impl.ContextInternal context> = v1;
v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.EventBusImpl bus> = v2;
v0.<io.vertx.core.eventbus.impl.HandlerRegistration: boolean src> = v4;
v0.<io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.String address> = v3;
return;
}
void receive(io.vertx.core.eventbus.impl.MessageImpl)
{
io.vertx.core.eventbus.impl.EventBusImpl v2, v4;
java.util.concurrent.Executor v9;
io.vertx.core.spi.metrics.EventBusMetrics v3, v5;
io.vertx.core.impl.ContextInternal v8;
java.lang.Runnable v10;
io.vertx.core.eventbus.impl.HandlerRegistration v0;
io.vertx.core.eventbus.impl.MessageImpl v1;
java.lang.Object v6;
boolean v7;
v0 := @this: io.vertx.core.eventbus.impl.HandlerRegistration;
v1 := @parameter0: io.vertx.core.eventbus.impl.MessageImpl;
v2 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.EventBusImpl bus>;
v3 = v2.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.spi.metrics.EventBusMetrics metrics>;
if v3 == null goto label1;
v4 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.EventBusImpl bus>;
v5 = v4.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.spi.metrics.EventBusMetrics metrics>;
v6 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.Object metric>;
v7 = virtualinvoke v1.<io.vertx.core.eventbus.impl.MessageImpl: boolean isLocal()>();
interfaceinvoke v5.<io.vertx.core.spi.metrics.EventBusMetrics: void scheduleMessage(java.lang.Object,boolean)>(v6, v7);
label1:
v8 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.impl.ContextInternal context>;
v9 = interfaceinvoke v8.<io.vertx.core.impl.ContextInternal: java.util.concurrent.Executor executor()>();
v10 = staticinvoke <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_receive_0__1425: java.lang.Runnable bootstrap$(io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.MessageImpl)>(v0, v1);
interfaceinvoke v9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v10);
return;
}
protected abstract boolean doReceive(io.vertx.core.eventbus.Message);
protected abstract void dispatch(io.vertx.core.eventbus.Message, io.vertx.core.impl.ContextInternal, io.vertx.core.Handler);
synchronized void register(java.lang.String, boolean, io.vertx.core.Promise)
{
java.lang.IllegalStateException v5;
io.vertx.core.spi.metrics.EventBusMetrics v11, v13;
io.vertx.core.eventbus.impl.HandlerRegistration v0;
java.lang.String v1, v14, v7;
boolean v2, v8;
io.vertx.core.eventbus.impl.EventBusImpl v10, v12, v6;
io.vertx.core.Promise v3;
java.lang.Object v15;
io.vertx.core.eventbus.impl.HandlerHolder v4, v9;
v0 := @this: io.vertx.core.eventbus.impl.HandlerRegistration;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Promise;
v4 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.HandlerHolder registered>;
if v4 == null goto label1;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>()>();
throw v5;
label1:
v6 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.EventBusImpl bus>;
v7 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.String address>;
if v1 == null goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
v9 = virtualinvoke v6.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerHolder addRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean,io.vertx.core.Promise)>(v7, v0, v8, v2, v3);
v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.HandlerHolder registered> = v9;
v10 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.EventBusImpl bus>;
v11 = v10.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.spi.metrics.EventBusMetrics metrics>;
if v11 == null goto label4;
v12 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.EventBusImpl bus>;
v13 = v12.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.spi.metrics.EventBusMetrics metrics>;
v14 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.String address>;
v15 = interfaceinvoke v13.<io.vertx.core.spi.metrics.EventBusMetrics: java.lang.Object handlerRegistered(java.lang.String,java.lang.String)>(v14, v1);
v0.<io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.Object metric> = v15;
label4:
return;
}
public synchronized boolean isRegistered()
{
io.vertx.core.eventbus.impl.HandlerRegistration v0;
io.vertx.core.eventbus.impl.HandlerHolder v1;
boolean v2;
v0 := @this: io.vertx.core.eventbus.impl.HandlerRegistration;
v1 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.HandlerHolder registered>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public io.vertx.core.Future unregister()
{
io.vertx.core.eventbus.impl.EventBusImpl v4, v6, v8;
java.lang.Throwable v11;
io.vertx.core.impl.future.PromiseInternal v2;
io.vertx.core.spi.metrics.EventBusMetrics v7, v9;
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.Future v12;
io.vertx.core.eventbus.impl.HandlerRegistration v0;
java.lang.Object v10;
io.vertx.core.eventbus.impl.HandlerHolder v3, v5;
v0 := @this: io.vertx.core.eventbus.impl.HandlerRegistration;
v1 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.impl.ContextInternal context>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
entermonitor v0;
label1:
v3 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.HandlerHolder registered>;
if v3 == null goto label2;
v4 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.EventBusImpl bus>;
v5 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.HandlerHolder registered>;
virtualinvoke v4.<io.vertx.core.eventbus.impl.EventBusImpl: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.Promise)>(v5, v2);
v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.HandlerHolder registered> = null;
v6 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.EventBusImpl bus>;
v7 = v6.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.spi.metrics.EventBusMetrics metrics>;
if v7 == null goto label3;
v8 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.EventBusImpl bus>;
v9 = v8.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.spi.metrics.EventBusMetrics metrics>;
v10 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.Object metric>;
interfaceinvoke v9.<io.vertx.core.spi.metrics.EventBusMetrics: void handlerUnregistered(java.lang.Object)>(v10);
goto label3;
label2:
interfaceinvoke v2.<io.vertx.core.Promise: void complete()>();
label3:
exitmonitor v0;
label4:
goto label6;
label5:
v11 := @caughtexception;
exitmonitor v0;
throw v11;
label6:
v12 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v12;
catch java.lang.Throwable from label1 to label4 with label5;
}
public void unregister(io.vertx.core.Handler)
{
io.vertx.core.eventbus.impl.HandlerRegistration v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.eventbus.impl.HandlerRegistration;
v1 := @parameter0: io.vertx.core.Handler;
v2 = virtualinvoke v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.Future unregister()>();
if v1 == null goto label1;
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
label1:
return;
}
void dispatch(io.vertx.core.Handler, io.vertx.core.eventbus.Message, io.vertx.core.impl.ContextInternal)
{
io.vertx.core.eventbus.impl.HandlerRegistration$InboundDeliveryContext v4;
io.vertx.core.eventbus.Message v2;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.eventbus.impl.HandlerRegistration v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.eventbus.impl.HandlerRegistration;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.vertx.core.eventbus.Message;
v3 := @parameter2: io.vertx.core.impl.ContextInternal;
v4 = new io.vertx.core.eventbus.impl.HandlerRegistration$InboundDeliveryContext;
specialinvoke v4.<io.vertx.core.eventbus.impl.HandlerRegistration$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,io.vertx.core.impl.ContextInternal)>(v0, v2, v1, v3);
virtualinvoke v4.<io.vertx.core.eventbus.impl.HandlerRegistration$InboundDeliveryContext: void dispatch()>();
return;
}
void discard(io.vertx.core.eventbus.Message)
{
io.vertx.core.eventbus.impl.EventBusImpl v2, v4;
io.vertx.core.spi.metrics.EventBusMetrics v3, v5;
io.vertx.core.eventbus.Message v1;
io.vertx.core.eventbus.ReplyFailure v10;
io.vertx.core.eventbus.impl.HandlerRegistration v0;
java.lang.Object v6;
java.lang.String v11, v12, v8;
boolean v7;
io.vertx.core.eventbus.ReplyException v9;
v0 := @this: io.vertx.core.eventbus.impl.HandlerRegistration;
v1 := @parameter0: io.vertx.core.eventbus.Message;
v2 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.EventBusImpl bus>;
v3 = v2.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.spi.metrics.EventBusMetrics metrics>;
if v3 == null goto label1;
v4 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.impl.EventBusImpl bus>;
v5 = v4.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.spi.metrics.EventBusMetrics metrics>;
v6 = v0.<io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.Object metric>;
v7 = virtualinvoke v1.<io.vertx.core.eventbus.impl.MessageImpl: boolean isLocal()>();
interfaceinvoke v5.<io.vertx.core.spi.metrics.EventBusMetrics: void discardMessage(java.lang.Object,boolean,io.vertx.core.eventbus.Message)>(v6, v7, v1);
label1:
v8 = interfaceinvoke v1.<io.vertx.core.eventbus.Message: java.lang.String replyAddress()>();
if v8 == null goto label2;
v9 = new io.vertx.core.eventbus.ReplyException;
v10 = <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure TIMEOUT>;
v11 = interfaceinvoke v1.<io.vertx.core.eventbus.Message: java.lang.String address()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v8, v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Discarded the request. address: \u0001, repliedAddress: \u0001");
specialinvoke v9.<io.vertx.core.eventbus.ReplyException: void <init>(io.vertx.core.eventbus.ReplyFailure,java.lang.String)>(v10, v12);
interfaceinvoke v1.<io.vertx.core.eventbus.Message: void reply(java.lang.Object)>(v9);
label2:
return;
}
public void close(io.vertx.core.Promise)
{
io.vertx.core.eventbus.impl.HandlerRegistration v0;
io.vertx.core.Promise v1;
v0 := @this: io.vertx.core.eventbus.impl.HandlerRegistration;
v1 := @parameter0: io.vertx.core.Promise;
virtualinvoke v0.<io.vertx.core.eventbus.impl.HandlerRegistration: void unregister(io.vertx.core.Handler)>(v1);
return;
}
}