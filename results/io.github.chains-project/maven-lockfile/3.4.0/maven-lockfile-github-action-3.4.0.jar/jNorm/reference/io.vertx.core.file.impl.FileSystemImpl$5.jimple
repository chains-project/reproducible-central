class io.vertx.core.file.impl.FileSystemImpl$5 extends io.vertx.core.file.impl.FileSystemImpl$BlockingAction
{
final java.lang.String val$path;
final java.util.Set val$dirPermissions;
final java.util.Set val$permissions;
final io.vertx.core.file.impl.FileSystemImpl this$0;
void <init>(io.vertx.core.file.impl.FileSystemImpl, java.lang.String, java.util.Set, java.util.Set)
{
io.vertx.core.file.impl.FileSystemImpl v1;
io.vertx.core.file.impl.FileSystemImpl$5 v0;
java.util.Set v3, v4;
java.lang.String v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl$5;
v1 := @parameter0: io.vertx.core.file.impl.FileSystemImpl;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.util.Set;
v4 := @parameter3: java.util.Set;
v0.<io.vertx.core.file.impl.FileSystemImpl$5: io.vertx.core.file.impl.FileSystemImpl this$0> = v1;
v0.<io.vertx.core.file.impl.FileSystemImpl$5: java.lang.String val$path> = v2;
v0.<io.vertx.core.file.impl.FileSystemImpl$5: java.util.Set val$dirPermissions> = v3;
v0.<io.vertx.core.file.impl.FileSystemImpl$5: java.util.Set val$permissions> = v4;
specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void <init>(io.vertx.core.file.impl.FileSystemImpl)>(v1);
return;
}
public java.lang.Void perform()
{
io.vertx.core.file.impl.FileSystemImpl$5 v0;
io.vertx.core.file.FileSystemException v10, v14;
io.vertx.core.file.impl.FileSystemImpl$5$1 v7;
java.lang.SecurityException v9;
java.lang.String v11, v12, v15, v16, v3;
java.nio.file.Path v5;
io.vertx.core.impl.VertxInternal v2;
java.util.Set v6, v8;
java.io.IOException v13;
java.io.File v4;
io.vertx.core.file.impl.FileSystemImpl v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl$5;
label1:
v1 = v0.<io.vertx.core.file.impl.FileSystemImpl$5: io.vertx.core.file.impl.FileSystemImpl this$0>;
v2 = v1.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.impl.VertxInternal vertx>;
v3 = v0.<io.vertx.core.file.impl.FileSystemImpl$5: java.lang.String val$path>;
v4 = interfaceinvoke v2.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>(v3);
v5 = virtualinvoke v4.<java.io.File: java.nio.file.Path toPath()>();
v6 = v0.<io.vertx.core.file.impl.FileSystemImpl$5: java.util.Set val$dirPermissions>;
if v6 == null goto label2;
v7 = new io.vertx.core.file.impl.FileSystemImpl$5$1;
specialinvoke v7.<io.vertx.core.file.impl.FileSystemImpl$5$1: void <init>(io.vertx.core.file.impl.FileSystemImpl$5)>(v0);
staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)>(v5, v7);
goto label6;
label2:
v8 = v0.<io.vertx.core.file.impl.FileSystemImpl$5: java.util.Set val$permissions>;
staticinvoke <java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>(v5, v8);
label3:
goto label6;
label4:
v9 := @caughtexception;
v10 = new io.vertx.core.file.FileSystemException;
v11 = v0.<io.vertx.core.file.impl.FileSystemImpl$5: java.lang.String val$path>;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Accessed denied for chmod on \u0001");
specialinvoke v10.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>(v12);
throw v10;
label5:
v13 := @caughtexception;
v14 = new io.vertx.core.file.FileSystemException;
v15 = v0.<io.vertx.core.file.impl.FileSystemImpl$5: java.lang.String val$path>;
v16 = staticinvoke <io.vertx.core.file.impl.FileSystemImpl: java.lang.String getFileAccessErrorMessage(java.lang.String,java.lang.String)>("chmod", v15);
specialinvoke v14.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String,java.lang.Throwable)>(v16, v13);
throw v14;
label6:
return null;
catch java.lang.SecurityException from label1 to label3 with label4;
catch java.io.IOException from label1 to label3 with label5;
}
}