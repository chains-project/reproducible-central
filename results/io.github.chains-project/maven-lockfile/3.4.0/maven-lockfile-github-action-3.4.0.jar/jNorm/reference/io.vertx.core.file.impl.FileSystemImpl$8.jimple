class io.vertx.core.file.impl.FileSystemImpl$8 extends io.vertx.core.file.impl.FileSystemImpl$BlockingAction
{
final java.lang.String val$link;
final java.lang.String val$existing;
final boolean val$symbolic;
final io.vertx.core.file.impl.FileSystemImpl this$0;
void <init>(io.vertx.core.file.impl.FileSystemImpl, java.lang.String, java.lang.String, boolean)
{
io.vertx.core.file.impl.FileSystemImpl v1;
io.vertx.core.file.impl.FileSystemImpl$8 v0;
java.lang.String v2, v3;
boolean v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl$8;
v1 := @parameter0: io.vertx.core.file.impl.FileSystemImpl;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: boolean;
v0.<io.vertx.core.file.impl.FileSystemImpl$8: io.vertx.core.file.impl.FileSystemImpl this$0> = v1;
v0.<io.vertx.core.file.impl.FileSystemImpl$8: java.lang.String val$link> = v2;
v0.<io.vertx.core.file.impl.FileSystemImpl$8: java.lang.String val$existing> = v3;
v0.<io.vertx.core.file.impl.FileSystemImpl$8: boolean val$symbolic> = v4;
specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void <init>(io.vertx.core.file.impl.FileSystemImpl)>(v1);
return;
}
public java.lang.Void perform()
{
io.vertx.core.file.FileSystemException v17;
io.vertx.core.file.impl.FileSystemImpl$8 v0;
java.nio.file.attribute.FileAttribute[] v12;
java.lang.String v14, v15, v16, v3, v8;
java.nio.file.Path v10, v5;
boolean v11;
io.vertx.core.impl.VertxInternal v2, v7;
java.io.IOException v13;
java.io.File v4, v9;
io.vertx.core.file.impl.FileSystemImpl v1, v6;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl$8;
label1:
v1 = v0.<io.vertx.core.file.impl.FileSystemImpl$8: io.vertx.core.file.impl.FileSystemImpl this$0>;
v2 = v1.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.impl.VertxInternal vertx>;
v3 = v0.<io.vertx.core.file.impl.FileSystemImpl$8: java.lang.String val$link>;
v4 = interfaceinvoke v2.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>(v3);
v5 = virtualinvoke v4.<java.io.File: java.nio.file.Path toPath()>();
v6 = v0.<io.vertx.core.file.impl.FileSystemImpl$8: io.vertx.core.file.impl.FileSystemImpl this$0>;
v7 = v6.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.impl.VertxInternal vertx>;
v8 = v0.<io.vertx.core.file.impl.FileSystemImpl$8: java.lang.String val$existing>;
v9 = interfaceinvoke v7.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>(v8);
v10 = virtualinvoke v9.<java.io.File: java.nio.file.Path toPath()>();
v11 = v0.<io.vertx.core.file.impl.FileSystemImpl$8: boolean val$symbolic>;
if v11 == 0 goto label2;
v12 = newarray (java.nio.file.attribute.FileAttribute)[0];
staticinvoke <java.nio.file.Files: java.nio.file.Path createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(v5, v10, v12);
goto label5;
label2:
staticinvoke <java.nio.file.Files: java.nio.file.Path createLink(java.nio.file.Path,java.nio.file.Path)>(v5, v10);
label3:
goto label5;
label4:
v13 := @caughtexception;
v14 = v0.<io.vertx.core.file.impl.FileSystemImpl$8: java.lang.String val$existing>;
v15 = v0.<io.vertx.core.file.impl.FileSystemImpl$8: java.lang.String val$link>;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v14, v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to link existing file \'\u0001\' to \'\u0001\'");
v17 = new io.vertx.core.file.FileSystemException;
specialinvoke v17.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String,java.lang.Throwable)>(v16, v13);
throw v17;
label5:
return null;
catch java.io.IOException from label1 to label3 with label4;
}
}