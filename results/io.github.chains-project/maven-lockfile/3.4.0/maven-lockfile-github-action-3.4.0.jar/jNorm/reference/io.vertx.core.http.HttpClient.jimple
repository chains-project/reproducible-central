public interface  io.vertx.core.http.HttpClient extends java.lang.Object implements io.vertx.core.metrics.Measured
{
public abstract void request(io.vertx.core.http.RequestOptions, io.vertx.core.Handler);
public abstract io.vertx.core.Future request(io.vertx.core.http.RequestOptions);
public abstract void request(io.vertx.core.http.HttpMethod, int, java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future request(io.vertx.core.http.HttpMethod, int, java.lang.String, java.lang.String);
public abstract void request(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future request(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String);
public abstract void request(io.vertx.core.http.HttpMethod, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future request(io.vertx.core.http.HttpMethod, java.lang.String);
public abstract void webSocket(int, java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future webSocket(int, java.lang.String, java.lang.String);
public abstract void webSocket(java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future webSocket(java.lang.String, java.lang.String);
public abstract void webSocket(java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future webSocket(java.lang.String);
public abstract void webSocket(io.vertx.core.http.WebSocketConnectOptions, io.vertx.core.Handler);
public abstract io.vertx.core.Future webSocket(io.vertx.core.http.WebSocketConnectOptions);
public abstract void webSocketAbs(java.lang.String, io.vertx.core.MultiMap, io.vertx.core.http.WebsocketVersion, java.util.List, io.vertx.core.Handler);
public abstract io.vertx.core.Future webSocketAbs(java.lang.String, io.vertx.core.MultiMap, io.vertx.core.http.WebsocketVersion, java.util.List);
public abstract io.vertx.core.Future updateSSLOptions(io.vertx.core.net.SSLOptions);
public void updateSSLOptions(io.vertx.core.net.SSLOptions, io.vertx.core.Handler)
{
io.vertx.core.net.SSLOptions v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
io.vertx.core.http.HttpClient v0;
v0 := @this: io.vertx.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.net.SSLOptions;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.http.HttpClient: io.vertx.core.Future updateSSLOptions(io.vertx.core.net.SSLOptions)>(v1);
if v2 == null goto label1;
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
label1:
return;
}
public abstract io.vertx.core.http.HttpClient connectionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpClient redirectHandler(java.util.function.Function);
public abstract java.util.function.Function redirectHandler();
public abstract void close(io.vertx.core.Handler);
public abstract io.vertx.core.Future close();
}