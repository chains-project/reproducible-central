public class io.vertx.core.http.HttpClientOptionsConverter extends java.lang.Object
{
private static final java.util.Base64$Decoder BASE64_DECODER;
private static final java.util.Base64$Encoder BASE64_ENCODER;
public void <init>()
{
io.vertx.core.http.HttpClientOptionsConverter v0;
v0 := @this: io.vertx.core.http.HttpClientOptionsConverter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void fromJson(java.lang.Iterable, io.vertx.core.http.HttpClientOptions)
{
byte v6;
io.vertx.core.http.HttpVersion v163;
int v104, v108, v112, v116, v120, v124, v128, v132, v136, v140, v151, v155, v159, v195, v203, v57, v64, v7, v80, v84, v88, v92;
io.vertx.core.http.HttpClientOptions v1;
java.util.function.Consumer v53;
java.lang.Object v101, v103, v105, v107, v109, v111, v113, v115, v117, v119, v121, v123, v125, v127, v129, v131, v133, v135, v137, v139, v141, v143, v144, v146, v148, v150, v152, v154, v156, v158, v160, v162, v164, v166, v168, v170, v172, v174, v176, v178, v180, v182, v184, v186, v188, v190, v192, v194, v196, v198, v200, v202, v204, v206, v4, v49, v5, v52, v54, v56, v58, v60, v61, v63, v65, v67, v69, v71, v73, v75, v77, v79, v81, v83, v85, v87, v89, v91, v93, v96, v97, v99;
io.vertx.core.http.Http2Settings v95;
java.util.ArrayList v51;
io.vertx.core.tracing.TracingPolicy v175;
boolean v10, v100, v102, v106, v11, v110, v114, v118, v12, v122, v126, v13, v130, v134, v138, v14, v142, v145, v147, v149, v15, v153, v157, v16, v161, v165, v167, v169, v17, v171, v173, v177, v179, v18, v181, v183, v185, v187, v189, v19, v191, v193, v197, v199, v20, v201, v205, v207, v21, v22, v23, v24, v25, v26, v27, v28, v29, v3, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v50, v55, v59, v62, v66, v68, v70, v72, v74, v76, v78, v8, v82, v86, v9, v90, v94, v98;
java.lang.Iterable v0;
java.util.Iterator v2;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: io.vertx.core.http.HttpClientOptions;
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label01:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label84;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = -1;
v7 = virtualinvoke v5.<java.lang.String: int hashCode()>();
lookupswitch(v7)
{
case -1885776713: goto label11;
case -1873044487: goto label15;
case -1775507384: goto label14;
case -1717925541: goto label35;
case -1666487613: goto label29;
case -1639942347: goto label36;
case -1627593791: goto label19;
case -1378858860: goto label33;
case -1138573255: goto label40;
case -1076713761: goto label26;
case -1075409574: goto label18;
case -1067125881: goto label13;
case -1033368127: goto label38;
case -1025225799: goto label21;
case -903566235: goto label32;
case -684181837: goto label39;
case -572709596: goto label02;
case -539240103: goto label09;
case -437307511: goto label04;
case -437069214: goto label05;
case -231548191: goto label03;
case -175022674: goto label08;
case 3373707: goto label25;
case 71227500: goto label07;
case 275438443: goto label22;
case 286019347: goto label20;
case 416163868: goto label27;
case 464932483: goto label06;
case 490811896: goto label37;
case 530348891: goto label28;
case 605340426: goto label16;
case 745628626: goto label31;
case 805125298: goto label17;
case 960427479: goto label12;
case 1235909627: goto label42;
case 1349902277: goto label41;
case 1576844282: goto label34;
case 1674400963: goto label10;
case 1752828704: goto label30;
case 1965689328: goto label24;
case 1979494853: goto label23;
default: goto label43;
};
label02:
v8 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("alpnVersions");
if v8 == 0 goto label43;
v6 = 0;
goto label43;
label03:
v9 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("decoderInitialBufferSize");
if v9 == 0 goto label43;
v6 = 1;
goto label43;
label04:
v10 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("defaultHost");
if v10 == 0 goto label43;
v6 = 2;
goto label43;
label05:
v11 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("defaultPort");
if v11 == 0 goto label43;
v6 = 3;
goto label43;
label06:
v12 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("forceSni");
if v12 == 0 goto label43;
v6 = 4;
goto label43;
label07:
v13 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("http2ClearTextUpgrade");
if v13 == 0 goto label43;
v6 = 5;
goto label43;
label08:
v14 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("http2ClearTextUpgradeWithPreflightRequest");
if v14 == 0 goto label43;
v6 = 6;
goto label43;
label09:
v15 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("http2ConnectionWindowSize");
if v15 == 0 goto label43;
v6 = 7;
goto label43;
label10:
v16 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("http2KeepAliveTimeout");
if v16 == 0 goto label43;
v6 = 8;
goto label43;
label11:
v17 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("http2MaxPoolSize");
if v17 == 0 goto label43;
v6 = 9;
goto label43;
label12:
v18 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("http2MultiplexingLimit");
if v18 == 0 goto label43;
v6 = 10;
goto label43;
label13:
v19 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("initialSettings");
if v19 == 0 goto label43;
v6 = 11;
goto label43;
label14:
v20 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("keepAlive");
if v20 == 0 goto label43;
v6 = 12;
goto label43;
label15:
v21 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("keepAliveTimeout");
if v21 == 0 goto label43;
v6 = 13;
goto label43;
label16:
v22 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxChunkSize");
if v22 == 0 goto label43;
v6 = 14;
goto label43;
label17:
v23 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxHeaderSize");
if v23 == 0 goto label43;
v6 = 15;
goto label43;
label18:
v24 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxInitialLineLength");
if v24 == 0 goto label43;
v6 = 16;
goto label43;
label19:
v25 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxPoolSize");
if v25 == 0 goto label43;
v6 = 17;
goto label43;
label20:
v26 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxRedirects");
if v26 == 0 goto label43;
v6 = 18;
goto label43;
label21:
v27 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxWaitQueueSize");
if v27 == 0 goto label43;
v6 = 19;
goto label43;
label22:
v28 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxWebSocketFrameSize");
if v28 == 0 goto label43;
v6 = 20;
goto label43;
label23:
v29 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxWebSocketMessageSize");
if v29 == 0 goto label43;
v6 = 21;
goto label43;
label24:
v30 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxWebSockets");
if v30 == 0 goto label43;
v6 = 22;
goto label43;
label25:
v31 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("name");
if v31 == 0 goto label43;
v6 = 23;
goto label43;
label26:
v32 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("pipelining");
if v32 == 0 goto label43;
v6 = 24;
goto label43;
label27:
v33 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("pipeliningLimit");
if v33 == 0 goto label43;
v6 = 25;
goto label43;
label28:
v34 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("poolCleanerPeriod");
if v34 == 0 goto label43;
v6 = 26;
goto label43;
label29:
v35 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("poolEventLoopSize");
if v35 == 0 goto label43;
v6 = 27;
goto label43;
label30:
v36 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("protocolVersion");
if v36 == 0 goto label43;
v6 = 28;
goto label43;
label31:
v37 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("sendUnmaskedFrames");
if v37 == 0 goto label43;
v6 = 29;
goto label43;
label32:
v38 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("shared");
if v38 == 0 goto label43;
v6 = 30;
goto label43;
label33:
v39 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("tracingPolicy");
if v39 == 0 goto label43;
v6 = 31;
goto label43;
label34:
v40 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("tryUseCompression");
if v40 == 0 goto label43;
v6 = 32;
goto label43;
label35:
v41 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("tryUsePerFrameWebSocketCompression");
if v41 == 0 goto label43;
v6 = 33;
goto label43;
label36:
v42 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("tryUsePerMessageWebSocketCompression");
if v42 == 0 goto label43;
v6 = 34;
goto label43;
label37:
v43 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("tryWebSocketDeflateFrameCompression");
if v43 == 0 goto label43;
v6 = 35;
goto label43;
label38:
v44 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("verifyHost");
if v44 == 0 goto label43;
v6 = 36;
goto label43;
label39:
v45 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("webSocketClosingTimeout");
if v45 == 0 goto label43;
v6 = 37;
goto label43;
label40:
v46 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("webSocketCompressionAllowClientNoContext");
if v46 == 0 goto label43;
v6 = 38;
goto label43;
label41:
v47 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("webSocketCompressionLevel");
if v47 == 0 goto label43;
v6 = 39;
goto label43;
label42:
v48 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("webSocketCompressionRequestServerNoContext");
if v48 == 0 goto label43;
v6 = 40;
label43:
tableswitch(v6)
{
case 0: goto label44;
case 1: goto label45;
case 2: goto label46;
case 3: goto label47;
case 4: goto label48;
case 5: goto label49;
case 6: goto label50;
case 7: goto label51;
case 8: goto label52;
case 9: goto label53;
case 10: goto label54;
case 11: goto label55;
case 12: goto label56;
case 13: goto label57;
case 14: goto label58;
case 15: goto label59;
case 16: goto label60;
case 17: goto label61;
case 18: goto label62;
case 19: goto label63;
case 20: goto label64;
case 21: goto label65;
case 22: goto label66;
case 23: goto label67;
case 24: goto label68;
case 25: goto label69;
case 26: goto label70;
case 27: goto label71;
case 28: goto label72;
case 29: goto label73;
case 30: goto label74;
case 31: goto label75;
case 32: goto label76;
case 33: goto label77;
case 34: goto label78;
case 35: goto label01;
case 36: goto label79;
case 37: goto label80;
case 38: goto label81;
case 39: goto label82;
case 40: goto label83;
default: goto label01;
};
label44:
v49 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v50 = v49 instanceof io.vertx.core.json.JsonArray;
if v50 == 0 goto label01;
v51 = new java.util.ArrayList;
specialinvoke v51.<java.util.ArrayList: void <init>()>();
v52 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v53 = staticinvoke <io.vertx.core.http.HttpClientOptionsConverter$lambda_fromJson_0__949: java.util.function.Consumer bootstrap$(java.util.ArrayList)>(v51);
interfaceinvoke v52.<java.lang.Iterable: void forEach(java.util.function.Consumer)>(v53);
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setAlpnVersions(java.util.List)>(v51);
goto label01;
label45:
v54 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v55 = v54 instanceof java.lang.Number;
if v55 == 0 goto label01;
v56 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v57 = virtualinvoke v56.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setDecoderInitialBufferSize(int)>(v57);
goto label01;
label46:
v58 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v59 = v58 instanceof java.lang.String;
if v59 == 0 goto label01;
v60 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setDefaultHost(java.lang.String)>(v60);
goto label01;
label47:
v61 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v62 = v61 instanceof java.lang.Number;
if v62 == 0 goto label01;
v63 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v64 = virtualinvoke v63.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setDefaultPort(int)>(v64);
goto label01;
label48:
v65 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v66 = v65 instanceof java.lang.Boolean;
if v66 == 0 goto label01;
v67 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v68 = virtualinvoke v67.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setForceSni(boolean)>(v68);
goto label01;
label49:
v69 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v70 = v69 instanceof java.lang.Boolean;
if v70 == 0 goto label01;
v71 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v72 = virtualinvoke v71.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setHttp2ClearTextUpgrade(boolean)>(v72);
goto label01;
label50:
v73 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v74 = v73 instanceof java.lang.Boolean;
if v74 == 0 goto label01;
v75 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v76 = virtualinvoke v75.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setHttp2ClearTextUpgradeWithPreflightRequest(boolean)>(v76);
goto label01;
label51:
v77 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v78 = v77 instanceof java.lang.Number;
if v78 == 0 goto label01;
v79 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v80 = virtualinvoke v79.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setHttp2ConnectionWindowSize(int)>(v80);
goto label01;
label52:
v81 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v82 = v81 instanceof java.lang.Number;
if v82 == 0 goto label01;
v83 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v84 = virtualinvoke v83.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setHttp2KeepAliveTimeout(int)>(v84);
goto label01;
label53:
v85 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v86 = v85 instanceof java.lang.Number;
if v86 == 0 goto label01;
v87 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v88 = virtualinvoke v87.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setHttp2MaxPoolSize(int)>(v88);
goto label01;
label54:
v89 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v90 = v89 instanceof java.lang.Number;
if v90 == 0 goto label01;
v91 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v92 = virtualinvoke v91.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setHttp2MultiplexingLimit(int)>(v92);
goto label01;
label55:
v93 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v94 = v93 instanceof io.vertx.core.json.JsonObject;
if v94 == 0 goto label01;
v95 = new io.vertx.core.http.Http2Settings;
v96 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
specialinvoke v95.<io.vertx.core.http.Http2Settings: void <init>(io.vertx.core.json.JsonObject)>(v96);
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setInitialSettings(io.vertx.core.http.Http2Settings)>(v95);
goto label01;
label56:
v97 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v98 = v97 instanceof java.lang.Boolean;
if v98 == 0 goto label01;
v99 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v100 = virtualinvoke v99.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setKeepAlive(boolean)>(v100);
goto label01;
label57:
v101 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v102 = v101 instanceof java.lang.Number;
if v102 == 0 goto label01;
v103 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v104 = virtualinvoke v103.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setKeepAliveTimeout(int)>(v104);
goto label01;
label58:
v105 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v106 = v105 instanceof java.lang.Number;
if v106 == 0 goto label01;
v107 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v108 = virtualinvoke v107.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxChunkSize(int)>(v108);
goto label01;
label59:
v109 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v110 = v109 instanceof java.lang.Number;
if v110 == 0 goto label01;
v111 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v112 = virtualinvoke v111.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxHeaderSize(int)>(v112);
goto label01;
label60:
v113 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v114 = v113 instanceof java.lang.Number;
if v114 == 0 goto label01;
v115 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v116 = virtualinvoke v115.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxInitialLineLength(int)>(v116);
goto label01;
label61:
v117 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v118 = v117 instanceof java.lang.Number;
if v118 == 0 goto label01;
v119 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v120 = virtualinvoke v119.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxPoolSize(int)>(v120);
goto label01;
label62:
v121 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v122 = v121 instanceof java.lang.Number;
if v122 == 0 goto label01;
v123 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v124 = virtualinvoke v123.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxRedirects(int)>(v124);
goto label01;
label63:
v125 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v126 = v125 instanceof java.lang.Number;
if v126 == 0 goto label01;
v127 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v128 = virtualinvoke v127.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxWaitQueueSize(int)>(v128);
goto label01;
label64:
v129 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v130 = v129 instanceof java.lang.Number;
if v130 == 0 goto label01;
v131 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v132 = virtualinvoke v131.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxWebSocketFrameSize(int)>(v132);
goto label01;
label65:
v133 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v134 = v133 instanceof java.lang.Number;
if v134 == 0 goto label01;
v135 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v136 = virtualinvoke v135.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxWebSocketMessageSize(int)>(v136);
goto label01;
label66:
v137 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v138 = v137 instanceof java.lang.Number;
if v138 == 0 goto label01;
v139 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v140 = virtualinvoke v139.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxWebSockets(int)>(v140);
goto label01;
label67:
v141 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v142 = v141 instanceof java.lang.String;
if v142 == 0 goto label01;
v143 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setName(java.lang.String)>(v143);
goto label01;
label68:
v144 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v145 = v144 instanceof java.lang.Boolean;
if v145 == 0 goto label01;
v146 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v147 = virtualinvoke v146.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPipelining(boolean)>(v147);
goto label01;
label69:
v148 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v149 = v148 instanceof java.lang.Number;
if v149 == 0 goto label01;
v150 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v151 = virtualinvoke v150.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPipeliningLimit(int)>(v151);
goto label01;
label70:
v152 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v153 = v152 instanceof java.lang.Number;
if v153 == 0 goto label01;
v154 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v155 = virtualinvoke v154.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPoolCleanerPeriod(int)>(v155);
goto label01;
label71:
v156 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v157 = v156 instanceof java.lang.Number;
if v157 == 0 goto label01;
v158 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v159 = virtualinvoke v158.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPoolEventLoopSize(int)>(v159);
goto label01;
label72:
v160 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v161 = v160 instanceof java.lang.String;
if v161 == 0 goto label01;
v162 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v163 = staticinvoke <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion valueOf(java.lang.String)>(v162);
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setProtocolVersion(io.vertx.core.http.HttpVersion)>(v163);
goto label01;
label73:
v164 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v165 = v164 instanceof java.lang.Boolean;
if v165 == 0 goto label01;
v166 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v167 = virtualinvoke v166.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSendUnmaskedFrames(boolean)>(v167);
goto label01;
label74:
v168 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v169 = v168 instanceof java.lang.Boolean;
if v169 == 0 goto label01;
v170 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v171 = virtualinvoke v170.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setShared(boolean)>(v171);
goto label01;
label75:
v172 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v173 = v172 instanceof java.lang.String;
if v173 == 0 goto label01;
v174 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v175 = staticinvoke <io.vertx.core.tracing.TracingPolicy: io.vertx.core.tracing.TracingPolicy valueOf(java.lang.String)>(v174);
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTracingPolicy(io.vertx.core.tracing.TracingPolicy)>(v175);
goto label01;
label76:
v176 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v177 = v176 instanceof java.lang.Boolean;
if v177 == 0 goto label01;
v178 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v179 = virtualinvoke v178.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTryUseCompression(boolean)>(v179);
goto label01;
label77:
v180 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v181 = v180 instanceof java.lang.Boolean;
if v181 == 0 goto label01;
v182 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v183 = virtualinvoke v182.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTryUsePerFrameWebSocketCompression(boolean)>(v183);
goto label01;
label78:
v184 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v185 = v184 instanceof java.lang.Boolean;
if v185 == 0 goto label01;
v186 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v187 = virtualinvoke v186.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTryUsePerMessageWebSocketCompression(boolean)>(v187);
goto label01;
label79:
v188 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v189 = v188 instanceof java.lang.Boolean;
if v189 == 0 goto label01;
v190 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v191 = virtualinvoke v190.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setVerifyHost(boolean)>(v191);
goto label01;
label80:
v192 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v193 = v192 instanceof java.lang.Number;
if v193 == 0 goto label01;
v194 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v195 = virtualinvoke v194.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setWebSocketClosingTimeout(int)>(v195);
goto label01;
label81:
v196 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v197 = v196 instanceof java.lang.Boolean;
if v197 == 0 goto label01;
v198 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v199 = virtualinvoke v198.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setWebSocketCompressionAllowClientNoContext(boolean)>(v199);
goto label01;
label82:
v200 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v201 = v200 instanceof java.lang.Number;
if v201 == 0 goto label01;
v202 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v203 = virtualinvoke v202.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setWebSocketCompressionLevel(int)>(v203);
goto label01;
label83:
v204 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v205 = v204 instanceof java.lang.Boolean;
if v205 == 0 goto label01;
v206 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v207 = virtualinvoke v206.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setWebSocketCompressionRequestServerNoContext(boolean)>(v207);
goto label01;
label84:
return;
}
static void toJson(io.vertx.core.http.HttpClientOptions, io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.http.HttpClientOptions v0;
java.util.Map v2;
v0 := @parameter0: io.vertx.core.http.HttpClientOptions;
v1 := @parameter1: io.vertx.core.json.JsonObject;
v2 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>();
staticinvoke <io.vertx.core.http.HttpClientOptionsConverter: void toJson(io.vertx.core.http.HttpClientOptions,java.util.Map)>(v0, v2);
return;
}
static void toJson(io.vertx.core.http.HttpClientOptions, java.util.Map)
{
io.vertx.core.http.Http2Settings v26, v27;
java.lang.Integer v11, v19, v21, v23, v25, v32, v34, v36, v38, v40, v42, v44, v46, v48, v50, v56, v58, v60, v7, v80, v84;
java.util.Map v1;
io.vertx.core.json.JsonObject v28;
java.lang.String v51, v52, v63, v70, v8, v9;
io.vertx.core.tracing.TracingPolicy v68, v69;
io.vertx.core.json.JsonArray v3;
io.vertx.core.http.HttpVersion v61, v62;
boolean v12, v14, v16, v29, v53, v64, v66, v71, v73, v75, v77, v81, v85;
java.util.List v2, v4;
int v10, v18, v20, v22, v24, v31, v33, v35, v37, v39, v41, v43, v45, v47, v49, v55, v57, v59, v6, v79, v83;
java.lang.Boolean v13, v15, v17, v30, v54, v65, v67, v72, v74, v76, v78, v82, v86;
io.vertx.core.http.HttpClientOptions v0;
java.util.function.Consumer v5;
v0 := @parameter0: io.vertx.core.http.HttpClientOptions;
v1 := @parameter1: java.util.Map;
v2 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: java.util.List getAlpnVersions()>();
if v2 == null goto label1;
v3 = new io.vertx.core.json.JsonArray;
specialinvoke v3.<io.vertx.core.json.JsonArray: void <init>()>();
v4 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: java.util.List getAlpnVersions()>();
v5 = staticinvoke <io.vertx.core.http.HttpClientOptionsConverter$lambda_toJson_1__950: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>(v3);
interfaceinvoke v4.<java.util.List: void forEach(java.util.function.Consumer)>(v5);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("alpnVersions", v3);
label1:
v6 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getDecoderInitialBufferSize()>();
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("decoderInitialBufferSize", v7);
v8 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: java.lang.String getDefaultHost()>();
if v8 == null goto label2;
v9 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: java.lang.String getDefaultHost()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("defaultHost", v9);
label2:
v10 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getDefaultPort()>();
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v10);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("defaultPort", v11);
v12 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean isForceSni()>();
v13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v12);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("forceSni", v13);
v14 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean isHttp2ClearTextUpgrade()>();
v15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v14);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http2ClearTextUpgrade", v15);
v16 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean isHttp2ClearTextUpgradeWithPreflightRequest()>();
v17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v16);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http2ClearTextUpgradeWithPreflightRequest", v17);
v18 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getHttp2ConnectionWindowSize()>();
v19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v18);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http2ConnectionWindowSize", v19);
v20 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getHttp2KeepAliveTimeout()>();
v21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v20);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http2KeepAliveTimeout", v21);
v22 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getHttp2MaxPoolSize()>();
v23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v22);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http2MaxPoolSize", v23);
v24 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getHttp2MultiplexingLimit()>();
v25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v24);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http2MultiplexingLimit", v25);
v26 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.Http2Settings getInitialSettings()>();
if v26 == null goto label3;
v27 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.Http2Settings getInitialSettings()>();
v28 = virtualinvoke v27.<io.vertx.core.http.Http2Settings: io.vertx.core.json.JsonObject toJson()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialSettings", v28);
label3:
v29 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean isKeepAlive()>();
v30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v29);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keepAlive", v30);
v31 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getKeepAliveTimeout()>();
v32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v31);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keepAliveTimeout", v32);
v33 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getMaxChunkSize()>();
v34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v33);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxChunkSize", v34);
v35 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getMaxHeaderSize()>();
v36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v35);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderSize", v36);
v37 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getMaxInitialLineLength()>();
v38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v37);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxInitialLineLength", v38);
v39 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getMaxPoolSize()>();
v40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v39);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxPoolSize", v40);
v41 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getMaxRedirects()>();
v42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v41);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxRedirects", v42);
v43 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getMaxWaitQueueSize()>();
v44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v43);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxWaitQueueSize", v44);
v45 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getMaxWebSocketFrameSize()>();
v46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v45);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxWebSocketFrameSize", v46);
v47 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getMaxWebSocketMessageSize()>();
v48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v47);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxWebSocketMessageSize", v48);
v49 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getMaxWebSockets()>();
v50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v49);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxWebSockets", v50);
v51 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: java.lang.String getName()>();
if v51 == null goto label4;
v52 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: java.lang.String getName()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("name", v52);
label4:
v53 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean isPipelining()>();
v54 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v53);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pipelining", v54);
v55 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getPipeliningLimit()>();
v56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v55);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pipeliningLimit", v56);
v57 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getPoolCleanerPeriod()>();
v58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v57);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("poolCleanerPeriod", v58);
v59 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getPoolEventLoopSize()>();
v60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v59);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("poolEventLoopSize", v60);
v61 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpVersion getProtocolVersion()>();
if v61 == null goto label5;
v62 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpVersion getProtocolVersion()>();
v63 = virtualinvoke v62.<io.vertx.core.http.HttpVersion: java.lang.String name()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("protocolVersion", v63);
label5:
v64 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean isSendUnmaskedFrames()>();
v65 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v64);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendUnmaskedFrames", v65);
v66 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean isShared()>();
v67 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v66);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("shared", v67);
v68 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.tracing.TracingPolicy getTracingPolicy()>();
if v68 == null goto label6;
v69 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.tracing.TracingPolicy getTracingPolicy()>();
v70 = virtualinvoke v69.<io.vertx.core.tracing.TracingPolicy: java.lang.String name()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tracingPolicy", v70);
label6:
v71 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean isTryUseCompression()>();
v72 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v71);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tryUseCompression", v72);
v73 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean getTryUsePerMessageWebSocketCompression()>();
v74 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v73);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tryUsePerMessageWebSocketCompression", v74);
v75 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean getTryWebSocketDeflateFrameCompression()>();
v76 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v75);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tryWebSocketDeflateFrameCompression", v76);
v77 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean isVerifyHost()>();
v78 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v77);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("verifyHost", v78);
v79 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getWebSocketClosingTimeout()>();
v80 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v79);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("webSocketClosingTimeout", v80);
v81 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean getWebSocketCompressionAllowClientNoContext()>();
v82 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v81);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("webSocketCompressionAllowClientNoContext", v82);
v83 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: int getWebSocketCompressionLevel()>();
v84 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v83);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("webSocketCompressionLevel", v84);
v85 = virtualinvoke v0.<io.vertx.core.http.HttpClientOptions: boolean getWebSocketCompressionRequestServerNoContext()>();
v86 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v85);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("webSocketCompressionRequestServerNoContext", v86);
return;
}
static void <clinit>()
{
java.util.Base64$Encoder v1;
java.util.Base64$Decoder v0;
v0 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Decoder BASE64_DECODER>;
<io.vertx.core.http.HttpClientOptionsConverter: java.util.Base64$Decoder BASE64_DECODER> = v0;
v1 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Encoder BASE64_ENCODER>;
<io.vertx.core.http.HttpClientOptionsConverter: java.util.Base64$Encoder BASE64_ENCODER> = v1;
return;
}
}