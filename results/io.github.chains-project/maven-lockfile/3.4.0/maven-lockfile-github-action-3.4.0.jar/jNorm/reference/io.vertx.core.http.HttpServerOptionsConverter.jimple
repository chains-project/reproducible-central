public class io.vertx.core.http.HttpServerOptionsConverter extends java.lang.Object
{
private static final java.util.Base64$Decoder BASE64_DECODER;
private static final java.util.Base64$Encoder BASE64_ENCODER;
public void <init>()
{
io.vertx.core.http.HttpServerOptionsConverter v0;
v0 := @this: io.vertx.core.http.HttpServerOptionsConverter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void fromJson(java.lang.Iterable, io.vertx.core.http.HttpServerOptions)
{
byte v6;
io.vertx.core.http.HttpServerOptions v1;
int v116, v120, v44, v52, v64, v7, v72, v76, v80, v84, v88, v92;
java.util.function.Consumer v129, v40;
java.lang.Object v101, v103, v105, v107, v109, v111, v113, v115, v117, v119, v121, v123, v125, v128, v32, v34, v36, v39, v4, v41, v43, v45, v47, v49, v5, v51, v53, v55, v57, v59, v61, v63, v65, v68, v69, v71, v73, v75, v77, v79, v81, v83, v85, v87, v89, v91, v93, v95, v97, v99;
io.vertx.core.http.Http2Settings v67;
java.util.ArrayList v127, v38;
io.vertx.core.tracing.TracingPolicy v108;
boolean v10, v100, v102, v104, v106, v11, v110, v112, v114, v118, v12, v122, v124, v126, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v3, v30, v31, v33, v35, v37, v42, v46, v48, v50, v54, v56, v58, v60, v62, v66, v70, v74, v78, v8, v82, v86, v9, v90, v94, v96, v98;
java.lang.Iterable v0;
java.util.Iterator v2;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: io.vertx.core.http.HttpServerOptions;
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label01:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label51;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = -1;
v7 = virtualinvoke v5.<java.lang.String: int hashCode()>();
lookupswitch(v7)
{
case -2069741122: goto label04;
case -1859725975: goto label24;
case -1855739566: goto label02;
case -1762729643: goto label12;
case -1378858860: goto label20;
case -1075409574: goto label14;
case -1067125881: goto label10;
case -684181837: goto label22;
case -572709596: goto label03;
case -539240103: goto label09;
case -396980247: goto label07;
case -231548191: goto label06;
case 44407977: goto label21;
case 185821186: goto label25;
case 275438443: goto label15;
case 444252915: goto label08;
case 605340426: goto label11;
case 805125298: goto label13;
case 1349902277: goto label23;
case 1613049855: goto label17;
case 1673580008: goto label05;
case 1979494853: goto label16;
case 2105691237: goto label18;
case 2107794756: goto label19;
default: goto label26;
};
label02:
v8 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("acceptUnmaskedFrames");
if v8 == 0 goto label26;
v6 = 0;
goto label26;
label03:
v9 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("alpnVersions");
if v9 == 0 goto label26;
v6 = 1;
goto label26;
label04:
v10 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("compressionLevel");
if v10 == 0 goto label26;
v6 = 2;
goto label26;
label05:
v11 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("compressionSupported");
if v11 == 0 goto label26;
v6 = 3;
goto label26;
label06:
v12 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("decoderInitialBufferSize");
if v12 == 0 goto label26;
v6 = 4;
goto label26;
label07:
v13 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("decompressionSupported");
if v13 == 0 goto label26;
v6 = 5;
goto label26;
label08:
v14 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("handle100ContinueAutomatically");
if v14 == 0 goto label26;
v6 = 6;
goto label26;
label09:
v15 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("http2ConnectionWindowSize");
if v15 == 0 goto label26;
v6 = 7;
goto label26;
label10:
v16 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("initialSettings");
if v16 == 0 goto label26;
v6 = 8;
goto label26;
label11:
v17 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxChunkSize");
if v17 == 0 goto label26;
v6 = 9;
goto label26;
label12:
v18 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxFormAttributeSize");
if v18 == 0 goto label26;
v6 = 10;
goto label26;
label13:
v19 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxHeaderSize");
if v19 == 0 goto label26;
v6 = 11;
goto label26;
label14:
v20 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxInitialLineLength");
if v20 == 0 goto label26;
v6 = 12;
goto label26;
label15:
v21 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxWebSocketFrameSize");
if v21 == 0 goto label26;
v6 = 13;
goto label26;
label16:
v22 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxWebSocketMessageSize");
if v22 == 0 goto label26;
v6 = 14;
goto label26;
label17:
v23 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("perFrameWebSocketCompressionSupported");
if v23 == 0 goto label26;
v6 = 15;
goto label26;
label18:
v24 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("perMessageWebSocketCompressionSupported");
if v24 == 0 goto label26;
v6 = 16;
goto label26;
label19:
v25 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("registerWebSocketWriteHandlers");
if v25 == 0 goto label26;
v6 = 17;
goto label26;
label20:
v26 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("tracingPolicy");
if v26 == 0 goto label26;
v6 = 18;
goto label26;
label21:
v27 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("webSocketAllowServerNoContext");
if v27 == 0 goto label26;
v6 = 19;
goto label26;
label22:
v28 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("webSocketClosingTimeout");
if v28 == 0 goto label26;
v6 = 20;
goto label26;
label23:
v29 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("webSocketCompressionLevel");
if v29 == 0 goto label26;
v6 = 21;
goto label26;
label24:
v30 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("webSocketPreferredClientNoContext");
if v30 == 0 goto label26;
v6 = 22;
goto label26;
label25:
v31 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("webSocketSubProtocols");
if v31 == 0 goto label26;
v6 = 23;
label26:
tableswitch(v6)
{
case 0: goto label27;
case 1: goto label28;
case 2: goto label29;
case 3: goto label30;
case 4: goto label31;
case 5: goto label32;
case 6: goto label33;
case 7: goto label34;
case 8: goto label35;
case 9: goto label36;
case 10: goto label37;
case 11: goto label38;
case 12: goto label39;
case 13: goto label40;
case 14: goto label41;
case 15: goto label42;
case 16: goto label43;
case 17: goto label44;
case 18: goto label45;
case 19: goto label46;
case 20: goto label47;
case 21: goto label48;
case 22: goto label49;
case 23: goto label50;
default: goto label01;
};
label27:
v32 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v33 = v32 instanceof java.lang.Boolean;
if v33 == 0 goto label01;
v34 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v35 = virtualinvoke v34.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setAcceptUnmaskedFrames(boolean)>(v35);
goto label01;
label28:
v36 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v37 = v36 instanceof io.vertx.core.json.JsonArray;
if v37 == 0 goto label01;
v38 = new java.util.ArrayList;
specialinvoke v38.<java.util.ArrayList: void <init>()>();
v39 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v40 = staticinvoke <io.vertx.core.http.HttpServerOptionsConverter$lambda_fromJson_0__955: java.util.function.Consumer bootstrap$(java.util.ArrayList)>(v38);
interfaceinvoke v39.<java.lang.Iterable: void forEach(java.util.function.Consumer)>(v40);
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setAlpnVersions(java.util.List)>(v38);
goto label01;
label29:
v41 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v42 = v41 instanceof java.lang.Number;
if v42 == 0 goto label01;
v43 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v44 = virtualinvoke v43.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setCompressionLevel(int)>(v44);
goto label01;
label30:
v45 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v46 = v45 instanceof java.lang.Boolean;
if v46 == 0 goto label01;
v47 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v48 = virtualinvoke v47.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setCompressionSupported(boolean)>(v48);
goto label01;
label31:
v49 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v50 = v49 instanceof java.lang.Number;
if v50 == 0 goto label01;
v51 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v52 = virtualinvoke v51.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setDecoderInitialBufferSize(int)>(v52);
goto label01;
label32:
v53 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v54 = v53 instanceof java.lang.Boolean;
if v54 == 0 goto label01;
v55 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v56 = virtualinvoke v55.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setDecompressionSupported(boolean)>(v56);
goto label01;
label33:
v57 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v58 = v57 instanceof java.lang.Boolean;
if v58 == 0 goto label01;
v59 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v60 = virtualinvoke v59.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setHandle100ContinueAutomatically(boolean)>(v60);
goto label01;
label34:
v61 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v62 = v61 instanceof java.lang.Number;
if v62 == 0 goto label01;
v63 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v64 = virtualinvoke v63.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setHttp2ConnectionWindowSize(int)>(v64);
goto label01;
label35:
v65 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v66 = v65 instanceof io.vertx.core.json.JsonObject;
if v66 == 0 goto label01;
v67 = new io.vertx.core.http.Http2Settings;
v68 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
specialinvoke v67.<io.vertx.core.http.Http2Settings: void <init>(io.vertx.core.json.JsonObject)>(v68);
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setInitialSettings(io.vertx.core.http.Http2Settings)>(v67);
goto label01;
label36:
v69 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v70 = v69 instanceof java.lang.Number;
if v70 == 0 goto label01;
v71 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v72 = virtualinvoke v71.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setMaxChunkSize(int)>(v72);
goto label01;
label37:
v73 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v74 = v73 instanceof java.lang.Number;
if v74 == 0 goto label01;
v75 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v76 = virtualinvoke v75.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setMaxFormAttributeSize(int)>(v76);
goto label01;
label38:
v77 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v78 = v77 instanceof java.lang.Number;
if v78 == 0 goto label01;
v79 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v80 = virtualinvoke v79.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setMaxHeaderSize(int)>(v80);
goto label01;
label39:
v81 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v82 = v81 instanceof java.lang.Number;
if v82 == 0 goto label01;
v83 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v84 = virtualinvoke v83.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setMaxInitialLineLength(int)>(v84);
goto label01;
label40:
v85 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v86 = v85 instanceof java.lang.Number;
if v86 == 0 goto label01;
v87 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v88 = virtualinvoke v87.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setMaxWebSocketFrameSize(int)>(v88);
goto label01;
label41:
v89 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v90 = v89 instanceof java.lang.Number;
if v90 == 0 goto label01;
v91 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v92 = virtualinvoke v91.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setMaxWebSocketMessageSize(int)>(v92);
goto label01;
label42:
v93 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v94 = v93 instanceof java.lang.Boolean;
if v94 == 0 goto label01;
v95 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v96 = virtualinvoke v95.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPerFrameWebSocketCompressionSupported(boolean)>(v96);
goto label01;
label43:
v97 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v98 = v97 instanceof java.lang.Boolean;
if v98 == 0 goto label01;
v99 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v100 = virtualinvoke v99.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPerMessageWebSocketCompressionSupported(boolean)>(v100);
goto label01;
label44:
v101 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v102 = v101 instanceof java.lang.Boolean;
if v102 == 0 goto label01;
v103 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v104 = virtualinvoke v103.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setRegisterWebSocketWriteHandlers(boolean)>(v104);
goto label01;
label45:
v105 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v106 = v105 instanceof java.lang.String;
if v106 == 0 goto label01;
v107 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v108 = staticinvoke <io.vertx.core.tracing.TracingPolicy: io.vertx.core.tracing.TracingPolicy valueOf(java.lang.String)>(v107);
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTracingPolicy(io.vertx.core.tracing.TracingPolicy)>(v108);
goto label01;
label46:
v109 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v110 = v109 instanceof java.lang.Boolean;
if v110 == 0 goto label01;
v111 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v112 = virtualinvoke v111.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setWebSocketAllowServerNoContext(boolean)>(v112);
goto label01;
label47:
v113 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v114 = v113 instanceof java.lang.Number;
if v114 == 0 goto label01;
v115 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v116 = virtualinvoke v115.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setWebSocketClosingTimeout(int)>(v116);
goto label01;
label48:
v117 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v118 = v117 instanceof java.lang.Number;
if v118 == 0 goto label01;
v119 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v120 = virtualinvoke v119.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setWebSocketCompressionLevel(int)>(v120);
goto label01;
label49:
v121 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v122 = v121 instanceof java.lang.Boolean;
if v122 == 0 goto label01;
v123 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v124 = virtualinvoke v123.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setWebSocketPreferredClientNoContext(boolean)>(v124);
goto label01;
label50:
v125 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v126 = v125 instanceof io.vertx.core.json.JsonArray;
if v126 == 0 goto label01;
v127 = new java.util.ArrayList;
specialinvoke v127.<java.util.ArrayList: void <init>()>();
v128 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v129 = staticinvoke <io.vertx.core.http.HttpServerOptionsConverter$lambda_fromJson_1__954: java.util.function.Consumer bootstrap$(java.util.ArrayList)>(v127);
interfaceinvoke v128.<java.lang.Iterable: void forEach(java.util.function.Consumer)>(v129);
virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setWebSocketSubProtocols(java.util.List)>(v127);
goto label01;
label51:
return;
}
static void toJson(io.vertx.core.http.HttpServerOptions, io.vertx.core.json.JsonObject)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.json.JsonObject v1;
java.util.Map v2;
v0 := @parameter0: io.vertx.core.http.HttpServerOptions;
v1 := @parameter1: io.vertx.core.json.JsonObject;
v2 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>();
staticinvoke <io.vertx.core.http.HttpServerOptionsConverter: void toJson(io.vertx.core.http.HttpServerOptions,java.util.Map)>(v0, v2);
return;
}
static void toJson(io.vertx.core.http.HttpServerOptions, java.util.Map)
{
io.vertx.core.http.Http2Settings v20, v21;
java.lang.Integer v13, v19, v24, v26, v28, v30, v32, v34, v47, v49, v9;
java.util.Map v1;
io.vertx.core.json.JsonObject v22;
boolean v10, v14, v16, v2, v35, v37, v39, v44, v50;
java.util.List v4, v52, v54, v6;
int v12, v18, v23, v25, v27, v29, v31, v33, v46, v48, v8;
java.lang.Boolean v11, v15, v17, v3, v36, v38, v40, v45, v51;
java.lang.String v43;
io.vertx.core.tracing.TracingPolicy v41, v42;
java.util.function.Consumer v55, v7;
io.vertx.core.json.JsonArray v5, v53;
io.vertx.core.http.HttpServerOptions v0;
v0 := @parameter0: io.vertx.core.http.HttpServerOptions;
v1 := @parameter1: java.util.Map;
v2 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: boolean isAcceptUnmaskedFrames()>();
v3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v2);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("acceptUnmaskedFrames", v3);
v4 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: java.util.List getAlpnVersions()>();
if v4 == null goto label1;
v5 = new io.vertx.core.json.JsonArray;
specialinvoke v5.<io.vertx.core.json.JsonArray: void <init>()>();
v6 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: java.util.List getAlpnVersions()>();
v7 = staticinvoke <io.vertx.core.http.HttpServerOptionsConverter$lambda_toJson_2__957: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>(v5);
interfaceinvoke v6.<java.util.List: void forEach(java.util.function.Consumer)>(v7);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("alpnVersions", v5);
label1:
v8 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: int getCompressionLevel()>();
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("compressionLevel", v9);
v10 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: boolean isCompressionSupported()>();
v11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v10);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("compressionSupported", v11);
v12 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: int getDecoderInitialBufferSize()>();
v13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v12);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("decoderInitialBufferSize", v13);
v14 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: boolean isDecompressionSupported()>();
v15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v14);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("decompressionSupported", v15);
v16 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: boolean isHandle100ContinueAutomatically()>();
v17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v16);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("handle100ContinueAutomatically", v17);
v18 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: int getHttp2ConnectionWindowSize()>();
v19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v18);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http2ConnectionWindowSize", v19);
v20 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.Http2Settings getInitialSettings()>();
if v20 == null goto label2;
v21 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.Http2Settings getInitialSettings()>();
v22 = virtualinvoke v21.<io.vertx.core.http.Http2Settings: io.vertx.core.json.JsonObject toJson()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialSettings", v22);
label2:
v23 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: int getMaxChunkSize()>();
v24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v23);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxChunkSize", v24);
v25 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: int getMaxFormAttributeSize()>();
v26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v25);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxFormAttributeSize", v26);
v27 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: int getMaxHeaderSize()>();
v28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v27);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderSize", v28);
v29 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: int getMaxInitialLineLength()>();
v30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v29);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxInitialLineLength", v30);
v31 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: int getMaxWebSocketFrameSize()>();
v32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v31);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxWebSocketFrameSize", v32);
v33 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: int getMaxWebSocketMessageSize()>();
v34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v33);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxWebSocketMessageSize", v34);
v35 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: boolean getPerFrameWebSocketCompressionSupported()>();
v36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v35);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("perFrameWebSocketCompressionSupported", v36);
v37 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: boolean getPerMessageWebSocketCompressionSupported()>();
v38 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v37);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("perMessageWebSocketCompressionSupported", v38);
v39 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: boolean isRegisterWebSocketWriteHandlers()>();
v40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v39);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("registerWebSocketWriteHandlers", v40);
v41 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.tracing.TracingPolicy getTracingPolicy()>();
if v41 == null goto label3;
v42 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.tracing.TracingPolicy getTracingPolicy()>();
v43 = virtualinvoke v42.<io.vertx.core.tracing.TracingPolicy: java.lang.String name()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tracingPolicy", v43);
label3:
v44 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: boolean getWebSocketAllowServerNoContext()>();
v45 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v44);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("webSocketAllowServerNoContext", v45);
v46 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: int getWebSocketClosingTimeout()>();
v47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v46);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("webSocketClosingTimeout", v47);
v48 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: int getWebSocketCompressionLevel()>();
v49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v48);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("webSocketCompressionLevel", v49);
v50 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: boolean getWebSocketPreferredClientNoContext()>();
v51 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v50);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("webSocketPreferredClientNoContext", v51);
v52 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: java.util.List getWebSocketSubProtocols()>();
if v52 == null goto label4;
v53 = new io.vertx.core.json.JsonArray;
specialinvoke v53.<io.vertx.core.json.JsonArray: void <init>()>();
v54 = virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: java.util.List getWebSocketSubProtocols()>();
v55 = staticinvoke <io.vertx.core.http.HttpServerOptionsConverter$lambda_toJson_3__956: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>(v53);
interfaceinvoke v54.<java.util.List: void forEach(java.util.function.Consumer)>(v55);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("webSocketSubProtocols", v53);
label4:
return;
}
static void <clinit>()
{
java.util.Base64$Encoder v1;
java.util.Base64$Decoder v0;
v0 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Decoder BASE64_DECODER>;
<io.vertx.core.http.HttpServerOptionsConverter: java.util.Base64$Decoder BASE64_DECODER> = v0;
v1 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Encoder BASE64_ENCODER>;
<io.vertx.core.http.HttpServerOptionsConverter: java.util.Base64$Encoder BASE64_ENCODER> = v1;
return;
}
}