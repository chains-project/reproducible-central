public final enum class io.vertx.core.http.HttpVersion extends java.lang.Enum
{
public static final enum io.vertx.core.http.HttpVersion HTTP_1_0;
public static final enum io.vertx.core.http.HttpVersion HTTP_1_1;
public static final enum io.vertx.core.http.HttpVersion HTTP_2;
private final java.lang.String alpnName;
private static final io.vertx.core.http.HttpVersion[] $VALUES;
public static io.vertx.core.http.HttpVersion[] values()
{
java.lang.Object v1;
io.vertx.core.http.HttpVersion[] v0;
v0 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static io.vertx.core.http.HttpVersion valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/vertx/core/http/HttpVersion;", v0);
return v1;
}
private void <init>(java.lang.String, int, java.lang.String)
{
io.vertx.core.http.HttpVersion v0;
int v2;
java.lang.String v1, v3;
v0 := @this: io.vertx.core.http.HttpVersion;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
v0.<io.vertx.core.http.HttpVersion: java.lang.String alpnName> = v3;
return;
}
public java.lang.String alpnName()
{
java.lang.String v1;
io.vertx.core.http.HttpVersion v0;
v0 := @this: io.vertx.core.http.HttpVersion;
v1 = v0.<io.vertx.core.http.HttpVersion: java.lang.String alpnName>;
return v1;
}
private static io.vertx.core.http.HttpVersion[] $values()
{
io.vertx.core.http.HttpVersion v1, v2, v3;
io.vertx.core.http.HttpVersion[] v0;
v0 = newarray (io.vertx.core.http.HttpVersion)[3];
v1 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_1_0>;
v0[0] = v1;
v2 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_1_1>;
v0[1] = v2;
v3 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_2>;
v0[2] = v3;
return v0;
}
static void <clinit>()
{
io.vertx.core.http.HttpVersion v0, v1, v2;
io.vertx.core.http.HttpVersion[] v3;
v0 = new io.vertx.core.http.HttpVersion;
specialinvoke v0.<io.vertx.core.http.HttpVersion: void <init>(java.lang.String,int,java.lang.String)>("HTTP_1_0", 0, "http/1.0");
<io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_1_0> = v0;
v1 = new io.vertx.core.http.HttpVersion;
specialinvoke v1.<io.vertx.core.http.HttpVersion: void <init>(java.lang.String,int,java.lang.String)>("HTTP_1_1", 1, "http/1.1");
<io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_1_1> = v1;
v2 = new io.vertx.core.http.HttpVersion;
specialinvoke v2.<io.vertx.core.http.HttpVersion: void <init>(java.lang.String,int,java.lang.String)>("HTTP_2", 2, "h2");
<io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_2> = v2;
v3 = staticinvoke <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] $values()>();
<io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] $VALUES> = v3;
return;
}
}