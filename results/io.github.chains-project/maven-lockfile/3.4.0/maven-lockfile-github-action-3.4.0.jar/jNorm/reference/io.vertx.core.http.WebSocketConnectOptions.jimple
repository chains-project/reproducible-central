public class io.vertx.core.http.WebSocketConnectOptions extends io.vertx.core.http.RequestOptions
{
public static final io.vertx.core.net.ProxyOptions DEFAULT_PROXY_OPTIONS;
public static final io.vertx.core.http.WebsocketVersion DEFAULT_VERSION;
public static final java.util.List DEFAULT_SUB_PROTOCOLS;
public static final boolean DEFAULT_ALLOW_ORIGIN_HEADER;
public static final boolean DEFAULT_REGISTER_WRITE_HANDLERS;
private io.vertx.core.net.ProxyOptions proxyOptions;
private io.vertx.core.http.WebsocketVersion version;
private java.util.List subProtocols;
private boolean allowOriginHeader;
private boolean registerWriteHandlers;
public void <init>()
{
io.vertx.core.net.ProxyOptions v1;
java.util.List v3;
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.WebsocketVersion v2;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
specialinvoke v0.<io.vertx.core.http.RequestOptions: void <init>()>();
v1 = <io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.net.ProxyOptions DEFAULT_PROXY_OPTIONS>;
v0.<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.net.ProxyOptions proxyOptions> = v1;
v2 = <io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.http.WebsocketVersion DEFAULT_VERSION>;
v0.<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.http.WebsocketVersion version> = v2;
v3 = <io.vertx.core.http.WebSocketConnectOptions: java.util.List DEFAULT_SUB_PROTOCOLS>;
v0.<io.vertx.core.http.WebSocketConnectOptions: java.util.List subProtocols> = v3;
v0.<io.vertx.core.http.WebSocketConnectOptions: boolean allowOriginHeader> = 1;
v0.<io.vertx.core.http.WebSocketConnectOptions: boolean registerWriteHandlers> = 0;
return;
}
public void <init>(io.vertx.core.http.WebSocketConnectOptions)
{
io.vertx.core.net.ProxyOptions v2, v3, v4;
io.vertx.core.http.WebsocketVersion v5;
java.util.List v6;
io.vertx.core.http.WebSocketConnectOptions v0, v1;
boolean v7, v8;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: io.vertx.core.http.WebSocketConnectOptions;
specialinvoke v0.<io.vertx.core.http.RequestOptions: void <init>(io.vertx.core.http.RequestOptions)>(v1);
v2 = v1.<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.net.ProxyOptions proxyOptions>;
if v2 == null goto label1;
v3 = new io.vertx.core.net.ProxyOptions;
v4 = v1.<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.net.ProxyOptions proxyOptions>;
specialinvoke v3.<io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.net.ProxyOptions)>(v4);
goto label2;
label1:
v3 = null;
label2:
v0.<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.net.ProxyOptions proxyOptions> = v3;
v5 = v1.<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.http.WebsocketVersion version>;
v0.<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.http.WebsocketVersion version> = v5;
v6 = v1.<io.vertx.core.http.WebSocketConnectOptions: java.util.List subProtocols>;
v0.<io.vertx.core.http.WebSocketConnectOptions: java.util.List subProtocols> = v6;
v7 = v1.<io.vertx.core.http.WebSocketConnectOptions: boolean allowOriginHeader>;
v0.<io.vertx.core.http.WebSocketConnectOptions: boolean allowOriginHeader> = v7;
v8 = v1.<io.vertx.core.http.WebSocketConnectOptions: boolean registerWriteHandlers>;
v0.<io.vertx.core.http.WebSocketConnectOptions: boolean registerWriteHandlers> = v8;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.json.JsonObject v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.http.RequestOptions: void <init>(io.vertx.core.json.JsonObject)>(v1);
staticinvoke <io.vertx.core.http.WebSocketConnectOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.http.WebSocketConnectOptions)>(v1, v0);
return;
}
public io.vertx.core.http.WebsocketVersion getVersion()
{
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.WebsocketVersion v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 = v0.<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.http.WebsocketVersion version>;
return v1;
}
public io.vertx.core.http.WebSocketConnectOptions setVersion(io.vertx.core.http.WebsocketVersion)
{
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.WebsocketVersion v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: io.vertx.core.http.WebsocketVersion;
v0.<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.http.WebsocketVersion version> = v1;
return v0;
}
public java.util.List getSubProtocols()
{
io.vertx.core.http.WebSocketConnectOptions v0;
java.util.List v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 = v0.<io.vertx.core.http.WebSocketConnectOptions: java.util.List subProtocols>;
return v1;
}
public io.vertx.core.http.WebSocketConnectOptions setSubProtocols(java.util.List)
{
io.vertx.core.http.WebSocketConnectOptions v0;
java.util.List v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: java.util.List;
v0.<io.vertx.core.http.WebSocketConnectOptions: java.util.List subProtocols> = v1;
return v0;
}
public io.vertx.core.http.WebSocketConnectOptions addSubProtocol(java.lang.String)
{
java.util.List v2, v4;
io.vertx.core.http.WebSocketConnectOptions v0;
java.lang.String v1;
java.util.ArrayList v3;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.WebSocketConnectOptions: java.util.List subProtocols>;
if v2 != null goto label1;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.http.WebSocketConnectOptions: java.util.List subProtocols> = v3;
label1:
v4 = v0.<io.vertx.core.http.WebSocketConnectOptions: java.util.List subProtocols>;
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public io.vertx.core.net.ProxyOptions getProxyOptions()
{
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.net.ProxyOptions v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 = v0.<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.net.ProxyOptions proxyOptions>;
return v1;
}
public io.vertx.core.http.RequestOptions setProxyOptions(io.vertx.core.net.ProxyOptions)
{
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.net.ProxyOptions v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: io.vertx.core.net.ProxyOptions;
v0.<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.net.ProxyOptions proxyOptions> = v1;
return v0;
}
public boolean getAllowOriginHeader()
{
io.vertx.core.http.WebSocketConnectOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 = v0.<io.vertx.core.http.WebSocketConnectOptions: boolean allowOriginHeader>;
return v1;
}
public io.vertx.core.http.WebSocketConnectOptions setAllowOriginHeader(boolean)
{
io.vertx.core.http.WebSocketConnectOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.WebSocketConnectOptions: boolean allowOriginHeader> = v1;
return v0;
}
public io.vertx.core.http.WebSocketConnectOptions setHost(java.lang.String)
{
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.RequestOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setHost(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.http.WebSocketConnectOptions setPort(java.lang.Integer)
{
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.RequestOptions v2;
java.lang.Integer v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: java.lang.Integer;
v2 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setPort(java.lang.Integer)>(v1);
return v2;
}
public io.vertx.core.http.WebSocketConnectOptions setSsl(java.lang.Boolean)
{
io.vertx.core.http.WebSocketConnectOptions v0;
java.lang.Boolean v1;
io.vertx.core.http.RequestOptions v2;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: java.lang.Boolean;
v2 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setSsl(java.lang.Boolean)>(v1);
return v2;
}
public io.vertx.core.http.WebSocketConnectOptions setURI(java.lang.String)
{
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.RequestOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setURI(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.http.WebSocketConnectOptions setTimeout(long)
{
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.RequestOptions v2;
long v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: long;
v2 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setTimeout(long)>(v1);
return v2;
}
public io.vertx.core.http.WebSocketConnectOptions addHeader(java.lang.String, java.lang.String)
{
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.RequestOptions v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions addHeader(java.lang.String,java.lang.String)>(v1, v2);
return v3;
}
public io.vertx.core.http.WebSocketConnectOptions addHeader(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.RequestOptions v3;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions addHeader(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v3;
}
public io.vertx.core.http.WebSocketConnectOptions addHeader(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.CharSequence v1;
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.RequestOptions v3;
java.lang.Iterable v2;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions addHeader(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
return v3;
}
public io.vertx.core.http.WebSocketConnectOptions putHeader(java.lang.String, java.lang.String)
{
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.RequestOptions v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions putHeader(java.lang.String,java.lang.String)>(v1, v2);
return v3;
}
public io.vertx.core.http.WebSocketConnectOptions putHeader(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.RequestOptions v3;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions putHeader(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v3;
}
public io.vertx.core.http.WebSocketConnectOptions putHeader(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.CharSequence v1;
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.RequestOptions v3;
java.lang.Iterable v2;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions putHeader(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
return v3;
}
public io.vertx.core.http.WebSocketConnectOptions setHeaders(io.vertx.core.MultiMap)
{
io.vertx.core.MultiMap v1;
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.http.RequestOptions v2;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setHeaders(io.vertx.core.MultiMap)>(v1);
return v2;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.http.WebSocketConnectOptions v0;
io.vertx.core.json.JsonObject v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 = specialinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.json.JsonObject toJson()>();
staticinvoke <io.vertx.core.http.WebSocketConnectOptionsConverter: void toJson(io.vertx.core.http.WebSocketConnectOptions,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
public boolean isRegisterWriteHandlers()
{
io.vertx.core.http.WebSocketConnectOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 = v0.<io.vertx.core.http.WebSocketConnectOptions: boolean registerWriteHandlers>;
return v1;
}
public io.vertx.core.http.WebSocketConnectOptions setRegisterWriteHandlers(boolean)
{
io.vertx.core.http.WebSocketConnectOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.WebSocketConnectOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.WebSocketConnectOptions: boolean registerWriteHandlers> = v1;
return v0;
}
static void <clinit>()
{
io.vertx.core.http.WebsocketVersion v0;
<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.net.ProxyOptions DEFAULT_PROXY_OPTIONS> = null;
v0 = <io.vertx.core.http.WebsocketVersion: io.vertx.core.http.WebsocketVersion V13>;
<io.vertx.core.http.WebSocketConnectOptions: io.vertx.core.http.WebsocketVersion DEFAULT_VERSION> = v0;
<io.vertx.core.http.WebSocketConnectOptions: java.util.List DEFAULT_SUB_PROTOCOLS> = null;
return;
}
}