abstract class io.vertx.core.http.impl.ClientHttpEndpointBase extends io.vertx.core.net.impl.pool.Endpoint
{
private final io.vertx.core.spi.metrics.ClientMetrics metrics;
void <init>(io.vertx.core.spi.metrics.ClientMetrics, java.lang.Runnable)
{
io.vertx.core.spi.metrics.ClientMetrics v1;
java.lang.Runnable v2;
io.vertx.core.http.impl.ClientHttpEndpointBase v0;
v0 := @this: io.vertx.core.http.impl.ClientHttpEndpointBase;
v1 := @parameter0: io.vertx.core.spi.metrics.ClientMetrics;
v2 := @parameter1: java.lang.Runnable;
specialinvoke v0.<io.vertx.core.net.impl.pool.Endpoint: void <init>(java.lang.Runnable)>(v2);
v0.<io.vertx.core.http.impl.ClientHttpEndpointBase: io.vertx.core.spi.metrics.ClientMetrics metrics> = v1;
return;
}
public final void requestConnection(io.vertx.core.impl.ContextInternal, long, io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v1;
long v2;
io.vertx.core.http.impl.ClientHttpEndpointBase v0;
io.vertx.core.spi.metrics.ClientMetrics v4, v5, v6;
java.lang.Object v7;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.impl.ClientHttpEndpointBase;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
v2 := @parameter1: long;
v3 := @parameter2: io.vertx.core.Handler;
v4 = v0.<io.vertx.core.http.impl.ClientHttpEndpointBase: io.vertx.core.spi.metrics.ClientMetrics metrics>;
if v4 == null goto label3;
v5 = v0.<io.vertx.core.http.impl.ClientHttpEndpointBase: io.vertx.core.spi.metrics.ClientMetrics metrics>;
if v5 == null goto label1;
v6 = v0.<io.vertx.core.http.impl.ClientHttpEndpointBase: io.vertx.core.spi.metrics.ClientMetrics metrics>;
v7 = interfaceinvoke v6.<io.vertx.core.spi.metrics.ClientMetrics: java.lang.Object enqueueRequest()>();
goto label2;
label1:
v7 = null;
label2:
v3 = staticinvoke <io.vertx.core.http.impl.ClientHttpEndpointBase$lambda_requestConnection_0__1163: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.ClientHttpEndpointBase,java.lang.Object,io.vertx.core.Handler)>(v0, v7, v3);
label3:
virtualinvoke v0.<io.vertx.core.http.impl.ClientHttpEndpointBase: void requestConnection2(io.vertx.core.impl.ContextInternal,long,io.vertx.core.Handler)>(v1, v2, v3);
return;
}
protected abstract void requestConnection2(io.vertx.core.impl.ContextInternal, long, io.vertx.core.Handler);
abstract void checkExpired();
protected void dispose()
{
io.vertx.core.spi.metrics.ClientMetrics v1, v2;
io.vertx.core.http.impl.ClientHttpEndpointBase v0;
v0 := @this: io.vertx.core.http.impl.ClientHttpEndpointBase;
v1 = v0.<io.vertx.core.http.impl.ClientHttpEndpointBase: io.vertx.core.spi.metrics.ClientMetrics metrics>;
if v1 == null goto label1;
v2 = v0.<io.vertx.core.http.impl.ClientHttpEndpointBase: io.vertx.core.spi.metrics.ClientMetrics metrics>;
interfaceinvoke v2.<io.vertx.core.spi.metrics.ClientMetrics: void close()>();
label1:
return;
}
}