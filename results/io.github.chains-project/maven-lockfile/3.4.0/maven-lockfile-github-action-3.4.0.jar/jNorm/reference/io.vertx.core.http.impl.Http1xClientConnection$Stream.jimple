abstract class io.vertx.core.http.impl.Http1xClientConnection$Stream extends java.lang.Object
{
protected final io.vertx.core.Promise promise;
protected final io.vertx.core.impl.ContextInternal context;
protected final int id;
private java.lang.Object trace;
private java.lang.Object metric;
private io.vertx.core.http.impl.HttpResponseHead response;
private boolean responseEnded;
private long bytesRead;
private long bytesWritten;
void <init>(io.vertx.core.impl.ContextInternal, int)
{
io.vertx.core.impl.future.PromiseInternal v3;
int v2;
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.http.impl.Http1xClientConnection$Stream v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$Stream;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.Http1xClientConnection$Stream: io.vertx.core.impl.ContextInternal context> = v1;
v0.<io.vertx.core.http.impl.Http1xClientConnection$Stream: int id> = v2;
v3 = interfaceinvoke v1.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v0.<io.vertx.core.http.impl.Http1xClientConnection$Stream: io.vertx.core.Promise promise> = v3;
return;
}
java.lang.Object metric()
{
java.lang.Object v1;
io.vertx.core.http.impl.Http1xClientConnection$Stream v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$Stream;
v1 = v0.<io.vertx.core.http.impl.Http1xClientConnection$Stream: java.lang.Object metric>;
return v1;
}
java.lang.Object trace()
{
java.lang.Object v1;
io.vertx.core.http.impl.Http1xClientConnection$Stream v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$Stream;
v1 = v0.<io.vertx.core.http.impl.Http1xClientConnection$Stream: java.lang.Object trace>;
return v1;
}
abstract void handleContinue();
abstract void handleEarlyHints(io.vertx.core.MultiMap);
abstract void handleHead(io.vertx.core.http.impl.HttpResponseHead);
abstract void handleChunk(io.vertx.core.buffer.Buffer);
abstract void handleEnd(io.netty.handler.codec.http.LastHttpContent);
abstract void handleWritabilityChanged(boolean);
abstract void handleException(java.lang.Throwable);
abstract void handleClosed();
}