public class io.vertx.core.http.impl.Http1xServerResponse extends java.lang.Object implements io.vertx.core.http.HttpServerResponse, io.vertx.core.spi.observability.HttpResponse
{
private static final io.vertx.core.buffer.Buffer EMPTY_BUFFER;
private static final io.vertx.core.impl.logging.Logger log;
private static final java.lang.String RESPONSE_WRITTEN;
private final io.vertx.core.impl.VertxInternal vertx;
private final io.netty.handler.codec.http.HttpRequest request;
private final io.vertx.core.http.impl.Http1xServerConnection conn;
private final io.vertx.core.impl.ContextInternal context;
private io.netty.handler.codec.http.HttpResponseStatus status;
private final io.netty.handler.codec.http.HttpVersion version;
private final boolean keepAlive;
private final boolean head;
private final java.lang.Object requestMetric;
private boolean headWritten;
private boolean written;
private io.vertx.core.Handler drainHandler;
private io.vertx.core.Handler exceptionHandler;
private io.vertx.core.Handler closeHandler;
private io.vertx.core.Handler endHandler;
private io.vertx.core.Handler headersEndHandler;
private io.vertx.core.Handler bodyEndHandler;
private boolean writable;
private boolean closed;
private final io.vertx.core.http.impl.headers.HeadersMultiMap headers;
private io.vertx.core.http.impl.CookieJar cookies;
private io.vertx.core.MultiMap trailers;
private io.netty.handler.codec.http.HttpHeaders trailingHeaders;
private java.lang.String statusMessage;
private long bytesWritten;
private io.vertx.core.Future netSocket;
void <init>(io.vertx.core.impl.VertxInternal, io.vertx.core.impl.ContextInternal, io.vertx.core.http.impl.Http1xServerConnection, io.netty.handler.codec.http.HttpRequest, java.lang.Object, boolean)
{
io.netty.handler.codec.http.HttpVersion v11, v12, v17, v18, v8;
io.netty.handler.codec.http.HttpHeaders v13, v19;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v9;
io.vertx.core.http.impl.Http1xServerResponse v0;
boolean v16, v22, v23, v26, v6;
io.netty.handler.codec.http.HttpRequest v4;
io.vertx.core.impl.VertxInternal v1;
java.lang.CharSequence v14, v15, v20, v21;
io.netty.handler.codec.http.HttpMethod v24, v25;
io.netty.handler.codec.http.HttpResponseStatus v10;
io.vertx.core.http.impl.Http1xServerConnection v3;
io.netty.handler.codec.http.EmptyHttpHeaders v7;
java.lang.Object v5;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.impl.VertxInternal;
v2 := @parameter1: io.vertx.core.impl.ContextInternal;
v3 := @parameter2: io.vertx.core.http.impl.Http1xServerConnection;
v4 := @parameter3: io.netty.handler.codec.http.HttpRequest;
v5 := @parameter4: java.lang.Object;
v6 := @parameter5: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v7 = <io.netty.handler.codec.http.EmptyHttpHeaders: io.netty.handler.codec.http.EmptyHttpHeaders INSTANCE>;
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpHeaders trailingHeaders> = v7;
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.VertxInternal vertx> = v1;
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn> = v3;
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context> = v2;
v8 = interfaceinvoke v4.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpVersion protocolVersion()>();
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpVersion version> = v8;
v9 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap httpHeaders()>();
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers> = v9;
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpRequest request> = v4;
v10 = <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus OK>;
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status> = v10;
v0.<io.vertx.core.http.impl.Http1xServerResponse: java.lang.Object requestMetric> = v5;
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean writable> = v6;
v11 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpVersion version>;
v12 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
if v11 != v12 goto label1;
v13 = interfaceinvoke v4.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v14 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONNECTION>;
v15 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CLOSE>;
v16 = virtualinvoke v13.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v14, v15, 1);
if v16 == 0 goto label2;
label1:
v17 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpVersion version>;
v18 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_0>;
if v17 != v18 goto label3;
v19 = interfaceinvoke v4.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v20 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONNECTION>;
v21 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence KEEP_ALIVE>;
v22 = virtualinvoke v19.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v20, v21, 1);
if v22 == 0 goto label3;
label2:
v23 = 1;
goto label4;
label3:
v23 = 0;
label4:
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean keepAlive> = v23;
v24 = interfaceinvoke v4.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpMethod method()>();
v25 = <io.netty.handler.codec.http.HttpMethod: io.netty.handler.codec.http.HttpMethod HEAD>;
if v24 != v25 goto label5;
v26 = 1;
goto label6;
label5:
v26 = 0;
label6:
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean head> = v26;
return;
}
public io.vertx.core.MultiMap headers()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.http.impl.headers.HeadersMultiMap v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
return v1;
}
public io.vertx.core.MultiMap trailers()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.MultiMap v1, v3;
io.vertx.core.http.impl.headers.HeadersMultiMap v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.MultiMap trailers>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap httpHeaders()>();
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.MultiMap trailers> = v2;
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpHeaders trailingHeaders> = v2;
label1:
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.MultiMap trailers>;
return v3;
}
public int statusCode()
{
int v2;
io.vertx.core.http.impl.Http1xServerResponse v0;
io.netty.handler.codec.http.HttpResponseStatus v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http.HttpResponseStatus: int code()>();
return v2;
}
public int getStatusCode()
{
int v2;
io.vertx.core.http.impl.Http1xServerResponse v0;
io.netty.handler.codec.http.HttpResponseStatus v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http.HttpResponseStatus: int code()>();
return v2;
}
public io.vertx.core.http.HttpServerResponse setStatusCode(int)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v6;
int v1;
io.netty.handler.codec.http.HttpResponseStatus v4;
io.vertx.core.http.impl.Http1xServerConnection v2;
java.lang.String v3, v5;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkHeadWritten()>();
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: java.lang.String statusMessage>;
if v3 == null goto label2;
v4 = new io.netty.handler.codec.http.HttpResponseStatus;
v5 = v0.<io.vertx.core.http.impl.Http1xServerResponse: java.lang.String statusMessage>;
specialinvoke v4.<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String)>(v1, v5);
goto label3;
label2:
v4 = staticinvoke <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus valueOf(int)>(v1);
label3:
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status> = v4;
exitmonitor v2;
label4:
goto label6;
label5:
v6 := @caughtexception;
exitmonitor v2;
throw v6;
label6:
return v0;
catch java.lang.Throwable from label1 to label4 with label5;
}
public java.lang.String getStatusMessage()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.netty.handler.codec.http.HttpResponseStatus v1;
java.lang.String v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String reasonPhrase()>();
return v2;
}
public io.vertx.core.http.HttpServerResponse setStatusMessage(java.lang.String)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v6;
int v5;
io.netty.handler.codec.http.HttpResponseStatus v3, v4;
io.vertx.core.http.impl.Http1xServerConnection v2;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkHeadWritten()>();
v0.<io.vertx.core.http.impl.Http1xServerResponse: java.lang.String statusMessage> = v1;
v3 = new io.netty.handler.codec.http.HttpResponseStatus;
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status>;
v5 = virtualinvoke v4.<io.netty.handler.codec.http.HttpResponseStatus: int code()>();
specialinvoke v3.<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String)>(v5, v1);
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status> = v3;
exitmonitor v2;
label2:
return v0;
label3:
v6 := @caughtexception;
exitmonitor v2;
throw v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.impl.Http1xServerResponse setChunked(boolean)
{
java.lang.Throwable v8;
io.netty.handler.codec.http.HttpVersion v3, v4;
java.lang.CharSequence v6;
io.vertx.core.http.impl.Http1xServerConnection v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v5;
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.String v7;
boolean v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkHeadWritten()>();
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpVersion version>;
v4 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_0>;
if v3 == v4 goto label4;
v5 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v6 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence TRANSFER_ENCODING>;
if v1 == 0 goto label2;
v7 = "chunked";
goto label3;
label2:
v7 = null;
label3:
virtualinvoke v5.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v6, v7);
label4:
exitmonitor v2;
label5:
return v0;
label6:
v8 := @caughtexception;
exitmonitor v2;
throw v8;
catch java.lang.Throwable from label1 to label5 with label6;
}
public boolean isChunked()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v6;
java.lang.CharSequence v3, v4;
io.vertx.core.http.impl.Http1xServerConnection v1;
boolean v5;
io.vertx.core.http.impl.headers.HeadersMultiMap v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v3 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence TRANSFER_ENCODING>;
v4 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CHUNKED>;
v5 = virtualinvoke v2.<io.vertx.core.http.impl.headers.HeadersMultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v3, v4, 1);
exitmonitor v1;
label2:
return v5;
label3:
v6 := @caughtexception;
exitmonitor v1;
throw v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.impl.Http1xServerResponse putHeader(java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v5;
io.vertx.core.http.impl.Http1xServerConnection v3;
java.lang.String v1, v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v4;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkHeadWritten()>();
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
virtualinvoke v4.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.String,java.lang.String)>(v1, v2);
exitmonitor v3;
label2:
return v0;
label3:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.impl.Http1xServerResponse putHeader(java.lang.String, java.lang.Iterable)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v5;
io.vertx.core.http.impl.Http1xServerConnection v3;
java.lang.String v1;
java.lang.Iterable v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v4;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkHeadWritten()>();
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
virtualinvoke v4.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.String,java.lang.Iterable)>(v1, v2);
exitmonitor v3;
label2:
return v0;
label3:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.impl.Http1xServerResponse putTrailer(java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v5;
io.vertx.core.MultiMap v4;
io.vertx.core.http.impl.Http1xServerConnection v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkValid()>();
v4 = virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.MultiMap trailers()>();
interfaceinvoke v4.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.String,java.lang.String)>(v1, v2);
exitmonitor v3;
label2:
return v0;
label3:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.impl.Http1xServerResponse putTrailer(java.lang.String, java.lang.Iterable)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v5;
io.vertx.core.MultiMap v4;
io.vertx.core.http.impl.Http1xServerConnection v3;
java.lang.String v1;
java.lang.Iterable v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkValid()>();
v4 = virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.MultiMap trailers()>();
interfaceinvoke v4.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.String,java.lang.Iterable)>(v1, v2);
exitmonitor v3;
label2:
return v0;
label3:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.HttpServerResponse putHeader(java.lang.CharSequence, java.lang.CharSequence)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v5;
java.lang.CharSequence v1, v2;
io.vertx.core.http.impl.Http1xServerConnection v3;
io.vertx.core.http.impl.headers.HeadersMultiMap v4;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkHeadWritten()>();
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
virtualinvoke v4.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
exitmonitor v3;
label2:
return v0;
label3:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.HttpServerResponse putHeader(java.lang.CharSequence, java.lang.Iterable)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v5;
java.lang.CharSequence v1;
io.vertx.core.http.impl.Http1xServerConnection v3;
java.lang.Iterable v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v4;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkHeadWritten()>();
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
virtualinvoke v4.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
exitmonitor v3;
label2:
return v0;
label3:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.HttpServerResponse putTrailer(java.lang.CharSequence, java.lang.CharSequence)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v5;
java.lang.CharSequence v1, v2;
io.vertx.core.MultiMap v4;
io.vertx.core.http.impl.Http1xServerConnection v3;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkValid()>();
v4 = virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.MultiMap trailers()>();
interfaceinvoke v4.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
exitmonitor v3;
label2:
return v0;
label3:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.HttpServerResponse putTrailer(java.lang.CharSequence, java.lang.Iterable)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v5;
java.lang.CharSequence v1;
io.vertx.core.MultiMap v4;
io.vertx.core.http.impl.Http1xServerConnection v3;
java.lang.Iterable v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkValid()>();
v4 = virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.MultiMap trailers()>();
interfaceinvoke v4.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
exitmonitor v3;
label2:
return v0;
label3:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.HttpServerResponse setWriteQueueMaxSize(int)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v4;
int v1;
io.vertx.core.http.impl.Http1xServerConnection v2, v3;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkValid()>();
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
virtualinvoke v3.<io.vertx.core.http.impl.Http1xServerConnection: void doSetWriteQueueMaxSize(int)>(v1);
exitmonitor v2;
label2:
return v0;
label3:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
catch java.lang.Throwable from label1 to label2 with label3;
}
public boolean writeQueueFull()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v4;
io.vertx.core.http.impl.Http1xServerConnection v1;
boolean v2, v3;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v1;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkValid()>();
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean writable>;
if v2 != 0 goto label2;
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
exitmonitor v1;
label4:
return v3;
label5:
v4 := @caughtexception;
exitmonitor v1;
throw v4;
catch java.lang.Throwable from label1 to label4 with label5;
}
public io.vertx.core.http.HttpServerResponse drainHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v3;
io.vertx.core.http.impl.Http1xServerConnection v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
if v1 == null goto label2;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkValid()>();
label2:
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler drainHandler> = v1;
exitmonitor v2;
label3:
return v0;
label4:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
catch java.lang.Throwable from label1 to label3 with label4;
}
public io.vertx.core.http.HttpServerResponse exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v3;
io.vertx.core.http.impl.Http1xServerConnection v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
if v1 == null goto label2;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkValid()>();
label2:
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler exceptionHandler> = v1;
exitmonitor v2;
label3:
return v0;
label4:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
catch java.lang.Throwable from label1 to label3 with label4;
}
public io.vertx.core.http.HttpServerResponse closeHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v3;
io.vertx.core.http.impl.Http1xServerConnection v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
if v1 == null goto label2;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkValid()>();
label2:
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler closeHandler> = v1;
exitmonitor v2;
label3:
return v0;
label4:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
catch java.lang.Throwable from label1 to label3 with label4;
}
public io.vertx.core.http.HttpServerResponse endHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v3;
io.vertx.core.http.impl.Http1xServerConnection v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
if v1 == null goto label2;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkValid()>();
label2:
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler endHandler> = v1;
exitmonitor v2;
label3:
return v0;
label4:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
catch java.lang.Throwable from label1 to label3 with label4;
}
public io.vertx.core.Future write(io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.impl.future.PromiseInternal v3;
io.netty.buffer.ByteBuf v4;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v4 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerResponse write(io.netty.buffer.ByteBuf,io.vertx.core.impl.future.PromiseInternal)>(v4, v3);
v5 = interfaceinvoke v3.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
return v5;
}
public void write(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.impl.future.PromiseInternal v4;
io.netty.buffer.ByteBuf v3;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.impl.ContextInternal v5;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
if v2 != null goto label1;
v4 = null;
goto label2;
label1:
v5 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v4 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise(io.vertx.core.Handler)>(v2);
label2:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerResponse write(io.netty.buffer.ByteBuf,io.vertx.core.impl.future.PromiseInternal)>(v3, v4);
return;
}
public io.vertx.core.Future write(java.lang.String, java.lang.String)
{
io.vertx.core.impl.future.PromiseInternal v4;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.Future v7;
io.vertx.core.http.impl.Http1xServerResponse v0;
io.netty.buffer.ByteBuf v6;
io.vertx.core.buffer.Buffer v5;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v4 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v5 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String,java.lang.String)>(v1, v2);
v6 = interfaceinvoke v5.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerResponse write(io.netty.buffer.ByteBuf,io.vertx.core.impl.future.PromiseInternal)>(v6, v4);
v7 = interfaceinvoke v4.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
return v7;
}
public void write(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.impl.future.PromiseInternal v6;
io.vertx.core.impl.ContextInternal v7;
io.vertx.core.http.impl.Http1xServerResponse v0;
io.netty.buffer.ByteBuf v5;
io.vertx.core.buffer.Buffer v4;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String,java.lang.String)>(v1, v2);
v5 = interfaceinvoke v4.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
if v3 != null goto label1;
v6 = null;
goto label2;
label1:
v7 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v6 = interfaceinvoke v7.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise(io.vertx.core.Handler)>(v3);
label2:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerResponse write(io.netty.buffer.ByteBuf,io.vertx.core.impl.future.PromiseInternal)>(v5, v6);
return;
}
public io.vertx.core.Future write(java.lang.String)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.impl.future.PromiseInternal v3;
io.netty.buffer.ByteBuf v5;
io.vertx.core.buffer.Buffer v4;
io.vertx.core.impl.ContextInternal v2;
java.lang.String v1;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v4 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String)>(v1);
v5 = interfaceinvoke v4.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerResponse write(io.netty.buffer.ByteBuf,io.vertx.core.impl.future.PromiseInternal)>(v5, v3);
v6 = interfaceinvoke v3.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
return v6;
}
public void write(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.impl.future.PromiseInternal v5;
io.netty.buffer.ByteBuf v4;
io.vertx.core.buffer.Buffer v3;
io.vertx.core.impl.ContextInternal v6;
java.lang.String v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String)>(v1);
v4 = interfaceinvoke v3.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
if v2 != null goto label1;
v5 = null;
goto label2;
label1:
v6 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v5 = interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise(io.vertx.core.Handler)>(v2);
label2:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerResponse write(io.netty.buffer.ByteBuf,io.vertx.core.impl.future.PromiseInternal)>(v4, v5);
return;
}
public io.vertx.core.http.HttpServerResponse writeContinue()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.http.impl.Http1xServerConnection v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
virtualinvoke v1.<io.vertx.core.http.impl.Http1xServerConnection: void write100Continue()>();
return v0;
}
public io.vertx.core.Future writeEarlyHints(io.vertx.core.MultiMap)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.MultiMap v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void writeEarlyHints(io.vertx.core.MultiMap,io.vertx.core.Handler)>(v1, v3);
v4 = interfaceinvoke v3.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
return v4;
}
public void writeEarlyHints(io.vertx.core.MultiMap, io.vertx.core.Handler)
{
java.lang.Throwable v5;
io.vertx.core.impl.future.PromiseInternal v8;
io.vertx.core.MultiMap v1;
io.vertx.core.impl.ContextInternal v7;
io.vertx.core.http.impl.Http1xServerConnection v4, v6;
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.Handler v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v1 instanceof io.vertx.core.http.impl.headers.HeadersMultiMap;
if v3 != 0 goto label1;
v1 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap httpHeaders()>();
virtualinvoke v1.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.MultiMap addAll(io.vertx.core.MultiMap)>(v1);
label1:
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v4;
label2:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkHeadWritten()>();
exitmonitor v4;
label3:
goto label5;
label4:
v5 := @caughtexception;
exitmonitor v4;
throw v5;
label5:
v6 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
v7 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v8 = interfaceinvoke v7.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise(io.vertx.core.Handler)>(v2);
virtualinvoke v6.<io.vertx.core.http.impl.Http1xServerConnection: void write103EarlyHints(io.netty.handler.codec.http.HttpHeaders,io.vertx.core.impl.future.PromiseInternal)>(v1, v8);
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
public io.vertx.core.Future end(java.lang.String)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.buffer.Buffer v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String)>(v1);
v3 = virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Future end(io.vertx.core.buffer.Buffer)>(v2);
return v3;
}
public void end(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.buffer.Buffer v3;
java.lang.String v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String)>(v1);
virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void end(io.vertx.core.buffer.Buffer,io.vertx.core.Handler)>(v3, v2);
return;
}
public io.vertx.core.Future end(java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.buffer.Buffer v3;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String,java.lang.String)>(v1, v2);
v4 = virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Future end(io.vertx.core.buffer.Buffer)>(v3);
return v4;
}
public void end(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.buffer.Buffer v4;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String,java.lang.String)>(v1, v2);
virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void end(io.vertx.core.buffer.Buffer,io.vertx.core.Handler)>(v4, v3);
return;
}
public io.vertx.core.Future end(io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void end(io.vertx.core.buffer.Buffer,io.vertx.core.impl.future.PromiseInternal)>(v1, v3);
v4 = interfaceinvoke v3.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
return v4;
}
public void end(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.impl.ContextInternal v4;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
if v2 != null goto label1;
v3 = null;
goto label2;
label1:
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v3 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise(io.vertx.core.Handler)>(v2);
label2:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void end(io.vertx.core.buffer.Buffer,io.vertx.core.impl.future.PromiseInternal)>(v1, v3);
return;
}
private void end(io.vertx.core.buffer.Buffer, io.vertx.core.impl.future.PromiseInternal)
{
java.lang.Throwable v29;
java.lang.IllegalStateException v5;
io.netty.handler.codec.http.HttpVersion v14;
io.netty.handler.codec.http.HttpHeaders v17, v20;
long v11, v7, v9;
io.netty.handler.codec.http.LastHttpContent v18;
io.vertx.core.http.impl.headers.HeadersMultiMap v16;
io.vertx.core.http.impl.Http1xServerResponse v0;
io.netty.buffer.ByteBuf v6;
int v8;
io.vertx.core.http.impl.AssembledFullHttpResponse v12;
io.vertx.core.http.impl.AssembledLastHttpContent v19;
boolean v10, v13, v25, v28, v4;
io.vertx.core.impl.future.PromiseInternal v2;
io.netty.handler.codec.http.HttpResponseStatus v15;
io.vertx.core.http.impl.Http1xServerConnection v21, v22, v3;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Handler v23, v24, v26, v27;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.impl.future.PromiseInternal;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label01:
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean written>;
if v4 == 0 goto label02;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Response has already been written");
throw v5;
label02:
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean written> = 1;
v6 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
v7 = v0.<io.vertx.core.http.impl.Http1xServerResponse: long bytesWritten>;
v8 = virtualinvoke v6.<io.netty.buffer.ByteBuf: int readableBytes()>();
v9 = v7 + v8;
v0.<io.vertx.core.http.impl.Http1xServerResponse: long bytesWritten> = v9;
v10 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean headWritten>;
if v10 != 0 goto label03;
v11 = v0.<io.vertx.core.http.impl.Http1xServerResponse: long bytesWritten>;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void prepareHeaders(long)>(v11);
v12 = new io.vertx.core.http.impl.AssembledFullHttpResponse;
v13 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean head>;
v14 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpVersion version>;
v15 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status>;
v16 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v17 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpHeaders trailingHeaders>;
specialinvoke v12.<io.vertx.core.http.impl.AssembledFullHttpResponse: void <init>(boolean,io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,io.netty.handler.codec.http.HttpHeaders,io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpHeaders)>(v13, v14, v15, v16, v6, v17);
v18 = v12;
goto label04;
label03:
v19 = new io.vertx.core.http.impl.AssembledLastHttpContent;
v20 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpHeaders trailingHeaders>;
specialinvoke v19.<io.vertx.core.http.impl.AssembledLastHttpContent: void <init>(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpHeaders)>(v6, v20);
v18 = v19;
label04:
v21 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
virtualinvoke v21.<io.vertx.core.http.impl.Http1xServerConnection: void writeToChannel(java.lang.Object,io.netty.util.concurrent.FutureListener)>(v18, v2);
v22 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
virtualinvoke v22.<io.vertx.core.http.impl.Http1xServerConnection: void responseComplete()>();
v23 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler bodyEndHandler>;
if v23 == null goto label05;
v24 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler bodyEndHandler>;
interfaceinvoke v24.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label05:
v25 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean closed>;
if v25 != 0 goto label06;
v26 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler endHandler>;
if v26 == null goto label06;
v27 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler endHandler>;
interfaceinvoke v27.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label06:
v28 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean keepAlive>;
if v28 != 0 goto label07;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void closeConnAfterWrite()>();
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean closed> = 1;
label07:
exitmonitor v3;
label08:
goto label10;
label09:
v29 := @caughtexception;
exitmonitor v3;
throw v29;
label10:
return;
catch java.lang.Throwable from label01 to label08 with label09;
}
void completeHandshake()
{
java.lang.Throwable v7;
io.vertx.core.http.impl.Http1xServerConnection v1, v3, v6, v8;
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.spi.metrics.HttpServerMetrics v2, v4;
java.lang.Object v5;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
v2 = v1.<io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
v4 = v3.<io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics>;
v5 = v0.<io.vertx.core.http.impl.Http1xServerResponse: java.lang.Object requestMetric>;
interfaceinvoke v4.<io.vertx.core.spi.metrics.HttpServerMetrics: void responseBegin(java.lang.Object,io.vertx.core.spi.observability.HttpResponse)>(v5, v0);
label1:
virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.HttpServerResponse setStatusCode(int)>(101);
v6 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v6;
label2:
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean headWritten> = 1;
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean written> = 1;
exitmonitor v6;
label3:
goto label5;
label4:
v7 := @caughtexception;
exitmonitor v6;
throw v7;
label5:
v8 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
virtualinvoke v8.<io.vertx.core.http.impl.Http1xServerConnection: void responseComplete()>();
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
public void close()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v5;
io.vertx.core.http.impl.Http1xServerConnection v1, v4;
boolean v2, v3;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean closed>;
if v2 != 0 goto label4;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean headWritten>;
if v3 == 0 goto label2;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void closeConnAfterWrite()>();
goto label3;
label2:
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
virtualinvoke v4.<io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.Future close()>();
label3:
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean closed> = 1;
label4:
exitmonitor v1;
label5:
goto label7;
label6:
v5 := @caughtexception;
exitmonitor v1;
throw v5;
label7:
return;
catch java.lang.Throwable from label1 to label5 with label6;
}
public io.vertx.core.Future end()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = <io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.buffer.Buffer EMPTY_BUFFER>;
v2 = virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Future end(io.vertx.core.buffer.Buffer)>(v1);
return v2;
}
public void end(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.Handler v1;
io.vertx.core.buffer.Buffer v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = <io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.buffer.Buffer EMPTY_BUFFER>;
virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void end(io.vertx.core.buffer.Buffer,io.vertx.core.Handler)>(v2, v1);
return;
}
public io.vertx.core.Future sendFile(java.lang.String, long, long)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.impl.future.PromiseInternal v5;
io.vertx.core.impl.ContextInternal v4;
long v2, v3;
java.lang.String v1;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.HttpServerResponse sendFile(java.lang.String,long,long,io.vertx.core.Handler)>(v1, v2, v3, v5);
v6 = interfaceinvoke v5.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v6;
}
public io.vertx.core.http.HttpServerResponse sendFile(java.lang.String, long, long, io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
long v2, v3;
java.lang.String v1;
io.vertx.core.Handler v4;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: io.vertx.core.Handler;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void doSendFile(java.lang.String,long,long,io.vertx.core.Handler)>(v1, v2, v3, v4);
return v0;
}
public boolean ended()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v3;
io.vertx.core.http.impl.Http1xServerConnection v1;
boolean v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean written>;
exitmonitor v1;
label2:
return v2;
label3:
v3 := @caughtexception;
exitmonitor v1;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public boolean closed()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v3;
io.vertx.core.http.impl.Http1xServerConnection v1;
boolean v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean closed>;
exitmonitor v1;
label2:
return v2;
label3:
v3 := @caughtexception;
exitmonitor v1;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public boolean headWritten()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v3;
io.vertx.core.http.impl.Http1xServerConnection v1;
boolean v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean headWritten>;
exitmonitor v1;
label2:
return v2;
label3:
v3 := @caughtexception;
exitmonitor v1;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public long bytesWritten()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v3;
long v2;
io.vertx.core.http.impl.Http1xServerConnection v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: long bytesWritten>;
exitmonitor v1;
label2:
return v2;
label3:
v3 := @caughtexception;
exitmonitor v1;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.HttpServerResponse headersEndHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v3;
io.vertx.core.http.impl.Http1xServerConnection v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler headersEndHandler> = v1;
exitmonitor v2;
label2:
return v0;
label3:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.HttpServerResponse bodyEndHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v3;
io.vertx.core.http.impl.Http1xServerConnection v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler bodyEndHandler> = v1;
exitmonitor v2;
label2:
return v0;
label3:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void doSendFile(java.lang.String, long, long, io.vertx.core.Handler)
{
java.io.RandomAccessFile v26, v27;
java.lang.IllegalStateException v7;
io.vertx.core.http.impl.headers.HeadersMultiMap v19, v23, v33;
boolean v10, v21, v30, v6;
io.vertx.core.impl.logging.Logger v14, v43;
java.lang.CharSequence v20, v24;
io.netty.handler.codec.http.HttpResponseStatus v32;
java.lang.Throwable v47;
io.netty.handler.codec.http.HttpVersion v31;
io.vertx.core.impl.ContextInternal v12, v41, v45;
long v16, v17, v18, v2, v25, v3, v35, v36;
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.String v1, v15, v22;
io.vertx.core.impl.VertxInternal v11, v40, v44, v8;
io.vertx.core.http.impl.AssembledHttpResponse v29;
io.netty.util.concurrent.GenericFutureListener v46;
java.io.IOException v38, v39;
io.vertx.core.http.impl.Http1xServerConnection v28, v34, v5;
java.io.File v9;
io.netty.channel.ChannelFuture v37;
io.vertx.core.Handler v13, v4, v42;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: io.vertx.core.Handler;
v5 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v5;
label01:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkValid()>();
v6 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean headWritten>;
if v6 == 0 goto label02;
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Head already written");
throw v7;
label02:
v8 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.VertxInternal vertx>;
v9 = interfaceinvoke v8.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>(v1);
v10 = virtualinvoke v9.<java.io.File: boolean exists()>();
if v10 != 0 goto label06;
if v4 == null goto label03;
v11 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.VertxInternal vertx>;
v12 = interfaceinvoke v11.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v13 = staticinvoke <io.vertx.core.http.impl.Http1xServerResponse$lambda_doSendFile_0__1019: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>(v4);
interfaceinvoke v12.<io.vertx.core.impl.ContextInternal: void runOnContext(io.vertx.core.Handler)>(v13);
goto label04;
label03:
v14 = <io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.logging.Logger log>;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("File not found: \u0001");
interfaceinvoke v14.<io.vertx.core.impl.logging.Logger: void error(java.lang.Object)>(v15);
label04:
exitmonitor v5;
label05:
return;
label06:
v16 = virtualinvoke v9.<java.io.File: long length()>();
v17 = v16 - v2;
v18 = staticinvoke <java.lang.Math: long min(long,long)>(v3, v17);
v0.<io.vertx.core.http.impl.Http1xServerResponse: long bytesWritten> = v18;
v19 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v20 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONTENT_TYPE>;
v21 = virtualinvoke v19.<io.vertx.core.http.impl.headers.HeadersMultiMap: boolean contains(java.lang.CharSequence)>(v20);
if v21 != 0 goto label07;
v22 = staticinvoke <io.vertx.core.http.impl.MimeMapping: java.lang.String getMimeTypeForFilename(java.lang.String)>(v1);
if v22 == null goto label07;
v23 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v24 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONTENT_TYPE>;
virtualinvoke v23.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v24, v22);
label07:
v25 = v0.<io.vertx.core.http.impl.Http1xServerResponse: long bytesWritten>;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void prepareHeaders(long)>(v25);
v26 = null;
label08:
v27 = new java.io.RandomAccessFile;
specialinvoke v27.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(v9, "r");
v26 = v27;
v28 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
v29 = new io.vertx.core.http.impl.AssembledHttpResponse;
v30 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean head>;
v31 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpVersion version>;
v32 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status>;
v33 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
specialinvoke v29.<io.vertx.core.http.impl.AssembledHttpResponse: void <init>(boolean,io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,io.netty.handler.codec.http.HttpHeaders)>(v30, v31, v32, v33);
virtualinvoke v28.<io.vertx.core.http.impl.Http1xServerConnection: void writeToChannel(java.lang.Object)>(v29);
v34 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
v35 = virtualinvoke v9.<java.io.File: long length()>();
v36 = staticinvoke <java.lang.Math: long min(long,long)>(v2, v35);
v37 = virtualinvoke v34.<io.vertx.core.http.impl.Http1xServerConnection: io.netty.channel.ChannelFuture sendFile(java.io.RandomAccessFile,long,long)>(v27, v36, v18);
label09:
goto label18;
label10:
v38 := @caughtexception;
label11:
if v26 == null goto label14;
virtualinvoke v26.<java.io.RandomAccessFile: void close()>();
label12:
goto label14;
label13:
v39 := @caughtexception;
label14:
if v4 == null goto label15;
v40 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.VertxInternal vertx>;
v41 = interfaceinvoke v40.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v42 = staticinvoke <io.vertx.core.http.impl.Http1xServerResponse$lambda_doSendFile_1__1020: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,java.io.IOException)>(v4, v38);
interfaceinvoke v41.<io.vertx.core.impl.ContextInternal: void runOnContext(io.vertx.core.Handler)>(v42);
goto label16;
label15:
v43 = <io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v43.<io.vertx.core.impl.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>("Failed to send file", v38);
label16:
exitmonitor v5;
label17:
return;
label18:
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean written> = 1;
v44 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.VertxInternal vertx>;
v45 = interfaceinvoke v44.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v46 = staticinvoke <io.vertx.core.http.impl.Http1xServerResponse$lambda_doSendFile_4__1018: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.http.impl.Http1xServerResponse,io.vertx.core.Handler,io.vertx.core.impl.ContextInternal)>(v0, v4, v45);
interfaceinvoke v37.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v46);
exitmonitor v5;
label19:
goto label21;
label20:
v47 := @caughtexception;
exitmonitor v5;
throw v47;
label21:
return;
catch java.io.IOException from label08 to label09 with label10;
catch java.io.IOException from label11 to label12 with label13;
catch java.lang.Throwable from label01 to label05 with label20;
catch java.lang.Throwable from label06 to label17 with label20;
catch java.lang.Throwable from label18 to label19 with label20;
}
private void closeConnAfterWrite()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.netty.buffer.ByteBuf v4;
io.netty.channel.ChannelPromise v2;
io.netty.util.concurrent.GenericFutureListener v5;
io.vertx.core.http.impl.Http1xServerConnection v1, v3;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.Http1xServerConnection: io.netty.channel.ChannelPromise channelFuture()>();
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
v4 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
virtualinvoke v3.<io.vertx.core.http.impl.Http1xServerConnection: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)>(v4, v2);
v5 = staticinvoke <io.vertx.core.http.impl.Http1xServerResponse$lambda_closeConnAfterWrite_5__1021: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.http.impl.Http1xServerResponse)>(v0);
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v5);
return;
}
void handleWritabilityChanged(boolean)
{
java.lang.Throwable v6;
io.vertx.core.impl.ContextInternal v7;
io.vertx.core.http.impl.Http1xServerConnection v2;
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.Handler v5;
boolean v1, v3, v4;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean writable>;
if v3 == 0 goto label2;
if v1 != 0 goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean writable> = v1;
v5 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler drainHandler>;
if v5 == null goto label4;
if v4 == 0 goto label6;
label4:
exitmonitor v2;
label5:
return;
label6:
exitmonitor v2;
label7:
goto label9;
label8:
v6 := @caughtexception;
exitmonitor v2;
throw v6;
label9:
v7 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v7.<io.vertx.core.impl.ContextInternal: void dispatch(java.lang.Object,io.vertx.core.Handler)>(null, v5);
return;
catch java.lang.Throwable from label1 to label5 with label8;
catch java.lang.Throwable from label6 to label7 with label8;
}
void handleException(java.lang.Throwable)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v1, v5;
io.vertx.core.impl.ContextInternal v6;
io.vertx.core.http.impl.Http1xServerConnection v3;
io.vertx.core.Handler v4;
boolean v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.Throwable;
v2 = v1 instanceof io.vertx.core.http.HttpClosedException;
if v2 == 0 goto label1;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void handleClosed()>();
goto label8;
label1:
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label2:
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler exceptionHandler>;
if v4 != null goto label4;
exitmonitor v3;
label3:
return;
label4:
exitmonitor v3;
label5:
goto label7;
label6:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
label7:
v6 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: void dispatch(java.lang.Object,io.vertx.core.Handler)>(v1, v4);
label8:
return;
catch java.lang.Throwable from label2 to label3 with label6;
catch java.lang.Throwable from label4 to label5 with label6;
}
private void handleClosed()
{
java.lang.Throwable v10;
io.vertx.core.impl.ContextInternal v11, v13, v14;
io.vertx.core.http.HttpClosedException v12;
io.vertx.core.http.impl.Http1xServerConnection v1;
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.Handler v4, v5, v7, v8, v9;
boolean v2, v3, v6;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v1;
label01:
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean closed>;
if v2 == 0 goto label03;
exitmonitor v1;
label02:
return;
label03:
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean closed> = 1;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean written>;
if v3 == 0 goto label04;
v4 = null;
goto label05;
label04:
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler exceptionHandler>;
label05:
v5 = v4;
v6 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean written>;
if v6 == 0 goto label06;
v7 = null;
goto label07;
label06:
v7 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler endHandler>;
label07:
v8 = v7;
v9 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler closeHandler>;
exitmonitor v1;
label08:
goto label10;
label09:
v10 := @caughtexception;
exitmonitor v1;
throw v10;
label10:
if v5 == null goto label11;
v11 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v12 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.http.HttpClosedException CONNECTION_CLOSED_EXCEPTION>;
interfaceinvoke v11.<io.vertx.core.impl.ContextInternal: void dispatch(java.lang.Object,io.vertx.core.Handler)>(v12, v5);
label11:
if v8 == null goto label12;
v13 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v13.<io.vertx.core.impl.ContextInternal: void dispatch(java.lang.Object,io.vertx.core.Handler)>(null, v8);
label12:
if v9 == null goto label13;
v14 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v14.<io.vertx.core.impl.ContextInternal: void dispatch(java.lang.Object,io.vertx.core.Handler)>(null, v9);
label13:
return;
catch java.lang.Throwable from label01 to label02 with label09;
catch java.lang.Throwable from label03 to label08 with label09;
}
private void checkValid()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.IllegalStateException v2;
boolean v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean written>;
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Response has already been written");
throw v2;
label1:
return;
}
private void checkHeadWritten()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.IllegalStateException v2;
boolean v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean headWritten>;
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Response head already sent");
throw v2;
label1:
return;
}
private void prepareHeaders(long)
{
io.vertx.core.http.impl.CookieJar v32;
io.vertx.core.http.impl.headers.HeadersMultiMap v11, v17, v20, v23, v28, v5;
byte v19, v26;
boolean v10, v14, v22, v25, v33, v4;
java.lang.CharSequence v12, v13, v18, v21, v24, v29, v6, v7;
io.netty.handler.codec.http.HttpResponseStatus v15, v16;
io.netty.handler.codec.http.HttpVersion v2, v3, v8, v9;
long v1;
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.String v27;
io.vertx.core.Handler v30, v31;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpVersion version>;
v3 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_0>;
if v2 != v3 goto label01;
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean keepAlive>;
if v4 == 0 goto label01;
v5 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v6 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONNECTION>;
v7 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence KEEP_ALIVE>;
virtualinvoke v5.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v6, v7);
goto label02;
label01:
v8 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpVersion version>;
v9 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
if v8 != v9 goto label02;
v10 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean keepAlive>;
if v10 != 0 goto label02;
v11 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v12 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONNECTION>;
v13 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CLOSE>;
virtualinvoke v11.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v12, v13);
label02:
v14 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean head>;
if v14 != 0 goto label03;
v15 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status>;
v16 = <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus NOT_MODIFIED>;
if v15 != v16 goto label04;
label03:
v17 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v18 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence TRANSFER_ENCODING>;
virtualinvoke v17.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap remove(java.lang.CharSequence)>(v18);
goto label07;
label04:
v19 = v1 cmp 0L;
if v19 < 0 goto label07;
v20 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v21 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONTENT_LENGTH>;
v22 = virtualinvoke v20.<io.vertx.core.http.impl.headers.HeadersMultiMap: boolean contains(java.lang.CharSequence)>(v21);
if v22 != 0 goto label07;
v23 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v24 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence TRANSFER_ENCODING>;
v25 = virtualinvoke v23.<io.vertx.core.http.impl.headers.HeadersMultiMap: boolean contains(java.lang.CharSequence)>(v24);
if v25 != 0 goto label07;
v26 = v1 cmp 0L;
if v26 != 0 goto label05;
v27 = "0";
goto label06;
label05:
v27 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(v1);
label06:
v28 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v29 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONTENT_LENGTH>;
virtualinvoke v28.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v29, v27);
label07:
v30 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler headersEndHandler>;
if v30 == null goto label08;
v31 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Handler headersEndHandler>;
interfaceinvoke v31.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label08:
v32 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.CookieJar cookies>;
if v32 == null goto label09;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void setCookies()>();
label09:
v33 = <io.vertx.core.spi.metrics.Metrics: boolean METRICS_ENABLED>;
if v33 == 0 goto label10;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void reportResponseBegin()>();
label10:
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean headWritten> = 1;
return;
}
private void setCookies()
{
java.lang.CharSequence v7;
java.util.Iterator v2;
io.vertx.core.http.impl.CookieJar v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v6;
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Object v4;
java.lang.String v8;
boolean v3, v5;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.CookieJar cookies>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.CookieJar: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<io.vertx.core.http.impl.ServerCookie: boolean isChanged()>();
if v5 == 0 goto label1;
v6 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v7 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence SET_COOKIE>;
v8 = interfaceinvoke v4.<io.vertx.core.http.impl.ServerCookie: java.lang.String encode()>();
virtualinvoke v6.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap add(java.lang.CharSequence,java.lang.CharSequence)>(v7, v8);
goto label1;
label2:
return;
}
private void reportResponseBegin()
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.spi.metrics.HttpServerMetrics v2, v4;
java.lang.Object v5;
io.vertx.core.http.impl.Http1xServerConnection v1, v3;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
v2 = v1.<io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
v4 = v3.<io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics>;
v5 = v0.<io.vertx.core.http.impl.Http1xServerResponse: java.lang.Object requestMetric>;
interfaceinvoke v4.<io.vertx.core.spi.metrics.HttpServerMetrics: void responseBegin(java.lang.Object,io.vertx.core.spi.observability.HttpResponse)>(v5, v0);
label1:
return;
}
private io.vertx.core.http.impl.Http1xServerResponse write(io.netty.buffer.ByteBuf, io.vertx.core.impl.future.PromiseInternal)
{
java.lang.Throwable v28;
java.lang.IllegalStateException v15, v5;
io.netty.handler.codec.http.HttpVersion v13, v14, v22;
long v16, v18;
io.vertx.core.http.impl.headers.HeadersMultiMap v10, v24, v7;
io.vertx.core.http.impl.Http1xServerResponse v0;
io.netty.buffer.ByteBuf v1;
int v17;
boolean v12, v19, v21, v4, v6, v9;
io.netty.handler.codec.http.HttpContent v25;
io.vertx.core.impl.future.PromiseInternal v2;
io.vertx.core.http.impl.AssembledHttpResponse v20;
java.lang.CharSequence v11, v8;
io.netty.handler.codec.http.HttpResponseStatus v23;
io.vertx.core.http.impl.Http1xServerConnection v27, v3;
io.netty.handler.codec.http.DefaultHttpContent v26;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: io.vertx.core.impl.future.PromiseInternal;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label1:
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean written>;
if v4 == 0 goto label2;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Response has already been written");
throw v5;
label2:
v6 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean headWritten>;
if v6 != 0 goto label3;
v7 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v8 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence TRANSFER_ENCODING>;
v9 = virtualinvoke v7.<io.vertx.core.http.impl.headers.HeadersMultiMap: boolean contains(java.lang.CharSequence)>(v8);
if v9 != 0 goto label3;
v10 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v11 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONTENT_LENGTH>;
v12 = virtualinvoke v10.<io.vertx.core.http.impl.headers.HeadersMultiMap: boolean contains(java.lang.CharSequence)>(v11);
if v12 != 0 goto label3;
v13 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpVersion version>;
v14 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_0>;
if v13 == v14 goto label3;
v15 = new java.lang.IllegalStateException;
specialinvoke v15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You must set the Content-Length header to be the total size of the message body BEFORE sending any data if you are not using HTTP chunked encoding.");
throw v15;
label3:
v16 = v0.<io.vertx.core.http.impl.Http1xServerResponse: long bytesWritten>;
v17 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
v18 = v16 + v17;
v0.<io.vertx.core.http.impl.Http1xServerResponse: long bytesWritten> = v18;
v19 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean headWritten>;
if v19 != 0 goto label4;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void prepareHeaders(long)>(-1L);
v20 = new io.vertx.core.http.impl.AssembledHttpResponse;
v21 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean head>;
v22 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpVersion version>;
v23 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status>;
v24 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
specialinvoke v20.<io.vertx.core.http.impl.AssembledHttpResponse: void <init>(boolean,io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,io.netty.handler.codec.http.HttpHeaders,io.netty.buffer.ByteBuf)>(v21, v22, v23, v24, v1);
v25 = v20;
goto label5;
label4:
v26 = new io.netty.handler.codec.http.DefaultHttpContent;
specialinvoke v26.<io.netty.handler.codec.http.DefaultHttpContent: void <init>(io.netty.buffer.ByteBuf)>(v1);
v25 = v26;
label5:
v27 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
virtualinvoke v27.<io.vertx.core.http.impl.Http1xServerConnection: void writeToChannel(java.lang.Object,io.netty.util.concurrent.FutureListener)>(v25, v2);
exitmonitor v3;
label6:
return v0;
label7:
v28 := @caughtexception;
exitmonitor v3;
throw v28;
catch java.lang.Throwable from label1 to label6 with label7;
}
io.vertx.core.Future netSocket(io.vertx.core.http.HttpMethod, io.vertx.core.MultiMap)
{
java.lang.Throwable v25;
io.netty.handler.codec.http.HttpVersion v18;
io.vertx.core.MultiMap v2;
io.vertx.core.impl.ContextInternal v13, v21, v6, v9;
io.vertx.core.http.impl.headers.HeadersMultiMap v20;
io.vertx.core.http.impl.Http1xServerResponse v0;
boolean v17, v5, v8;
io.vertx.core.impl.future.PromiseInternal v14, v22;
io.vertx.core.http.impl.AssembledHttpResponse v16;
io.netty.handler.codec.http.HttpResponseStatus v12, v19;
io.vertx.core.http.impl.Http1xServerConnection v15, v24, v3;
io.vertx.core.Future v10, v23, v26, v4, v7;
io.vertx.core.http.HttpMethod v1, v11;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: io.vertx.core.MultiMap;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label01:
v4 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Future netSocket>;
if v4 != null goto label08;
v5 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean headWritten>;
if v5 == 0 goto label03;
v6 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v7 = interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future failedFuture(java.lang.String)>("Response already sent");
exitmonitor v3;
label02:
return v7;
label03:
v8 = staticinvoke <io.vertx.core.http.impl.HttpUtils: boolean isConnectOrUpgrade(io.vertx.core.http.HttpMethod,io.vertx.core.MultiMap)>(v1, v2);
if v8 != 0 goto label05;
v9 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v10 = interfaceinvoke v9.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future failedFuture(java.lang.String)>("HTTP method must be CONNECT or an HTTP upgrade to upgrade the connection to a TCP socket");
exitmonitor v3;
label04:
return v10;
label05:
v11 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod CONNECT>;
if v1 != v11 goto label06;
v12 = <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus OK>;
goto label07;
label06:
v12 = <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus SWITCHING_PROTOCOLS>;
label07:
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status> = v12;
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void prepareHeaders(long)>(-1L);
v13 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v14 = interfaceinvoke v13.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v15 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
v16 = new io.vertx.core.http.impl.AssembledHttpResponse;
v17 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean head>;
v18 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpVersion version>;
v19 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpResponseStatus status>;
v20 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
specialinvoke v16.<io.vertx.core.http.impl.AssembledHttpResponse: void <init>(boolean,io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,io.netty.handler.codec.http.HttpHeaders)>(v17, v18, v19, v20);
virtualinvoke v15.<io.vertx.core.http.impl.Http1xServerConnection: void writeToChannel(java.lang.Object,io.netty.util.concurrent.FutureListener)>(v16, v14);
v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean written> = 1;
v21 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v22 = interfaceinvoke v21.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v23 = interfaceinvoke v22.<io.vertx.core.Promise: io.vertx.core.Future future()>();
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Future netSocket> = v23;
v24 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
virtualinvoke v24.<io.vertx.core.http.impl.Http1xServerConnection: void netSocket(io.vertx.core.Promise)>(v22);
label08:
exitmonitor v3;
label09:
goto label11;
label10:
v25 := @caughtexception;
exitmonitor v3;
throw v25;
label11:
v26 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.Future netSocket>;
return v26;
catch java.lang.Throwable from label01 to label02 with label10;
catch java.lang.Throwable from label03 to label04 with label10;
catch java.lang.Throwable from label05 to label09 with label10;
}
public int streamId()
{
int v1;
io.vertx.core.http.impl.Http1xServerResponse v0;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = (int) -1;
return v1;
}
public boolean reset(long)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v4;
long v1;
io.vertx.core.http.impl.Http1xServerConnection v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: boolean written>;
if v3 == 0 goto label3;
exitmonitor v2;
label2:
return 0;
label3:
exitmonitor v2;
label4:
goto label6;
label5:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
label6:
virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void close()>();
return 1;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
public io.vertx.core.Future push(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String, io.vertx.core.MultiMap)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.http.HttpMethod v1;
io.vertx.core.MultiMap v4;
io.vertx.core.impl.ContextInternal v5;
java.lang.String v2, v3;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.core.MultiMap;
v5 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.ContextInternal context>;
v6 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future failedFuture(java.lang.String)>("HTTP/1 does not support response push");
return v6;
}
public io.vertx.core.http.HttpServerResponse writeCustomFrame(int, int, io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
io.vertx.core.buffer.Buffer v3;
int v1, v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.vertx.core.buffer.Buffer;
return v0;
}
io.vertx.core.http.impl.CookieJar cookies()
{
java.lang.Throwable v9;
io.netty.handler.codec.http.HttpHeaders v4;
io.netty.handler.codec.http.HttpRequest v3;
java.lang.CharSequence v5;
io.vertx.core.http.impl.CookieJar v10, v2, v7, v8;
io.vertx.core.http.impl.Http1xServerConnection v1;
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.String v6;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.CookieJar cookies>;
if v2 != null goto label3;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.netty.handler.codec.http.HttpRequest request>;
v4 = interfaceinvoke v3.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v5 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence COOKIE>;
v6 = virtualinvoke v4.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.CharSequence)>(v5);
if v6 != null goto label2;
v7 = new io.vertx.core.http.impl.CookieJar;
specialinvoke v7.<io.vertx.core.http.impl.CookieJar: void <init>()>();
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.CookieJar cookies> = v7;
goto label3;
label2:
v8 = new io.vertx.core.http.impl.CookieJar;
specialinvoke v8.<io.vertx.core.http.impl.CookieJar: void <init>(java.lang.CharSequence)>(v6);
v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.CookieJar cookies> = v8;
label3:
exitmonitor v1;
label4:
goto label6;
label5:
v9 := @caughtexception;
exitmonitor v1;
throw v9;
label6:
v10 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.CookieJar cookies>;
return v10;
catch java.lang.Throwable from label1 to label4 with label5;
}
public io.vertx.core.http.HttpServerResponse addCookie(io.vertx.core.http.Cookie)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v4;
io.vertx.core.http.impl.CookieJar v3;
io.vertx.core.http.impl.Http1xServerConnection v2;
io.vertx.core.http.Cookie v1;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: io.vertx.core.http.Cookie;
v2 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkHeadWritten()>();
v3 = virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.CookieJar cookies()>();
virtualinvoke v3.<io.vertx.core.http.impl.CookieJar: boolean add(io.vertx.core.http.impl.ServerCookie)>(v1);
exitmonitor v2;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
label4:
return v0;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.Cookie removeCookie(java.lang.String, boolean)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v6;
io.vertx.core.http.impl.CookieJar v4;
io.vertx.core.http.impl.Http1xServerConnection v3;
java.lang.String v1;
boolean v2;
io.vertx.core.http.impl.ServerCookie v5;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkHeadWritten()>();
v4 = virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.CookieJar cookies()>();
v5 = virtualinvoke v4.<io.vertx.core.http.impl.CookieJar: io.vertx.core.http.impl.ServerCookie removeOrInvalidate(java.lang.String,boolean)>(v1, v2);
exitmonitor v3;
label2:
return v5;
label3:
v6 := @caughtexception;
exitmonitor v3;
throw v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.Cookie removeCookie(java.lang.String, java.lang.String, java.lang.String, boolean)
{
java.lang.Throwable v8;
io.vertx.core.http.impl.CookieJar v6;
io.vertx.core.http.impl.Http1xServerConnection v5;
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.String v1, v2, v3;
boolean v4;
io.vertx.core.http.impl.ServerCookie v7;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: boolean;
v5 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v5;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkHeadWritten()>();
v6 = virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.CookieJar cookies()>();
v7 = virtualinvoke v6.<io.vertx.core.http.impl.CookieJar: io.vertx.core.http.impl.ServerCookie removeOrInvalidate(java.lang.String,java.lang.String,java.lang.String,boolean)>(v1, v2, v3, v4);
exitmonitor v5;
label2:
return v7;
label3:
v8 := @caughtexception;
exitmonitor v5;
throw v8;
catch java.lang.Throwable from label1 to label2 with label3;
}
public java.util.Set removeCookies(java.lang.String, boolean)
{
io.vertx.core.http.impl.Http1xServerResponse v0;
java.lang.Throwable v6;
io.vertx.core.http.impl.CookieJar v4, v5;
io.vertx.core.http.impl.Http1xServerConnection v3;
java.lang.String v1;
boolean v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: void checkHeadWritten()>();
v4 = virtualinvoke v0.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.impl.CookieJar cookies()>();
v5 = virtualinvoke v4.<io.vertx.core.http.impl.CookieJar: io.vertx.core.http.impl.CookieJar removeOrInvalidateAll(java.lang.String,boolean)>(v1, v2);
exitmonitor v3;
label2:
return v5;
label3:
v6 := @caughtexception;
exitmonitor v3;
throw v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v2;
io.netty.buffer.ByteBuf v0;
io.vertx.core.buffer.Buffer v1;
v0 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
v1 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>(v0);
<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.buffer.Buffer EMPTY_BUFFER> = v1;
v2 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/http/impl/Http1xServerResponse;");
<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.impl.logging.Logger log> = v2;
return;
}
}