class io.vertx.core.http.impl.Http2ClientConnection$StreamImpl extends io.vertx.core.http.impl.Http2ClientConnection$Stream implements io.vertx.core.http.impl.HttpClientStream
{
void <init>(io.vertx.core.http.impl.Http2ClientConnection, io.vertx.core.impl.ContextInternal, boolean)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.http.impl.Http2ClientConnection v1;
io.vertx.core.impl.ContextInternal v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.http.impl.Http2ClientConnection;
v2 := @parameter1: io.vertx.core.impl.ContextInternal;
v3 := @parameter2: boolean;
specialinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: void <init>(io.vertx.core.http.impl.Http2ClientConnection,io.vertx.core.impl.ContextInternal,boolean)>(v1, v2, v3);
return;
}
public void closeHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler closeHandler> = v1;
return;
}
public void continueHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler continueHandler> = v1;
return;
}
public void earlyHintsHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler earlyHintsHandler> = v1;
return;
}
public void unknownFrameHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler unknownFrameHandler> = v1;
return;
}
public void pushHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler pushHandler> = v1;
return;
}
public io.vertx.core.http.impl.Http2ClientConnection$StreamImpl drainHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler drainHandler> = v1;
return v0;
}
public io.vertx.core.http.impl.Http2ClientConnection$StreamImpl exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler exceptionHandler> = v1;
return v0;
}
public io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: int;
return v0;
}
public boolean writeQueueFull()
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
boolean v1, v2;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: boolean isNotWritable()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public synchronized boolean isNotWritable()
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
byte v3;
long v1, v2;
boolean v4;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: long writeWindow>;
v2 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: long windowSize>;
v3 = v1 cmp v2;
if v3 <= 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public void headHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler headHandler> = v1;
return;
}
public void chunkHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler chunkHandler> = v1;
return;
}
public void priorityHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler priorityHandler> = v1;
return;
}
public void endHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler endHandler> = v1;
return;
}
public io.vertx.core.http.StreamPriority priority()
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.http.StreamPriority v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 = specialinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.StreamPriority priority()>();
return v1;
}
public void updatePriority(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.http.StreamPriority v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
specialinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: void updatePriority(io.vertx.core.http.StreamPriority)>(v1);
return;
}
public io.vertx.core.http.HttpVersion version()
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.http.HttpVersion v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_2>;
return v1;
}
void handleEnd(io.vertx.core.MultiMap)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.MultiMap v1;
io.vertx.core.Handler v2, v3;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler endHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler endHandler>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label1:
return;
}
void handleData(io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Handler v2, v3;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler chunkHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler chunkHandler>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label1:
return;
}
void handleReset(long)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
long v1;
io.vertx.core.http.StreamResetException v2;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: long;
v2 = new io.vertx.core.http.StreamResetException;
specialinvoke v2.<io.vertx.core.http.StreamResetException: void <init>(long)>(v1);
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: void handleException(java.lang.Throwable)>(v2);
return;
}
void handleWritabilityChanged(boolean)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: boolean;
return;
}
void handleCustomFrame(io.vertx.core.http.HttpFrame)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.http.HttpFrame v1;
io.vertx.core.Handler v2, v3;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.http.HttpFrame;
v2 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler unknownFrameHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler unknownFrameHandler>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label1:
return;
}
void handlePriorityChange(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.http.StreamPriority v1;
io.vertx.core.Handler v2, v3;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
v2 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler priorityHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler priorityHandler>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label1:
return;
}
void handleContinue()
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v1, v2;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler continueHandler>;
if v1 == null goto label1;
v2 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler continueHandler>;
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label1:
return;
}
void handleEarlyHints(io.vertx.core.MultiMap)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.MultiMap v1;
io.vertx.core.Handler v2, v3;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler earlyHintsHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler earlyHintsHandler>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label1:
return;
}
void handleException(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.Handler v2, v3;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler exceptionHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.Handler exceptionHandler>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label1:
return;
}
public void writeHead(io.vertx.core.http.impl.HttpRequestHead, boolean, io.netty.buffer.ByteBuf, boolean, io.vertx.core.http.StreamPriority, boolean, io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.http.StreamPriority v5;
io.vertx.core.impl.ContextInternal v9;
io.vertx.core.http.impl.HttpRequestHead v1;
io.netty.buffer.ByteBuf v3;
io.vertx.core.Handler v10, v7;
boolean v2, v4, v6;
io.vertx.core.http.impl.Http2ConnectionBase v8;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.http.impl.HttpRequestHead;
v2 := @parameter1: boolean;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 := @parameter3: boolean;
v5 := @parameter4: io.vertx.core.http.StreamPriority;
v6 := @parameter5: boolean;
v7 := @parameter6: io.vertx.core.Handler;
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: void priority(io.vertx.core.http.StreamPriority)>(v5);
v8 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v9 = v8.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.impl.ContextInternal context>;
v10 = staticinvoke <io.vertx.core.http.impl.Http2ClientConnection$StreamImpl$lambda_writeHead_0__1065: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.Http2ClientConnection$StreamImpl,io.vertx.core.http.impl.HttpRequestHead,io.netty.buffer.ByteBuf,boolean,io.vertx.core.http.StreamPriority,boolean,io.vertx.core.Handler)>(v0, v1, v3, v4, v5, v6, v7);
interfaceinvoke v9.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(null, v10);
return;
}
private void writeHeaders(io.vertx.core.http.impl.HttpRequestHead, io.netty.buffer.ByteBuf, boolean, io.vertx.core.http.StreamPriority, boolean, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientImpl v33;
io.vertx.core.MultiMap v22, v23, v25;
io.netty.util.AsciiString v36, v38;
io.netty.handler.codec.http2.Http2Exception v40;
boolean v15, v18, v27, v3, v35, v5;
io.vertx.core.http.impl.Http2ConnectionBase v17, v32;
java.lang.CharSequence v30, v39;
io.vertx.core.Future v42;
io.vertx.core.http.impl.HttpRequestHead v1;
io.vertx.core.impl.ContextInternal v41;
io.netty.buffer.ByteBuf v2;
int v24;
io.vertx.core.http.HttpClientOptions v34;
java.lang.String v12, v14, v16, v19, v20, v21, v9;
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
java.util.Iterator v26;
io.vertx.core.http.StreamPriority v4;
java.lang.IllegalArgumentException v13;
io.vertx.core.http.HttpMethod v10, v11, v8;
java.lang.Object v28, v29, v31, v37;
io.vertx.core.Handler v6;
io.netty.handler.codec.http2.DefaultHttp2Headers v7;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.http.impl.HttpRequestHead;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: boolean;
v4 := @parameter3: io.vertx.core.http.StreamPriority;
v5 := @parameter4: boolean;
v6 := @parameter5: io.vertx.core.Handler;
v7 = new io.netty.handler.codec.http2.DefaultHttp2Headers;
specialinvoke v7.<io.netty.handler.codec.http2.DefaultHttp2Headers: void <init>()>();
v8 = v1.<io.vertx.core.http.impl.HttpRequestHead: io.vertx.core.http.HttpMethod method>;
v9 = virtualinvoke v8.<io.vertx.core.http.HttpMethod: java.lang.String name()>();
interfaceinvoke v7.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers method(java.lang.CharSequence)>(v9);
v10 = v1.<io.vertx.core.http.impl.HttpRequestHead: io.vertx.core.http.HttpMethod method>;
v11 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod CONNECT>;
if v10 != v11 goto label02;
v12 = v1.<io.vertx.core.http.impl.HttpRequestHead: java.lang.String authority>;
if v12 != null goto label01;
v13 = new java.lang.IllegalArgumentException;
specialinvoke v13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing :authority / host header");
throw v13;
label01:
v14 = v1.<io.vertx.core.http.impl.HttpRequestHead: java.lang.String authority>;
interfaceinvoke v7.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers authority(java.lang.CharSequence)>(v14);
v15 = 0;
goto label06;
label02:
v16 = v1.<io.vertx.core.http.impl.HttpRequestHead: java.lang.String uri>;
interfaceinvoke v7.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers path(java.lang.CharSequence)>(v16);
v17 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v18 = virtualinvoke v17.<io.vertx.core.http.impl.Http2ClientConnection: boolean isSsl()>();
if v18 == 0 goto label03;
v19 = "https";
goto label04;
label03:
v19 = "http";
label04:
interfaceinvoke v7.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers scheme(java.lang.CharSequence)>(v19);
v20 = v1.<io.vertx.core.http.impl.HttpRequestHead: java.lang.String authority>;
if v20 == null goto label05;
v21 = v1.<io.vertx.core.http.impl.HttpRequestHead: java.lang.String authority>;
interfaceinvoke v7.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers authority(java.lang.CharSequence)>(v21);
label05:
v15 = v3;
label06:
v22 = v1.<io.vertx.core.http.impl.HttpRequestHead: io.vertx.core.MultiMap headers>;
if v22 == null goto label08;
v23 = v1.<io.vertx.core.http.impl.HttpRequestHead: io.vertx.core.MultiMap headers>;
v24 = interfaceinvoke v23.<io.vertx.core.MultiMap: int size()>();
if v24 <= 0 goto label08;
v25 = v1.<io.vertx.core.http.impl.HttpRequestHead: io.vertx.core.MultiMap headers>;
v26 = interfaceinvoke v25.<io.vertx.core.MultiMap: java.util.Iterator iterator()>();
label07:
v27 = interfaceinvoke v26.<java.util.Iterator: boolean hasNext()>();
if v27 == 0 goto label08;
v28 = interfaceinvoke v26.<java.util.Iterator: java.lang.Object next()>();
v29 = interfaceinvoke v28.<java.util.Map$Entry: java.lang.Object getKey()>();
v30 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v29);
v31 = interfaceinvoke v28.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v7.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v30, v31);
goto label07;
label08:
v32 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v33 = v32.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.http.impl.HttpClientImpl client>;
v34 = virtualinvoke v33.<io.vertx.core.http.impl.HttpClientImpl: io.vertx.core.http.HttpClientOptions options()>();
v35 = virtualinvoke v34.<io.vertx.core.http.HttpClientOptions: boolean isTryUseCompression()>();
if v35 == 0 goto label09;
v36 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString ACCEPT_ENCODING>;
v37 = interfaceinvoke v7.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(v36);
if v37 != null goto label09;
v38 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString ACCEPT_ENCODING>;
v39 = staticinvoke <io.vertx.core.http.impl.Http1xClientConnection: java.lang.CharSequence determineCompressionAcceptEncoding()>();
interfaceinvoke v7.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Object)>(v38, v39);
label09:
specialinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: void createStream(io.vertx.core.http.impl.HttpRequestHead,io.netty.handler.codec.http2.Http2Headers,io.vertx.core.Handler)>(v1, v7, v6);
label10:
goto label13;
label11:
v40 := @caughtexception;
if v6 == null goto label12;
v41 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.impl.ContextInternal context>;
v42 = interfaceinvoke v41.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v40);
interfaceinvoke v6.<io.vertx.core.Handler: void handle(java.lang.Object)>(v42);
label12:
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: void handleException(java.lang.Throwable)>(v40);
return;
label13:
if v2 == null goto label14;
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: void doWriteHeaders(io.netty.handler.codec.http2.Http2Headers,boolean,io.vertx.core.Handler)>(v7, 0, null);
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: void doWriteData(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v2, v15, v6);
goto label15;
label14:
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: void doWriteHeaders(io.netty.handler.codec.http2.Http2Headers,boolean,io.vertx.core.Handler)>(v7, v15, v6);
label15:
return;
catch io.netty.handler.codec.http2.Http2Exception from label09 to label10 with label11;
}
private void createStream(io.vertx.core.http.impl.HttpRequestHead, io.netty.handler.codec.http2.Http2Headers, io.vertx.core.Handler) throws io.netty.handler.codec.http2.Http2Exception
{
io.vertx.core.http.impl.HttpClientImpl v34;
io.netty.handler.codec.http2.Http2ConnectionEncoder v15, v6;
io.vertx.core.spi.tracing.SpanKind v32;
io.vertx.core.http.impl.Http2ConnectionBase v11, v13, v19, v21, v33, v4;
io.netty.handler.codec.http2.Http2Connection$Endpoint v17, v8;
java.lang.CharSequence v23, v30;
io.vertx.core.http.impl.HttpRequestHead v1;
io.netty.handler.codec.http2.Http2Headers v2;
io.vertx.core.spi.metrics.ClientMetrics v20, v22;
io.vertx.core.impl.ContextInternal v26, v31;
int v10, v9;
io.netty.handler.codec.http2.Http2Stream v18;
java.util.function.BiConsumer v28;
io.vertx.core.http.HttpClientOptions v35;
java.lang.String v24, v29;
io.vertx.core.tracing.TracingPolicy v36;
io.vertx.core.net.SocketAddress v12;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v14, v5;
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.spi.tracing.TagExtractor v37;
io.vertx.core.spi.tracing.VertxTracer v27;
io.netty.handler.codec.http2.Http2Connection v16, v7;
java.lang.Object v25, v38;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.http.impl.HttpRequestHead;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v3 := @parameter2: io.vertx.core.Handler;
v4 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v5 = v4.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.http.impl.VertxHttp2ConnectionHandler handler>;
v6 = virtualinvoke v5.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v7 = interfaceinvoke v6.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection()>();
v8 = interfaceinvoke v7.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$Endpoint local()>();
v9 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2Connection$Endpoint: int lastStreamCreated()>();
if v9 != 0 goto label1;
v10 = 1;
goto label2;
label1:
v10 = v9 + 2;
label2:
v1.<io.vertx.core.http.impl.HttpRequestHead: int id> = v10;
v11 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v12 = virtualinvoke v11.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.net.SocketAddress remoteAddress()>();
v1.<io.vertx.core.http.impl.HttpRequestHead: io.vertx.core.net.SocketAddress remoteAddress> = v12;
v13 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v14 = v13.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.http.impl.VertxHttp2ConnectionHandler handler>;
v15 = virtualinvoke v14.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v16 = interfaceinvoke v15.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection()>();
v17 = interfaceinvoke v16.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$Endpoint local()>();
v18 = interfaceinvoke v17.<io.netty.handler.codec.http2.Http2Connection$Endpoint: io.netty.handler.codec.http2.Http2Stream createStream(int,boolean)>(v10, 0);
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: void init(io.netty.handler.codec.http2.Http2Stream)>(v18);
v19 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v20 = v19.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.ClientMetrics metrics>;
if v20 == null goto label3;
v21 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v22 = v21.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.ClientMetrics metrics>;
v23 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: java.lang.CharSequence path()>();
v24 = virtualinvoke v23.<java.lang.Object: java.lang.String toString()>();
v25 = interfaceinvoke v22.<io.vertx.core.spi.metrics.ClientMetrics: java.lang.Object requestBegin(java.lang.String,java.lang.Object)>(v24, v1);
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: java.lang.Object metric> = v25;
label3:
v26 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.impl.ContextInternal context>;
v27 = interfaceinvoke v26.<io.vertx.core.impl.ContextInternal: io.vertx.core.spi.tracing.VertxTracer tracer()>();
if v27 == null goto label5;
v28 = staticinvoke <io.vertx.core.http.impl.Http2ClientConnection$StreamImpl$lambda_createStream_1__1066: java.util.function.BiConsumer bootstrap$(io.netty.handler.codec.http2.Http2Headers)>(v2);
v29 = v1.<io.vertx.core.http.impl.HttpRequestHead: java.lang.String traceOperation>;
if v29 != null goto label4;
v30 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: java.lang.CharSequence method()>();
v29 = virtualinvoke v30.<java.lang.Object: java.lang.String toString()>();
label4:
v31 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.impl.ContextInternal context>;
v32 = <io.vertx.core.spi.tracing.SpanKind: io.vertx.core.spi.tracing.SpanKind RPC>;
v33 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v34 = v33.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.http.impl.HttpClientImpl client>;
v35 = virtualinvoke v34.<io.vertx.core.http.impl.HttpClientImpl: io.vertx.core.http.HttpClientOptions options()>();
v36 = virtualinvoke v35.<io.vertx.core.http.HttpClientOptions: io.vertx.core.tracing.TracingPolicy getTracingPolicy()>();
v37 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.spi.tracing.TagExtractor CLIENT_HTTP_REQUEST_TAG_EXTRACTOR>;
v38 = interfaceinvoke v27.<io.vertx.core.spi.tracing.VertxTracer: java.lang.Object sendRequest(io.vertx.core.Context,io.vertx.core.spi.tracing.SpanKind,io.vertx.core.tracing.TracingPolicy,java.lang.Object,java.lang.String,java.util.function.BiConsumer,io.vertx.core.spi.tracing.TagExtractor)>(v31, v32, v36, v1, v29, v28, v37);
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: java.lang.Object trace> = v38;
label5:
return;
}
public void writeBuffer(io.netty.buffer.ByteBuf, boolean, io.vertx.core.Handler)
{
java.lang.Throwable v7;
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
long v5, v6;
io.netty.buffer.ByteBuf v1;
int v4;
io.vertx.core.Handler v3;
boolean v2;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
if v1 == null goto label5;
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
entermonitor v0;
label1:
v5 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: long writeWindow>;
v6 = v5 + v4;
v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: long writeWindow> = v6;
exitmonitor v0;
label2:
goto label4;
label3:
v7 := @caughtexception;
exitmonitor v0;
throw v7;
label4:
if v3 == null goto label5;
v3 = staticinvoke <io.vertx.core.http.impl.Http2ClientConnection$StreamImpl$lambda_writeBuffer_2__1067: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.Http2ClientConnection$StreamImpl,int,io.vertx.core.Handler)>(v0, v4, v3);
label5:
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: void writeData(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v1, v2, v3);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.impl.ContextInternal getContext()
{
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.impl.ContextInternal context>;
return v1;
}
public void doSetWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: int;
return;
}
public void reset(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.impl.ContextInternal v5;
long v3;
java.lang.Long v6;
io.vertx.core.Handler v7;
boolean v2;
io.vertx.core.http.impl.Http2ConnectionBase v4;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 := @parameter0: java.lang.Throwable;
v2 = v1 instanceof io.vertx.core.http.StreamResetException;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.vertx.core.http.StreamResetException: long getCode()>();
goto label2;
label1:
v3 = 0L;
label2:
v4 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v5 = v4.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.impl.ContextInternal context>;
v6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v3);
v7 = staticinvoke <io.vertx.core.http.impl.Http2ClientConnection$StreamImpl$writeReset__1068: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.Http2ClientConnection$StreamImpl)>(v0);
interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(v6, v7);
return;
}
public io.vertx.core.http.impl.HttpClientConnection connection()
{
io.vertx.core.http.impl.Http2ClientConnection$StreamImpl v0;
io.vertx.core.http.impl.Http2ConnectionBase v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$StreamImpl;
v1 = v0.<io.vertx.core.http.impl.Http2ClientConnection$StreamImpl: io.vertx.core.http.impl.Http2ConnectionBase conn>;
return v1;
}
}