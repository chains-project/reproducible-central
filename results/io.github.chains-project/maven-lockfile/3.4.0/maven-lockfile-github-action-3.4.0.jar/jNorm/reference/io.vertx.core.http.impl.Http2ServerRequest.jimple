public class io.vertx.core.http.impl.Http2ServerRequest extends io.vertx.core.http.impl.HttpServerRequestInternal implements io.vertx.core.http.impl.Http2ServerStreamHandler, io.vertx.core.spi.observability.HttpRequest
{
private static final io.vertx.core.impl.logging.Logger log;
protected final io.vertx.core.impl.ContextInternal context;
protected final io.vertx.core.http.impl.Http2ServerStream stream;
protected final io.vertx.core.http.impl.Http2ServerResponse response;
private final java.lang.String serverOrigin;
private final io.vertx.core.MultiMap headersMap;
private final java.lang.String scheme;
private java.nio.charset.Charset paramsCharset;
private io.vertx.core.MultiMap params;
private java.lang.String absoluteURI;
private io.vertx.core.MultiMap attributes;
private io.vertx.core.http.impl.HttpEventHandler eventHandler;
private boolean ended;
private io.vertx.core.Handler uploadHandler;
private io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder;
private io.vertx.core.Handler customFrameHandler;
private io.vertx.core.Handler streamPriorityHandler;
void <init>(io.vertx.core.http.impl.Http2ServerStream, java.lang.String, io.netty.handler.codec.http2.Http2Headers, java.lang.String)
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.impl.ContextInternal v9;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v12;
java.nio.charset.Charset v5;
io.netty.handler.codec.http2.Http2Headers v3;
io.vertx.core.http.impl.Http2ServerStream v1;
io.vertx.core.http.impl.Http2ServerResponse v10;
java.lang.Object v6, v7;
java.lang.String v2, v4, v8;
io.vertx.core.http.impl.Http2ConnectionBase v11;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: io.vertx.core.http.impl.Http2ServerStream;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Headers;
v4 := @parameter3: java.lang.String;
specialinvoke v0.<io.vertx.core.http.impl.HttpServerRequestInternal: void <init>()>();
v5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
v0.<io.vertx.core.http.impl.Http2ServerRequest: java.nio.charset.Charset paramsCharset> = v5;
v6 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(":scheme");
if v6 == null goto label1;
v7 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(":scheme");
v8 = virtualinvoke v7.<java.lang.Object: java.lang.String toString()>();
goto label2;
label1:
v8 = null;
label2:
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: boolean remove(java.lang.Object)>(":method");
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: boolean remove(java.lang.Object)>(":scheme");
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: boolean remove(java.lang.Object)>(":path");
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: boolean remove(java.lang.Object)>(":authority");
v9 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.impl.ContextInternal context>;
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.impl.ContextInternal context> = v9;
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream> = v1;
v10 = new io.vertx.core.http.impl.Http2ServerResponse;
v11 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
specialinvoke v10.<io.vertx.core.http.impl.Http2ServerResponse: void <init>(io.vertx.core.http.impl.Http2ServerConnection,io.vertx.core.http.impl.Http2ServerStream,boolean,java.lang.String)>(v11, v1, 0, v4);
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerResponse response> = v10;
v0.<io.vertx.core.http.impl.Http2ServerRequest: java.lang.String serverOrigin> = v2;
v0.<io.vertx.core.http.impl.Http2ServerRequest: java.lang.String scheme> = v8;
v12 = new io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
specialinvoke v12.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)>(v3);
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.MultiMap headersMap> = v12;
return;
}
private io.vertx.core.http.impl.HttpEventHandler eventHandler(boolean)
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.HttpEventHandler v2, v3, v5;
io.vertx.core.impl.ContextInternal v4;
boolean v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.HttpEventHandler eventHandler>;
if v2 != null goto label1;
if v1 == 0 goto label1;
v3 = new io.vertx.core.http.impl.HttpEventHandler;
v4 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.impl.ContextInternal context>;
specialinvoke v3.<io.vertx.core.http.impl.HttpEventHandler: void <init>(io.vertx.core.impl.ContextInternal)>(v4);
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.HttpEventHandler eventHandler> = v3;
label1:
v5 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.HttpEventHandler eventHandler>;
return v5;
}
public void dispatch(io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(v0, v1);
return;
}
public void handleException(java.lang.Throwable)
{
java.lang.Throwable v1, v6;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v2;
io.vertx.core.http.impl.Http2ServerResponse v7;
boolean v4, v5;
io.vertx.core.http.impl.Http2ConnectionBase v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v3 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v3;
label1:
v4 = v0.<io.vertx.core.http.impl.Http2ServerRequest: boolean ended>;
if v4 != 0 goto label2;
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
exitmonitor v3;
label4:
goto label6;
label5:
v6 := @caughtexception;
exitmonitor v3;
throw v6;
label6:
if v5 == 0 goto label7;
specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void notifyException(java.lang.Throwable)>(v1);
label7:
v7 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerResponse response>;
virtualinvoke v7.<io.vertx.core.http.impl.Http2ServerResponse: void handleException(java.lang.Throwable)>(v1);
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
private void notifyException(java.lang.Throwable)
{
java.lang.Throwable v1, v8;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.HttpEventHandler v7;
io.netty.handler.codec.http.multipart.InterfaceHttpData v2;
io.vertx.core.http.impl.Http2ServerStream v3;
io.netty.handler.codec.http.multipart.HttpPostRequestDecoder v5, v6;
boolean v9;
io.vertx.core.http.impl.Http2ConnectionBase v4;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: java.lang.Throwable;
v2 = null;
v3 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v4 = v3.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v4;
label1:
v5 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
if v5 == null goto label2;
v6 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
v2 = virtualinvoke v6.<io.netty.handler.codec.http.multipart.HttpPostRequestDecoder: io.netty.handler.codec.http.multipart.InterfaceHttpData currentPartialHttpData()>();
label2:
v7 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.HttpEventHandler eventHandler>;
exitmonitor v4;
label3:
goto label5;
label4:
v8 := @caughtexception;
exitmonitor v4;
throw v8;
label5:
if v7 == null goto label6;
virtualinvoke v7.<io.vertx.core.http.impl.HttpEventHandler: void handleException(java.lang.Throwable)>(v1);
label6:
v9 = v2 instanceof io.vertx.core.http.impl.NettyFileUpload;
if v9 == 0 goto label7;
virtualinvoke v2.<io.vertx.core.http.impl.NettyFileUpload: void handleException(java.lang.Throwable)>(v1);
label7:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public void handleClose()
{
io.vertx.core.http.impl.Http2ServerResponse v1;
io.vertx.core.http.impl.Http2ServerRequest v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerResponse response>;
virtualinvoke v1.<io.vertx.core.http.impl.Http2ServerResponse: void handleClose()>();
return;
}
public void handleCustomFrame(io.vertx.core.http.HttpFrame)
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.HttpFrame v1;
io.vertx.core.Handler v2, v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: io.vertx.core.http.HttpFrame;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.Handler customFrameHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.Handler customFrameHandler>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label1:
return;
}
public void handleData(io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.HttpEventHandler v7;
java.lang.Exception v6;
io.netty.handler.codec.http.DefaultHttpContent v4;
io.netty.buffer.ByteBuf v5;
io.vertx.core.buffer.Buffer v1;
io.netty.handler.codec.http.multipart.HttpPostRequestDecoder v2, v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
if v2 == null goto label4;
label1:
v3 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
v4 = new io.netty.handler.codec.http.DefaultHttpContent;
v5 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v4.<io.netty.handler.codec.http.DefaultHttpContent: void <init>(io.netty.buffer.ByteBuf)>(v5);
virtualinvoke v3.<io.netty.handler.codec.http.multipart.HttpPostRequestDecoder: io.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder offer(io.netty.handler.codec.http.HttpContent)>(v4);
label2:
goto label4;
label3:
v6 := @caughtexception;
virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void handleException(java.lang.Throwable)>(v6);
label4:
v7 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.HttpEventHandler eventHandler>;
if v7 == null goto label5;
virtualinvoke v7.<io.vertx.core.http.impl.HttpEventHandler: void handleChunk(io.vertx.core.buffer.Buffer)>(v1);
label5:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
public void handleEnd(io.vertx.core.MultiMap)
{
java.lang.Throwable v16, v22, v25;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.MultiMap v1, v12;
io.vertx.core.http.impl.HttpEventHandler v24;
io.netty.handler.codec.http.LastHttpContent v6;
io.vertx.core.http.impl.Http2ServerStream v2;
io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$EndOfDataDecoderException v18;
java.lang.String v13, v14;
boolean v11, v8;
io.vertx.core.http.impl.Http2ConnectionBase v3;
io.netty.handler.codec.http.multipart.InterfaceHttpData v10;
java.lang.Exception v15, v20;
io.netty.handler.codec.http.multipart.HttpPostRequestDecoder v17, v19, v21, v23, v4, v5, v7, v9;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v3 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v3;
label01:
v0.<io.vertx.core.http.impl.Http2ServerRequest: boolean ended> = 1;
v4 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
if v4 == null goto label15;
label02:
v5 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
v6 = <io.netty.handler.codec.http.LastHttpContent: io.netty.handler.codec.http.LastHttpContent EMPTY_LAST_CONTENT>;
virtualinvoke v5.<io.netty.handler.codec.http.multipart.HttpPostRequestDecoder: io.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder offer(io.netty.handler.codec.http.HttpContent)>(v6);
label03:
v7 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
v8 = virtualinvoke v7.<io.netty.handler.codec.http.multipart.HttpPostRequestDecoder: boolean hasNext()>();
if v8 == 0 goto label09;
v9 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
v10 = virtualinvoke v9.<io.netty.handler.codec.http.multipart.HttpPostRequestDecoder: io.netty.handler.codec.http.multipart.InterfaceHttpData next()>();
v11 = v10 instanceof io.netty.handler.codec.http.multipart.Attribute;
if v11 == 0 goto label03;
label04:
v12 = virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.MultiMap formAttributes()>();
v13 = interfaceinvoke v10.<io.netty.handler.codec.http.multipart.Attribute: java.lang.String getName()>();
v14 = interfaceinvoke v10.<io.netty.handler.codec.http.multipart.Attribute: java.lang.String getValue()>();
interfaceinvoke v12.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>(v13, v14);
label05:
interfaceinvoke v10.<io.netty.handler.codec.http.multipart.Attribute: boolean release()>();
goto label03;
label06:
v15 := @caughtexception;
virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void handleException(java.lang.Throwable)>(v15);
label07:
interfaceinvoke v10.<io.netty.handler.codec.http.multipart.Attribute: boolean release()>();
goto label03;
label08:
v16 := @caughtexception;
interfaceinvoke v10.<io.netty.handler.codec.http.multipart.Attribute: boolean release()>();
throw v16;
label09:
v17 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
virtualinvoke v17.<io.netty.handler.codec.http.multipart.HttpPostRequestDecoder: void destroy()>();
goto label15;
label10:
v18 := @caughtexception;
label11:
v19 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
virtualinvoke v19.<io.netty.handler.codec.http.multipart.HttpPostRequestDecoder: void destroy()>();
goto label15;
label12:
v20 := @caughtexception;
virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void handleException(java.lang.Throwable)>(v20);
label13:
v21 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
virtualinvoke v21.<io.netty.handler.codec.http.multipart.HttpPostRequestDecoder: void destroy()>();
goto label15;
label14:
v22 := @caughtexception;
v23 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
virtualinvoke v23.<io.netty.handler.codec.http.multipart.HttpPostRequestDecoder: void destroy()>();
throw v22;
label15:
v24 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.HttpEventHandler eventHandler>;
exitmonitor v3;
label16:
goto label18;
label17:
v25 := @caughtexception;
exitmonitor v3;
throw v25;
label18:
if v24 == null goto label19;
virtualinvoke v24.<io.vertx.core.http.impl.HttpEventHandler: void handleEnd()>();
label19:
return;
catch java.lang.Exception from label04 to label05 with label06;
catch java.lang.Throwable from label04 to label05 with label08;
catch java.lang.Throwable from label06 to label07 with label08;
catch io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$EndOfDataDecoderException from label02 to label09 with label10;
catch java.lang.Exception from label02 to label09 with label12;
catch java.lang.Throwable from label02 to label09 with label14;
catch java.lang.Throwable from label10 to label11 with label14;
catch java.lang.Throwable from label12 to label13 with label14;
catch java.lang.Throwable from label01 to label16 with label17;
}
public void handleReset(long)
{
java.lang.Throwable v6;
io.vertx.core.http.impl.Http2ServerRequest v0;
long v1;
io.vertx.core.http.impl.Http2ServerStream v2;
io.vertx.core.http.impl.Http2ServerResponse v8;
boolean v4, v5;
io.vertx.core.http.StreamResetException v7;
io.vertx.core.http.impl.Http2ConnectionBase v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v3 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v3;
label1:
v4 = v0.<io.vertx.core.http.impl.Http2ServerRequest: boolean ended>;
if v4 != 0 goto label2;
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
v0.<io.vertx.core.http.impl.Http2ServerRequest: boolean ended> = 1;
exitmonitor v3;
label4:
goto label6;
label5:
v6 := @caughtexception;
exitmonitor v3;
throw v6;
label6:
if v5 == 0 goto label7;
v7 = new io.vertx.core.http.StreamResetException;
specialinvoke v7.<io.vertx.core.http.StreamResetException: void <init>(long)>(v1);
specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void notifyException(java.lang.Throwable)>(v7);
label7:
v8 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerResponse response>;
virtualinvoke v8.<io.vertx.core.http.impl.Http2ServerResponse: void handleReset(long)>(v1);
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
private void checkEnded()
{
java.lang.IllegalStateException v2;
io.vertx.core.http.impl.Http2ServerRequest v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: boolean ended>;
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request has already been read");
throw v2;
label1:
return;
}
public io.vertx.core.http.HttpMethod method()
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.HttpMethod v2;
io.vertx.core.http.impl.Http2ServerStream v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.HttpMethod method>;
return v2;
}
public int id()
{
int v2;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.Http2ServerStream: int id()>();
return v2;
}
public java.lang.Object metric()
{
java.lang.Object v2;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.Http2ServerStream: java.lang.Object metric()>();
return v2;
}
public io.vertx.core.Context context()
{
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.http.impl.Http2ServerRequest v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.impl.ContextInternal context>;
return v1;
}
public io.vertx.core.http.HttpServerRequest exceptionHandler(io.vertx.core.Handler)
{
java.lang.Throwable v6;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v2;
io.vertx.core.http.impl.HttpEventHandler v5;
io.vertx.core.Handler v1;
boolean v4;
io.vertx.core.http.impl.Http2ConnectionBase v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v3 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v3;
label1:
if v1 == null goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
v5 = specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.HttpEventHandler eventHandler(boolean)>(v4);
if v5 == null goto label4;
virtualinvoke v5.<io.vertx.core.http.impl.HttpEventHandler: void exceptionHandler(io.vertx.core.Handler)>(v1);
label4:
exitmonitor v3;
label5:
goto label7;
label6:
v6 := @caughtexception;
exitmonitor v3;
throw v6;
label7:
return v0;
catch java.lang.Throwable from label1 to label5 with label6;
}
public io.vertx.core.http.HttpServerRequest handler(io.vertx.core.Handler)
{
java.lang.Throwable v6;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v2;
io.vertx.core.http.impl.HttpEventHandler v5;
io.vertx.core.Handler v1;
boolean v4;
io.vertx.core.http.impl.Http2ConnectionBase v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v3 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v3;
label1:
if v1 == null goto label2;
specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void checkEnded()>();
if v1 == null goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
v5 = specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.HttpEventHandler eventHandler(boolean)>(v4);
if v5 == null goto label4;
virtualinvoke v5.<io.vertx.core.http.impl.HttpEventHandler: void chunkHandler(io.vertx.core.Handler)>(v1);
label4:
exitmonitor v3;
label5:
goto label7;
label6:
v6 := @caughtexception;
exitmonitor v3;
throw v6;
label7:
return v0;
catch java.lang.Throwable from label1 to label5 with label6;
}
public io.vertx.core.http.HttpServerRequest pause()
{
java.lang.Throwable v4;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v1, v3;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v2;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void checkEnded()>();
v3 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
virtualinvoke v3.<io.vertx.core.http.impl.Http2ServerStream: void doPause()>();
exitmonitor v2;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
label4:
return v0;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.HttpServerRequest resume()
{
io.vertx.core.http.HttpServerRequest v1;
io.vertx.core.http.impl.Http2ServerRequest v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.HttpServerRequest fetch(long)>(9223372036854775807L);
return v1;
}
public io.vertx.core.http.HttpServerRequest fetch(long)
{
java.lang.Throwable v5;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v2, v4;
long v1;
io.vertx.core.http.impl.Http2ConnectionBase v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v3 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v3;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void checkEnded()>();
v4 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
virtualinvoke v4.<io.vertx.core.http.impl.Http2ServerStream: void doFetch(long)>(v1);
exitmonitor v3;
label2:
goto label4;
label3:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
label4:
return v0;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.HttpServerRequest endHandler(io.vertx.core.Handler)
{
java.lang.Throwable v6;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v2;
io.vertx.core.http.impl.HttpEventHandler v5;
io.vertx.core.Handler v1;
boolean v4;
io.vertx.core.http.impl.Http2ConnectionBase v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v3 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v3;
label1:
if v1 == null goto label2;
specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void checkEnded()>();
if v1 == null goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
v5 = specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.HttpEventHandler eventHandler(boolean)>(v4);
if v5 == null goto label4;
virtualinvoke v5.<io.vertx.core.http.impl.HttpEventHandler: void endHandler(io.vertx.core.Handler)>(v1);
label4:
exitmonitor v3;
label5:
goto label7;
label6:
v6 := @caughtexception;
exitmonitor v3;
throw v6;
label7:
return v0;
catch java.lang.Throwable from label1 to label5 with label6;
}
public io.vertx.core.http.HttpVersion version()
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.HttpVersion v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_2>;
return v1;
}
public java.lang.String uri()
{
io.vertx.core.http.impl.Http2ServerRequest v0;
java.lang.String v2;
io.vertx.core.http.impl.Http2ServerStream v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: java.lang.String uri>;
return v2;
}
public java.lang.String path()
{
java.lang.Throwable v8;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v1, v3, v5;
java.lang.String v4, v6, v7;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v4 = v3.<io.vertx.core.http.impl.Http2ServerStream: java.lang.String uri>;
if v4 == null goto label2;
v5 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v6 = v5.<io.vertx.core.http.impl.Http2ServerStream: java.lang.String uri>;
v7 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.String parsePath(java.lang.String)>(v6);
goto label3;
label2:
v7 = null;
label3:
exitmonitor v2;
label4:
return v7;
label5:
v8 := @caughtexception;
exitmonitor v2;
throw v8;
catch java.lang.Throwable from label1 to label4 with label5;
}
public java.lang.String query()
{
java.lang.Throwable v8;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v1, v3, v5;
java.lang.String v4, v6, v7;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v4 = v3.<io.vertx.core.http.impl.Http2ServerStream: java.lang.String uri>;
if v4 != null goto label3;
exitmonitor v2;
label2:
return null;
label3:
v5 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v6 = v5.<io.vertx.core.http.impl.Http2ServerStream: java.lang.String uri>;
v7 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.String parseQuery(java.lang.String)>(v6);
exitmonitor v2;
label4:
return v7;
label5:
v8 := @caughtexception;
exitmonitor v2;
throw v8;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
public java.lang.String scheme()
{
io.vertx.core.http.impl.Http2ServerRequest v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: java.lang.String scheme>;
return v1;
}
public java.lang.String host()
{
io.vertx.core.http.impl.Http2ServerRequest v0;
java.lang.String v2;
io.vertx.core.http.impl.Http2ServerStream v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: java.lang.String host>;
return v2;
}
public long bytesRead()
{
long v2;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.Http2ServerStream: long bytesRead()>();
return v2;
}
public io.vertx.core.http.impl.Http2ServerResponse response()
{
io.vertx.core.http.impl.Http2ServerResponse v1;
io.vertx.core.http.impl.Http2ServerRequest v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerResponse response>;
return v1;
}
public io.vertx.core.MultiMap headers()
{
io.vertx.core.MultiMap v1;
io.vertx.core.http.impl.Http2ServerRequest v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.MultiMap headersMap>;
return v1;
}
public io.vertx.core.http.HttpServerRequest setParamsCharset(java.lang.String)
{
io.vertx.core.http.impl.Http2ServerRequest v0;
java.nio.charset.Charset v2, v3, v4;
java.lang.String v1;
boolean v5;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Charset must not be null");
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: java.nio.charset.Charset paramsCharset>;
v3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(v1);
v0.<io.vertx.core.http.impl.Http2ServerRequest: java.nio.charset.Charset paramsCharset> = v3;
v4 = v0.<io.vertx.core.http.impl.Http2ServerRequest: java.nio.charset.Charset paramsCharset>;
v5 = virtualinvoke v4.<java.nio.charset.Charset: boolean equals(java.lang.Object)>(v2);
if v5 != 0 goto label1;
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.MultiMap params> = null;
label1:
return v0;
}
public java.lang.String getParamsCharset()
{
io.vertx.core.http.impl.Http2ServerRequest v0;
java.lang.String v2;
java.nio.charset.Charset v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: java.nio.charset.Charset paramsCharset>;
v2 = virtualinvoke v1.<java.nio.charset.Charset: java.lang.String name()>();
return v2;
}
public io.vertx.core.MultiMap params()
{
java.lang.Throwable v8;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.MultiMap v3, v6, v7;
java.nio.charset.Charset v5;
io.vertx.core.http.impl.Http2ServerStream v1;
java.lang.String v4;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.MultiMap params>;
if v3 != null goto label2;
v4 = virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: java.lang.String uri()>();
v5 = v0.<io.vertx.core.http.impl.Http2ServerRequest: java.nio.charset.Charset paramsCharset>;
v6 = staticinvoke <io.vertx.core.http.impl.HttpUtils: io.vertx.core.MultiMap params(java.lang.String,java.nio.charset.Charset)>(v4, v5);
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.MultiMap params> = v6;
label2:
v7 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.MultiMap params>;
exitmonitor v2;
label3:
return v7;
label4:
v8 := @caughtexception;
exitmonitor v2;
throw v8;
catch java.lang.Throwable from label1 to label3 with label4;
}
public javax.security.cert.X509Certificate[] peerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException
{
javax.security.cert.X509Certificate[] v3;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v1;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.Http2ServerConnection: javax.security.cert.X509Certificate[] peerCertificateChain()>();
return v3;
}
public io.vertx.core.net.SocketAddress remoteAddress()
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v1;
io.vertx.core.http.impl.Http2ConnectionBase v2;
io.vertx.core.net.SocketAddress v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.net.SocketAddress remoteAddress()>();
return v3;
}
public java.lang.String absoluteURI()
{
io.vertx.core.impl.logging.Logger v10;
java.lang.Throwable v12;
io.vertx.core.http.impl.Http2ServerRequest v0;
java.net.URISyntaxException v9;
io.vertx.core.http.HttpMethod v2, v3;
io.vertx.core.http.impl.Http2ServerStream v1, v4;
java.lang.String v11, v6, v7, v8;
io.vertx.core.http.impl.Http2ConnectionBase v5;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.HttpMethod method>;
v3 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod CONNECT>;
if v2 != v3 goto label1;
return null;
label1:
v4 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v5 = v4.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v5;
label2:
v6 = v0.<io.vertx.core.http.impl.Http2ServerRequest: java.lang.String absoluteURI>;
if v6 != null goto label6;
label3:
v7 = v0.<io.vertx.core.http.impl.Http2ServerRequest: java.lang.String serverOrigin>;
v8 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.String absoluteURI(java.lang.String,io.vertx.core.http.HttpServerRequest)>(v7, v0);
v0.<io.vertx.core.http.impl.Http2ServerRequest: java.lang.String absoluteURI> = v8;
label4:
goto label6;
label5:
v9 := @caughtexception;
v10 = <io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v10.<io.vertx.core.impl.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>("Failed to create abs uri", v9);
label6:
v11 = v0.<io.vertx.core.http.impl.Http2ServerRequest: java.lang.String absoluteURI>;
exitmonitor v5;
label7:
return v11;
label8:
v12 := @caughtexception;
exitmonitor v5;
throw v12;
catch java.net.URISyntaxException from label3 to label4 with label5;
catch java.lang.Throwable from label2 to label7 with label8;
}
public io.vertx.core.Future toNetSocket()
{
io.vertx.core.http.impl.Http2ServerResponse v1;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerResponse response>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.Http2ServerResponse: io.vertx.core.Future netSocket()>();
return v2;
}
public io.vertx.core.http.HttpServerRequest setExpectMultipart(boolean)
{
java.lang.IllegalStateException v10, v15, v8;
io.netty.handler.codec.http.HttpHeaders v23;
io.vertx.core.MultiMap v5;
io.netty.util.AsciiString v24, v6;
io.netty.handler.codec.http.DefaultHttpRequest v16;
boolean v1, v14, v9;
io.vertx.core.http.impl.Http2ConnectionBase v29, v3;
io.vertx.core.http.impl.NettyFileUploadDataFactory v25;
java.lang.Throwable v33;
io.netty.handler.codec.http.HttpVersion v17;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.impl.ContextInternal v26;
java.util.function.Supplier v27;
io.vertx.core.http.impl.Http2ServerStream v11, v18, v2, v21, v28;
int v31;
java.lang.String v22, v7;
io.netty.handler.codec.http.HttpMethod v13, v20;
io.vertx.core.http.HttpMethod v12, v19;
io.vertx.core.http.HttpServerOptions v30;
io.netty.handler.codec.http.multipart.HttpPostRequestDecoder v32, v4;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v3 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v3;
label1:
specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void checkEnded()>();
if v1 == 0 goto label5;
v4 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
if v4 != null goto label6;
v5 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.MultiMap headersMap>;
v6 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_TYPE>;
v7 = interfaceinvoke v5.<io.vertx.core.MultiMap: java.lang.String get(java.lang.CharSequence)>(v6);
if v7 != null goto label2;
v8 = new java.lang.IllegalStateException;
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request must have a content-type header to decode a multipart request");
throw v8;
label2:
v9 = staticinvoke <io.vertx.core.http.impl.HttpUtils: boolean isValidMultipartContentType(java.lang.String)>(v7);
if v9 != 0 goto label3;
v10 = new java.lang.IllegalStateException;
specialinvoke v10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request must have a valid content-type header to decode a multipart request");
throw v10;
label3:
v11 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v12 = v11.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.HttpMethod method>;
v13 = virtualinvoke v12.<io.vertx.core.http.HttpMethod: io.netty.handler.codec.http.HttpMethod toNetty()>();
v14 = staticinvoke <io.vertx.core.http.impl.HttpUtils: boolean isValidMultipartMethod(io.netty.handler.codec.http.HttpMethod)>(v13);
if v14 != 0 goto label4;
v15 = new java.lang.IllegalStateException;
specialinvoke v15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request method must be one of POST, PUT, PATCH or DELETE to decode a multipart request");
throw v15;
label4:
v16 = new io.netty.handler.codec.http.DefaultHttpRequest;
v17 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
v18 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v19 = v18.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.HttpMethod method>;
v20 = virtualinvoke v19.<io.vertx.core.http.HttpMethod: io.netty.handler.codec.http.HttpMethod toNetty()>();
v21 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v22 = v21.<io.vertx.core.http.impl.Http2ServerStream: java.lang.String uri>;
specialinvoke v16.<io.netty.handler.codec.http.DefaultHttpRequest: void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String)>(v17, v20, v22);
v23 = interfaceinvoke v16.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v24 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_TYPE>;
virtualinvoke v23.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Object)>(v24, v7);
v25 = new io.vertx.core.http.impl.NettyFileUploadDataFactory;
v26 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.impl.ContextInternal context>;
v27 = staticinvoke <io.vertx.core.http.impl.Http2ServerRequest$lambda_setExpectMultipart_0__1140: java.util.function.Supplier bootstrap$(io.vertx.core.http.impl.Http2ServerRequest)>(v0);
specialinvoke v25.<io.vertx.core.http.impl.NettyFileUploadDataFactory: void <init>(io.vertx.core.impl.ContextInternal,io.vertx.core.http.HttpServerRequest,java.util.function.Supplier)>(v26, v0, v27);
v28 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v29 = v28.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v30 = v29.<io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.http.HttpServerOptions options>;
v31 = virtualinvoke v30.<io.vertx.core.http.HttpServerOptions: int getMaxFormAttributeSize()>();
virtualinvoke v25.<io.vertx.core.http.impl.NettyFileUploadDataFactory: void setMaxLimit(long)>(v31);
v32 = new io.netty.handler.codec.http.multipart.HttpPostRequestDecoder;
specialinvoke v32.<io.netty.handler.codec.http.multipart.HttpPostRequestDecoder: void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest)>(v25, v16);
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder> = v32;
goto label6;
label5:
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder> = null;
label6:
exitmonitor v3;
label7:
goto label9;
label8:
v33 := @caughtexception;
exitmonitor v3;
throw v33;
label9:
return v0;
catch java.lang.Throwable from label1 to label7 with label8;
}
public boolean isExpectMultipart()
{
java.lang.Throwable v5;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v1;
io.netty.handler.codec.http.multipart.HttpPostRequestDecoder v3;
boolean v4;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.netty.handler.codec.http.multipart.HttpPostRequestDecoder postRequestDecoder>;
if v3 == null goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
exitmonitor v2;
label4:
return v4;
label5:
v5 := @caughtexception;
exitmonitor v2;
throw v5;
catch java.lang.Throwable from label1 to label4 with label5;
}
public io.vertx.core.http.HttpServerRequest uploadHandler(io.vertx.core.Handler)
{
java.lang.Throwable v4;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v2;
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http2ConnectionBase v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v3 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v3;
label1:
if v1 == null goto label2;
specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void checkEnded()>();
label2:
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.Handler uploadHandler> = v1;
exitmonitor v3;
label3:
return v0;
label4:
v4 := @caughtexception;
exitmonitor v3;
throw v4;
catch java.lang.Throwable from label1 to label3 with label4;
}
public io.vertx.core.MultiMap formAttributes()
{
java.lang.Throwable v6;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v1;
io.vertx.core.MultiMap v3, v4, v5;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.MultiMap attributes>;
if v3 != null goto label2;
v4 = staticinvoke <io.vertx.core.MultiMap: io.vertx.core.MultiMap caseInsensitiveMultiMap()>();
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.MultiMap attributes> = v4;
label2:
v5 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.MultiMap attributes>;
exitmonitor v2;
label3:
return v5;
label4:
v6 := @caughtexception;
exitmonitor v2;
throw v6;
catch java.lang.Throwable from label1 to label3 with label4;
}
public java.lang.String getFormAttribute(java.lang.String)
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.MultiMap v2;
java.lang.String v1, v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.MultiMap formAttributes()>();
v3 = interfaceinvoke v2.<io.vertx.core.MultiMap: java.lang.String get(java.lang.String)>(v1);
return v3;
}
public int streamId()
{
int v2;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.Http2ServerStream: int id()>();
return v2;
}
public io.vertx.core.Future toWebSocket()
{
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.impl.ContextInternal context>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future failedFuture(java.lang.String)>("HTTP/2 request cannot be upgraded to a WebSocket");
return v2;
}
public boolean isEnded()
{
java.lang.Throwable v4;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v1;
boolean v3;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.Http2ServerRequest: boolean ended>;
exitmonitor v2;
label2:
return v3;
label3:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.HttpServerRequest customFrameHandler(io.vertx.core.Handler)
{
java.lang.Throwable v4;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v2;
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http2ConnectionBase v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v3 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v3;
label1:
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.Handler customFrameHandler> = v1;
exitmonitor v3;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v3;
throw v4;
label4:
return v0;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.HttpConnection connection()
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ConnectionBase v2;
io.vertx.core.http.impl.Http2ServerStream v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
return v2;
}
public synchronized io.vertx.core.Future body()
{
io.vertx.core.http.impl.HttpEventHandler v1;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void checkEnded()>();
v1 = specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.HttpEventHandler eventHandler(boolean)>(1);
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Future body()>();
return v2;
}
public synchronized io.vertx.core.Future end()
{
io.vertx.core.http.impl.HttpEventHandler v1;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: void checkEnded()>();
v1 = specialinvoke v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.HttpEventHandler eventHandler(boolean)>(1);
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Future end()>();
return v2;
}
public io.vertx.core.http.StreamPriority streamPriority()
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.StreamPriority v2;
io.vertx.core.http.impl.Http2ServerStream v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.StreamPriority priority()>();
return v2;
}
public io.vertx.core.http.HttpServerRequest streamPriorityHandler(io.vertx.core.Handler)
{
java.lang.Throwable v4;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.Http2ServerStream v2;
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http2ConnectionBase v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v3 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v3;
label1:
v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.Handler streamPriorityHandler> = v1;
exitmonitor v3;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v3;
throw v4;
label4:
return v0;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.netty.handler.codec.DecoderResult decoderResult()
{
io.netty.handler.codec.DecoderResult v1;
io.vertx.core.http.impl.Http2ServerRequest v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = <io.netty.handler.codec.DecoderResult: io.netty.handler.codec.DecoderResult SUCCESS>;
return v1;
}
public void handlePriorityChange(io.vertx.core.http.StreamPriority)
{
java.lang.Throwable v5;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.StreamPriority v1;
io.vertx.core.http.impl.Http2ServerStream v2;
io.vertx.core.Handler v4;
io.vertx.core.http.impl.Http2ConnectionBase v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
v3 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v3;
label1:
v4 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.Handler streamPriorityHandler>;
exitmonitor v3;
label2:
goto label4;
label3:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
label4:
if v4 == null goto label5;
interfaceinvoke v4.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public java.util.Set cookies()
{
io.vertx.core.http.impl.Http2ServerResponse v1;
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.CookieJar v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerResponse response>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.Http2ServerResponse: io.vertx.core.http.impl.CookieJar cookies()>();
return v2;
}
public java.util.Set cookies(java.lang.String)
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.CookieJar v3, v4;
io.vertx.core.http.impl.Http2ServerResponse v2;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerResponse response>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.Http2ServerResponse: io.vertx.core.http.impl.CookieJar cookies()>();
v4 = virtualinvoke v3.<io.vertx.core.http.impl.CookieJar: io.vertx.core.http.impl.CookieJar getAll(java.lang.String)>(v1);
return v4;
}
public io.vertx.core.http.Cookie getCookie(java.lang.String)
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.CookieJar v3;
io.vertx.core.http.impl.Http2ServerResponse v2;
java.lang.String v1;
io.vertx.core.http.impl.ServerCookie v4;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerResponse response>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.Http2ServerResponse: io.vertx.core.http.impl.CookieJar cookies()>();
v4 = virtualinvoke v3.<io.vertx.core.http.impl.CookieJar: io.vertx.core.http.impl.ServerCookie get(java.lang.String)>(v1);
return v4;
}
public io.vertx.core.http.Cookie getCookie(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.Http2ServerRequest v0;
io.vertx.core.http.impl.CookieJar v5;
io.vertx.core.http.impl.Http2ServerResponse v4;
java.lang.String v1, v2, v3;
io.vertx.core.http.impl.ServerCookie v6;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerResponse response>;
v5 = virtualinvoke v4.<io.vertx.core.http.impl.Http2ServerResponse: io.vertx.core.http.impl.CookieJar cookies()>();
v6 = virtualinvoke v5.<io.vertx.core.http.impl.CookieJar: io.vertx.core.http.impl.ServerCookie get(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
return v6;
}
public io.vertx.core.http.HttpServerRequest routed(java.lang.String)
{
io.vertx.core.http.impl.Http2ServerRequest v0;
java.lang.String v1;
io.vertx.core.http.impl.Http2ServerStream v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.http.impl.Http2ServerStream stream>;
virtualinvoke v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.HttpServerRequest routed(java.lang.String)>(v1);
return v0;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/http/impl/Http1xServerRequest;");
<io.vertx.core.http.impl.Http2ServerRequest: io.vertx.core.impl.logging.Logger log> = v0;
return;
}
}