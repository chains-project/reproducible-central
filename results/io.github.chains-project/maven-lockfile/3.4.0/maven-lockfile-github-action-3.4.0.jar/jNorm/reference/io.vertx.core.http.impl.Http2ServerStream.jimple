class io.vertx.core.http.impl.Http2ServerStream extends io.vertx.core.http.impl.VertxHttp2Stream
{
protected final io.netty.handler.codec.http2.Http2Headers headers;
protected final io.vertx.core.http.HttpMethod method;
protected final java.lang.String uri;
protected final java.lang.String host;
private final io.vertx.core.tracing.TracingPolicy tracingPolicy;
private java.lang.Object metric;
private java.lang.Object trace;
private boolean halfClosedRemote;
private boolean requestEnded;
private boolean responseEnded;
io.vertx.core.http.impl.Http2ServerStreamHandler request;
void <init>(io.vertx.core.http.impl.Http2ServerConnection, io.vertx.core.impl.ContextInternal, io.vertx.core.http.HttpMethod, java.lang.String, io.vertx.core.tracing.TracingPolicy, boolean)
{
io.vertx.core.http.impl.Http2ServerConnection v1;
io.vertx.core.http.HttpMethod v3;
io.vertx.core.http.impl.Http2ServerStream v0;
io.vertx.core.impl.ContextInternal v2;
java.lang.String v4;
io.vertx.core.tracing.TracingPolicy v5;
boolean v6;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: io.vertx.core.http.impl.Http2ServerConnection;
v2 := @parameter1: io.vertx.core.impl.ContextInternal;
v3 := @parameter2: io.vertx.core.http.HttpMethod;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: io.vertx.core.tracing.TracingPolicy;
v6 := @parameter5: boolean;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.vertx.core.impl.ContextInternal)>(v1, v2);
v0.<io.vertx.core.http.impl.Http2ServerStream: io.netty.handler.codec.http2.Http2Headers headers> = null;
v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.HttpMethod method> = v3;
v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.String uri> = v4;
v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.String host> = null;
v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v5;
v0.<io.vertx.core.http.impl.Http2ServerStream: boolean halfClosedRemote> = v6;
return;
}
void <init>(io.vertx.core.http.impl.Http2ServerConnection, io.vertx.core.impl.ContextInternal, io.netty.handler.codec.http2.Http2Headers, java.lang.String, io.vertx.core.tracing.TracingPolicy, boolean)
{
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.http.impl.Http2ServerStream v0;
int v11, v12;
java.lang.String v10, v15, v18, v4, v9;
io.vertx.core.tracing.TracingPolicy v5;
boolean v6;
io.vertx.core.http.impl.Http2ServerConnection v1;
io.netty.handler.codec.http2.Http2Headers v3;
io.vertx.core.http.HttpMethod v19;
java.lang.Object v13, v14, v16, v17, v7, v8;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: io.vertx.core.http.impl.Http2ServerConnection;
v2 := @parameter1: io.vertx.core.impl.ContextInternal;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Headers;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: io.vertx.core.tracing.TracingPolicy;
v6 := @parameter5: boolean;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.vertx.core.impl.ContextInternal)>(v1, v2);
v7 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(":authority");
if v7 == null goto label1;
v8 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(":authority");
v9 = virtualinvoke v8.<java.lang.Object: java.lang.String toString()>();
goto label2;
label1:
v9 = null;
label2:
v10 = v9;
if v9 != null goto label3;
v11 = virtualinvoke v4.<java.lang.String: int indexOf(java.lang.String)>("://");
v12 = v11 + 3;
v10 = virtualinvoke v4.<java.lang.String: java.lang.String substring(int)>(v12);
label3:
v0.<io.vertx.core.http.impl.Http2ServerStream: io.netty.handler.codec.http2.Http2Headers headers> = v3;
v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.String host> = v10;
v13 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(":path");
if v13 == null goto label4;
v14 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(":path");
v15 = virtualinvoke v14.<java.lang.Object: java.lang.String toString()>();
goto label5;
label4:
v15 = null;
label5:
v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.String uri> = v15;
v16 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(":method");
if v16 == null goto label6;
v17 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(":method");
v18 = virtualinvoke v17.<java.lang.Object: java.lang.String toString()>();
v19 = staticinvoke <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod valueOf(java.lang.String)>(v18);
goto label7;
label6:
v19 = null;
label7:
v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.HttpMethod method> = v19;
v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v5;
v0.<io.vertx.core.http.impl.Http2ServerStream: boolean halfClosedRemote> = v6;
return;
}
void registerMetrics()
{
io.vertx.core.spi.metrics.HttpServerMetrics v3;
io.vertx.core.http.impl.Http2ServerStream v0;
io.vertx.core.http.impl.Http2ServerResponse v12, v5;
java.lang.String v10;
io.vertx.core.http.impl.Http2ServerStreamHandler v11, v16, v4;
boolean v1, v6;
io.vertx.core.http.impl.Http2ConnectionBase v14, v2, v7;
io.vertx.core.http.HttpMethod v9;
java.lang.Object v13, v15, v17, v8;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 = <io.vertx.core.spi.metrics.Metrics: boolean METRICS_ENABLED>;
if v1 == 0 goto label2;
v2 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics()>();
if v3 == null goto label2;
v4 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
v5 = interfaceinvoke v4.<io.vertx.core.http.impl.Http2ServerStreamHandler: io.vertx.core.http.impl.Http2ServerResponse response()>();
v6 = virtualinvoke v5.<io.vertx.core.http.impl.Http2ServerResponse: boolean isPush()>();
if v6 == 0 goto label1;
v7 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v8 = virtualinvoke v7.<io.vertx.core.http.impl.Http2ServerConnection: java.lang.Object metric()>();
v9 = virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.HttpMethod method()>();
v10 = v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.String uri>;
v11 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
v12 = interfaceinvoke v11.<io.vertx.core.http.impl.Http2ServerStreamHandler: io.vertx.core.http.impl.Http2ServerResponse response()>();
v13 = interfaceinvoke v3.<io.vertx.core.spi.metrics.HttpServerMetrics: java.lang.Object responsePushed(java.lang.Object,io.vertx.core.http.HttpMethod,java.lang.String,io.vertx.core.spi.observability.HttpResponse)>(v8, v9, v10, v12);
v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.Object metric> = v13;
goto label2;
label1:
v14 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v15 = virtualinvoke v14.<io.vertx.core.http.impl.Http2ServerConnection: java.lang.Object metric()>();
v16 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
v17 = interfaceinvoke v3.<io.vertx.core.spi.metrics.HttpServerMetrics: java.lang.Object requestBegin(java.lang.Object,io.vertx.core.spi.observability.HttpRequest)>(v15, v16);
v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.Object metric> = v17;
label2:
return;
}
void onHeaders(io.netty.handler.codec.http2.Http2Headers, io.vertx.core.http.StreamPriority)
{
io.netty.util.AsciiString v10, v11, v3, v8;
io.vertx.core.impl.ContextInternal v15, v17;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v23;
io.vertx.core.spi.tracing.SpanKind v18;
io.vertx.core.http.impl.Http2ServerStream v0;
io.vertx.core.http.impl.Http2ServerResponse v14;
java.lang.String v22;
io.vertx.core.http.impl.Http2ServerStreamHandler v13, v20, v26;
io.vertx.core.tracing.TracingPolicy v19;
boolean v12, v7, v9;
io.vertx.core.http.impl.Http2ConnectionBase v27, v5;
io.vertx.core.spi.tracing.TagExtractor v24;
io.vertx.core.http.StreamPriority v2;
io.vertx.core.spi.tracing.VertxTracer v16;
io.netty.handler.codec.http2.Http2Headers v1;
io.vertx.core.http.HttpMethod v21;
io.vertx.core.http.HttpServerOptions v6;
java.lang.Object v25, v4;
io.vertx.core.Handler v28;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter1: io.vertx.core.http.StreamPriority;
if v2 == null goto label1;
virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerStream: void priority(io.vertx.core.http.StreamPriority)>(v2);
label1:
virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerStream: void registerMetrics()>();
v3 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString EXPECT>;
v4 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(v3);
v5 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v6 = v5.<io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.http.HttpServerOptions options>;
v7 = virtualinvoke v6.<io.vertx.core.http.HttpServerOptions: boolean isHandle100ContinueAutomatically()>();
if v7 == 0 goto label4;
if v4 == null goto label2;
v8 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString CONTINUE>;
v9 = virtualinvoke v8.<io.netty.util.AsciiString: boolean equals(java.lang.Object)>(v4);
if v9 != 0 goto label3;
label2:
v10 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString EXPECT>;
v11 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString CONTINUE>;
v12 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: boolean contains(java.lang.Object,java.lang.Object)>(v10, v11);
if v12 == 0 goto label4;
label3:
v13 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
v14 = interfaceinvoke v13.<io.vertx.core.http.impl.Http2ServerStreamHandler: io.vertx.core.http.impl.Http2ServerResponse response()>();
virtualinvoke v14.<io.vertx.core.http.impl.Http2ServerResponse: io.vertx.core.http.HttpServerResponse writeContinue()>();
label4:
v15 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.impl.ContextInternal context>;
v16 = interfaceinvoke v15.<io.vertx.core.impl.ContextInternal: io.vertx.core.spi.tracing.VertxTracer tracer()>();
if v16 == null goto label5;
v17 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.impl.ContextInternal context>;
v18 = <io.vertx.core.spi.tracing.SpanKind: io.vertx.core.spi.tracing.SpanKind RPC>;
v19 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.tracing.TracingPolicy tracingPolicy>;
v20 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
v21 = virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.HttpMethod method()>();
v22 = virtualinvoke v21.<io.vertx.core.http.HttpMethod: java.lang.String name()>();
v23 = new io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
specialinvoke v23.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)>(v1);
v24 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.spi.tracing.TagExtractor SERVER_REQUEST_TAG_EXTRACTOR>;
v25 = interfaceinvoke v16.<io.vertx.core.spi.tracing.VertxTracer: java.lang.Object receiveRequest(io.vertx.core.Context,io.vertx.core.spi.tracing.SpanKind,io.vertx.core.tracing.TracingPolicy,java.lang.Object,java.lang.String,java.lang.Iterable,io.vertx.core.spi.tracing.TagExtractor)>(v17, v18, v19, v20, v22, v23, v24);
v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.Object trace> = v25;
label5:
v26 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
v27 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v28 = v27.<io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.Handler requestHandler>;
interfaceinvoke v26.<io.vertx.core.http.impl.Http2ServerStreamHandler: void dispatch(io.vertx.core.Handler)>(v28);
return;
}
void onEnd(io.vertx.core.MultiMap)
{
io.vertx.core.MultiMap v1;
long v7;
io.vertx.core.spi.metrics.HttpServerMetrics v4;
io.vertx.core.http.impl.Http2ServerStream v0;
java.lang.Object v5;
io.vertx.core.http.impl.Http2ServerStreamHandler v6;
boolean v2;
io.vertx.core.http.impl.Http2ConnectionBase v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: io.vertx.core.MultiMap;
v0.<io.vertx.core.http.impl.Http2ServerStream: boolean requestEnded> = 1;
v2 = <io.vertx.core.spi.metrics.Metrics: boolean METRICS_ENABLED>;
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v4 = virtualinvoke v3.<io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics()>();
if v4 == null goto label1;
v5 = v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.Object metric>;
v6 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
v7 = virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerStream: long bytesRead()>();
interfaceinvoke v4.<io.vertx.core.spi.metrics.HttpServerMetrics: void requestEnd(java.lang.Object,io.vertx.core.spi.observability.HttpRequest,long)>(v5, v6, v7);
label1:
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void onEnd(io.vertx.core.MultiMap)>(v1);
return;
}
void doWriteHeaders(io.netty.handler.codec.http2.Http2Headers, boolean, io.vertx.core.Handler)
{
io.vertx.core.spi.metrics.HttpServerMetrics v6;
io.netty.handler.codec.http2.Http2Headers v1;
io.vertx.core.http.impl.Http2ServerStream v0;
io.vertx.core.http.impl.Http2ServerResponse v9;
java.lang.Object v7;
io.vertx.core.Handler v3;
io.vertx.core.http.impl.Http2ServerStreamHandler v8;
boolean v2, v4;
io.vertx.core.http.impl.Http2ConnectionBase v5;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
v4 = <io.vertx.core.spi.metrics.Metrics: boolean METRICS_ENABLED>;
if v4 == 0 goto label1;
if v2 != 0 goto label1;
v5 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v6 = virtualinvoke v5.<io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics()>();
if v6 == null goto label1;
v7 = v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.Object metric>;
v8 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
v9 = interfaceinvoke v8.<io.vertx.core.http.impl.Http2ServerStreamHandler: io.vertx.core.http.impl.Http2ServerResponse response()>();
interfaceinvoke v6.<io.vertx.core.spi.metrics.HttpServerMetrics: void responseBegin(java.lang.Object,io.vertx.core.spi.observability.HttpResponse)>(v7, v9);
label1:
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void doWriteHeaders(io.netty.handler.codec.http2.Http2Headers,boolean,io.vertx.core.Handler)>(v1, v2, v3);
return;
}
protected void doWriteReset(long)
{
io.vertx.core.http.impl.Http2ServerStream v0;
long v1;
boolean v2, v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.Http2ServerStream: boolean requestEnded>;
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ServerStream: boolean responseEnded>;
if v3 != 0 goto label2;
label1:
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void doWriteReset(long)>(v1);
label2:
return;
}
void handleWritabilityChanged(boolean)
{
io.vertx.core.http.impl.Http2ServerStream v0;
io.vertx.core.http.impl.Http2ServerResponse v3;
io.vertx.core.http.impl.Http2ServerStreamHandler v2;
boolean v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
v3 = interfaceinvoke v2.<io.vertx.core.http.impl.Http2ServerStreamHandler: io.vertx.core.http.impl.Http2ServerResponse response()>();
virtualinvoke v3.<io.vertx.core.http.impl.Http2ServerResponse: void handlerWritabilityChanged(boolean)>(v1);
return;
}
public io.vertx.core.http.HttpMethod method()
{
io.vertx.core.http.HttpMethod v1;
io.vertx.core.http.impl.Http2ServerStream v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.HttpMethod method>;
return v1;
}
protected void endWritten()
{
long v7;
io.vertx.core.spi.metrics.HttpServerMetrics v3;
io.vertx.core.http.impl.Http2ServerStream v0;
io.vertx.core.http.impl.Http2ServerResponse v6;
java.lang.Object v4;
io.vertx.core.http.impl.Http2ServerStreamHandler v5;
boolean v1;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v0.<io.vertx.core.http.impl.Http2ServerStream: boolean responseEnded> = 1;
v1 = <io.vertx.core.spi.metrics.Metrics: boolean METRICS_ENABLED>;
if v1 == 0 goto label1;
v2 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics()>();
if v3 == null goto label1;
v4 = v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.Object metric>;
v5 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
v6 = interfaceinvoke v5.<io.vertx.core.http.impl.Http2ServerStreamHandler: io.vertx.core.http.impl.Http2ServerResponse response()>();
v7 = virtualinvoke v0.<io.vertx.core.http.impl.Http2ServerStream: long bytesWritten()>();
interfaceinvoke v3.<io.vertx.core.spi.metrics.HttpServerMetrics: void responseEnd(java.lang.Object,io.vertx.core.spi.observability.HttpResponse,long)>(v4, v6, v7);
label1:
return;
}
void handleClose()
{
io.vertx.core.http.impl.Http2ServerStreamHandler v1;
io.vertx.core.http.impl.Http2ServerStream v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void handleClose()>();
v1 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
interfaceinvoke v1.<io.vertx.core.http.impl.Http2ServerStreamHandler: void handleClose()>();
return;
}
void handleReset(long)
{
long v1;
io.vertx.core.http.impl.Http2ServerStreamHandler v2;
io.vertx.core.http.impl.Http2ServerStream v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
interfaceinvoke v2.<io.vertx.core.http.impl.Http2ServerStreamHandler: void handleReset(long)>(v1);
return;
}
void handleException(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.http.impl.Http2ServerStreamHandler v2;
io.vertx.core.http.impl.Http2ServerStream v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
interfaceinvoke v2.<io.vertx.core.http.impl.Http2ServerStreamHandler: void handleException(java.lang.Throwable)>(v1);
return;
}
void handleCustomFrame(io.vertx.core.http.HttpFrame)
{
io.vertx.core.http.HttpFrame v1;
io.vertx.core.http.impl.Http2ServerStreamHandler v2;
io.vertx.core.http.impl.Http2ServerStream v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: io.vertx.core.http.HttpFrame;
v2 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
interfaceinvoke v2.<io.vertx.core.http.impl.Http2ServerStreamHandler: void handleCustomFrame(io.vertx.core.http.HttpFrame)>(v1);
return;
}
void handlePriorityChange(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.impl.Http2ServerStreamHandler v2;
io.vertx.core.http.StreamPriority v1;
io.vertx.core.http.impl.Http2ServerStream v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
v2 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
interfaceinvoke v2.<io.vertx.core.http.impl.Http2ServerStreamHandler: void handlePriorityChange(io.vertx.core.http.StreamPriority)>(v1);
return;
}
void handleData(io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.http.impl.Http2ServerStreamHandler v2;
io.vertx.core.http.impl.Http2ServerStream v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
interfaceinvoke v2.<io.vertx.core.http.impl.Http2ServerStreamHandler: void handleData(io.vertx.core.buffer.Buffer)>(v1);
return;
}
void handleEnd(io.vertx.core.MultiMap)
{
io.vertx.core.MultiMap v1;
io.vertx.core.http.impl.Http2ServerStreamHandler v2;
io.vertx.core.http.impl.Http2ServerStream v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: io.vertx.core.MultiMap;
v0.<io.vertx.core.http.impl.Http2ServerStream: boolean halfClosedRemote> = 1;
v2 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
interfaceinvoke v2.<io.vertx.core.http.impl.Http2ServerStreamHandler: void handleEnd(io.vertx.core.MultiMap)>(v1);
return;
}
void onClose()
{
java.lang.Throwable v16;
io.vertx.core.impl.ContextInternal v17, v8;
io.vertx.core.spi.metrics.HttpServerMetrics v3;
io.vertx.core.http.impl.Http2ServerStream v0;
io.vertx.core.http.impl.Http2ServerResponse v19;
io.vertx.core.http.impl.Http2ServerStreamHandler v18, v7;
boolean v1, v12, v13, v14, v4, v5;
io.vertx.core.http.impl.Http2ConnectionBase v11, v2;
io.vertx.core.spi.tracing.TagExtractor v20;
io.vertx.core.spi.tracing.VertxTracer v9;
io.vertx.core.http.HttpClosedException v15;
java.lang.Object v10, v6;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 = <io.vertx.core.spi.metrics.Metrics: boolean METRICS_ENABLED>;
if v1 == 0 goto label02;
v2 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics()>();
if v3 == null goto label02;
v4 = v0.<io.vertx.core.http.impl.Http2ServerStream: boolean requestEnded>;
if v4 == 0 goto label01;
v5 = v0.<io.vertx.core.http.impl.Http2ServerStream: boolean responseEnded>;
if v5 != 0 goto label02;
label01:
v6 = v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.Object metric>;
interfaceinvoke v3.<io.vertx.core.spi.metrics.HttpServerMetrics: void requestReset(java.lang.Object)>(v6);
label02:
v7 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
interfaceinvoke v7.<io.vertx.core.http.impl.Http2ServerStreamHandler: void onClose()>();
v8 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.impl.ContextInternal context>;
v9 = interfaceinvoke v8.<io.vertx.core.impl.ContextInternal: io.vertx.core.spi.tracing.VertxTracer tracer()>();
v10 = v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.Object trace>;
if v9 == null goto label12;
if v10 == null goto label12;
v11 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
entermonitor v11;
label03:
v12 = v0.<io.vertx.core.http.impl.Http2ServerStream: boolean halfClosedRemote>;
if v12 != 0 goto label05;
v13 = v0.<io.vertx.core.http.impl.Http2ServerStream: boolean requestEnded>;
if v13 == 0 goto label04;
v14 = v0.<io.vertx.core.http.impl.Http2ServerStream: boolean responseEnded>;
if v14 != 0 goto label05;
label04:
v15 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.http.HttpClosedException STREAM_CLOSED_EXCEPTION>;
goto label06;
label05:
v15 = null;
label06:
exitmonitor v11;
label07:
goto label09;
label08:
v16 := @caughtexception;
exitmonitor v11;
throw v16;
label09:
v17 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.impl.ContextInternal context>;
if v15 != null goto label10;
v18 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ServerStreamHandler request>;
v19 = interfaceinvoke v18.<io.vertx.core.http.impl.Http2ServerStreamHandler: io.vertx.core.http.impl.Http2ServerResponse response()>();
goto label11;
label10:
v19 = null;
label11:
v20 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.spi.tracing.TagExtractor SERVER_RESPONSE_TAG_EXTRACTOR>;
interfaceinvoke v9.<io.vertx.core.spi.tracing.VertxTracer: void sendResponse(io.vertx.core.Context,java.lang.Object,java.lang.Object,java.lang.Throwable,io.vertx.core.spi.tracing.TagExtractor)>(v17, v19, v10, v15, v20);
label12:
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void onClose()>();
return;
catch java.lang.Throwable from label03 to label07 with label08;
}
public java.lang.Object metric()
{
java.lang.Object v1;
io.vertx.core.http.impl.Http2ServerStream v0;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 = v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.Object metric>;
return v1;
}
public io.vertx.core.http.HttpServerRequest routed(java.lang.String)
{
io.vertx.core.spi.metrics.HttpServerMetrics v4;
io.vertx.core.http.impl.Http2ServerStream v0;
java.lang.Object v6;
java.lang.String v1;
boolean v2, v5;
io.vertx.core.http.impl.Http2ConnectionBase v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerStream;
v1 := @parameter0: java.lang.String;
v2 = <io.vertx.core.spi.metrics.Metrics: boolean METRICS_ENABLED>;
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v4 = virtualinvoke v3.<io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics()>();
if v4 == null goto label1;
v5 = v0.<io.vertx.core.http.impl.Http2ServerStream: boolean responseEnded>;
if v5 != 0 goto label1;
v6 = v0.<io.vertx.core.http.impl.Http2ServerStream: java.lang.Object metric>;
interfaceinvoke v4.<io.vertx.core.spi.metrics.HttpServerMetrics: void requestRouted(java.lang.Object,java.lang.String)>(v6, v1);
label1:
return null;
}
}