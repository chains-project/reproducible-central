public class io.vertx.core.http.impl.HttpChannelConnector extends java.lang.Object
{
private final io.vertx.core.http.impl.HttpClientImpl client;
private final io.vertx.core.net.impl.NetClientImpl netClient;
private final io.vertx.core.http.HttpClientOptions options;
private final io.vertx.core.net.ProxyOptions proxyOptions;
private final io.vertx.core.spi.metrics.ClientMetrics metrics;
private final boolean ssl;
private final boolean useAlpn;
private final io.vertx.core.http.HttpVersion version;
private final io.vertx.core.net.SocketAddress peerAddress;
private final io.vertx.core.net.SocketAddress server;
public void <init>(io.vertx.core.http.impl.HttpClientImpl, io.vertx.core.net.impl.NetClientImpl, io.vertx.core.net.ProxyOptions, io.vertx.core.spi.metrics.ClientMetrics, io.vertx.core.http.HttpVersion, boolean, boolean, io.vertx.core.net.SocketAddress, io.vertx.core.net.SocketAddress)
{
io.vertx.core.net.ProxyOptions v3;
io.vertx.core.http.impl.HttpChannelConnector v0;
io.vertx.core.http.impl.HttpClientImpl v1;
io.vertx.core.net.impl.NetClientImpl v2;
io.vertx.core.http.HttpVersion v5;
io.vertx.core.spi.metrics.ClientMetrics v4;
io.vertx.core.http.HttpClientOptions v10;
boolean v6, v7;
io.vertx.core.net.SocketAddress v8, v9;
v0 := @this: io.vertx.core.http.impl.HttpChannelConnector;
v1 := @parameter0: io.vertx.core.http.impl.HttpClientImpl;
v2 := @parameter1: io.vertx.core.net.impl.NetClientImpl;
v3 := @parameter2: io.vertx.core.net.ProxyOptions;
v4 := @parameter3: io.vertx.core.spi.metrics.ClientMetrics;
v5 := @parameter4: io.vertx.core.http.HttpVersion;
v6 := @parameter5: boolean;
v7 := @parameter6: boolean;
v8 := @parameter7: io.vertx.core.net.SocketAddress;
v9 := @parameter8: io.vertx.core.net.SocketAddress;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.impl.HttpClientImpl client> = v1;
v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.impl.NetClientImpl netClient> = v2;
v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.spi.metrics.ClientMetrics metrics> = v4;
v10 = virtualinvoke v1.<io.vertx.core.http.impl.HttpClientImpl: io.vertx.core.http.HttpClientOptions options()>();
v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options> = v10;
v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.ProxyOptions proxyOptions> = v3;
v0.<io.vertx.core.http.impl.HttpChannelConnector: boolean ssl> = v6;
v0.<io.vertx.core.http.impl.HttpChannelConnector: boolean useAlpn> = v7;
v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpVersion version> = v5;
v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.SocketAddress peerAddress> = v8;
v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.SocketAddress server> = v9;
return;
}
public io.vertx.core.net.SocketAddress server()
{
io.vertx.core.http.impl.HttpChannelConnector v0;
io.vertx.core.net.SocketAddress v1;
v0 := @this: io.vertx.core.http.impl.HttpChannelConnector;
v1 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.SocketAddress server>;
return v1;
}
private void connect(io.vertx.core.impl.EventLoopContext, io.vertx.core.Promise)
{
io.vertx.core.net.ProxyOptions v4;
io.vertx.core.http.impl.HttpChannelConnector v0;
io.vertx.core.Promise v2;
io.vertx.core.net.impl.NetClientImpl v3;
io.vertx.core.impl.EventLoopContext v1;
io.vertx.core.http.HttpClientOptions v7;
java.lang.String v10;
boolean v11, v12, v8;
io.vertx.core.net.SocketAddress v5, v6, v9;
v0 := @this: io.vertx.core.http.impl.HttpChannelConnector;
v1 := @parameter0: io.vertx.core.impl.EventLoopContext;
v2 := @parameter1: io.vertx.core.Promise;
v3 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.impl.NetClientImpl netClient>;
v4 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.ProxyOptions proxyOptions>;
v5 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.SocketAddress server>;
v6 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.SocketAddress peerAddress>;
v7 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v8 = virtualinvoke v7.<io.vertx.core.http.HttpClientOptions: boolean isForceSni()>();
if v8 == 0 goto label1;
v9 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.SocketAddress peerAddress>;
v10 = interfaceinvoke v9.<io.vertx.core.net.SocketAddress: java.lang.String host()>();
goto label2;
label1:
v10 = null;
label2:
v11 = v0.<io.vertx.core.http.impl.HttpChannelConnector: boolean ssl>;
v12 = v0.<io.vertx.core.http.impl.HttpChannelConnector: boolean useAlpn>;
virtualinvoke v3.<io.vertx.core.net.impl.NetClientImpl: void connectInternal(io.vertx.core.net.ProxyOptions,io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,boolean,boolean,boolean,io.vertx.core.Promise,io.vertx.core.impl.ContextInternal,int)>(v4, v5, v6, v10, v11, v12, 0, v2, v1, 0);
return;
}
public io.vertx.core.Future wrap(io.vertx.core.impl.EventLoopContext, io.vertx.core.net.NetSocket)
{
io.vertx.core.http.HttpVersion v25, v28, v30, v31, v34, v36;
boolean v12, v16, v18, v20, v24, v33, v9;
io.vertx.core.http.impl.HttpChannelConnector v0;
io.netty.channel.ChannelPipeline v21, v22, v27, v6;
io.vertx.core.Future v38;
io.vertx.core.net.NetSocket v2;
java.util.ArrayList v7;
io.netty.channel.ChannelHandlerContext v14, v5;
io.vertx.core.http.HttpClientOptions v32;
java.lang.String v17, v19, v23;
io.vertx.core.net.SocketAddress v26, v29, v35, v37;
io.vertx.core.impl.future.PromiseInternal v4;
java.util.Iterator v8;
io.netty.channel.Channel v15;
java.util.function.Consumer v13;
io.vertx.core.impl.EventLoopContext v1;
java.lang.Object v10, v11, v3;
v0 := @this: io.vertx.core.http.impl.HttpChannelConnector;
v1 := @parameter0: io.vertx.core.impl.EventLoopContext;
v2 := @parameter1: io.vertx.core.net.NetSocket;
v3 = virtualinvoke v2.<io.vertx.core.net.impl.NetSocketImpl: java.lang.Object metric()>();
v4 = virtualinvoke v1.<io.vertx.core.impl.EventLoopContext: io.vertx.core.impl.future.PromiseInternal promise()>();
v5 = virtualinvoke v2.<io.vertx.core.net.impl.NetSocketImpl: io.netty.channel.ChannelHandlerContext channelHandlerContext()>();
v6 = interfaceinvoke v5.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
v7 = new java.util.ArrayList;
specialinvoke v7.<java.util.ArrayList: void <init>()>();
v8 = interfaceinvoke v6.<io.netty.channel.ChannelPipeline: java.util.Iterator iterator()>();
label01:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label02;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v10.<java.util.Map$Entry: java.lang.Object getValue()>();
v12 = v11 instanceof io.netty.handler.ssl.SslHandler;
if v12 != 0 goto label01;
interfaceinvoke v7.<java.util.List: boolean add(java.lang.Object)>(v11);
goto label01;
label02:
virtualinvoke v6.<java.lang.Object: java.lang.Class getClass()>();
v13 = staticinvoke <io.vertx.core.http.impl.HttpChannelConnector$remove__1131: java.util.function.Consumer bootstrap$(io.netty.channel.ChannelPipeline)>(v6);
interfaceinvoke v7.<java.util.List: void forEach(java.util.function.Consumer)>(v13);
v14 = virtualinvoke v2.<io.vertx.core.net.impl.NetSocketImpl: io.netty.channel.ChannelHandlerContext channelHandlerContext()>();
v15 = interfaceinvoke v14.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v16 = v0.<io.vertx.core.http.impl.HttpChannelConnector: boolean ssl>;
if v16 == 0 goto label07;
v17 = virtualinvoke v2.<io.vertx.core.net.impl.NetSocketImpl: java.lang.String applicationLayerProtocol()>();
v18 = v0.<io.vertx.core.http.impl.HttpChannelConnector: boolean useAlpn>;
if v18 == 0 goto label06;
v19 = "h2";
v20 = virtualinvoke v19.<java.lang.String: boolean equals(java.lang.Object)>(v17);
if v20 == 0 goto label03;
v21 = interfaceinvoke v15.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void applyHttp2ConnectionOptions(io.netty.channel.ChannelPipeline)>(v21);
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void http2Connected(io.vertx.core.impl.EventLoopContext,java.lang.Object,io.netty.channel.Channel,io.vertx.core.impl.future.PromiseInternal)>(v1, v3, v15, v4);
goto label10;
label03:
v22 = interfaceinvoke v15.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void applyHttp1xConnectionOptions(io.netty.channel.ChannelPipeline)>(v22);
v23 = "http/1.0";
v24 = virtualinvoke v23.<java.lang.String: boolean equals(java.lang.Object)>(v17);
if v24 == 0 goto label04;
v25 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_1_0>;
goto label05;
label04:
v25 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_1_1>;
label05:
v26 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.SocketAddress server>;
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void http1xConnected(io.vertx.core.http.HttpVersion,io.vertx.core.net.SocketAddress,boolean,io.vertx.core.impl.ContextInternal,java.lang.Object,io.netty.channel.Channel,io.vertx.core.Promise)>(v25, v26, 1, v1, v3, v15, v4);
goto label10;
label06:
v27 = interfaceinvoke v15.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void applyHttp1xConnectionOptions(io.netty.channel.ChannelPipeline)>(v27);
v28 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpVersion version>;
v29 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.SocketAddress server>;
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void http1xConnected(io.vertx.core.http.HttpVersion,io.vertx.core.net.SocketAddress,boolean,io.vertx.core.impl.ContextInternal,java.lang.Object,io.netty.channel.Channel,io.vertx.core.Promise)>(v28, v29, 1, v1, v3, v15, v4);
goto label10;
label07:
v30 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpVersion version>;
v31 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_2>;
if v30 != v31 goto label09;
v32 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v33 = virtualinvoke v32.<io.vertx.core.http.HttpClientOptions: boolean isHttp2ClearTextUpgrade()>();
if v33 == 0 goto label08;
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void applyHttp1xConnectionOptions(io.netty.channel.ChannelPipeline)>(v6);
v34 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpVersion version>;
v35 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.SocketAddress server>;
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void http1xConnected(io.vertx.core.http.HttpVersion,io.vertx.core.net.SocketAddress,boolean,io.vertx.core.impl.ContextInternal,java.lang.Object,io.netty.channel.Channel,io.vertx.core.Promise)>(v34, v35, 0, v1, v3, v15, v4);
goto label10;
label08:
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void applyHttp2ConnectionOptions(io.netty.channel.ChannelPipeline)>(v6);
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void http2Connected(io.vertx.core.impl.EventLoopContext,java.lang.Object,io.netty.channel.Channel,io.vertx.core.impl.future.PromiseInternal)>(v1, v3, v15, v4);
goto label10;
label09:
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void applyHttp1xConnectionOptions(io.netty.channel.ChannelPipeline)>(v6);
v36 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpVersion version>;
v37 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.net.SocketAddress server>;
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void http1xConnected(io.vertx.core.http.HttpVersion,io.vertx.core.net.SocketAddress,boolean,io.vertx.core.impl.ContextInternal,java.lang.Object,io.netty.channel.Channel,io.vertx.core.Promise)>(v36, v37, 0, v1, v3, v15, v4);
label10:
v38 = interfaceinvoke v4.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
return v38;
}
public void httpConnect(io.vertx.core.impl.EventLoopContext, io.vertx.core.Handler)
{
io.vertx.core.impl.EventLoopContext v1;
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.http.impl.HttpChannelConnector v0;
io.vertx.core.Handler v2;
io.vertx.core.Future v4, v6;
java.util.function.Function v5;
v0 := @this: io.vertx.core.http.impl.HttpChannelConnector;
v1 := @parameter0: io.vertx.core.impl.EventLoopContext;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v1.<io.vertx.core.impl.EventLoopContext: io.vertx.core.impl.future.PromiseInternal promise()>();
v4 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
v5 = staticinvoke <io.vertx.core.http.impl.HttpChannelConnector$lambda_httpConnect_0__1132: java.util.function.Function bootstrap$(io.vertx.core.http.impl.HttpChannelConnector,io.vertx.core.impl.EventLoopContext)>(v0, v1);
v6 = interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future flatMap(java.util.function.Function)>(v5);
interfaceinvoke v6.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void connect(io.vertx.core.impl.EventLoopContext,io.vertx.core.Promise)>(v1, v3);
return;
}
private void applyHttp2ConnectionOptions(io.netty.channel.ChannelPipeline)
{
io.vertx.core.http.impl.HttpChannelConnector v0;
io.netty.channel.ChannelPipeline v1;
java.util.concurrent.TimeUnit v10;
io.netty.handler.timeout.IdleStateHandler v8;
int v3, v5, v7;
io.vertx.core.http.HttpClientOptions v2, v4, v6, v9;
v0 := @this: io.vertx.core.http.impl.HttpChannelConnector;
v1 := @parameter0: io.netty.channel.ChannelPipeline;
v2 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v3 = virtualinvoke v2.<io.vertx.core.http.HttpClientOptions: int getIdleTimeout()>();
v4 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v5 = virtualinvoke v4.<io.vertx.core.http.HttpClientOptions: int getReadIdleTimeout()>();
v6 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v7 = virtualinvoke v6.<io.vertx.core.http.HttpClientOptions: int getWriteIdleTimeout()>();
if v3 > 0 goto label1;
if v5 > 0 goto label1;
if v7 <= 0 goto label2;
label1:
v8 = new io.netty.handler.timeout.IdleStateHandler;
v9 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v10 = virtualinvoke v9.<io.vertx.core.http.HttpClientOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>();
specialinvoke v8.<io.netty.handler.timeout.IdleStateHandler: void <init>(long,long,long,java.util.concurrent.TimeUnit)>(v5, v7, v3, v10);
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>("idle", v8);
label2:
return;
}
private void applyHttp1xConnectionOptions(io.netty.channel.ChannelPipeline)
{
io.netty.handler.logging.LoggingHandler v13;
io.netty.handler.codec.http.HttpClientCodec v16;
io.netty.handler.logging.ByteBufFormat v15;
int v18, v20, v22, v26, v3, v5, v7;
io.vertx.core.http.HttpClientOptions v11, v14, v17, v19, v2, v21, v25, v27, v4, v6, v9;
boolean v12, v23, v24, v28;
io.vertx.core.http.impl.HttpChannelConnector v0;
io.netty.channel.ChannelPipeline v1;
java.util.concurrent.TimeUnit v10;
io.netty.handler.timeout.IdleStateHandler v8;
io.netty.handler.codec.http.HttpContentDecompressor v29;
v0 := @this: io.vertx.core.http.impl.HttpChannelConnector;
v1 := @parameter0: io.netty.channel.ChannelPipeline;
v2 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v3 = virtualinvoke v2.<io.vertx.core.http.HttpClientOptions: int getIdleTimeout()>();
v4 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v5 = virtualinvoke v4.<io.vertx.core.http.HttpClientOptions: int getReadIdleTimeout()>();
v6 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v7 = virtualinvoke v6.<io.vertx.core.http.HttpClientOptions: int getWriteIdleTimeout()>();
if v3 > 0 goto label1;
if v5 > 0 goto label1;
if v7 <= 0 goto label2;
label1:
v8 = new io.netty.handler.timeout.IdleStateHandler;
v9 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v10 = virtualinvoke v9.<io.vertx.core.http.HttpClientOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>();
specialinvoke v8.<io.netty.handler.timeout.IdleStateHandler: void <init>(long,long,long,java.util.concurrent.TimeUnit)>(v5, v7, v3, v10);
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>("idle", v8);
label2:
v11 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v12 = virtualinvoke v11.<io.vertx.core.http.HttpClientOptions: boolean getLogActivity()>();
if v12 == 0 goto label3;
v13 = new io.netty.handler.logging.LoggingHandler;
v14 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v15 = virtualinvoke v14.<io.vertx.core.http.HttpClientOptions: io.netty.handler.logging.ByteBufFormat getActivityLogDataFormat()>();
specialinvoke v13.<io.netty.handler.logging.LoggingHandler: void <init>(io.netty.handler.logging.ByteBufFormat)>(v15);
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>("logging", v13);
label3:
v16 = new io.netty.handler.codec.http.HttpClientCodec;
v17 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v18 = virtualinvoke v17.<io.vertx.core.http.HttpClientOptions: int getMaxInitialLineLength()>();
v19 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v20 = virtualinvoke v19.<io.vertx.core.http.HttpClientOptions: int getMaxHeaderSize()>();
v21 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v22 = virtualinvoke v21.<io.vertx.core.http.HttpClientOptions: int getMaxChunkSize()>();
v23 = <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION>;
if v23 != 0 goto label4;
v24 = 1;
goto label5;
label4:
v24 = 0;
label5:
v25 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v26 = virtualinvoke v25.<io.vertx.core.http.HttpClientOptions: int getDecoderInitialBufferSize()>();
specialinvoke v16.<io.netty.handler.codec.http.HttpClientCodec: void <init>(int,int,int,boolean,boolean,int)>(v18, v20, v22, 0, v24, v26);
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>("codec", v16);
v27 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v28 = virtualinvoke v27.<io.vertx.core.http.HttpClientOptions: boolean isTryUseCompression()>();
if v28 == 0 goto label6;
v29 = new io.netty.handler.codec.http.HttpContentDecompressor;
specialinvoke v29.<io.netty.handler.codec.http.HttpContentDecompressor: void <init>(boolean)>(0);
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>("inflater", v29);
label6:
return;
}
private void http1xConnected(io.vertx.core.http.HttpVersion, io.vertx.core.net.SocketAddress, boolean, io.vertx.core.impl.ContextInternal, java.lang.Object, io.netty.channel.Channel, io.vertx.core.Promise)
{
io.vertx.core.impl.ContextInternal v4;
java.util.function.Function v12;
io.vertx.core.http.HttpVersion v1, v8;
io.vertx.core.http.HttpClientOptions v9;
boolean v10, v11, v3;
io.vertx.core.net.SocketAddress v2;
io.vertx.core.net.impl.VertxHandler v13;
io.vertx.core.http.impl.HttpChannelConnector v0;
io.vertx.core.Promise v7;
io.netty.channel.ChannelPipeline v15;
io.netty.channel.Channel v6;
java.lang.Object v5;
io.vertx.core.Handler v14;
v0 := @this: io.vertx.core.http.impl.HttpChannelConnector;
v1 := @parameter0: io.vertx.core.http.HttpVersion;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: boolean;
v4 := @parameter3: io.vertx.core.impl.ContextInternal;
v5 := @parameter4: java.lang.Object;
v6 := @parameter5: io.netty.channel.Channel;
v7 := @parameter6: io.vertx.core.Promise;
v8 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_2>;
if v1 != v8 goto label1;
v9 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.HttpClientOptions options>;
v10 = virtualinvoke v9.<io.vertx.core.http.HttpClientOptions: boolean isHttp2ClearTextUpgrade()>();
if v10 == 0 goto label1;
v11 = 1;
goto label2;
label1:
v11 = 0;
label2:
v12 = staticinvoke <io.vertx.core.http.impl.HttpChannelConnector$lambda_http1xConnected_1__1133: java.util.function.Function bootstrap$(io.vertx.core.http.impl.HttpChannelConnector,boolean,io.vertx.core.http.HttpVersion,boolean,io.vertx.core.net.SocketAddress,io.vertx.core.impl.ContextInternal,java.lang.Object)>(v0, v11, v1, v3, v2, v4, v5);
v13 = staticinvoke <io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.VertxHandler create(java.util.function.Function)>(v12);
v14 = staticinvoke <io.vertx.core.http.impl.HttpChannelConnector$lambda_http1xConnected_5__1134: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpChannelConnector,boolean,io.vertx.core.Promise,io.vertx.core.net.SocketAddress)>(v0, v11, v7, v2);
virtualinvoke v13.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.VertxHandler addHandler(io.vertx.core.Handler)>(v14);
v15 = interfaceinvoke v6.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v15.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>("handler", v13);
return;
}
private void http2Connected(io.vertx.core.impl.EventLoopContext, java.lang.Object, io.netty.channel.Channel, io.vertx.core.impl.future.PromiseInternal)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v7;
io.vertx.core.impl.future.PromiseInternal v4;
io.vertx.core.http.impl.HttpChannelConnector v0;
io.vertx.core.http.impl.HttpClientImpl v5;
io.netty.channel.ChannelPipeline v8;
java.lang.Exception v9;
io.netty.channel.Channel v3;
io.vertx.core.impl.EventLoopContext v1;
io.vertx.core.spi.metrics.ClientMetrics v6;
java.lang.Object v2;
io.netty.util.concurrent.Future v10;
v0 := @this: io.vertx.core.http.impl.HttpChannelConnector;
v1 := @parameter0: io.vertx.core.impl.EventLoopContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.netty.channel.Channel;
v4 := @parameter3: io.vertx.core.impl.future.PromiseInternal;
label1:
v5 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.http.impl.HttpClientImpl client>;
v6 = v0.<io.vertx.core.http.impl.HttpChannelConnector: io.vertx.core.spi.metrics.ClientMetrics metrics>;
v7 = staticinvoke <io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.http.impl.VertxHttp2ConnectionHandler createHttp2ConnectionHandler(io.vertx.core.http.impl.HttpClientImpl,io.vertx.core.spi.metrics.ClientMetrics,io.vertx.core.impl.EventLoopContext,boolean,java.lang.Object)>(v5, v6, v1, 0, v2);
v8 = interfaceinvoke v3.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v8.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>("handler", v7);
interfaceinvoke v3.<io.netty.channel.Channel: io.netty.channel.Channel flush()>();
label2:
goto label4;
label3:
v9 := @caughtexception;
specialinvoke v0.<io.vertx.core.http.impl.HttpChannelConnector: void connectFailed(io.netty.channel.Channel,java.lang.Throwable,io.vertx.core.Promise)>(v3, v9, v4);
return;
label4:
v10 = virtualinvoke v7.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.util.concurrent.Future connectFuture()>();
interfaceinvoke v10.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v4);
return;
catch java.lang.Exception from label1 to label2 with label3;
}
private void connectFailed(io.netty.channel.Channel, java.lang.Throwable, io.vertx.core.Promise)
{
io.netty.channel.Channel v1;
java.lang.Throwable v2;
io.vertx.core.http.impl.HttpChannelConnector v0;
io.vertx.core.Promise v3;
v0 := @this: io.vertx.core.http.impl.HttpChannelConnector;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: java.lang.Throwable;
v3 := @parameter2: io.vertx.core.Promise;
interfaceinvoke v3.<io.vertx.core.Promise: boolean tryFail(java.lang.Throwable)>(v2);
return;
}
}