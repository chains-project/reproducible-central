class io.vertx.core.http.impl.HttpEventHandler extends java.lang.Object
{
final io.vertx.core.impl.ContextInternal context;
private io.vertx.core.Handler chunkHandler;
private io.vertx.core.Handler endHandler;
private io.vertx.core.Handler exceptionHandler;
private io.vertx.core.buffer.Buffer body;
private io.vertx.core.Promise bodyPromise;
private io.vertx.core.Promise endPromise;
void <init>(io.vertx.core.impl.ContextInternal)
{
io.vertx.core.http.impl.HttpEventHandler v0;
io.vertx.core.impl.ContextInternal v1;
v0 := @this: io.vertx.core.http.impl.HttpEventHandler;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.impl.ContextInternal context> = v1;
return;
}
void chunkHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpEventHandler v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpEventHandler;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Handler chunkHandler> = v1;
return;
}
void endHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpEventHandler v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpEventHandler;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Handler endHandler> = v1;
return;
}
void exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpEventHandler v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpEventHandler;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Handler exceptionHandler> = v1;
return;
}
void handleChunk(io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v1, v4, v5;
io.vertx.core.http.impl.HttpEventHandler v0;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpEventHandler;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Handler chunkHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: void dispatch(java.lang.Object,io.vertx.core.Handler)>(v1, v2);
label1:
v4 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.buffer.Buffer body>;
if v4 == null goto label2;
v5 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.buffer.Buffer body>;
interfaceinvoke v5.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>(v1);
label2:
return;
}
io.vertx.core.Future body()
{
io.vertx.core.impl.future.PromiseInternal v4;
io.vertx.core.buffer.Buffer v1, v2;
io.vertx.core.Promise v5;
io.vertx.core.http.impl.HttpEventHandler v0;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.http.impl.HttpEventHandler;
v1 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.buffer.Buffer body>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer()>();
v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.buffer.Buffer body> = v2;
v3 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.impl.ContextInternal context>;
v4 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise bodyPromise> = v4;
label1:
v5 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise bodyPromise>;
v6 = interfaceinvoke v5.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v6;
}
io.vertx.core.Future end()
{
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.Promise v1, v4;
io.vertx.core.http.impl.HttpEventHandler v0;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.http.impl.HttpEventHandler;
v1 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise endPromise>;
if v1 != null goto label1;
v2 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.impl.ContextInternal context>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise endPromise> = v3;
label1:
v4 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise endPromise>;
v5 = interfaceinvoke v4.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v5;
}
void handleEnd()
{
io.vertx.core.Promise v3, v4, v6, v7;
io.vertx.core.http.impl.HttpEventHandler v0;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.buffer.Buffer v5;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpEventHandler;
v1 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Handler endHandler>;
if v1 == null goto label1;
v2 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: void dispatch(io.vertx.core.Handler)>(v1);
label1:
v3 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise bodyPromise>;
if v3 == null goto label2;
v4 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise bodyPromise>;
v5 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.buffer.Buffer body>;
interfaceinvoke v4.<io.vertx.core.Promise: boolean tryComplete(java.lang.Object)>(v5);
label2:
v6 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise endPromise>;
if v6 == null goto label3;
v7 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise endPromise>;
interfaceinvoke v7.<io.vertx.core.Promise: boolean tryComplete()>();
label3:
return;
}
void handleException(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.Promise v4, v5, v6, v7;
io.vertx.core.http.impl.HttpEventHandler v0;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpEventHandler;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Handler exceptionHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: void dispatch(java.lang.Object,io.vertx.core.Handler)>(v1, v2);
label1:
v4 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise bodyPromise>;
if v4 == null goto label2;
v5 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise bodyPromise>;
interfaceinvoke v5.<io.vertx.core.Promise: boolean tryFail(java.lang.Throwable)>(v1);
label2:
v6 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise endPromise>;
if v6 == null goto label3;
v7 = v0.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Promise endPromise>;
interfaceinvoke v7.<io.vertx.core.Promise: boolean tryFail(java.lang.Throwable)>(v1);
label3:
return;
}
}