class io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder extends io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder
{
private boolean useDecompression;
private io.netty.handler.codec.compression.CompressionOptions[] compressionOptions;
private java.util.function.Function connectionFactory;
private boolean logEnabled;
void <init>()
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void <init>()>();
return;
}
protected io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder server(boolean)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder v0;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v2;
boolean v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder server(boolean)>(v1);
return v2;
}
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder initialSettings(io.vertx.core.http.Http2Settings)
{
io.netty.handler.codec.http2.Http2Settings v3;
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder v0;
io.vertx.core.http.Http2Settings v1;
boolean v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder;
v1 := @parameter0: io.vertx.core.http.Http2Settings;
v2 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: boolean isServer()>();
v3 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2Settings initialSettings()>();
staticinvoke <io.vertx.core.http.impl.HttpUtils: void fromVertxInitialSettings(boolean,io.vertx.core.http.Http2Settings,io.netty.handler.codec.http2.Http2Settings)>(v2, v1, v3);
return v0;
}
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder useCompression(io.netty.handler.codec.compression.CompressionOptions[])
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder v0;
io.netty.handler.codec.compression.CompressionOptions[] v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder;
v1 := @parameter0: io.netty.handler.codec.compression.CompressionOptions[];
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: io.netty.handler.codec.compression.CompressionOptions[] compressionOptions> = v1;
return v0;
}
protected io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder gracefulShutdownTimeoutMillis(long)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder v0;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v2;
long v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder;
v1 := @parameter0: long;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder gracefulShutdownTimeoutMillis(long)>(v1);
return v2;
}
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder useDecompression(boolean)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: boolean useDecompression> = v1;
return v0;
}
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder connectionFactory(java.util.function.Function)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder v0;
java.util.function.Function v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder;
v1 := @parameter0: java.util.function.Function;
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: java.util.function.Function connectionFactory> = v1;
return v0;
}
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder logEnabled(boolean)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: boolean logEnabled> = v1;
return v0;
}
protected io.vertx.core.http.impl.VertxHttp2ConnectionHandler build()
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder v0;
io.netty.handler.logging.LogLevel v3;
io.netty.handler.codec.http2.Http2FrameLogger v2;
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder$1 v4;
io.netty.handler.codec.http2.Http2ConnectionHandler v5;
boolean v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: boolean logEnabled>;
if v1 == 0 goto label1;
v2 = new io.netty.handler.codec.http2.Http2FrameLogger;
v3 = <io.netty.handler.logging.LogLevel: io.netty.handler.logging.LogLevel DEBUG>;
specialinvoke v2.<io.netty.handler.codec.http2.Http2FrameLogger: void <init>(io.netty.handler.logging.LogLevel)>(v3);
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder frameLogger(io.netty.handler.codec.http2.Http2FrameLogger)>(v2);
label1:
v4 = new io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder$1;
specialinvoke v4.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder$1: void <init>(io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder)>(v0);
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder frameListener(io.netty.handler.codec.http2.Http2FrameListener)>(v4);
v5 = specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionHandler build()>();
return v5;
}
protected io.vertx.core.http.impl.VertxHttp2ConnectionHandler build(io.netty.handler.codec.http2.Http2ConnectionDecoder, io.netty.handler.codec.http2.Http2ConnectionEncoder, io.netty.handler.codec.http2.Http2Settings) throws java.lang.Exception
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder v0;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v11, v8;
io.netty.handler.codec.compression.CompressionOptions[] v5, v7;
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v6;
io.netty.handler.codec.http2.Http2ConnectionEncoder v2;
java.util.function.Function v12, v9;
io.netty.handler.codec.http2.Http2ConnectionDecoder v1;
io.netty.handler.codec.http2.Http2Settings v3;
boolean v10, v13, v4;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2ConnectionDecoder;
v2 := @parameter1: io.netty.handler.codec.http2.Http2ConnectionEncoder;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Settings;
v4 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: boolean isServer()>();
if v4 == 0 goto label2;
v5 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: io.netty.handler.codec.compression.CompressionOptions[] compressionOptions>;
if v5 == null goto label1;
v6 = new io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v7 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: io.netty.handler.codec.compression.CompressionOptions[] compressionOptions>;
specialinvoke v6.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: void <init>(io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.compression.CompressionOptions[])>(v2, v7);
v2 = v6;
label1:
v8 = new io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v9 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: java.util.function.Function connectionFactory>;
v10 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: boolean useDecompression>;
specialinvoke v8.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void <init>(java.util.function.Function,boolean,io.netty.handler.codec.http2.Http2ConnectionDecoder,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2Settings)>(v9, v10, v1, v2, v3);
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2ConnectionDecoder: void frameListener(io.netty.handler.codec.http2.Http2FrameListener)>(v8);
return v8;
label2:
v11 = new io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v12 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: java.util.function.Function connectionFactory>;
v13 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandlerBuilder: boolean useDecompression>;
specialinvoke v11.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void <init>(java.util.function.Function,boolean,io.netty.handler.codec.http2.Http2ConnectionDecoder,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2Settings)>(v12, v13, v1, v2, v3);
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2ConnectionDecoder: void frameListener(io.netty.handler.codec.http2.Http2FrameListener)>(v11);
return v11;
}
}