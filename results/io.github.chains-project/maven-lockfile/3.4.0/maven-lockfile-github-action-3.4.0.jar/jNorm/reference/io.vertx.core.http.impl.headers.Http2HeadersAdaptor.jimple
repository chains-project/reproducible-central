public class io.vertx.core.http.impl.headers.Http2HeadersAdaptor extends java.lang.Object implements io.vertx.core.MultiMap
{
private final io.netty.handler.codec.http2.Http2Headers headers;
public void <init>(io.netty.handler.codec.http2.Http2Headers)
{
io.netty.util.AsciiString v2, v8;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.util.List v3;
java.util.stream.Stream v5;
io.netty.handler.codec.http2.Http2Headers v1;
int v4;
java.lang.Object v7;
java.util.stream.Collector v6;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Headers;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString COOKIE>;
v3 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.util.List getAll(java.lang.Object)>(v2);
if v3 == null goto label1;
v4 = interfaceinvoke v3.<java.util.List: int size()>();
if v4 <= 1 goto label1;
v5 = interfaceinvoke v3.<java.util.List: java.util.stream.Stream stream()>();
v6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>("; ");
v7 = interfaceinvoke v5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v6);
v8 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString COOKIE>;
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Object)>(v8, v7);
label1:
v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers> = v1;
return;
}
public java.lang.String get(java.lang.String)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v3;
io.netty.handler.codec.http2.Http2Headers v2;
java.lang.Object v4;
java.lang.String v1, v5;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v3 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
v4 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(v3);
if v4 == null goto label1;
v5 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
goto label2;
label1:
v5 = null;
label2:
return v5;
}
public java.util.List getAll(java.lang.String)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.util.List v4;
java.lang.CharSequence v3;
io.netty.handler.codec.http2.Http2Headers v2;
java.lang.String v1;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor$1 v5;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v3 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
v4 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: java.util.List getAll(java.lang.Object)>(v3);
if v4 == null goto label1;
v5 = new io.vertx.core.http.impl.headers.Http2HeadersAdaptor$1;
specialinvoke v5.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor$1: void <init>(io.vertx.core.http.impl.headers.Http2HeadersAdaptor,java.util.List)>(v0, v4);
return v5;
label1:
return null;
}
public boolean contains(java.lang.String)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v3;
io.netty.handler.codec.http2.Http2Headers v2;
java.lang.String v1;
boolean v4;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v3 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
v4 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: boolean contains(java.lang.Object)>(v3);
return v4;
}
public boolean contains(java.lang.String, java.lang.String, boolean)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v5;
io.netty.handler.codec.http2.Http2Headers v4;
java.lang.String v1, v2;
boolean v3, v6;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v5 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
v6 = interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v5, v2, v3);
return v6;
}
public boolean isEmpty()
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
io.netty.handler.codec.http2.Http2Headers v1;
boolean v2;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v2 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: boolean isEmpty()>();
return v2;
}
public java.util.Set names()
{
java.util.Iterator v4;
java.util.TreeSet v1;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
io.netty.handler.codec.http2.Http2Headers v3;
java.lang.Object v6, v7;
java.lang.String v8;
java.util.Comparator v2;
boolean v5;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 = new java.util.TreeSet;
v2 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;
specialinvoke v1.<java.util.TreeSet: void <init>(java.util.Comparator)>(v2);
v3 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v4 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
v8 = virtualinvoke v7.<java.lang.Object: java.lang.String toString()>();
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v8);
goto label1;
label2:
return v1;
}
public io.vertx.core.MultiMap add(java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v5;
io.netty.handler.codec.http2.Http2Headers v4;
java.lang.String v1, v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION>;
if v3 != 0 goto label1;
staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
label1:
v4 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v5 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v5, v2);
return v0;
}
public io.vertx.core.MultiMap add(java.lang.String, java.lang.Iterable)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v5;
io.netty.handler.codec.http2.Http2Headers v4;
java.lang.String v1;
java.lang.Iterable v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION>;
if v3 != 0 goto label1;
staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
label1:
v4 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v5 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Iterable)>(v5, v2);
return v0;
}
public io.vertx.core.MultiMap addAll(io.vertx.core.MultiMap)
{
java.util.Iterator v3;
io.vertx.core.MultiMap v1;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.util.List v2;
java.lang.Object v5, v6, v7;
boolean v4;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = interfaceinvoke v1.<io.vertx.core.MultiMap: java.util.List entries()>();
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>(v6, v7);
goto label1;
label2:
return v0;
}
public io.vertx.core.MultiMap addAll(java.util.Map)
{
java.util.Iterator v3;
java.util.Set v2;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.util.Map v1;
java.lang.Object v5, v6, v7;
boolean v4;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.util.Map;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>(v6, v7);
goto label1;
label2:
return v0;
}
public io.vertx.core.MultiMap set(java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v4;
io.netty.handler.codec.http2.Http2Headers v5, v6;
java.lang.String v1, v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION>;
if v3 != 0 goto label1;
staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
label1:
v4 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
if v2 == null goto label2;
v5 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
interfaceinvoke v5.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Object)>(v4, v2);
goto label3;
label2:
v6 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
interfaceinvoke v6.<io.netty.handler.codec.http2.Http2Headers: boolean remove(java.lang.Object)>(v4);
label3:
return v0;
}
public io.vertx.core.MultiMap set(java.lang.String, java.lang.Iterable)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v5;
io.netty.handler.codec.http2.Http2Headers v4;
java.lang.String v1;
java.lang.Iterable v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION>;
if v3 != 0 goto label1;
staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
label1:
v4 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v5 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Iterable)>(v5, v2);
return v0;
}
public io.vertx.core.MultiMap setAll(io.vertx.core.MultiMap)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.util.Iterator v2;
io.vertx.core.MultiMap v1;
java.lang.Object v4, v5, v6;
boolean v3;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: io.vertx.core.MultiMap;
virtualinvoke v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.vertx.core.MultiMap clear()>();
v2 = interfaceinvoke v1.<io.vertx.core.MultiMap: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>(v5, v6);
goto label1;
label2:
return v0;
}
public io.vertx.core.MultiMap remove(java.lang.String)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v3;
io.netty.handler.codec.http2.Http2Headers v2;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v3 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: boolean remove(java.lang.Object)>(v3);
return v0;
}
public io.vertx.core.MultiMap clear()
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
io.netty.handler.codec.http2.Http2Headers v1;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers clear()>();
return v0;
}
public java.util.Iterator iterator()
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.util.Iterator v2;
io.netty.handler.codec.http2.Http2Headers v1;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor$2 v3;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v2 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.util.Iterator iterator()>();
v3 = new io.vertx.core.http.impl.headers.Http2HeadersAdaptor$2;
specialinvoke v3.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor$2: void <init>(io.vertx.core.http.impl.headers.Http2HeadersAdaptor,java.util.Iterator)>(v0, v2);
return v3;
}
public int size()
{
int v2;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.util.Set v1;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: java.util.Set names()>();
v2 = interfaceinvoke v1.<java.util.Set: int size()>();
return v2;
}
public io.vertx.core.MultiMap setAll(java.util.Map)
{
java.util.Iterator v3;
java.util.Set v2;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.util.Map v1;
java.lang.Object v5, v6, v7;
boolean v4;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.util.Map;
virtualinvoke v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.vertx.core.MultiMap clear()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>(v6, v7);
goto label1;
label2:
return v0;
}
public java.lang.String get(java.lang.CharSequence)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v1, v3;
io.netty.handler.codec.http2.Http2Headers v2;
java.lang.Object v4;
java.lang.String v5;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v3 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
v4 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(v3);
if v4 == null goto label1;
v5 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
goto label2;
label1:
v5 = null;
label2:
return v5;
}
public java.util.List getAll(java.lang.CharSequence)
{
java.lang.CharSequence v1, v3;
java.util.function.Function v6;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.util.List v4;
java.util.stream.Stream v5, v7;
io.netty.handler.codec.http2.Http2Headers v2;
java.lang.Object v9;
java.util.stream.Collector v8;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v3 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
v4 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: java.util.List getAll(java.lang.Object)>(v3);
if v4 == null goto label1;
v5 = interfaceinvoke v4.<java.util.List: java.util.stream.Stream stream()>();
v6 = staticinvoke <io.vertx.core.http.impl.headers.Http2HeadersAdaptor$toString__1164: java.util.function.Function bootstrap$()>();
v7 = interfaceinvoke v5.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v6);
v8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v9 = interfaceinvoke v7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v8);
goto label2;
label1:
v9 = null;
label2:
return v9;
}
public boolean contains(java.lang.CharSequence)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v1, v3;
io.netty.handler.codec.http2.Http2Headers v2;
boolean v4;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v3 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
v4 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: boolean contains(java.lang.Object)>(v3);
return v4;
}
public boolean contains(java.lang.CharSequence, java.lang.CharSequence, boolean)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v1, v2, v5;
io.netty.handler.codec.http2.Http2Headers v4;
boolean v3, v6;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 := @parameter2: boolean;
v4 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v5 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
v6 = interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v5, v2, v3);
return v6;
}
public io.vertx.core.MultiMap add(java.lang.CharSequence, java.lang.CharSequence)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v1, v2, v5;
io.netty.handler.codec.http2.Http2Headers v4;
boolean v3;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION>;
if v3 != 0 goto label1;
staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
label1:
v4 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v5 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v5, v2);
return v0;
}
public io.vertx.core.MultiMap add(java.lang.CharSequence, java.lang.Iterable)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v1, v5;
io.netty.handler.codec.http2.Http2Headers v4;
java.lang.Iterable v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION>;
if v3 != 0 goto label1;
staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
label1:
v4 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v5 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Iterable)>(v5, v2);
return v0;
}
public io.vertx.core.MultiMap set(java.lang.CharSequence, java.lang.CharSequence)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v1, v2, v4;
io.netty.handler.codec.http2.Http2Headers v5, v6;
boolean v3;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION>;
if v3 != 0 goto label1;
staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
label1:
v4 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
if v2 == null goto label2;
v5 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
interfaceinvoke v5.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Object)>(v4, v2);
goto label3;
label2:
v6 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
interfaceinvoke v6.<io.netty.handler.codec.http2.Http2Headers: boolean remove(java.lang.Object)>(v4);
label3:
return v0;
}
public io.vertx.core.MultiMap set(java.lang.CharSequence, java.lang.Iterable)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v1, v5;
io.netty.handler.codec.http2.Http2Headers v4;
java.lang.Iterable v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION>;
if v3 != 0 goto label1;
staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
label1:
v4 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v5 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Iterable)>(v5, v2);
return v0;
}
public io.vertx.core.MultiMap remove(java.lang.CharSequence)
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
java.lang.CharSequence v1, v3;
io.netty.handler.codec.http2.Http2Headers v2;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v3 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(v1);
interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: boolean remove(java.lang.Object)>(v3);
return v0;
}
public java.lang.String toString()
{
java.util.Iterator v3;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
io.netty.handler.codec.http2.Http2Headers v2;
java.lang.Object v5;
java.lang.StringBuilder v1, v6;
java.lang.String v7;
boolean v4;
v0 := @this: io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers headers>;
v3 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v5);
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);
goto label1;
label2:
v7 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v7;
}
}