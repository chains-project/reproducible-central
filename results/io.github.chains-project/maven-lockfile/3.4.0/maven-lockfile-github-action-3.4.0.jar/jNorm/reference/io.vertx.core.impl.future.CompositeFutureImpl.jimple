public class io.vertx.core.impl.future.CompositeFutureImpl extends io.vertx.core.impl.future.FutureImpl implements io.vertx.core.CompositeFuture
{
private static final java.util.function.Function ALL;
private final io.vertx.core.Future[] results;
private int count;
public static transient io.vertx.core.CompositeFuture all(io.vertx.core.Future[])
{
int v2, v3, v4;
io.vertx.core.Future[] v0;
io.vertx.core.impl.future.CompositeFutureImpl v1;
io.vertx.core.Handler v6;
io.vertx.core.Future v5;
v0 := @parameter0: io.vertx.core.Future[];
v1 = new io.vertx.core.impl.future.CompositeFutureImpl;
specialinvoke v1.<io.vertx.core.impl.future.CompositeFutureImpl: void <init>(io.vertx.core.Future[])>(v0);
v2 = lengthof v0;
v3 = lengthof v0;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v0[v4];
v6 = staticinvoke <io.vertx.core.impl.future.CompositeFutureImpl$lambda_all_0__1545: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.future.CompositeFutureImpl,int)>(v1, v2);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v6);
v4 = v4 + 1;
goto label1;
label2:
if v2 != 0 goto label3;
specialinvoke v1.<io.vertx.core.impl.future.CompositeFutureImpl: void trySucceed()>();
label3:
return v1;
}
public static transient io.vertx.core.CompositeFuture any(io.vertx.core.Future[])
{
io.vertx.core.Future v5;
int v2, v3, v4, v7;
io.vertx.core.Future[] v0;
io.vertx.core.impl.future.CompositeFutureImpl v1;
io.vertx.core.Handler v6;
v0 := @parameter0: io.vertx.core.Future[];
v1 = new io.vertx.core.impl.future.CompositeFutureImpl;
specialinvoke v1.<io.vertx.core.impl.future.CompositeFutureImpl: void <init>(io.vertx.core.Future[])>(v0);
v2 = lengthof v0;
v3 = lengthof v0;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v0[v4];
v6 = staticinvoke <io.vertx.core.impl.future.CompositeFutureImpl$lambda_any_1__1546: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.future.CompositeFutureImpl,int)>(v1, v2);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v6);
v4 = v4 + 1;
goto label1;
label2:
v7 = lengthof v0;
if v7 != 0 goto label3;
specialinvoke v1.<io.vertx.core.impl.future.CompositeFutureImpl: void trySucceed()>();
label3:
return v1;
}
public static transient io.vertx.core.CompositeFuture join(io.vertx.core.Future[])
{
io.vertx.core.Future[] v0;
io.vertx.core.CompositeFuture v2;
java.util.function.Function v1;
v0 := @parameter0: io.vertx.core.Future[];
v1 = <io.vertx.core.impl.future.CompositeFutureImpl: java.util.function.Function ALL>;
v2 = staticinvoke <io.vertx.core.impl.future.CompositeFutureImpl: io.vertx.core.CompositeFuture join(java.util.function.Function,io.vertx.core.Future[])>(v1, v0);
return v2;
}
private static transient io.vertx.core.CompositeFuture join(java.util.function.Function, io.vertx.core.Future[])
{
io.vertx.core.Future v6;
java.util.function.Function v0;
int v3, v4, v5;
io.vertx.core.Future[] v1;
io.vertx.core.impl.future.CompositeFutureImpl v2;
io.vertx.core.Handler v7;
v0 := @parameter0: java.util.function.Function;
v1 := @parameter1: io.vertx.core.Future[];
v2 = new io.vertx.core.impl.future.CompositeFutureImpl;
specialinvoke v2.<io.vertx.core.impl.future.CompositeFutureImpl: void <init>(io.vertx.core.Future[])>(v1);
v3 = lengthof v1;
v4 = lengthof v1;
v5 = 0;
label1:
if v5 >= v4 goto label2;
v6 = v1[v5];
v7 = staticinvoke <io.vertx.core.impl.future.CompositeFutureImpl$lambda_join_3__1547: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.future.CompositeFutureImpl,int,java.util.function.Function)>(v2, v3, v0);
interfaceinvoke v6.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v7);
v5 = v5 + 1;
goto label1;
label2:
if v3 != 0 goto label3;
specialinvoke v2.<io.vertx.core.impl.future.CompositeFutureImpl: void trySucceed()>();
label3:
return v2;
}
private transient void <init>(io.vertx.core.Future[])
{
io.vertx.core.Future[] v1;
io.vertx.core.impl.future.CompositeFutureImpl v0;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: io.vertx.core.Future[];
specialinvoke v0.<io.vertx.core.impl.future.FutureImpl: void <init>()>();
v0.<io.vertx.core.impl.future.CompositeFutureImpl: io.vertx.core.Future[] results> = v1;
return;
}
public java.lang.Throwable cause(int)
{
java.lang.Throwable v3;
int v1;
io.vertx.core.impl.future.CompositeFutureImpl v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.impl.future.CompositeFutureImpl: io.vertx.core.Future future(int)>(v1);
v3 = interfaceinvoke v2.<io.vertx.core.Future: java.lang.Throwable cause()>();
return v3;
}
public boolean succeeded(int)
{
int v1;
io.vertx.core.impl.future.CompositeFutureImpl v0;
io.vertx.core.Future v2;
boolean v3;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.impl.future.CompositeFutureImpl: io.vertx.core.Future future(int)>(v1);
v3 = interfaceinvoke v2.<io.vertx.core.Future: boolean succeeded()>();
return v3;
}
public boolean failed(int)
{
int v1;
io.vertx.core.impl.future.CompositeFutureImpl v0;
io.vertx.core.Future v2;
boolean v3;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.impl.future.CompositeFutureImpl: io.vertx.core.Future future(int)>(v1);
v3 = interfaceinvoke v2.<io.vertx.core.Future: boolean failed()>();
return v3;
}
public boolean isComplete(int)
{
int v1;
io.vertx.core.impl.future.CompositeFutureImpl v0;
io.vertx.core.Future v2;
boolean v3;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.impl.future.CompositeFutureImpl: io.vertx.core.Future future(int)>(v1);
v3 = interfaceinvoke v2.<io.vertx.core.Future: boolean isComplete()>();
return v3;
}
public java.lang.Object resultAt(int)
{
int v1;
io.vertx.core.impl.future.CompositeFutureImpl v0;
java.lang.Object v3;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.impl.future.CompositeFutureImpl: io.vertx.core.Future future(int)>(v1);
v3 = interfaceinvoke v2.<io.vertx.core.Future: java.lang.Object result()>();
return v3;
}
private io.vertx.core.Future future(int)
{
java.lang.IndexOutOfBoundsException v4;
int v1, v3;
io.vertx.core.Future[] v2, v5;
io.vertx.core.impl.future.CompositeFutureImpl v0;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: int;
if v1 < 0 goto label1;
v2 = v0.<io.vertx.core.impl.future.CompositeFutureImpl: io.vertx.core.Future[] results>;
v3 = lengthof v2;
if v1 < v3 goto label2;
label1:
v4 = new java.lang.IndexOutOfBoundsException;
specialinvoke v4.<java.lang.IndexOutOfBoundsException: void <init>()>();
throw v4;
label2:
v5 = v0.<io.vertx.core.impl.future.CompositeFutureImpl: io.vertx.core.Future[] results>;
v6 = v5[v1];
return v6;
}
public int size()
{
int v2;
io.vertx.core.Future[] v1;
io.vertx.core.impl.future.CompositeFutureImpl v0;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 = v0.<io.vertx.core.impl.future.CompositeFutureImpl: io.vertx.core.Future[] results>;
v2 = lengthof v1;
return v2;
}
private void trySucceed()
{
io.vertx.core.impl.future.CompositeFutureImpl v0;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
virtualinvoke v0.<io.vertx.core.impl.future.CompositeFutureImpl: boolean tryComplete(java.lang.Object)>(v0);
return;
}
private void fail(java.lang.Throwable)
{
io.vertx.core.impl.future.CompositeFutureImpl v0;
java.lang.Throwable v1;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.vertx.core.impl.future.CompositeFutureImpl: void complete(java.lang.Object)>(v1);
return;
}
private void complete(java.lang.Object)
{
io.vertx.core.impl.future.CompositeFutureImpl v0;
java.lang.Object v1;
boolean v2;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: java.lang.Object;
if v1 != v0 goto label1;
virtualinvoke v0.<io.vertx.core.impl.future.CompositeFutureImpl: boolean tryComplete(java.lang.Object)>(v0);
goto label2;
label1:
v2 = v1 instanceof java.lang.Throwable;
if v2 == 0 goto label2;
virtualinvoke v0.<io.vertx.core.impl.future.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)>(v1);
label2:
return;
}
public io.vertx.core.CompositeFuture onComplete(io.vertx.core.Handler)
{
io.vertx.core.impl.future.CompositeFutureImpl v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = specialinvoke v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return v2;
}
public io.vertx.core.CompositeFuture onSuccess(io.vertx.core.Handler)
{
io.vertx.core.impl.future.CompositeFutureImpl v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = specialinvoke v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.Future onSuccess(io.vertx.core.Handler)>(v1);
return v2;
}
public io.vertx.core.CompositeFuture onFailure(io.vertx.core.Handler)
{
io.vertx.core.impl.future.CompositeFutureImpl v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = specialinvoke v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.Future onFailure(io.vertx.core.Handler)>(v1);
return v2;
}
protected void formatValue(java.lang.Object, java.lang.StringBuilder)
{
io.vertx.core.Future v7;
int v3, v5;
io.vertx.core.Future[] v4, v6;
io.vertx.core.impl.future.CompositeFutureImpl v0;
java.lang.Object v1;
java.lang.StringBuilder v2;
v0 := @this: io.vertx.core.impl.future.CompositeFutureImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.StringBuilder;
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);
v3 = 0;
label1:
v4 = v0.<io.vertx.core.impl.future.CompositeFutureImpl: io.vertx.core.Future[] results>;
v5 = lengthof v4;
if v3 >= v5 goto label3;
if v3 <= 0 goto label2;
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
label2:
v6 = v0.<io.vertx.core.impl.future.CompositeFutureImpl: io.vertx.core.Future[] results>;
v7 = v6[v3];
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v7);
v3 = v3 + 1;
goto label1;
label3:
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);
return;
}
static void <clinit>()
{
java.util.function.Function v0;
v0 = staticinvoke <io.vertx.core.impl.future.CompositeFutureImpl$lambda_static_2__1548: java.util.function.Function bootstrap$()>();
<io.vertx.core.impl.future.CompositeFutureImpl: java.util.function.Function ALL> = v0;
return;
}
}