abstract class io.vertx.core.impl.future.FutureBase extends java.lang.Object implements io.vertx.core.impl.future.FutureInternal
{
protected final io.vertx.core.impl.ContextInternal context;
void <init>()
{
io.vertx.core.impl.future.FutureBase v0;
v0 := @this: io.vertx.core.impl.future.FutureBase;
specialinvoke v0.<io.vertx.core.impl.future.FutureBase: void <init>(io.vertx.core.impl.ContextInternal)>(null);
return;
}
void <init>(io.vertx.core.impl.ContextInternal)
{
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.impl.future.FutureBase v0;
v0 := @this: io.vertx.core.impl.future.FutureBase;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context> = v1;
return;
}
public final io.vertx.core.impl.ContextInternal context()
{
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.impl.future.FutureBase v0;
v0 := @this: io.vertx.core.impl.future.FutureBase;
v1 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
return v1;
}
protected final void emitSuccess(java.lang.Object, io.vertx.core.impl.future.Listener)
{
io.vertx.core.impl.ContextInternal v3, v4, v6;
io.vertx.core.impl.future.Listener v2;
io.vertx.core.impl.future.FutureBase v0;
java.lang.Runnable v7;
java.lang.Object v1;
boolean v5;
v0 := @this: io.vertx.core.impl.future.FutureBase;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.vertx.core.impl.future.Listener;
v3 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
if v3 == null goto label1;
v4 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: boolean isRunningOnContext()>();
if v5 != 0 goto label1;
v6 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
v7 = staticinvoke <io.vertx.core.impl.future.FutureBase$lambda_emitSuccess_0__1549: java.lang.Runnable bootstrap$(io.vertx.core.impl.future.FutureBase,io.vertx.core.impl.future.Listener,java.lang.Object)>(v0, v2, v1);
interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: void execute(java.lang.Runnable)>(v7);
goto label2;
label1:
interfaceinvoke v2.<io.vertx.core.impl.future.Listener: void onSuccess(java.lang.Object)>(v1);
label2:
return;
}
protected final void emitFailure(java.lang.Throwable, io.vertx.core.impl.future.Listener)
{
java.lang.Throwable v1;
io.vertx.core.impl.ContextInternal v3, v4, v6;
io.vertx.core.impl.future.Listener v2;
io.vertx.core.impl.future.FutureBase v0;
java.lang.Runnable v7;
boolean v5;
v0 := @this: io.vertx.core.impl.future.FutureBase;
v1 := @parameter0: java.lang.Throwable;
v2 := @parameter1: io.vertx.core.impl.future.Listener;
v3 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
if v3 == null goto label1;
v4 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: boolean isRunningOnContext()>();
if v5 != 0 goto label1;
v6 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
v7 = staticinvoke <io.vertx.core.impl.future.FutureBase$lambda_emitFailure_1__1550: java.lang.Runnable bootstrap$(io.vertx.core.impl.future.FutureBase,io.vertx.core.impl.future.Listener,java.lang.Throwable)>(v0, v2, v1);
interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: void execute(java.lang.Runnable)>(v7);
goto label2;
label1:
interfaceinvoke v2.<io.vertx.core.impl.future.Listener: void onFailure(java.lang.Throwable)>(v1);
label2:
return;
}
public io.vertx.core.Future compose(java.util.function.Function, java.util.function.Function)
{
io.vertx.core.impl.ContextInternal v4;
io.vertx.core.impl.future.FutureBase v0;
java.util.function.Function v1, v2;
io.vertx.core.impl.future.Composition v3;
v0 := @this: io.vertx.core.impl.future.FutureBase;
v1 := @parameter0: java.util.function.Function;
v2 := @parameter1: java.util.function.Function;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "No null success mapper accepted");
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "No null failure mapper accepted");
v3 = new io.vertx.core.impl.future.Composition;
v4 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
specialinvoke v3.<io.vertx.core.impl.future.Composition: void <init>(io.vertx.core.impl.ContextInternal,java.util.function.Function,java.util.function.Function)>(v4, v1, v2);
virtualinvoke v0.<io.vertx.core.impl.future.FutureBase: void addListener(io.vertx.core.impl.future.Listener)>(v3);
return v3;
}
public io.vertx.core.Future transform(java.util.function.Function)
{
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.impl.future.FutureBase v0;
java.util.function.Function v1;
io.vertx.core.impl.future.Transformation v2;
v0 := @this: io.vertx.core.impl.future.FutureBase;
v1 := @parameter0: java.util.function.Function;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "No null mapper accepted");
v2 = new io.vertx.core.impl.future.Transformation;
v3 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
specialinvoke v2.<io.vertx.core.impl.future.Transformation: void <init>(io.vertx.core.impl.ContextInternal,io.vertx.core.Future,java.util.function.Function)>(v3, v0, v1);
virtualinvoke v0.<io.vertx.core.impl.future.FutureBase: void addListener(io.vertx.core.impl.future.Listener)>(v2);
return v2;
}
public io.vertx.core.Future eventually(java.util.function.Function)
{
io.vertx.core.impl.future.Eventually v2;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.impl.future.FutureBase v0;
java.util.function.Function v1;
v0 := @this: io.vertx.core.impl.future.FutureBase;
v1 := @parameter0: java.util.function.Function;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "No null mapper accepted");
v2 = new io.vertx.core.impl.future.Eventually;
v3 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
specialinvoke v2.<io.vertx.core.impl.future.Eventually: void <init>(io.vertx.core.impl.ContextInternal,java.util.function.Function)>(v3, v1);
virtualinvoke v0.<io.vertx.core.impl.future.FutureBase: void addListener(io.vertx.core.impl.future.Listener)>(v2);
return v2;
}
public io.vertx.core.Future map(java.util.function.Function)
{
io.vertx.core.impl.future.Mapping v2;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.impl.future.FutureBase v0;
java.util.function.Function v1;
v0 := @this: io.vertx.core.impl.future.FutureBase;
v1 := @parameter0: java.util.function.Function;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "No null mapper accepted");
v2 = new io.vertx.core.impl.future.Mapping;
v3 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
specialinvoke v2.<io.vertx.core.impl.future.Mapping: void <init>(io.vertx.core.impl.ContextInternal,java.util.function.Function)>(v3, v1);
virtualinvoke v0.<io.vertx.core.impl.future.FutureBase: void addListener(io.vertx.core.impl.future.Listener)>(v2);
return v2;
}
public io.vertx.core.Future map(java.lang.Object)
{
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.impl.future.FixedMapping v2;
java.lang.Object v1;
io.vertx.core.impl.future.FutureBase v0;
v0 := @this: io.vertx.core.impl.future.FutureBase;
v1 := @parameter0: java.lang.Object;
v2 = new io.vertx.core.impl.future.FixedMapping;
v3 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
specialinvoke v2.<io.vertx.core.impl.future.FixedMapping: void <init>(io.vertx.core.impl.ContextInternal,java.lang.Object)>(v3, v1);
virtualinvoke v0.<io.vertx.core.impl.future.FutureBase: void addListener(io.vertx.core.impl.future.Listener)>(v2);
return v2;
}
public io.vertx.core.Future otherwise(java.util.function.Function)
{
io.vertx.core.impl.future.Otherwise v2;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.impl.future.FutureBase v0;
java.util.function.Function v1;
v0 := @this: io.vertx.core.impl.future.FutureBase;
v1 := @parameter0: java.util.function.Function;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "No null mapper accepted");
v2 = new io.vertx.core.impl.future.Otherwise;
v3 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
specialinvoke v2.<io.vertx.core.impl.future.Otherwise: void <init>(io.vertx.core.impl.ContextInternal,java.util.function.Function)>(v3, v1);
virtualinvoke v0.<io.vertx.core.impl.future.FutureBase: void addListener(io.vertx.core.impl.future.Listener)>(v2);
return v2;
}
public io.vertx.core.Future otherwise(java.lang.Object)
{
io.vertx.core.impl.ContextInternal v3;
java.lang.Object v1;
io.vertx.core.impl.future.FixedOtherwise v2;
io.vertx.core.impl.future.FutureBase v0;
v0 := @this: io.vertx.core.impl.future.FutureBase;
v1 := @parameter0: java.lang.Object;
v2 = new io.vertx.core.impl.future.FixedOtherwise;
v3 = v0.<io.vertx.core.impl.future.FutureBase: io.vertx.core.impl.ContextInternal context>;
specialinvoke v2.<io.vertx.core.impl.future.FixedOtherwise: void <init>(io.vertx.core.impl.ContextInternal,java.lang.Object)>(v3, v1);
virtualinvoke v0.<io.vertx.core.impl.future.FutureBase: void addListener(io.vertx.core.impl.future.Listener)>(v2);
return v2;
}
}