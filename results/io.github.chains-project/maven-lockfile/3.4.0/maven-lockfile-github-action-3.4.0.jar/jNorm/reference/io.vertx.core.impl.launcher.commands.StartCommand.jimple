public class io.vertx.core.impl.launcher.commands.StartCommand extends io.vertx.core.spi.launcher.DefaultCommand
{
private java.lang.String id;
private java.lang.String launcher;
private boolean redirect;
private java.lang.String jvmOptions;
public void <init>()
{
io.vertx.core.impl.launcher.commands.StartCommand v0;
v0 := @this: io.vertx.core.impl.launcher.commands.StartCommand;
specialinvoke v0.<io.vertx.core.spi.launcher.DefaultCommand: void <init>()>();
return;
}
public void setApplicationId(java.lang.String)
{
io.vertx.core.impl.launcher.commands.StartCommand v0;
java.lang.String v1;
v0 := @this: io.vertx.core.impl.launcher.commands.StartCommand;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String id> = v1;
return;
}
public void setJavaOptions(java.lang.String)
{
io.vertx.core.impl.launcher.commands.StartCommand v0;
java.lang.String v1;
v0 := @this: io.vertx.core.impl.launcher.commands.StartCommand;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String jvmOptions> = v1;
return;
}
public void setLauncherClass(java.lang.String)
{
io.vertx.core.impl.launcher.commands.StartCommand v0;
java.lang.String v1;
v0 := @this: io.vertx.core.impl.launcher.commands.StartCommand;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String launcher> = v1;
return;
}
public void setRedirect(boolean)
{
io.vertx.core.impl.launcher.commands.StartCommand v0;
boolean v1;
v0 := @this: io.vertx.core.impl.launcher.commands.StartCommand;
v1 := @parameter0: boolean;
v0.<io.vertx.core.impl.launcher.commands.StartCommand: boolean redirect> = v1;
return;
}
public void run()
{
java.lang.ProcessBuilder$Redirect v20, v21;
java.lang.String[] v4;
java.util.ArrayList v2;
io.vertx.core.impl.launcher.commands.StartCommand v0;
java.util.Map v6;
java.lang.ProcessBuilder v3;
java.lang.String v16, v17, v23, v7, v8, v9;
boolean v14, v15, v19;
java.io.PrintStream v1, v22, v25, v26;
java.util.function.Predicate v11;
java.lang.Exception v24;
java.util.function.Consumer v18;
java.util.List v5;
java.util.stream.Stream v10, v12;
java.util.Optional v13;
v0 := @this: io.vertx.core.impl.launcher.commands.StartCommand;
v1 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.io.PrintStream out>;
virtualinvoke v1.<java.io.PrintStream: void println(java.lang.String)>("Starting vert.x application...");
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = new java.lang.ProcessBuilder;
v4 = newarray (java.lang.String)[0];
specialinvoke v3.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(v4);
specialinvoke v0.<io.vertx.core.impl.launcher.commands.StartCommand: void addJavaCommand(java.util.List)>(v2);
v5 = specialinvoke v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.util.List getArguments()>();
v6 = virtualinvoke v3.<java.lang.ProcessBuilder: java.util.Map environment()>();
v7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CLASSPATH", v7);
v8 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String launcher>;
if v8 == null goto label1;
v9 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String launcher>;
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v2, v9);
v10 = interfaceinvoke v5.<java.util.List: java.util.stream.Stream stream()>();
v11 = staticinvoke <io.vertx.core.impl.launcher.commands.StartCommand$lambda_run_0__1575: java.util.function.Predicate bootstrap$(io.vertx.core.impl.launcher.commands.StartCommand)>(v0);
v12 = interfaceinvoke v10.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v11);
v13 = interfaceinvoke v12.<java.util.stream.Stream: java.util.Optional findFirst()>();
v14 = virtualinvoke v13.<java.util.Optional: boolean isPresent()>();
if v14 != 0 goto label3;
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v2, "run");
goto label3;
label1:
v15 = specialinvoke v0.<io.vertx.core.impl.launcher.commands.StartCommand: boolean isLaunchedAsFatJar()>();
if v15 == 0 goto label2;
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v2, "-jar");
v16 = staticinvoke <io.vertx.core.impl.launcher.CommandLineUtils: java.lang.String getJar()>();
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v2, v16);
goto label3;
label2:
v17 = staticinvoke <io.vertx.core.impl.launcher.CommandLineUtils: java.lang.String getFirstSegmentOfCommand()>();
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v2, v17);
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v2, "run");
label3:
v18 = staticinvoke <io.vertx.core.impl.launcher.commands.StartCommand$lambda_run_1__1574: java.util.function.Consumer bootstrap$(java.util.List)>(v2);
interfaceinvoke v5.<java.util.List: void forEach(java.util.function.Consumer)>(v18);
label4:
virtualinvoke v3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>(v2);
v19 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: boolean redirect>;
if v19 == 0 goto label5;
v20 = <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect INHERIT>;
virtualinvoke v3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectError(java.lang.ProcessBuilder$Redirect)>(v20);
v21 = <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect INHERIT>;
virtualinvoke v3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.lang.ProcessBuilder$Redirect)>(v21);
label5:
virtualinvoke v3.<java.lang.ProcessBuilder: java.lang.Process start()>();
v22 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.io.PrintStream out>;
v23 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String id>;
virtualinvoke v22.<java.io.PrintStream: void println(java.lang.String)>(v23);
label6:
goto label8;
label7:
v24 := @caughtexception;
v25 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.io.PrintStream out>;
virtualinvoke v25.<java.io.PrintStream: void println(java.lang.String)>("Cannot create vert.x application process");
v26 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.io.PrintStream out>;
virtualinvoke v24.<java.lang.Exception: void printStackTrace(java.io.PrintStream)>(v26);
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void exitBecauseOfProcessIssue()>();
label8:
return;
catch java.lang.Exception from label4 to label6 with label7;
}
private void addJavaCommand(java.util.List)
{
java.lang.String[] v13, v9;
io.vertx.core.impl.launcher.commands.StartCommand v0;
java.lang.String v12, v3, v4, v6, v7, v8;
boolean v2;
java.io.File v5;
java.util.function.Consumer v11, v15;
java.util.List v1;
java.util.stream.Stream v10, v14;
v0 := @this: io.vertx.core.impl.launcher.commands.StartCommand;
v1 := @parameter0: java.util.List;
v2 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()>();
if v2 == 0 goto label1;
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v1, "cmd.exe");
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v1, "/C");
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v1, "start");
v3 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String id>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("vertx-id - \u0001");
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v1, v4);
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v1, "/B");
label1:
v5 = specialinvoke v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.io.File getJava()>();
v6 = virtualinvoke v5.<java.io.File: java.lang.String getAbsolutePath()>();
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v1, v6);
v7 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String jvmOptions>;
if v7 != null goto label2;
v8 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("JAVA_OPTS");
if v8 == null goto label3;
v9 = virtualinvoke v8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");
v10 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(v9);
v11 = staticinvoke <io.vertx.core.impl.launcher.commands.StartCommand$lambda_addJavaCommand_2__1577: java.util.function.Consumer bootstrap$(java.util.List)>(v1);
interfaceinvoke v10.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>(v11);
goto label3;
label2:
v12 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String jvmOptions>;
v13 = virtualinvoke v12.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");
v14 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(v13);
v15 = staticinvoke <io.vertx.core.impl.launcher.commands.StartCommand$lambda_addJavaCommand_3__1576: java.util.function.Consumer bootstrap$(java.util.List)>(v1);
interfaceinvoke v14.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>(v15);
label3:
return;
}
private java.io.File getJava()
{
java.io.PrintStream v8;
java.io.File v1, v4, v5, v6;
io.vertx.core.impl.launcher.commands.StartCommand v0;
java.lang.String v10, v2, v9;
boolean v3, v7;
v0 := @this: io.vertx.core.impl.launcher.commands.StartCommand;
v1 = new java.io.File;
v2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");
specialinvoke v1.<java.io.File: void <init>(java.lang.String)>(v2);
v3 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()>();
if v3 == 0 goto label1;
v4 = new java.io.File;
specialinvoke v4.<java.io.File: void <init>(java.io.File,java.lang.String)>(v1, "bin/java.exe");
v5 = v4;
goto label2;
label1:
v6 = new java.io.File;
specialinvoke v6.<java.io.File: void <init>(java.io.File,java.lang.String)>(v1, "bin/java");
v5 = v6;
label2:
v7 = virtualinvoke v5.<java.io.File: boolean isFile()>();
if v7 != 0 goto label3;
v8 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.io.PrintStream out>;
v9 = virtualinvoke v5.<java.io.File: java.lang.String getAbsolutePath()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot find java executable - \u0001 does not exist");
virtualinvoke v8.<java.io.PrintStream: void println(java.lang.String)>(v10);
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void exitBecauseOfSystemConfigurationIssue()>();
label3:
return v5;
}
private boolean isLaunchedAsFatJar()
{
io.vertx.core.impl.launcher.commands.StartCommand v0;
java.lang.String v1;
boolean v2;
v0 := @this: io.vertx.core.impl.launcher.commands.StartCommand;
v1 = staticinvoke <io.vertx.core.impl.launcher.CommandLineUtils: java.lang.String getJar()>();
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
private java.util.List getArguments()
{
io.vertx.core.spi.launcher.ExecutionContext v1;
io.vertx.core.cli.CommandLine v2;
java.util.function.Function v7;
java.util.function.Consumer v9;
io.vertx.core.impl.launcher.commands.StartCommand v0;
java.util.List v3, v4, v5;
java.util.stream.Stream v6, v8;
java.lang.String v10, v11;
v0 := @this: io.vertx.core.impl.launcher.commands.StartCommand;
v1 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v2 = virtualinvoke v1.<io.vertx.core.spi.launcher.ExecutionContext: io.vertx.core.cli.CommandLine commandLine()>();
v3 = interfaceinvoke v2.<io.vertx.core.cli.CommandLine: java.util.List allArguments()>();
v4 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.util.List systemProperties>;
if v4 == null goto label1;
v5 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.util.List systemProperties>;
v6 = interfaceinvoke v5.<java.util.List: java.util.stream.Stream stream()>();
v7 = staticinvoke <io.vertx.core.impl.launcher.commands.StartCommand$lambda_getArguments_4__1578: java.util.function.Function bootstrap$()>();
v8 = interfaceinvoke v6.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v7);
virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v9 = staticinvoke <io.vertx.core.impl.launcher.commands.StartCommand$add__1579: java.util.function.Consumer bootstrap$(java.util.List)>(v3);
interfaceinvoke v8.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>(v9);
label1:
v10 = specialinvoke v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String getId()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("-Dvertx.id=\u0001");
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v11);
return v3;
}
private java.lang.String getId()
{
io.vertx.core.impl.launcher.commands.StartCommand v0;
java.lang.String v1, v3, v4;
java.util.UUID v2;
v0 := @this: io.vertx.core.impl.launcher.commands.StartCommand;
v1 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String id>;
if v1 != null goto label1;
v2 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();
v3 = virtualinvoke v2.<java.util.UUID: java.lang.String toString()>();
v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String id> = v3;
label1:
v4 = v0.<io.vertx.core.impl.launcher.commands.StartCommand: java.lang.String id>;
return v4;
}
}