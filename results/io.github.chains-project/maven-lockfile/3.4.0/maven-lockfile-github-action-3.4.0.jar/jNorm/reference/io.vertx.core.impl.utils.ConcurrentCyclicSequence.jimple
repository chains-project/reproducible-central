public class io.vertx.core.impl.utils.ConcurrentCyclicSequence extends java.lang.Object implements java.lang.Iterable, java.util.Iterator
{
private static final java.lang.Object[] EMPTY_ARRAY;
private final java.util.concurrent.atomic.AtomicInteger pos;
private final java.lang.Object[] elements;
public void <init>()
{
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0;
java.lang.Object[] v1;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v1 = <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] EMPTY_ARRAY>;
specialinvoke v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>(int,java.lang.Object[])>(0, v1);
return;
}
public transient void <init>(java.lang.Object[])
{
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0;
java.lang.Object[] v1, v3;
int v2;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v1 := @parameter0: java.lang.Object[];
v2 = lengthof v1;
v3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(v1, v2, class "[Ljava/lang/Object;");
specialinvoke v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>(int,java.lang.Object[])>(0, v3);
return;
}
private void <init>(int, java.lang.Object[])
{
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0;
java.lang.Object[] v2;
java.util.concurrent.atomic.AtomicInteger v3;
int v1;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.Object[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(v1);
v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.concurrent.atomic.AtomicInteger pos> = v3;
v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements> = v2;
return;
}
public int index()
{
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0;
java.lang.Object[] v1;
java.util.concurrent.atomic.AtomicInteger v3;
int v2, v4, v5;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v1 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v2 = lengthof v1;
if v2 <= 1 goto label1;
v3 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.concurrent.atomic.AtomicInteger pos>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int get()>();
v5 = specialinvoke v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: int computeIndex(int)>(v4);
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
private int computeIndex(int)
{
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0;
java.lang.Object[] v2;
int v1, v3, v4, v5;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v3 = lengthof v2;
v4 = v1 % v3;
v5 = staticinvoke <java.lang.Math: int abs(int)>(v4);
return v5;
}
public java.lang.Object first()
{
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0;
java.lang.Object[] v1, v3;
int v2;
java.lang.Object v4;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v1 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v2 = lengthof v1;
if v2 <= 0 goto label1;
v3 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v4 = v3[0];
goto label2;
label1:
v4 = null;
label2:
return v4;
}
public io.vertx.core.impl.utils.ConcurrentCyclicSequence add(java.lang.Object)
{
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0, v7;
java.lang.Object[] v2, v4, v6;
java.util.concurrent.atomic.AtomicInteger v8;
int v3, v5, v9;
java.lang.Object v1;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v3 = lengthof v2;
v4 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v5 = v3 + 1;
v6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(v4, v5);
v6[v3] = v1;
v7 = new io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v8 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.concurrent.atomic.AtomicInteger pos>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicInteger: int get()>();
specialinvoke v7.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>(int,java.lang.Object[])>(v9, v6);
return v7;
}
public io.vertx.core.impl.utils.ConcurrentCyclicSequence remove(java.lang.Object)
{
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0, v15, v20;
java.lang.Object[] v10, v11, v2, v5, v9;
java.util.concurrent.atomic.AtomicInteger v16;
int v12, v13, v14, v17, v18, v19, v3, v4, v8;
boolean v7;
java.lang.Object v1, v6;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label4;
v5 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v6 = v5[v4];
v7 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v1, v6);
if v7 == 0 goto label3;
if v3 <= 1 goto label2;
v8 = v3 - 1;
v9 = newarray (java.lang.Object)[v8];
v10 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v10, 0, v9, 0, v4);
v11 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v12 = v4 + 1;
v13 = v3 - v4;
v14 = v13 - 1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v11, v12, v9, v4, v14);
v15 = new io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v16 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.concurrent.atomic.AtomicInteger pos>;
v17 = virtualinvoke v16.<java.util.concurrent.atomic.AtomicInteger: int get()>();
v18 = lengthof v9;
v19 = v17 % v18;
specialinvoke v15.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>(int,java.lang.Object[])>(v19, v9);
return v15;
label2:
v20 = new io.vertx.core.impl.utils.ConcurrentCyclicSequence;
specialinvoke v20.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>()>();
return v20;
label3:
v4 = v4 + 1;
goto label1;
label4:
return v0;
}
public boolean hasNext()
{
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
return 1;
}
public java.lang.Object next()
{
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0;
java.lang.Object[] v1, v4, v6, v7;
java.util.concurrent.atomic.AtomicInteger v8;
int v10, v2, v5, v9;
java.lang.Object v3;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v1 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v2 = lengthof v1;
if v2 != 0 goto label1;
v3 = null;
goto label3;
label1:
v4 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v5 = lengthof v4;
if v5 != 1 goto label2;
v6 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v3 = v6[0];
goto label3;
label2:
v7 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v8 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.concurrent.atomic.AtomicInteger pos>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
v10 = specialinvoke v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: int computeIndex(int)>(v9);
v3 = v7[v10];
label3:
return v3;
}
public int size()
{
int v2;
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0;
java.lang.Object[] v1;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v1 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v2 = lengthof v1;
return v2;
}
public java.util.Iterator iterator()
{
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0;
java.util.Iterator v1;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v1 = virtualinvoke v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator(boolean)>(1);
return v1;
}
public java.util.Iterator iterator(boolean)
{
io.vertx.core.impl.utils.ConcurrentCyclicSequence v0;
java.lang.Object[] v2;
java.util.Iterator v4;
io.vertx.core.impl.utils.ConcurrentCyclicSequence$SingletonIter v5;
io.vertx.core.impl.utils.ConcurrentCyclicSequence$Iter v6;
java.util.concurrent.atomic.AtomicInteger v8;
int v3, v7;
boolean v1;
v0 := @this: io.vertx.core.impl.utils.ConcurrentCyclicSequence;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] elements>;
v3 = lengthof v2;
if v3 != 0 goto label1;
v4 = staticinvoke <java.util.Collections: java.util.Iterator emptyIterator()>();
goto label5;
label1:
if v3 != 1 goto label2;
v5 = new io.vertx.core.impl.utils.ConcurrentCyclicSequence$SingletonIter;
specialinvoke v5.<io.vertx.core.impl.utils.ConcurrentCyclicSequence$SingletonIter: void <init>(io.vertx.core.impl.utils.ConcurrentCyclicSequence)>(v0);
v4 = v5;
goto label5;
label2:
v6 = new io.vertx.core.impl.utils.ConcurrentCyclicSequence$Iter;
if v1 == 0 goto label3;
v7 = 0;
goto label4;
label3:
v8 = v0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.concurrent.atomic.AtomicInteger pos>;
v7 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
label4:
specialinvoke v6.<io.vertx.core.impl.utils.ConcurrentCyclicSequence$Iter: void <init>(io.vertx.core.impl.utils.ConcurrentCyclicSequence,int)>(v0, v7);
v4 = v6;
label5:
return v4;
}
static void <clinit>()
{
java.lang.Object[] v0;
v0 = newarray (java.lang.Object)[0];
<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] EMPTY_ARRAY> = v0;
return;
}
}