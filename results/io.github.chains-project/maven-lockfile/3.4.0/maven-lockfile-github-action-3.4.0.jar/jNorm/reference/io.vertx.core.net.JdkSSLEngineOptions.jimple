public class io.vertx.core.net.JdkSSLEngineOptions extends io.vertx.core.net.SSLEngineOptions
{
private static java.lang.Boolean jdkAlpnAvailable;
public static synchronized boolean isAlpnAvailable()
{
java.lang.Throwable v10;
java.lang.Class[] v3;
java.lang.Exception v5, v8;
java.lang.Boolean v0, v11, v12, v4, v9;
java.lang.Class v2, v6;
java.lang.ClassLoader v7;
boolean v1, v13;
v0 = <io.vertx.core.net.JdkSSLEngineOptions: java.lang.Boolean jdkAlpnAvailable>;
if v0 != null goto label9;
v1 = 0;
label1:
v2 = class "Ljavax/net/ssl/SSLEngine;";
v3 = newarray (java.lang.Class)[0];
virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getApplicationProtocol", v3);
label2:
v4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
<io.vertx.core.net.JdkSSLEngineOptions: java.lang.Boolean jdkAlpnAvailable> = v4;
goto label9;
label3:
v5 := @caughtexception;
label4:
v6 = class "Lio/vertx/core/net/JdkSSLEngineOptions;";
v7 = virtualinvoke v6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
virtualinvoke v7.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("sun.security.ssl.ALPNExtension");
v1 = 1;
label5:
goto label7;
label6:
v8 := @caughtexception;
label7:
v9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v1);
<io.vertx.core.net.JdkSSLEngineOptions: java.lang.Boolean jdkAlpnAvailable> = v9;
goto label9;
label8:
v10 := @caughtexception;
v11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
<io.vertx.core.net.JdkSSLEngineOptions: java.lang.Boolean jdkAlpnAvailable> = v11;
throw v10;
label9:
v12 = <io.vertx.core.net.JdkSSLEngineOptions: java.lang.Boolean jdkAlpnAvailable>;
v13 = virtualinvoke v12.<java.lang.Boolean: boolean booleanValue()>();
return v13;
catch java.lang.Exception from label1 to label2 with label3;
catch java.lang.Exception from label4 to label5 with label6;
catch java.lang.Throwable from label1 to label2 with label8;
catch java.lang.Throwable from label3 to label7 with label8;
}
public void <init>()
{
io.vertx.core.net.JdkSSLEngineOptions v0;
v0 := @this: io.vertx.core.net.JdkSSLEngineOptions;
specialinvoke v0.<io.vertx.core.net.SSLEngineOptions: void <init>()>();
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.JdkSSLEngineOptions v0;
v0 := @this: io.vertx.core.net.JdkSSLEngineOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.net.SSLEngineOptions: void <init>(io.vertx.core.json.JsonObject)>(v1);
return;
}
public void <init>(io.vertx.core.net.JdkSSLEngineOptions)
{
io.vertx.core.net.JdkSSLEngineOptions v0, v1;
v0 := @this: io.vertx.core.net.JdkSSLEngineOptions;
v1 := @parameter0: io.vertx.core.net.JdkSSLEngineOptions;
specialinvoke v0.<io.vertx.core.net.SSLEngineOptions: void <init>(io.vertx.core.net.SSLEngineOptions)>(v1);
return;
}
public io.vertx.core.net.JdkSSLEngineOptions setUseWorkerThread(boolean)
{
io.vertx.core.net.SSLEngineOptions v2;
io.vertx.core.net.JdkSSLEngineOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.JdkSSLEngineOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.SSLEngineOptions: io.vertx.core.net.SSLEngineOptions setUseWorkerThread(boolean)>(v1);
return v2;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.JdkSSLEngineOptions v0;
v0 := @this: io.vertx.core.net.JdkSSLEngineOptions;
v1 = new io.vertx.core.json.JsonObject;
specialinvoke v1.<io.vertx.core.json.JsonObject: void <init>()>();
return v1;
}
public io.vertx.core.net.JdkSSLEngineOptions copy()
{
io.vertx.core.net.JdkSSLEngineOptions v0, v1;
v0 := @this: io.vertx.core.net.JdkSSLEngineOptions;
v1 = new io.vertx.core.net.JdkSSLEngineOptions;
specialinvoke v1.<io.vertx.core.net.JdkSSLEngineOptions: void <init>(io.vertx.core.net.JdkSSLEngineOptions)>(v0);
return v1;
}
public io.vertx.core.spi.tls.SslContextFactory sslContextFactory()
{
io.netty.handler.ssl.SslProvider v2;
io.vertx.core.net.JdkSSLEngineOptions v0;
io.vertx.core.spi.tls.DefaultSslContextFactory v1;
v0 := @this: io.vertx.core.net.JdkSSLEngineOptions;
v1 = new io.vertx.core.spi.tls.DefaultSslContextFactory;
v2 = <io.netty.handler.ssl.SslProvider: io.netty.handler.ssl.SslProvider JDK>;
specialinvoke v1.<io.vertx.core.spi.tls.DefaultSslContextFactory: void <init>(io.netty.handler.ssl.SslProvider,boolean)>(v2, 0);
return v1;
}
}