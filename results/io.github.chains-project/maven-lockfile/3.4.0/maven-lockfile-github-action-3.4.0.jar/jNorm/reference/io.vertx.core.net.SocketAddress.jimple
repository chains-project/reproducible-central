public interface  io.vertx.core.net.SocketAddress extends java.lang.Object
{
public static io.vertx.core.net.SocketAddress sharedRandomPort(int, java.lang.String)
{
int v0, v5;
java.lang.String v1, v3;
java.lang.IllegalArgumentException v2;
io.vertx.core.net.impl.SocketAddressImpl v4;
v0 := @parameter0: int;
v1 := @parameter1: java.lang.String;
if v0 >= 1 goto label1;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Shared random port ID \u0001 must be > 0");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
v4 = new io.vertx.core.net.impl.SocketAddressImpl;
v5 = neg v0;
specialinvoke v4.<io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)>(v5, v1);
return v4;
}
public static io.vertx.core.net.SocketAddress inetSocketAddress(int, java.lang.String)
{
int v0, v2;
java.lang.String v1;
io.vertx.core.net.impl.SocketAddressImpl v3;
v0 := @parameter0: int;
v1 := @parameter1: java.lang.String;
v2 = (int) 65535;
staticinvoke <io.vertx.core.impl.Arguments: void requireInRange(int,int,int,java.lang.String)>(v0, 0, v2, "port p must be in range 0 <= p <= 65535");
v3 = new io.vertx.core.net.impl.SocketAddressImpl;
specialinvoke v3.<io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)>(v0, v1);
return v3;
}
public static io.vertx.core.net.SocketAddress domainSocketAddress(java.lang.String)
{
java.lang.String v0;
io.vertx.core.net.impl.SocketAddressImpl v1;
v0 := @parameter0: java.lang.String;
v1 = new io.vertx.core.net.impl.SocketAddressImpl;
specialinvoke v1.<io.vertx.core.net.impl.SocketAddressImpl: void <init>(java.lang.String)>(v0);
return v1;
}
public static io.vertx.core.net.SocketAddress inetSocketAddress(java.net.InetSocketAddress)
{
io.vertx.core.net.impl.SocketAddressImpl v1;
java.net.InetSocketAddress v0;
v0 := @parameter0: java.net.InetSocketAddress;
v1 = new io.vertx.core.net.impl.SocketAddressImpl;
specialinvoke v1.<io.vertx.core.net.impl.SocketAddressImpl: void <init>(java.net.InetSocketAddress)>(v0);
return v1;
}
public abstract java.lang.String host();
public abstract java.lang.String hostName();
public abstract java.lang.String hostAddress();
public abstract int port();
public abstract java.lang.String path();
public abstract boolean isInetSocket();
public abstract boolean isDomainSocket();
}