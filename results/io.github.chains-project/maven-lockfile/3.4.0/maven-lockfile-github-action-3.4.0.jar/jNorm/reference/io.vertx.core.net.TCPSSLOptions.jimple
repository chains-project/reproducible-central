public abstract class io.vertx.core.net.TCPSSLOptions extends io.vertx.core.net.NetworkOptions
{
public static final boolean DEFAULT_TCP_NO_DELAY;
public static final boolean DEFAULT_TCP_KEEP_ALIVE;
public static final int DEFAULT_SO_LINGER;
public static final boolean DEFAULT_SSL;
public static final int DEFAULT_IDLE_TIMEOUT;
public static final java.util.concurrent.TimeUnit DEFAULT_IDLE_TIMEOUT_TIME_UNIT;
public static final int DEFAULT_READ_IDLE_TIMEOUT;
public static final int DEFAULT_WRITE_IDLE_TIMEOUT;
public static final boolean DEFAULT_USE_ALPN;
public static final io.vertx.core.net.SSLEngineOptions DEFAULT_SSL_ENGINE;
public static final java.util.List DEFAULT_ENABLED_SECURE_TRANSPORT_PROTOCOLS;
public static final boolean DEFAULT_TCP_FAST_OPEN;
public static final boolean DEFAULT_TCP_CORK;
public static final boolean DEFAULT_TCP_QUICKACK;
public static final int DEFAULT_TCP_USER_TIMEOUT;
public static final long DEFAULT_SSL_HANDSHAKE_TIMEOUT;
public static final java.util.concurrent.TimeUnit DEFAULT_SSL_HANDSHAKE_TIMEOUT_TIME_UNIT;
private boolean tcpNoDelay;
private boolean tcpKeepAlive;
private int soLinger;
private int idleTimeout;
private int readIdleTimeout;
private int writeIdleTimeout;
private java.util.concurrent.TimeUnit idleTimeoutUnit;
private boolean ssl;
private io.vertx.core.net.SSLEngineOptions sslEngineOptions;
private io.vertx.core.net.SSLOptions sslOptions;
private boolean tcpFastOpen;
private boolean tcpCork;
private boolean tcpQuickAck;
private int tcpUserTimeout;
public void <init>()
{
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
specialinvoke v0.<io.vertx.core.net.NetworkOptions: void <init>()>();
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: void init()>();
return;
}
public void <init>(io.vertx.core.net.TCPSSLOptions)
{
io.vertx.core.net.SSLOptions v18, v19;
int v17, v4, v5, v8, v9;
boolean v10, v14, v15, v16, v2, v3;
io.vertx.core.net.TCPSSLOptions v0, v1;
io.vertx.core.net.SSLEngineOptions v11, v12, v13;
java.util.concurrent.TimeUnit v6, v7;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.net.TCPSSLOptions;
specialinvoke v0.<io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.net.NetworkOptions)>(v1);
v2 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: boolean isTcpNoDelay()>();
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpNoDelay> = v2;
v3 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: boolean isTcpKeepAlive()>();
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpKeepAlive> = v3;
v4 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: int getSoLinger()>();
v0.<io.vertx.core.net.TCPSSLOptions: int soLinger> = v4;
v5 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: int getIdleTimeout()>();
v0.<io.vertx.core.net.TCPSSLOptions: int idleTimeout> = v5;
v6 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>();
if v6 == null goto label1;
v7 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>();
goto label2;
label1:
v7 = <io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit DEFAULT_IDLE_TIMEOUT_TIME_UNIT>;
label2:
v0.<io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit idleTimeoutUnit> = v7;
v8 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: int getReadIdleTimeout()>();
v0.<io.vertx.core.net.TCPSSLOptions: int readIdleTimeout> = v8;
v9 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: int getWriteIdleTimeout()>();
v0.<io.vertx.core.net.TCPSSLOptions: int writeIdleTimeout> = v9;
v10 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: boolean isSsl()>();
v0.<io.vertx.core.net.TCPSSLOptions: boolean ssl> = v10;
v11 = v1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions sslEngineOptions>;
if v11 == null goto label3;
v12 = v1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions sslEngineOptions>;
v13 = virtualinvoke v12.<io.vertx.core.net.SSLEngineOptions: io.vertx.core.net.SSLEngineOptions copy()>();
goto label4;
label3:
v13 = null;
label4:
v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions sslEngineOptions> = v13;
v14 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: boolean isTcpFastOpen()>();
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpFastOpen> = v14;
v15 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: boolean isTcpCork()>();
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpCork> = v15;
v16 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: boolean isTcpQuickAck()>();
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpQuickAck> = v16;
v17 = virtualinvoke v1.<io.vertx.core.net.TCPSSLOptions: int getTcpUserTimeout()>();
v0.<io.vertx.core.net.TCPSSLOptions: int tcpUserTimeout> = v17;
v18 = new io.vertx.core.net.SSLOptions;
v19 = v1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
specialinvoke v18.<io.vertx.core.net.SSLOptions: void <init>(io.vertx.core.net.SSLOptions)>(v19);
v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions> = v18;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.json.JsonObject)>(v1);
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: void init()>();
staticinvoke <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)>(v1, v0);
return;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = specialinvoke v0.<io.vertx.core.net.NetworkOptions: io.vertx.core.json.JsonObject toJson()>();
staticinvoke <io.vertx.core.net.TCPSSLOptionsConverter: void toJson(io.vertx.core.net.TCPSSLOptions,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
private void init()
{
java.util.concurrent.TimeUnit v2;
io.vertx.core.net.SSLEngineOptions v3;
io.vertx.core.net.SSLOptions v4;
int v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpNoDelay> = 1;
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpKeepAlive> = 0;
v1 = (int) -1;
v0.<io.vertx.core.net.TCPSSLOptions: int soLinger> = v1;
v0.<io.vertx.core.net.TCPSSLOptions: int idleTimeout> = 0;
v0.<io.vertx.core.net.TCPSSLOptions: int readIdleTimeout> = 0;
v0.<io.vertx.core.net.TCPSSLOptions: int writeIdleTimeout> = 0;
v2 = <io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit DEFAULT_IDLE_TIMEOUT_TIME_UNIT>;
v0.<io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit idleTimeoutUnit> = v2;
v0.<io.vertx.core.net.TCPSSLOptions: boolean ssl> = 0;
v3 = <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions DEFAULT_SSL_ENGINE>;
v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions sslEngineOptions> = v3;
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpFastOpen> = 0;
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpCork> = 0;
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpQuickAck> = 0;
v0.<io.vertx.core.net.TCPSSLOptions: int tcpUserTimeout> = 0;
v4 = new io.vertx.core.net.SSLOptions;
specialinvoke v4.<io.vertx.core.net.SSLOptions: void <init>()>();
v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions> = v4;
return;
}
public io.vertx.core.net.SSLOptions getSslOptions()
{
io.vertx.core.net.SSLOptions v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
return v1;
}
public boolean isTcpNoDelay()
{
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpNoDelay>;
return v1;
}
public io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)
{
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpNoDelay> = v1;
return v0;
}
public boolean isTcpKeepAlive()
{
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpKeepAlive>;
return v1;
}
public io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)
{
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpKeepAlive> = v1;
return v0;
}
public int getSoLinger()
{
int v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: int soLinger>;
return v1;
}
public io.vertx.core.net.TCPSSLOptions setSoLinger(int)
{
int v1, v2;
java.lang.IllegalArgumentException v3;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = (int) -1;
if v1 == v2 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("soLinger must be >= 0");
throw v3;
label1:
v0.<io.vertx.core.net.TCPSSLOptions: int soLinger> = v1;
return v0;
}
public io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)
{
int v1;
java.lang.IllegalArgumentException v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("idleTimeout must be >= 0");
throw v2;
label1:
v0.<io.vertx.core.net.TCPSSLOptions: int idleTimeout> = v1;
return v0;
}
public int getIdleTimeout()
{
int v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: int idleTimeout>;
return v1;
}
public io.vertx.core.net.TCPSSLOptions setReadIdleTimeout(int)
{
int v1;
java.lang.IllegalArgumentException v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("readIdleTimeout must be >= 0");
throw v2;
label1:
v0.<io.vertx.core.net.TCPSSLOptions: int readIdleTimeout> = v1;
return v0;
}
public int getReadIdleTimeout()
{
int v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: int readIdleTimeout>;
return v1;
}
public io.vertx.core.net.TCPSSLOptions setWriteIdleTimeout(int)
{
int v1;
java.lang.IllegalArgumentException v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("writeIdleTimeout must be >= 0");
throw v2;
label1:
v0.<io.vertx.core.net.TCPSSLOptions: int writeIdleTimeout> = v1;
return v0;
}
public int getWriteIdleTimeout()
{
int v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: int writeIdleTimeout>;
return v1;
}
public io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v0.<io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit idleTimeoutUnit> = v1;
return v0;
}
public java.util.concurrent.TimeUnit getIdleTimeoutUnit()
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit idleTimeoutUnit>;
return v1;
}
public boolean isSsl()
{
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: boolean ssl>;
return v1;
}
public io.vertx.core.net.TCPSSLOptions setSsl(boolean)
{
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.TCPSSLOptions: boolean ssl> = v1;
return v0;
}
public io.vertx.core.net.KeyCertOptions getKeyCertOptions()
{
io.vertx.core.net.SSLOptions v1;
io.vertx.core.net.KeyCertOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>();
return v2;
}
public io.vertx.core.net.TCPSSLOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)
{
io.vertx.core.net.SSLOptions v2;
io.vertx.core.net.KeyCertOptions v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.net.KeyCertOptions;
v2 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
virtualinvoke v2.<io.vertx.core.net.SSLOptions: io.vertx.core.net.SSLOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v1);
return v0;
}
public io.vertx.core.net.JksOptions getKeyStoreOptions()
{
io.vertx.core.net.SSLOptions v1;
io.vertx.core.net.KeyCertOptions v2;
boolean v3;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>();
v3 = v2 instanceof io.vertx.core.net.JksOptions;
if v3 != 0 goto label1;
v2 = null;
label1:
return v2;
}
public io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.net.JksOptions v1;
io.vertx.core.net.TCPSSLOptions v0, v2;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
v2 = virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v1);
return v2;
}
public io.vertx.core.net.PfxOptions getPfxKeyCertOptions()
{
io.vertx.core.net.SSLOptions v1;
io.vertx.core.net.KeyCertOptions v2;
boolean v3;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>();
v3 = v2 instanceof io.vertx.core.net.PfxOptions;
if v3 != 0 goto label1;
v2 = null;
label1:
return v2;
}
public io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.net.PfxOptions v1;
io.vertx.core.net.TCPSSLOptions v0, v2;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v1);
return v2;
}
public io.vertx.core.net.PemKeyCertOptions getPemKeyCertOptions()
{
io.vertx.core.net.SSLOptions v1;
io.vertx.core.net.KeyCertOptions v2;
boolean v3;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>();
v3 = v2 instanceof io.vertx.core.net.PemKeyCertOptions;
if v3 != 0 goto label1;
v2 = null;
label1:
return v2;
}
public io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)
{
io.vertx.core.net.PemKeyCertOptions v1;
io.vertx.core.net.TCPSSLOptions v0, v2;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.net.PemKeyCertOptions;
v2 = virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v1);
return v2;
}
public io.vertx.core.net.TrustOptions getTrustOptions()
{
io.vertx.core.net.TrustOptions v2;
io.vertx.core.net.SSLOptions v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>();
return v2;
}
public io.vertx.core.net.TCPSSLOptions setTrustOptions(io.vertx.core.net.TrustOptions)
{
io.vertx.core.net.TrustOptions v1;
io.vertx.core.net.SSLOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.net.TrustOptions;
v2 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
virtualinvoke v2.<io.vertx.core.net.SSLOptions: io.vertx.core.net.SSLOptions setTrustOptions(io.vertx.core.net.TrustOptions)>(v1);
return v0;
}
public io.vertx.core.net.JksOptions getTrustStoreOptions()
{
io.vertx.core.net.TrustOptions v2;
io.vertx.core.net.SSLOptions v1;
boolean v3;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>();
v3 = v2 instanceof io.vertx.core.net.JksOptions;
if v3 != 0 goto label1;
v2 = null;
label1:
return v2;
}
public io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.net.JksOptions v1;
io.vertx.core.net.TCPSSLOptions v0, v2;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
v2 = virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustOptions(io.vertx.core.net.TrustOptions)>(v1);
return v2;
}
public io.vertx.core.net.PfxOptions getPfxTrustOptions()
{
io.vertx.core.net.TrustOptions v2;
io.vertx.core.net.SSLOptions v1;
boolean v3;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>();
v3 = v2 instanceof io.vertx.core.net.PfxOptions;
if v3 != 0 goto label1;
v2 = null;
label1:
return v2;
}
public io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.net.PfxOptions v1;
io.vertx.core.net.TCPSSLOptions v0, v2;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustOptions(io.vertx.core.net.TrustOptions)>(v1);
return v2;
}
public io.vertx.core.net.PemTrustOptions getPemTrustOptions()
{
io.vertx.core.net.TrustOptions v2;
io.vertx.core.net.SSLOptions v1;
boolean v3;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>();
v3 = v2 instanceof io.vertx.core.net.PemTrustOptions;
if v3 != 0 goto label1;
v2 = null;
label1:
return v2;
}
public io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)
{
io.vertx.core.net.PemTrustOptions v1;
io.vertx.core.net.TCPSSLOptions v0, v2;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.net.PemTrustOptions;
v2 = virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustOptions(io.vertx.core.net.TrustOptions)>(v1);
return v2;
}
public io.vertx.core.net.TCPSSLOptions addEnabledCipherSuite(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.SSLOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
virtualinvoke v2.<io.vertx.core.net.SSLOptions: io.vertx.core.net.SSLOptions addEnabledCipherSuite(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.net.TCPSSLOptions removeEnabledCipherSuite(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.SSLOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
virtualinvoke v2.<io.vertx.core.net.SSLOptions: io.vertx.core.net.SSLOptions removeEnabledCipherSuite(java.lang.String)>(v1);
return v0;
}
public java.util.Set getEnabledCipherSuites()
{
java.util.Set v2;
io.vertx.core.net.SSLOptions v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.Set getEnabledCipherSuites()>();
return v2;
}
public java.util.List getCrlPaths()
{
java.util.List v2;
io.vertx.core.net.SSLOptions v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.List getCrlPaths()>();
return v2;
}
public io.vertx.core.net.TCPSSLOptions addCrlPath(java.lang.String) throws java.lang.NullPointerException
{
java.lang.String v1;
io.vertx.core.net.SSLOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
virtualinvoke v2.<io.vertx.core.net.SSLOptions: io.vertx.core.net.SSLOptions addCrlPath(java.lang.String)>(v1);
return v0;
}
public java.util.List getCrlValues()
{
java.util.List v2;
io.vertx.core.net.SSLOptions v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.List getCrlValues()>();
return v2;
}
public io.vertx.core.net.TCPSSLOptions addCrlValue(io.vertx.core.buffer.Buffer) throws java.lang.NullPointerException
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.net.SSLOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
virtualinvoke v2.<io.vertx.core.net.SSLOptions: io.vertx.core.net.SSLOptions addCrlValue(io.vertx.core.buffer.Buffer)>(v1);
return v0;
}
public boolean isUseAlpn()
{
io.vertx.core.net.SSLOptions v1;
boolean v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: boolean isUseAlpn()>();
return v2;
}
public io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)
{
io.vertx.core.net.SSLOptions v2;
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
virtualinvoke v2.<io.vertx.core.net.SSLOptions: io.vertx.core.net.SSLOptions setUseAlpn(boolean)>(v1);
return v0;
}
public io.vertx.core.net.SSLEngineOptions getSslEngineOptions()
{
io.vertx.core.net.SSLEngineOptions v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions sslEngineOptions>;
return v1;
}
public io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)
{
io.vertx.core.net.SSLEngineOptions v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.net.SSLEngineOptions;
v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions sslEngineOptions> = v1;
return v0;
}
public io.vertx.core.net.JdkSSLEngineOptions getJdkSslEngineOptions()
{
io.vertx.core.net.SSLEngineOptions v1, v3;
boolean v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions sslEngineOptions>;
v2 = v1 instanceof io.vertx.core.net.JdkSSLEngineOptions;
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions sslEngineOptions>;
goto label2;
label1:
v3 = null;
label2:
return v3;
}
public io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)
{
io.vertx.core.net.JdkSSLEngineOptions v1;
io.vertx.core.net.TCPSSLOptions v0, v2;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.net.JdkSSLEngineOptions;
v2 = virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.net.OpenSSLEngineOptions getOpenSslEngineOptions()
{
io.vertx.core.net.SSLEngineOptions v1, v3;
boolean v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions sslEngineOptions>;
v2 = v1 instanceof io.vertx.core.net.OpenSSLEngineOptions;
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions sslEngineOptions>;
goto label2;
label1:
v3 = null;
label2:
return v3;
}
public io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)
{
io.vertx.core.net.OpenSSLEngineOptions v1;
io.vertx.core.net.TCPSSLOptions v0, v2;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.vertx.core.net.OpenSSLEngineOptions;
v2 = virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)
{
java.util.Set v1;
io.vertx.core.net.SSLOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: java.util.Set;
v2 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
virtualinvoke v2.<io.vertx.core.net.SSLOptions: io.vertx.core.net.SSLOptions setEnabledSecureTransportProtocols(java.util.Set)>(v1);
return v0;
}
public io.vertx.core.net.TCPSSLOptions addEnabledSecureTransportProtocol(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.SSLOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
virtualinvoke v2.<io.vertx.core.net.SSLOptions: io.vertx.core.net.SSLOptions addEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.net.TCPSSLOptions removeEnabledSecureTransportProtocol(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.SSLOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
virtualinvoke v2.<io.vertx.core.net.SSLOptions: io.vertx.core.net.SSLOptions removeEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v0;
}
public boolean isTcpFastOpen()
{
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpFastOpen>;
return v1;
}
public io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)
{
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpFastOpen> = v1;
return v0;
}
public boolean isTcpCork()
{
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpCork>;
return v1;
}
public io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)
{
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpCork> = v1;
return v0;
}
public boolean isTcpQuickAck()
{
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpQuickAck>;
return v1;
}
public io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)
{
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.TCPSSLOptions: boolean tcpQuickAck> = v1;
return v0;
}
public int getTcpUserTimeout()
{
int v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: int tcpUserTimeout>;
return v1;
}
public io.vertx.core.net.TCPSSLOptions setTcpUserTimeout(int)
{
int v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.net.TCPSSLOptions: int tcpUserTimeout> = v1;
return v0;
}
public java.util.Set getEnabledSecureTransportProtocols()
{
java.util.Set v2;
io.vertx.core.net.SSLOptions v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.Set getEnabledSecureTransportProtocols()>();
return v2;
}
public long getSslHandshakeTimeout()
{
long v2;
io.vertx.core.net.SSLOptions v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: long getSslHandshakeTimeout()>();
return v2;
}
public io.vertx.core.net.TCPSSLOptions setSslHandshakeTimeout(long)
{
long v1;
io.vertx.core.net.SSLOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
virtualinvoke v2.<io.vertx.core.net.SSLOptions: io.vertx.core.net.SSLOptions setSslHandshakeTimeout(long)>(v1);
return v0;
}
public io.vertx.core.net.TCPSSLOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.net.SSLOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v2 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
virtualinvoke v2.<io.vertx.core.net.SSLOptions: io.vertx.core.net.SSLOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v0;
}
public java.util.concurrent.TimeUnit getSslHandshakeTimeoutUnit()
{
java.util.concurrent.TimeUnit v2;
io.vertx.core.net.SSLOptions v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 = v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLOptions sslOptions>;
v2 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.concurrent.TimeUnit getSslHandshakeTimeoutUnit()>();
return v2;
}
public io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)
{
io.vertx.core.net.NetworkOptions v2;
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>(v1);
return v2;
}
public io.vertx.core.net.TCPSSLOptions setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)
{
io.vertx.core.net.NetworkOptions v2;
io.netty.handler.logging.ByteBufFormat v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: io.netty.handler.logging.ByteBufFormat;
v2 = specialinvoke v0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)>(v1);
return v2;
}
public io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)
{
int v1;
io.vertx.core.net.NetworkOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>(v1);
return v2;
}
public io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)
{
int v1;
io.vertx.core.net.NetworkOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>(v1);
return v2;
}
public io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)
{
io.vertx.core.net.NetworkOptions v2;
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>(v1);
return v2;
}
public io.vertx.core.net.TCPSSLOptions setTrafficClass(int)
{
int v1;
io.vertx.core.net.NetworkOptions v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>(v1);
return v2;
}
public io.vertx.core.net.TCPSSLOptions setReusePort(boolean)
{
io.vertx.core.net.NetworkOptions v2;
boolean v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @this: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>(v1);
return v2;
}
static void <clinit>()
{
java.util.concurrent.TimeUnit v0, v2;
java.util.List v1;
v0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
<io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit DEFAULT_IDLE_TIMEOUT_TIME_UNIT> = v0;
<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions DEFAULT_SSL_ENGINE> = null;
v1 = <io.vertx.core.net.SSLOptions: java.util.List DEFAULT_ENABLED_SECURE_TRANSPORT_PROTOCOLS>;
<io.vertx.core.net.TCPSSLOptions: java.util.List DEFAULT_ENABLED_SECURE_TRANSPORT_PROTOCOLS> = v1;
v2 = <io.vertx.core.net.SSLOptions: java.util.concurrent.TimeUnit DEFAULT_SSL_HANDSHAKE_TIMEOUT_TIME_UNIT>;
<io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit DEFAULT_SSL_HANDSHAKE_TIMEOUT_TIME_UNIT> = v2;
return;
}
}