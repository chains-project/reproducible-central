class io.vertx.core.net.impl.ChannelProvider$1 extends io.netty.channel.ChannelInboundHandlerAdapter
{
final io.netty.handler.ssl.SslHandler val$sslHandler;
final io.vertx.core.Handler val$handler;
final io.netty.channel.Channel val$ch;
final io.netty.util.concurrent.Promise val$channelHandler;
final io.vertx.core.net.impl.ChannelProvider this$0;
void <init>(io.vertx.core.net.impl.ChannelProvider, io.netty.handler.ssl.SslHandler, io.vertx.core.Handler, io.netty.channel.Channel, io.netty.util.concurrent.Promise)
{
io.netty.channel.Channel v4;
io.netty.util.concurrent.Promise v5;
io.netty.handler.ssl.SslHandler v2;
io.vertx.core.net.impl.ChannelProvider v1;
io.vertx.core.net.impl.ChannelProvider$1 v0;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.net.impl.ChannelProvider$1;
v1 := @parameter0: io.vertx.core.net.impl.ChannelProvider;
v2 := @parameter1: io.netty.handler.ssl.SslHandler;
v3 := @parameter2: io.vertx.core.Handler;
v4 := @parameter3: io.netty.channel.Channel;
v5 := @parameter4: io.netty.util.concurrent.Promise;
v0.<io.vertx.core.net.impl.ChannelProvider$1: io.vertx.core.net.impl.ChannelProvider this$0> = v1;
v0.<io.vertx.core.net.impl.ChannelProvider$1: io.netty.handler.ssl.SslHandler val$sslHandler> = v2;
v0.<io.vertx.core.net.impl.ChannelProvider$1: io.vertx.core.Handler val$handler> = v3;
v0.<io.vertx.core.net.impl.ChannelProvider$1: io.netty.channel.Channel val$ch> = v4;
v0.<io.vertx.core.net.impl.ChannelProvider$1: io.netty.util.concurrent.Promise val$channelHandler> = v5;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
return;
}
public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object)
{
java.lang.Throwable v17;
io.vertx.core.impl.ContextInternal v11;
io.vertx.core.net.impl.ChannelProvider$1 v0;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.net.impl.ChannelProvider v10, v6;
java.lang.String v8;
boolean v3, v4;
io.netty.util.concurrent.Promise v14, v18;
javax.net.ssl.SSLHandshakeException v16;
io.netty.channel.ChannelPipeline v5;
io.netty.channel.Channel v12, v15;
io.netty.handler.ssl.SslHandler v7;
java.lang.Object v2;
io.vertx.core.Handler v13, v9;
v0 := @this: io.vertx.core.net.impl.ChannelProvider$1;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof io.netty.handler.ssl.SslHandshakeCompletionEvent;
if v3 == 0 goto label3;
v4 = virtualinvoke v2.<io.netty.handler.ssl.SslHandshakeCompletionEvent: boolean isSuccess()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v5.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
v6 = v0.<io.vertx.core.net.impl.ChannelProvider$1: io.vertx.core.net.impl.ChannelProvider this$0>;
v7 = v0.<io.vertx.core.net.impl.ChannelProvider$1: io.netty.handler.ssl.SslHandler val$sslHandler>;
v8 = virtualinvoke v7.<io.netty.handler.ssl.SslHandler: java.lang.String applicationProtocol()>();
v6.<io.vertx.core.net.impl.ChannelProvider: java.lang.String applicationProtocol> = v8;
v9 = v0.<io.vertx.core.net.impl.ChannelProvider$1: io.vertx.core.Handler val$handler>;
if v9 == null goto label1;
v10 = v0.<io.vertx.core.net.impl.ChannelProvider$1: io.vertx.core.net.impl.ChannelProvider this$0>;
v11 = v10.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.impl.ContextInternal context>;
v12 = v0.<io.vertx.core.net.impl.ChannelProvider$1: io.netty.channel.Channel val$ch>;
v13 = v0.<io.vertx.core.net.impl.ChannelProvider$1: io.vertx.core.Handler val$handler>;
interfaceinvoke v11.<io.vertx.core.impl.ContextInternal: void dispatch(java.lang.Object,io.vertx.core.Handler)>(v12, v13);
label1:
v14 = v0.<io.vertx.core.net.impl.ChannelProvider$1: io.netty.util.concurrent.Promise val$channelHandler>;
v15 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
interfaceinvoke v14.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v15);
goto label3;
label2:
v16 = new javax.net.ssl.SSLHandshakeException;
specialinvoke v16.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>("Failed to create SSL connection");
v17 = virtualinvoke v2.<io.netty.handler.ssl.SslHandshakeCompletionEvent: java.lang.Throwable cause()>();
virtualinvoke v16.<javax.net.ssl.SSLHandshakeException: java.lang.Throwable initCause(java.lang.Throwable)>(v17);
v18 = v0.<io.vertx.core.net.impl.ChannelProvider$1: io.netty.util.concurrent.Promise val$channelHandler>;
interfaceinvoke v18.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v16);
label3:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)>(v2);
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)
{
java.lang.Throwable v2;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.net.impl.ChannelProvider$1 v0;
v0 := @this: io.vertx.core.net.impl.ChannelProvider$1;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
return;
}
}