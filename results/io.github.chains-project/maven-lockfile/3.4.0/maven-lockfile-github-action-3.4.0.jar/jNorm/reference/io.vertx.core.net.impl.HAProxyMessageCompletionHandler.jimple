public class io.vertx.core.net.impl.HAProxyMessageCompletionHandler extends io.netty.handler.codec.MessageToMessageDecoder
{
public static final java.io.IOException UNSUPPORTED_PROTOCOL_EXCEPTION;
private static final io.vertx.core.impl.logging.Logger log;
private static final boolean proxyProtocolCodecFound;
private final io.netty.util.concurrent.Promise promise;
public static boolean canUseProxyProtocol(boolean)
{
io.vertx.core.impl.logging.Logger v2;
boolean v0, v1, v3, v4;
v0 := @parameter0: boolean;
if v0 == 0 goto label1;
v1 = <io.vertx.core.net.impl.HAProxyMessageCompletionHandler: boolean proxyProtocolCodecFound>;
if v1 != 0 goto label1;
v2 = <io.vertx.core.net.impl.HAProxyMessageCompletionHandler: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v2.<io.vertx.core.impl.logging.Logger: void warn(java.lang.Object)>("Proxy protocol support could not be enabled. Make sure that netty-codec-haproxy is included in your classpath");
label1:
v3 = <io.vertx.core.net.impl.HAProxyMessageCompletionHandler: boolean proxyProtocolCodecFound>;
if v3 == 0 goto label2;
if v0 == 0 goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public void <init>(io.netty.util.concurrent.Promise)
{
io.vertx.core.net.impl.HAProxyMessageCompletionHandler v0;
io.netty.util.concurrent.Promise v1;
v0 := @this: io.vertx.core.net.impl.HAProxyMessageCompletionHandler;
v1 := @parameter0: io.netty.util.concurrent.Promise;
specialinvoke v0.<io.netty.handler.codec.MessageToMessageDecoder: void <init>()>();
v0.<io.vertx.core.net.impl.HAProxyMessageCompletionHandler: io.netty.util.concurrent.Promise promise> = v1;
return;
}
protected void decode(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.haproxy.HAProxyMessage, java.util.List)
{
io.netty.util.AttributeKey v14, v21;
io.vertx.core.net.impl.HAProxyMessageCompletionHandler v0;
io.netty.handler.codec.haproxy.HAProxyProxiedProtocol v10, v4;
io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$TransportProtocol v5, v6;
io.netty.channel.ChannelHandlerContext v1;
int v17, v24;
java.lang.String v12, v16, v19, v23;
boolean v11, v7;
io.vertx.core.net.SocketAddress v18, v25;
io.netty.util.Attribute v15, v22;
io.netty.util.concurrent.Promise v27, v8;
java.io.IOException v9;
io.netty.channel.ChannelPipeline v26;
io.netty.channel.Channel v13, v20, v28;
io.netty.handler.codec.haproxy.HAProxyMessage v2;
java.util.List v3;
v0 := @this: io.vertx.core.net.impl.HAProxyMessageCompletionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.haproxy.HAProxyMessage;
v3 := @parameter2: java.util.List;
v4 = virtualinvoke v2.<io.netty.handler.codec.haproxy.HAProxyMessage: io.netty.handler.codec.haproxy.HAProxyProxiedProtocol proxiedProtocol()>();
v5 = virtualinvoke v4.<io.netty.handler.codec.haproxy.HAProxyProxiedProtocol: io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$TransportProtocol transportProtocol()>();
v6 = <io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$TransportProtocol: io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$TransportProtocol DGRAM>;
v7 = virtualinvoke v5.<io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$TransportProtocol: boolean equals(java.lang.Object)>(v6);
if v7 == 0 goto label1;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
v8 = v0.<io.vertx.core.net.impl.HAProxyMessageCompletionHandler: io.netty.util.concurrent.Promise promise>;
v9 = <io.vertx.core.net.impl.HAProxyMessageCompletionHandler: java.io.IOException UNSUPPORTED_PROTOCOL_EXCEPTION>;
interfaceinvoke v8.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v9);
goto label4;
label1:
v10 = <io.netty.handler.codec.haproxy.HAProxyProxiedProtocol: io.netty.handler.codec.haproxy.HAProxyProxiedProtocol UNKNOWN>;
v11 = virtualinvoke v4.<io.netty.handler.codec.haproxy.HAProxyProxiedProtocol: boolean equals(java.lang.Object)>(v10);
if v11 != 0 goto label3;
v12 = virtualinvoke v2.<io.netty.handler.codec.haproxy.HAProxyMessage: java.lang.String sourceAddress()>();
if v12 == null goto label2;
v13 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v14 = <io.vertx.core.net.impl.ConnectionBase: io.netty.util.AttributeKey REMOTE_ADDRESS_OVERRIDE>;
v15 = interfaceinvoke v13.<io.netty.channel.Channel: io.netty.util.Attribute attr(io.netty.util.AttributeKey)>(v14);
v16 = virtualinvoke v2.<io.netty.handler.codec.haproxy.HAProxyMessage: java.lang.String sourceAddress()>();
v17 = virtualinvoke v2.<io.netty.handler.codec.haproxy.HAProxyMessage: int sourcePort()>();
v18 = specialinvoke v0.<io.vertx.core.net.impl.HAProxyMessageCompletionHandler: io.vertx.core.net.SocketAddress createAddress(io.netty.handler.codec.haproxy.HAProxyProxiedProtocol,java.lang.String,int)>(v4, v16, v17);
interfaceinvoke v15.<io.netty.util.Attribute: void set(java.lang.Object)>(v18);
label2:
v19 = virtualinvoke v2.<io.netty.handler.codec.haproxy.HAProxyMessage: java.lang.String destinationAddress()>();
if v19 == null goto label3;
v20 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v21 = <io.vertx.core.net.impl.ConnectionBase: io.netty.util.AttributeKey LOCAL_ADDRESS_OVERRIDE>;
v22 = interfaceinvoke v20.<io.netty.channel.Channel: io.netty.util.Attribute attr(io.netty.util.AttributeKey)>(v21);
v23 = virtualinvoke v2.<io.netty.handler.codec.haproxy.HAProxyMessage: java.lang.String destinationAddress()>();
v24 = virtualinvoke v2.<io.netty.handler.codec.haproxy.HAProxyMessage: int destinationPort()>();
v25 = specialinvoke v0.<io.vertx.core.net.impl.HAProxyMessageCompletionHandler: io.vertx.core.net.SocketAddress createAddress(io.netty.handler.codec.haproxy.HAProxyProxiedProtocol,java.lang.String,int)>(v4, v23, v24);
interfaceinvoke v22.<io.netty.util.Attribute: void set(java.lang.Object)>(v25);
label3:
v26 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v26.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
v27 = v0.<io.vertx.core.net.impl.HAProxyMessageCompletionHandler: io.netty.util.concurrent.Promise promise>;
v28 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
interfaceinvoke v27.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v28);
label4:
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)
{
io.vertx.core.net.impl.HAProxyMessageCompletionHandler v0;
java.lang.Throwable v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.util.concurrent.Promise v3;
v0 := @this: io.vertx.core.net.impl.HAProxyMessageCompletionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = v0.<io.vertx.core.net.impl.HAProxyMessageCompletionHandler: io.netty.util.concurrent.Promise promise>;
interfaceinvoke v3.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v2);
return;
}
public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object)
{
io.vertx.core.net.impl.HAProxyMessageCompletionHandler v0;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.timeout.IdleState v4, v5;
java.lang.Object v2;
boolean v3;
v0 := @this: io.vertx.core.net.impl.HAProxyMessageCompletionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof io.netty.handler.timeout.IdleStateEvent;
if v3 == 0 goto label1;
v4 = virtualinvoke v2.<io.netty.handler.timeout.IdleStateEvent: io.netty.handler.timeout.IdleState state()>();
v5 = <io.netty.handler.timeout.IdleState: io.netty.handler.timeout.IdleState ALL_IDLE>;
if v4 != v5 goto label1;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
goto label2;
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)>(v2);
label2:
return;
}
private io.vertx.core.net.SocketAddress createAddress(io.netty.handler.codec.haproxy.HAProxyProxiedProtocol, java.lang.String, int)
{
io.vertx.core.net.impl.HAProxyMessageCompletionHandler v0;
java.lang.IllegalStateException v9;
io.netty.handler.codec.haproxy.HAProxyProxiedProtocol v1;
int[] v4;
int v3, v5, v6;
java.lang.String v2;
io.vertx.core.net.SocketAddress v7, v8;
v0 := @this: io.vertx.core.net.impl.HAProxyMessageCompletionHandler;
v1 := @parameter0: io.netty.handler.codec.haproxy.HAProxyProxiedProtocol;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 = <io.vertx.core.net.impl.HAProxyMessageCompletionHandler$1: int[] $SwitchMap$io$netty$handler$codec$haproxy$HAProxyProxiedProtocol>;
v5 = virtualinvoke v1.<io.netty.handler.codec.haproxy.HAProxyProxiedProtocol: int ordinal()>();
v6 = v4[v5];
tableswitch(v6)
{
case 1: goto label1;
case 2: goto label1;
case 3: goto label2;
default: goto label3;
};
label1:
v7 = staticinvoke <io.vertx.core.net.SocketAddress: io.vertx.core.net.SocketAddress inetSocketAddress(int,java.lang.String)>(v3, v2);
return v7;
label2:
v8 = staticinvoke <io.vertx.core.net.SocketAddress: io.vertx.core.net.SocketAddress domainSocketAddress(java.lang.String)>(v2);
return v8;
label3:
v9 = new java.lang.IllegalStateException;
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should never happen");
throw v9;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v1;
java.lang.Throwable v3;
java.io.IOException v0;
boolean v2;
v0 = new java.io.IOException;
specialinvoke v0.<java.io.IOException: void <init>(java.lang.String)>("Unsupported HA PROXY transport protocol");
<io.vertx.core.net.impl.HAProxyMessageCompletionHandler: java.io.IOException UNSUPPORTED_PROTOCOL_EXCEPTION> = v0;
v1 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/net/impl/HAProxyMessageCompletionHandler;");
<io.vertx.core.net.impl.HAProxyMessageCompletionHandler: io.vertx.core.impl.logging.Logger log> = v1;
v2 = 1;
label1:
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("io.netty.handler.codec.haproxy.HAProxyMessageDecoder");
label2:
goto label4;
label3:
v3 := @caughtexception;
v2 = 0;
label4:
<io.vertx.core.net.impl.HAProxyMessageCompletionHandler: boolean proxyProtocolCodecFound> = v2;
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}