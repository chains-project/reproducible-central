class io.vertx.core.net.impl.NetServerImpl$NetSocketStream extends java.lang.Object implements io.vertx.core.streams.ReadStream
{
final io.vertx.core.net.impl.NetServerImpl this$0;
private void <init>(io.vertx.core.net.impl.NetServerImpl)
{
io.vertx.core.net.impl.NetServerImpl v1;
io.vertx.core.net.impl.NetServerImpl$NetSocketStream v0;
v0 := @this: io.vertx.core.net.impl.NetServerImpl$NetSocketStream;
v1 := @parameter0: io.vertx.core.net.impl.NetServerImpl;
v0.<io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public io.vertx.core.net.impl.NetServerImpl$NetSocketStream handler(io.vertx.core.Handler)
{
io.vertx.core.net.impl.NetServerImpl v2;
io.vertx.core.Handler v1;
io.vertx.core.net.impl.NetServerImpl$NetSocketStream v0;
v0 := @this: io.vertx.core.net.impl.NetServerImpl$NetSocketStream;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl this$0>;
virtualinvoke v2.<io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer connectHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.core.net.impl.NetServerImpl$NetSocketStream pause()
{
io.vertx.core.net.impl.NetServerImpl v1;
io.vertx.core.net.impl.NetServerImpl$NetSocketStream v0;
v0 := @this: io.vertx.core.net.impl.NetServerImpl$NetSocketStream;
v1 = v0.<io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl this$0>;
specialinvoke v1.<io.vertx.core.net.impl.NetServerImpl: void pauseAccepting()>();
return v0;
}
public io.vertx.core.net.impl.NetServerImpl$NetSocketStream resume()
{
io.vertx.core.net.impl.NetServerImpl v1;
io.vertx.core.net.impl.NetServerImpl$NetSocketStream v0;
v0 := @this: io.vertx.core.net.impl.NetServerImpl$NetSocketStream;
v1 = v0.<io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl this$0>;
specialinvoke v1.<io.vertx.core.net.impl.NetServerImpl: void resumeAccepting()>();
return v0;
}
public io.vertx.core.streams.ReadStream fetch(long)
{
io.vertx.core.net.impl.NetServerImpl v2;
long v1;
io.vertx.core.net.impl.NetServerImpl$NetSocketStream v0;
v0 := @this: io.vertx.core.net.impl.NetServerImpl$NetSocketStream;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl this$0>;
specialinvoke v2.<io.vertx.core.net.impl.NetServerImpl: void fetchAccepting(long)>(v1);
return v0;
}
public io.vertx.core.net.impl.NetServerImpl$NetSocketStream endHandler(io.vertx.core.Handler)
{
java.lang.Throwable v4;
io.vertx.core.net.impl.NetServerImpl v2, v3;
io.vertx.core.Handler v1;
io.vertx.core.net.impl.NetServerImpl$NetSocketStream v0;
v0 := @this: io.vertx.core.net.impl.NetServerImpl$NetSocketStream;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl this$0>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl this$0>;
v3.<io.vertx.core.net.impl.NetServerImpl: io.vertx.core.Handler endHandler> = v1;
exitmonitor v2;
label2:
return v0;
label3:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.net.impl.NetServerImpl$NetSocketStream exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.net.impl.NetServerImpl$NetSocketStream v0;
v0 := @this: io.vertx.core.net.impl.NetServerImpl$NetSocketStream;
v1 := @parameter0: io.vertx.core.Handler;
return v0;
}
}