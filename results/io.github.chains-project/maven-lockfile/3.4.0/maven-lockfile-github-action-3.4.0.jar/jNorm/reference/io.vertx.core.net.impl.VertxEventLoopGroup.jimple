public final class io.vertx.core.net.impl.VertxEventLoopGroup extends io.netty.util.concurrent.AbstractEventExecutorGroup implements io.netty.channel.EventLoopGroup
{
private int pos;
private final java.util.List workers;
private final java.util.Set children;
public void <init>()
{
io.vertx.core.net.impl.VertxEventLoopGroup$1 v2;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
java.util.ArrayList v1;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
specialinvoke v0.<io.netty.util.concurrent.AbstractEventExecutorGroup: void <init>()>();
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List workers> = v1;
v2 = new io.vertx.core.net.impl.VertxEventLoopGroup$1;
specialinvoke v2.<io.vertx.core.net.impl.VertxEventLoopGroup$1: void <init>(io.vertx.core.net.impl.VertxEventLoopGroup)>(v0);
v0.<io.vertx.core.net.impl.VertxEventLoopGroup: java.util.Set children> = v2;
return;
}
public synchronized io.netty.channel.EventLoop next()
{
java.lang.IllegalStateException v3;
io.netty.channel.EventLoop v7;
java.util.List v1, v4;
int v5, v8, v9;
java.lang.Object v6;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
boolean v2;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 = v0.<io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List workers>;
v2 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
label1:
v4 = v0.<io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List workers>;
v5 = v0.<io.vertx.core.net.impl.VertxEventLoopGroup: int pos>;
v6 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(v5);
v7 = v6.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: io.netty.channel.EventLoop worker>;
v8 = v0.<io.vertx.core.net.impl.VertxEventLoopGroup: int pos>;
v9 = v8 + 1;
v0.<io.vertx.core.net.impl.VertxEventLoopGroup: int pos> = v9;
specialinvoke v0.<io.vertx.core.net.impl.VertxEventLoopGroup: void checkPos()>();
return v7;
}
public java.util.Iterator iterator()
{
java.util.Set v1;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
java.util.Iterator v2;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 = v0.<io.vertx.core.net.impl.VertxEventLoopGroup: java.util.Set children>;
v2 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
return v2;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.EventLoop v2;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 := @parameter0: io.netty.channel.Channel;
v2 = virtualinvoke v0.<io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.Channel, io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v2;
io.netty.channel.EventLoop v3;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = virtualinvoke v0.<io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.EventLoop v2;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = virtualinvoke v0.<io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public boolean isShutdown()
{
io.vertx.core.net.impl.VertxEventLoopGroup v0;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
return 0;
}
public boolean isTerminated()
{
io.vertx.core.net.impl.VertxEventLoopGroup v0;
boolean v1;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 = virtualinvoke v0.<io.vertx.core.net.impl.VertxEventLoopGroup: boolean isShutdown()>();
return v1;
}
public synchronized boolean awaitTermination(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
long v1;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
return 0;
}
public synchronized void addWorker(io.netty.channel.EventLoop)
{
java.util.List v3;
int v5, v6;
io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder v2, v4;
io.netty.channel.EventLoop v1;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 = specialinvoke v0.<io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)>(v1);
if v2 != null goto label1;
v3 = v0.<io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List workers>;
v4 = new io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder;
specialinvoke v4.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: void <init>(io.netty.channel.EventLoop)>(v1);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v4);
goto label2;
label1:
v5 = v2.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: int count>;
v6 = v5 + 1;
v2.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: int count> = v6;
label2:
return;
}
public synchronized void shutdown()
{
java.lang.UnsupportedOperationException v1;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Should never be called");
throw v1;
}
public boolean isShuttingDown()
{
io.vertx.core.net.impl.VertxEventLoopGroup v0;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
return 0;
}
public io.netty.util.concurrent.Future shutdownGracefully(long, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
java.lang.UnsupportedOperationException v4;
long v1, v2;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Should never be called");
throw v4;
}
public io.netty.util.concurrent.Future terminationFuture()
{
java.lang.UnsupportedOperationException v1;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Should never be called");
throw v1;
}
private io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)
{
java.util.Iterator v4;
io.netty.channel.EventLoop v1;
java.util.List v3;
io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder v2;
java.lang.Object v6;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
boolean v5, v7;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 = new io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder;
specialinvoke v2.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: void <init>(io.netty.channel.EventLoop)>(v1);
v3 = v0.<io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List workers>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: boolean equals(java.lang.Object)>(v2);
if v7 == 0 goto label1;
return v6;
label2:
return null;
}
public synchronized void removeWorker(io.netty.channel.EventLoop)
{
java.lang.IllegalStateException v7;
io.netty.channel.EventLoop v1;
java.util.List v6;
int v3, v4, v5;
io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder v2;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 = specialinvoke v0.<io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)>(v1);
if v2 == null goto label2;
v3 = v2.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: int count>;
v4 = v3 - 1;
v2.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: int count> = v4;
v5 = v2.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: int count>;
if v5 != 0 goto label1;
v6 = v0.<io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List workers>;
interfaceinvoke v6.<java.util.List: boolean remove(java.lang.Object)>(v2);
label1:
specialinvoke v0.<io.vertx.core.net.impl.VertxEventLoopGroup: void checkPos()>();
goto label3;
label2:
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t find worker to remove");
throw v7;
label3:
return;
}
public synchronized int workerCount()
{
int v2;
java.util.List v1;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 = v0.<io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List workers>;
v2 = interfaceinvoke v1.<java.util.List: int size()>();
return v2;
}
private void checkPos()
{
java.util.List v2;
int v1, v3;
io.vertx.core.net.impl.VertxEventLoopGroup v0;
v0 := @this: io.vertx.core.net.impl.VertxEventLoopGroup;
v1 = v0.<io.vertx.core.net.impl.VertxEventLoopGroup: int pos>;
v2 = v0.<io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List workers>;
v3 = interfaceinvoke v2.<java.util.List: int size()>();
if v1 != v3 goto label1;
v0.<io.vertx.core.net.impl.VertxEventLoopGroup: int pos> = 0;
label1:
return;
}
}