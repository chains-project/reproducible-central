class io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency$1 extends io.vertx.core.net.impl.pool.Task
{
final io.vertx.core.net.impl.pool.SimpleConnectionPool$LeaseImpl[] val$extra;
final io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency this$0;
void <init>(io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency, io.vertx.core.net.impl.pool.SimpleConnectionPool$LeaseImpl[])
{
io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency$1 v0;
io.vertx.core.net.impl.pool.SimpleConnectionPool$LeaseImpl[] v2;
io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency v1;
v0 := @this: io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency$1;
v1 := @parameter0: io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency;
v2 := @parameter1: io.vertx.core.net.impl.pool.SimpleConnectionPool$LeaseImpl[];
v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency$1: io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency this$0> = v1;
v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency$1: io.vertx.core.net.impl.pool.SimpleConnectionPool$LeaseImpl[] val$extra> = v2;
specialinvoke v0.<io.vertx.core.net.impl.pool.Task: void <init>()>();
return;
}
public void run()
{
io.vertx.core.net.impl.pool.SimpleConnectionPool$LeaseImpl v4;
int v2, v3;
io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency$1 v0;
io.vertx.core.net.impl.pool.SimpleConnectionPool$LeaseImpl[] v1;
v0 := @this: io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency$1;
v1 = v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$SetConcurrency$1: io.vertx.core.net.impl.pool.SimpleConnectionPool$LeaseImpl[] val$extra>;
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
virtualinvoke v4.<io.vertx.core.net.impl.pool.SimpleConnectionPool$LeaseImpl: void emit()>();
v3 = v3 + 1;
goto label1;
label2:
return;
}
}