class io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot extends java.lang.Object implements io.vertx.core.net.impl.pool.PoolConnector$Listener, io.vertx.core.net.impl.pool.PoolConnection
{
private final io.vertx.core.net.impl.pool.SimpleConnectionPool pool;
private final io.vertx.core.impl.EventLoopContext context;
private final io.vertx.core.Promise result;
private io.vertx.core.net.impl.pool.PoolWaiter initiator;
private java.lang.Object connection;
private int index;
private int usage;
private long concurrency;
private int capacity;
public void <init>(io.vertx.core.net.impl.pool.SimpleConnectionPool, io.vertx.core.impl.EventLoopContext, int, int)
{
io.vertx.core.impl.EventLoopContext v2;
io.vertx.core.impl.future.PromiseInternal v5;
io.vertx.core.net.impl.pool.SimpleConnectionPool v1;
io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot v0;
int v3, v4;
v0 := @this: io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot;
v1 := @parameter0: io.vertx.core.net.impl.pool.SimpleConnectionPool;
v2 := @parameter1: io.vertx.core.impl.EventLoopContext;
v3 := @parameter2: int;
v4 := @parameter3: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: io.vertx.core.net.impl.pool.SimpleConnectionPool pool> = v1;
v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: io.vertx.core.impl.EventLoopContext context> = v2;
v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: java.lang.Object connection> = null;
v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: int usage> = 0;
v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: int index> = v3;
v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: int capacity> = v4;
v5 = virtualinvoke v2.<io.vertx.core.impl.EventLoopContext: io.vertx.core.impl.future.PromiseInternal promise()>();
v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: io.vertx.core.Promise result> = v5;
return;
}
public void onRemove()
{
io.vertx.core.net.impl.pool.SimpleConnectionPool v1;
io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot v0;
v0 := @this: io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot;
v1 = v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: io.vertx.core.net.impl.pool.SimpleConnectionPool pool>;
specialinvoke v1.<io.vertx.core.net.impl.pool.SimpleConnectionPool: void remove(io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot)>(v0);
return;
}
public void onConcurrencyChange(long)
{
long v1;
io.vertx.core.net.impl.pool.SimpleConnectionPool v2;
io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot v0;
v0 := @this: io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: io.vertx.core.net.impl.pool.SimpleConnectionPool pool>;
specialinvoke v2.<io.vertx.core.net.impl.pool.SimpleConnectionPool: void setConcurrency(io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot,long)>(v0, v1);
return;
}
public io.vertx.core.impl.ContextInternal context()
{
io.vertx.core.impl.EventLoopContext v1;
io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot v0;
v0 := @this: io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot;
v1 = v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: io.vertx.core.impl.EventLoopContext context>;
return v1;
}
public java.lang.Object get()
{
java.lang.Object v1;
io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot v0;
v0 := @this: io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot;
v1 = v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: java.lang.Object connection>;
return v1;
}
public int usage()
{
int v1;
io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot v0;
v0 := @this: io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot;
v1 = v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: int usage>;
return v1;
}
public long available()
{
io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot v0;
int v2;
long v1, v3;
v0 := @this: io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot;
v1 = v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: long concurrency>;
v2 = v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: int usage>;
v3 = v1 - v2;
return v3;
}
public long concurrency()
{
long v1;
io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot v0;
v0 := @this: io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot;
v1 = v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: long concurrency>;
return v1;
}
}