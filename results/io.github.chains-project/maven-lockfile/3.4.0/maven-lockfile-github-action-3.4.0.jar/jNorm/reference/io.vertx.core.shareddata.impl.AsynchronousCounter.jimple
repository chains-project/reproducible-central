public class io.vertx.core.shareddata.impl.AsynchronousCounter extends java.lang.Object implements io.vertx.core.shareddata.Counter
{
private final io.vertx.core.impl.VertxInternal vertx;
private final java.util.concurrent.atomic.AtomicLong counter;
public void <init>(io.vertx.core.impl.VertxInternal)
{
java.util.concurrent.atomic.AtomicLong v2;
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.shareddata.impl.AsynchronousCounter v0;
v0 := @this: io.vertx.core.shareddata.impl.AsynchronousCounter;
v1 := @parameter0: io.vertx.core.impl.VertxInternal;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: io.vertx.core.impl.VertxInternal vertx> = v1;
v2 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: java.util.concurrent.atomic.AtomicLong counter> = v2;
return;
}
public void <init>(io.vertx.core.impl.VertxInternal, java.util.concurrent.atomic.AtomicLong)
{
java.util.concurrent.atomic.AtomicLong v2;
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.shareddata.impl.AsynchronousCounter v0;
v0 := @this: io.vertx.core.shareddata.impl.AsynchronousCounter;
v1 := @parameter0: io.vertx.core.impl.VertxInternal;
v2 := @parameter1: java.util.concurrent.atomic.AtomicLong;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: io.vertx.core.impl.VertxInternal vertx> = v1;
v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: java.util.concurrent.atomic.AtomicLong counter> = v2;
return;
}
public io.vertx.core.Future get()
{
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.impl.ContextInternal v2;
long v5;
io.vertx.core.shareddata.impl.AsynchronousCounter v0;
io.vertx.core.Future v7;
java.util.concurrent.atomic.AtomicLong v4;
java.lang.Long v6;
v0 := @this: io.vertx.core.shareddata.impl.AsynchronousCounter;
v1 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: io.vertx.core.impl.VertxInternal vertx>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v4 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: java.util.concurrent.atomic.AtomicLong counter>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long get()>();
v6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v5);
interfaceinvoke v3.<io.vertx.core.Promise: void complete(java.lang.Object)>(v6);
v7 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v7;
}
public io.vertx.core.Future incrementAndGet()
{
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.impl.ContextInternal v2;
long v5;
io.vertx.core.shareddata.impl.AsynchronousCounter v0;
io.vertx.core.Future v7;
java.util.concurrent.atomic.AtomicLong v4;
java.lang.Long v6;
v0 := @this: io.vertx.core.shareddata.impl.AsynchronousCounter;
v1 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: io.vertx.core.impl.VertxInternal vertx>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v4 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: java.util.concurrent.atomic.AtomicLong counter>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();
v6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v5);
interfaceinvoke v3.<io.vertx.core.Promise: void complete(java.lang.Object)>(v6);
v7 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v7;
}
public io.vertx.core.Future getAndIncrement()
{
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.impl.ContextInternal v2;
long v5;
io.vertx.core.shareddata.impl.AsynchronousCounter v0;
io.vertx.core.Future v7;
java.util.concurrent.atomic.AtomicLong v4;
java.lang.Long v6;
v0 := @this: io.vertx.core.shareddata.impl.AsynchronousCounter;
v1 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: io.vertx.core.impl.VertxInternal vertx>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v4 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: java.util.concurrent.atomic.AtomicLong counter>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();
v6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v5);
interfaceinvoke v3.<io.vertx.core.Promise: void complete(java.lang.Object)>(v6);
v7 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v7;
}
public io.vertx.core.Future decrementAndGet()
{
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.impl.ContextInternal v2;
long v5;
io.vertx.core.shareddata.impl.AsynchronousCounter v0;
io.vertx.core.Future v7;
java.util.concurrent.atomic.AtomicLong v4;
java.lang.Long v6;
v0 := @this: io.vertx.core.shareddata.impl.AsynchronousCounter;
v1 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: io.vertx.core.impl.VertxInternal vertx>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v4 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: java.util.concurrent.atomic.AtomicLong counter>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();
v6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v5);
interfaceinvoke v3.<io.vertx.core.Promise: void complete(java.lang.Object)>(v6);
v7 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v7;
}
public io.vertx.core.Future addAndGet(long)
{
io.vertx.core.impl.VertxInternal v2;
io.vertx.core.impl.future.PromiseInternal v4;
io.vertx.core.impl.ContextInternal v3;
long v1, v6;
io.vertx.core.shareddata.impl.AsynchronousCounter v0;
io.vertx.core.Future v8;
java.util.concurrent.atomic.AtomicLong v5;
java.lang.Long v7;
v0 := @this: io.vertx.core.shareddata.impl.AsynchronousCounter;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: io.vertx.core.impl.VertxInternal vertx>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v4 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v5 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: java.util.concurrent.atomic.AtomicLong counter>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v1);
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v6);
interfaceinvoke v4.<io.vertx.core.Promise: void complete(java.lang.Object)>(v7);
v8 = interfaceinvoke v4.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v8;
}
public io.vertx.core.Future getAndAdd(long)
{
io.vertx.core.impl.VertxInternal v2;
io.vertx.core.impl.future.PromiseInternal v4;
io.vertx.core.impl.ContextInternal v3;
long v1, v6;
io.vertx.core.shareddata.impl.AsynchronousCounter v0;
io.vertx.core.Future v8;
java.util.concurrent.atomic.AtomicLong v5;
java.lang.Long v7;
v0 := @this: io.vertx.core.shareddata.impl.AsynchronousCounter;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: io.vertx.core.impl.VertxInternal vertx>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v4 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v5 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: java.util.concurrent.atomic.AtomicLong counter>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>(v1);
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v6);
interfaceinvoke v4.<io.vertx.core.Promise: void complete(java.lang.Object)>(v7);
v8 = interfaceinvoke v4.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v8;
}
public io.vertx.core.Future compareAndSet(long, long)
{
io.vertx.core.impl.VertxInternal v3;
io.vertx.core.impl.future.PromiseInternal v5;
io.vertx.core.impl.ContextInternal v4;
long v1, v2;
io.vertx.core.shareddata.impl.AsynchronousCounter v0;
io.vertx.core.Future v9;
java.util.concurrent.atomic.AtomicLong v6;
java.lang.Boolean v8;
boolean v7;
v0 := @this: io.vertx.core.shareddata.impl.AsynchronousCounter;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: io.vertx.core.impl.VertxInternal vertx>;
v4 = interfaceinvoke v3.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v5 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v6 = v0.<io.vertx.core.shareddata.impl.AsynchronousCounter: java.util.concurrent.atomic.AtomicLong counter>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(v1, v2);
v8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v7);
interfaceinvoke v5.<io.vertx.core.Promise: void complete(java.lang.Object)>(v8);
v9 = interfaceinvoke v5.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v9;
}
}