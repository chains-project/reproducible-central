class io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter extends java.lang.Object
{
final io.vertx.core.impl.ContextInternal context;
final java.lang.String lockName;
final io.vertx.core.Promise promise;
final java.lang.Long timerId;
final io.vertx.core.shareddata.impl.LocalAsyncLocks this$0;
void <init>(io.vertx.core.shareddata.impl.LocalAsyncLocks, io.vertx.core.impl.ContextInternal, java.lang.String, long, io.vertx.core.Promise)
{
io.vertx.core.shareddata.impl.LocalAsyncLocks v1;
io.vertx.core.Promise v5;
io.vertx.core.impl.ContextInternal v2;
long v4, v8;
byte v6;
java.lang.Long v9;
io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter v0;
java.lang.String v3;
io.vertx.core.Handler v7;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter;
v1 := @parameter0: io.vertx.core.shareddata.impl.LocalAsyncLocks;
v2 := @parameter1: io.vertx.core.impl.ContextInternal;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: long;
v5 := @parameter4: io.vertx.core.Promise;
v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: io.vertx.core.shareddata.impl.LocalAsyncLocks this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: java.lang.String lockName> = v3;
v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: io.vertx.core.Promise promise> = v5;
v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: io.vertx.core.impl.ContextInternal context> = v2;
v6 = v4 cmp 9223372036854775807L;
if v6 == 0 goto label1;
v7 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter$lambda_new_0__1190: io.vertx.core.Handler bootstrap$(io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter)>(v0);
v8 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: long setTimer(long,io.vertx.core.Handler)>(v4, v7);
v9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v8);
goto label2;
label1:
v9 = null;
label2:
v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: java.lang.Long timerId> = v9;
return;
}
void timeout()
{
io.vertx.core.shareddata.impl.LocalAsyncLocks v1;
io.vertx.core.Promise v5;
java.util.function.BiFunction v4;
io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter v0;
java.lang.String v3;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter;
v1 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: io.vertx.core.shareddata.impl.LocalAsyncLocks this$0>;
v2 = v1.<io.vertx.core.shareddata.impl.LocalAsyncLocks: java.util.concurrent.ConcurrentMap waitersMap>;
v3 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: java.lang.String lockName>;
v4 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter$lambda_timeout_1__1191: java.util.function.BiFunction bootstrap$(io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter)>(v0);
interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v3, v4);
v5 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: io.vertx.core.Promise promise>;
interfaceinvoke v5.<io.vertx.core.Promise: void fail(java.lang.String)>("Timed out waiting to get lock");
return;
}
void acquireLock()
{
io.vertx.core.impl.VertxInternal v3;
io.vertx.core.shareddata.impl.LocalAsyncLocks v11, v9;
io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock v8;
io.vertx.core.Promise v7;
io.vertx.core.impl.ContextInternal v2;
long v5;
java.lang.Long v1, v4;
io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter v0;
java.lang.String v10, v12;
boolean v6;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter;
v1 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: java.lang.Long timerId>;
if v1 == null goto label1;
v2 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: io.vertx.core.impl.ContextInternal context>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>();
v4 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: java.lang.Long timerId>;
v5 = virtualinvoke v4.<java.lang.Long: long longValue()>();
v6 = interfaceinvoke v3.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>(v5);
if v6 == 0 goto label2;
label1:
v7 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: io.vertx.core.Promise promise>;
v8 = new io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock;
v9 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: io.vertx.core.shareddata.impl.LocalAsyncLocks this$0>;
v10 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: java.lang.String lockName>;
specialinvoke v8.<io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock: void <init>(io.vertx.core.shareddata.impl.LocalAsyncLocks,java.lang.String)>(v9, v10);
interfaceinvoke v7.<io.vertx.core.Promise: void complete(java.lang.Object)>(v8);
goto label3;
label2:
v11 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: io.vertx.core.shareddata.impl.LocalAsyncLocks this$0>;
v12 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: java.lang.String lockName>;
specialinvoke v11.<io.vertx.core.shareddata.impl.LocalAsyncLocks: void nextWaiter(java.lang.String)>(v12);
label3:
return;
}
}