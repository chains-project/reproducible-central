public class io.vertx.core.shareddata.impl.LocalAsyncMapImpl extends java.lang.Object implements io.vertx.core.shareddata.AsyncMap
{
private final io.vertx.core.impl.VertxInternal vertx;
private final java.util.concurrent.ConcurrentMap map;
public void <init>(io.vertx.core.impl.VertxInternal)
{
java.util.concurrent.ConcurrentHashMap v2;
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: io.vertx.core.impl.VertxInternal;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx> = v1;
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map> = v2;
return;
}
public io.vertx.core.Future get(java.lang.Object)
{
io.vertx.core.impl.VertxInternal v2;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v8, v9;
java.util.concurrent.ConcurrentMap v4;
java.lang.Object v1, v5, v7;
boolean v6;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v4 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v5 == null goto label1;
v6 = virtualinvoke v5.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: boolean hasNotExpired()>();
if v6 == 0 goto label1;
v7 = v5.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.Object value>;
v8 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v7);
return v8;
label1:
v9 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture()>();
return v9;
}
public io.vertx.core.Future put(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v6;
io.vertx.core.impl.VertxInternal v3, v9;
io.vertx.core.impl.ContextInternal v4;
long v10;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v11;
java.util.concurrent.ConcurrentMap v5;
java.lang.Object v1, v2, v7;
boolean v8;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v4 = interfaceinvoke v3.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v5 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v6 = new io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
specialinvoke v6.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: void <init>(java.lang.Object)>(v2);
v7 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v6);
if v7 == null goto label1;
v8 = virtualinvoke v7.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: boolean expires()>();
if v8 == 0 goto label1;
v9 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v10 = v7.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long timerId>;
interfaceinvoke v9.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>(v10);
label1:
v11 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture()>();
return v11;
}
public io.vertx.core.Future putIfAbsent(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v6;
io.vertx.core.impl.VertxInternal v3;
io.vertx.core.impl.ContextInternal v4;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v9;
java.util.concurrent.ConcurrentMap v5;
java.lang.Object v1, v2, v7, v8;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v4 = interfaceinvoke v3.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v5 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v6 = new io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
specialinvoke v6.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: void <init>(java.lang.Object)>(v2);
v7 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v6);
if v7 != null goto label1;
v8 = null;
goto label2;
label1:
v8 = v7.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.Object value>;
label2:
v9 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v8);
return v9;
}
public io.vertx.core.Future put(java.lang.Object, java.lang.Object, long)
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v11;
io.vertx.core.impl.ContextInternal v5;
long v15, v3, v6, v9;
java.util.concurrent.ConcurrentMap v10;
boolean v13;
io.vertx.core.impl.VertxInternal v14, v4, v7;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v16;
java.lang.Object v1, v12, v2;
io.vertx.core.Handler v8;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v6 = staticinvoke <java.lang.System: long nanoTime()>();
v7 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v8 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$lambda_put_0__1200: io.vertx.core.Handler bootstrap$(io.vertx.core.shareddata.impl.LocalAsyncMapImpl,java.lang.Object)>(v0, v1);
v9 = interfaceinvoke v7.<io.vertx.core.impl.VertxInternal: long setTimer(long,io.vertx.core.Handler)>(v3, v8);
v10 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v11 = new io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
specialinvoke v11.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: void <init>(java.lang.Object,long,long,long)>(v2, v9, v3, v6);
v12 = interfaceinvoke v10.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v11);
if v12 == null goto label1;
v13 = virtualinvoke v12.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: boolean expires()>();
if v13 == 0 goto label1;
v14 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v15 = v12.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long timerId>;
interfaceinvoke v14.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>(v15);
label1:
v16 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture()>();
return v16;
}
private void removeIfExpired(java.lang.Object)
{
java.util.function.BiFunction v3;
java.lang.Object v1;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v3 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$lambda_removeIfExpired_1__1201: java.util.function.BiFunction bootstrap$()>();
interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(v1, v3);
return;
}
public io.vertx.core.Future putIfAbsent(java.lang.Object, java.lang.Object, long)
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v11;
io.vertx.core.impl.ContextInternal v5;
long v3, v6, v9;
java.util.concurrent.ConcurrentMap v10;
io.vertx.core.impl.VertxInternal v13, v4, v7;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v15, v16;
java.lang.Object v1, v12, v14, v2;
io.vertx.core.Handler v8;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v6 = staticinvoke <java.lang.System: long nanoTime()>();
v7 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v8 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$lambda_putIfAbsent_2__1202: io.vertx.core.Handler bootstrap$(io.vertx.core.shareddata.impl.LocalAsyncMapImpl,java.lang.Object)>(v0, v1);
v9 = interfaceinvoke v7.<io.vertx.core.impl.VertxInternal: long setTimer(long,io.vertx.core.Handler)>(v3, v8);
v10 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v11 = new io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
specialinvoke v11.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: void <init>(java.lang.Object,long,long,long)>(v2, v9, v3, v6);
v12 = interfaceinvoke v10.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v11);
if v12 == null goto label1;
v13 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
interfaceinvoke v13.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>(v9);
v14 = v12.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.Object value>;
v15 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v14);
return v15;
label1:
v16 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture()>();
return v16;
}
public io.vertx.core.Future removeIfPresent(java.lang.Object, java.lang.Object)
{
io.vertx.core.impl.VertxInternal v3;
java.util.function.BiFunction v7;
io.vertx.core.impl.ContextInternal v4;
java.util.concurrent.atomic.AtomicBoolean v5;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v10;
java.util.concurrent.ConcurrentMap v6;
java.lang.Boolean v9;
java.lang.Object v1, v2;
boolean v8;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v4 = interfaceinvoke v3.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v5 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v5.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v6 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v7 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$lambda_removeIfPresent_3__1203: java.util.function.BiFunction bootstrap$(io.vertx.core.shareddata.impl.LocalAsyncMapImpl,java.lang.Object,java.util.concurrent.atomic.AtomicBoolean)>(v0, v2, v5);
interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(v1, v7);
v8 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
v9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v8);
v10 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v9);
return v10;
}
public io.vertx.core.Future replace(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v6;
io.vertx.core.impl.VertxInternal v3, v9;
io.vertx.core.impl.ContextInternal v4;
long v10;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v12, v13;
java.util.concurrent.ConcurrentMap v5;
java.lang.Object v1, v11, v2, v7;
boolean v8;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v4 = interfaceinvoke v3.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v5 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v6 = new io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
specialinvoke v6.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: void <init>(java.lang.Object)>(v2);
v7 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(v1, v6);
if v7 == null goto label2;
v8 = virtualinvoke v7.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: boolean expires()>();
if v8 == 0 goto label1;
v9 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v10 = v7.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long timerId>;
interfaceinvoke v9.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>(v10);
label1:
v11 = v7.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.Object value>;
v12 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v11);
return v12;
label2:
v13 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture()>();
return v13;
}
public io.vertx.core.Future replace(java.lang.Object, java.lang.Object, long)
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v11;
io.vertx.core.impl.ContextInternal v5;
long v15, v3, v6, v9;
java.util.concurrent.ConcurrentMap v10;
boolean v13;
io.vertx.core.impl.VertxInternal v14, v4, v7;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v17, v18;
java.lang.Object v1, v12, v16, v2;
io.vertx.core.Handler v8;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v6 = staticinvoke <java.lang.System: long nanoTime()>();
v7 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v8 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$lambda_replace_4__1204: io.vertx.core.Handler bootstrap$(io.vertx.core.shareddata.impl.LocalAsyncMapImpl,java.lang.Object)>(v0, v1);
v9 = interfaceinvoke v7.<io.vertx.core.impl.VertxInternal: long setTimer(long,io.vertx.core.Handler)>(v3, v8);
v10 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v11 = new io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
specialinvoke v11.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: void <init>(java.lang.Object,long,long,long)>(v2, v9, v3, v6);
v12 = interfaceinvoke v10.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(v1, v11);
if v12 == null goto label2;
v13 = virtualinvoke v12.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: boolean expires()>();
if v13 == 0 goto label1;
v14 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v15 = v12.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long timerId>;
interfaceinvoke v14.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>(v15);
label1:
v16 = v12.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.Object value>;
v17 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v16);
return v17;
label2:
v18 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture()>();
return v18;
}
public io.vertx.core.Future replaceIfPresent(java.lang.Object, java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v6;
io.vertx.core.impl.VertxInternal v4;
java.util.function.BiFunction v8;
io.vertx.core.impl.ContextInternal v5;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v12;
java.util.concurrent.ConcurrentMap v7;
java.lang.Boolean v11;
java.lang.Object v1, v2, v3, v9;
boolean v10;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v6 = new io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
specialinvoke v6.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: void <init>(java.lang.Object)>(v3);
v7 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v8 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$lambda_replaceIfPresent_5__1205: java.util.function.BiFunction bootstrap$(io.vertx.core.shareddata.impl.LocalAsyncMapImpl,java.lang.Object,io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder)>(v0, v2, v6);
v9 = interfaceinvoke v7.<java.util.concurrent.ConcurrentMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(v1, v8);
if v6 != v9 goto label1;
v10 = 1;
goto label2;
label1:
v10 = 0;
label2:
v11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v10);
v12 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v11);
return v12;
}
public io.vertx.core.Future replaceIfPresent(java.lang.Object, java.lang.Object, java.lang.Object, long)
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v11;
java.util.function.BiFunction v13;
io.vertx.core.impl.ContextInternal v6;
long v10, v4, v7;
java.util.concurrent.ConcurrentMap v12;
java.lang.Boolean v15, v18;
io.vertx.core.impl.VertxInternal v17, v5, v8;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v16, v19;
java.lang.Object v1, v14, v2, v3;
io.vertx.core.Handler v9;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: long;
v5 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v6 = interfaceinvoke v5.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v7 = staticinvoke <java.lang.System: long nanoTime()>();
v8 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v9 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$lambda_replaceIfPresent_6__1206: io.vertx.core.Handler bootstrap$(io.vertx.core.shareddata.impl.LocalAsyncMapImpl,java.lang.Object)>(v0, v1);
v10 = interfaceinvoke v8.<io.vertx.core.impl.VertxInternal: long setTimer(long,io.vertx.core.Handler)>(v4, v9);
v11 = new io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
specialinvoke v11.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: void <init>(java.lang.Object,long,long,long)>(v3, v10, v4, v7);
v12 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v13 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$lambda_replaceIfPresent_7__1207: java.util.function.BiFunction bootstrap$(io.vertx.core.shareddata.impl.LocalAsyncMapImpl,java.lang.Object,io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder)>(v0, v2, v11);
v14 = interfaceinvoke v12.<java.util.concurrent.ConcurrentMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(v1, v13);
if v11 != v14 goto label1;
v15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
v16 = interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v15);
return v16;
label1:
v17 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
interfaceinvoke v17.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>(v10);
v18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
v19 = interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v18);
return v19;
}
public io.vertx.core.Future clear()
{
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v4;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v3 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: void clear()>();
v4 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture()>();
return v4;
}
public io.vertx.core.Future size()
{
io.vertx.core.impl.VertxInternal v1;
int v4;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v6;
java.lang.Integer v5;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v3 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: int size()>();
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
v6 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v5);
return v6;
}
public io.vertx.core.Future keys()
{
java.util.HashSet v3;
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.impl.ContextInternal v2;
java.util.Set v5;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v6;
java.util.concurrent.ConcurrentMap v4;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v3 = new java.util.HashSet;
v4 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();
specialinvoke v3.<java.util.HashSet: void <init>(java.util.Collection)>(v5);
v6 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v3);
return v6;
}
public io.vertx.core.Future values()
{
io.vertx.core.impl.VertxInternal v1;
java.util.function.Predicate v6;
java.util.Collection v4;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v12;
java.util.function.Function v8;
java.util.concurrent.ConcurrentMap v3;
java.util.stream.Stream v5, v7, v9;
java.lang.Object v11;
java.util.stream.Collector v10;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v3 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v5 = interfaceinvoke v4.<java.util.Collection: java.util.stream.Stream stream()>();
v6 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$hasNotExpired__1208: java.util.function.Predicate bootstrap$()>();
v7 = interfaceinvoke v5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v6);
v8 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$lambda_values_8__1209: java.util.function.Function bootstrap$()>();
v9 = interfaceinvoke v7.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v8);
v10 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v11 = interfaceinvoke v9.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v10);
v12 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v11);
return v12;
}
public io.vertx.core.Future entries()
{
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.impl.ContextInternal v2;
java.util.HashMap v3;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v8;
java.util.concurrent.ConcurrentMap v4, v6;
int v5;
java.util.function.BiConsumer v7;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v3 = new java.util.HashMap;
v4 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: int size()>();
specialinvoke v3.<java.util.HashMap: void <init>(int)>(v5);
v6 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v7 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$lambda_entries_9__1210: java.util.function.BiConsumer bootstrap$(java.util.Map)>(v3);
interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>(v7);
v8 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v3);
return v8;
}
public io.vertx.core.Future remove(java.lang.Object)
{
io.vertx.core.impl.VertxInternal v2, v7;
io.vertx.core.impl.ContextInternal v3;
long v8;
io.vertx.core.shareddata.impl.LocalAsyncMapImpl v0;
io.vertx.core.Future v10, v11;
java.util.concurrent.ConcurrentMap v4;
java.lang.Object v1, v5, v9;
boolean v6;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v4 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: java.util.concurrent.ConcurrentMap map>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v1);
if v5 == null goto label2;
v6 = virtualinvoke v5.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: boolean expires()>();
if v6 == 0 goto label1;
v7 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl: io.vertx.core.impl.VertxInternal vertx>;
v8 = v5.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long timerId>;
interfaceinvoke v7.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>(v8);
label1:
v9 = v5.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.Object value>;
v10 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v9);
return v10;
label2:
v11 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture()>();
return v11;
}
}