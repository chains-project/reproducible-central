class io.vertx.core.shareddata.impl.LocalMapImpl$1 extends java.lang.Object implements java.util.Map$Entry
{
final java.util.Map$Entry val$entry;
final io.vertx.core.shareddata.impl.LocalMapImpl this$0;
void <init>(io.vertx.core.shareddata.impl.LocalMapImpl, java.util.Map$Entry)
{
io.vertx.core.shareddata.impl.LocalMapImpl v1;
java.util.Map$Entry v2;
io.vertx.core.shareddata.impl.LocalMapImpl$1 v0;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl$1;
v1 := @parameter0: io.vertx.core.shareddata.impl.LocalMapImpl;
v2 := @parameter1: java.util.Map$Entry;
v0.<io.vertx.core.shareddata.impl.LocalMapImpl$1: io.vertx.core.shareddata.impl.LocalMapImpl this$0> = v1;
v0.<io.vertx.core.shareddata.impl.LocalMapImpl$1: java.util.Map$Entry val$entry> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.Object getKey()
{
java.util.Map$Entry v1;
io.vertx.core.shareddata.impl.LocalMapImpl$1 v0;
java.lang.Object v2, v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl$1;
v1 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl$1: java.util.Map$Entry val$entry>;
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
v3 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>(v2);
return v3;
}
public java.lang.Object getValue()
{
java.util.Map$Entry v1;
io.vertx.core.shareddata.impl.LocalMapImpl$1 v0;
java.lang.Object v2, v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl$1;
v1 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl$1: java.util.Map$Entry val$entry>;
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
v3 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>(v2);
return v3;
}
public java.lang.Object setValue(java.lang.Object)
{
java.lang.UnsupportedOperationException v2;
java.lang.Object v1;
io.vertx.core.shareddata.impl.LocalMapImpl$1 v0;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl$1;
v1 := @parameter0: java.lang.Object;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
}