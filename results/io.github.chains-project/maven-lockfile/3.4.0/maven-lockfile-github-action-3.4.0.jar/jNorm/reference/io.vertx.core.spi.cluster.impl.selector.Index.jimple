class io.vertx.core.spi.cluster.impl.selector.Index extends java.lang.Object implements java.util.function.IntUnaryOperator
{
private final int max;
private final java.util.concurrent.atomic.AtomicInteger idx;
void <init>(int)
{
int v1;
io.vertx.core.spi.cluster.impl.selector.Index v0;
java.util.concurrent.atomic.AtomicInteger v2;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.Index;
v1 := @parameter0: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
v0.<io.vertx.core.spi.cluster.impl.selector.Index: java.util.concurrent.atomic.AtomicInteger idx> = v2;
v0.<io.vertx.core.spi.cluster.impl.selector.Index: int max> = v1;
return;
}
int nextVal()
{
int v2;
io.vertx.core.spi.cluster.impl.selector.Index v0;
java.util.concurrent.atomic.AtomicInteger v1;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.Index;
v1 = v0.<io.vertx.core.spi.cluster.impl.selector.Index: java.util.concurrent.atomic.AtomicInteger idx>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndUpdate(java.util.function.IntUnaryOperator)>(v0);
return v2;
}
public int applyAsInt(int)
{
io.vertx.core.spi.cluster.impl.selector.Index v0;
int v1, v2, v3, v4;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.Index;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.spi.cluster.impl.selector.Index: int max>;
v3 = v2 - 1;
if v1 != v3 goto label1;
v4 = 0;
goto label2;
label1:
v4 = v1 + 1;
label2:
return v4;
}
}