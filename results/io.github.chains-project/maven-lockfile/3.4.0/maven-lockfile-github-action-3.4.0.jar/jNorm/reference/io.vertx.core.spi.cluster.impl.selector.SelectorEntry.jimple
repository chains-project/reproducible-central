class io.vertx.core.spi.cluster.impl.selector.SelectorEntry extends java.lang.Object
{
final io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector selector;
final io.vertx.core.Promise selectorPromise;
final int counter;
void <init>()
{
io.vertx.core.spi.cluster.impl.selector.SelectorEntry v0;
io.vertx.core.Promise v1;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.SelectorEntry;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector selector> = null;
v1 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.Promise selectorPromise> = v1;
v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: int counter> = 0;
return;
}
private void <init>(io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector, io.vertx.core.Promise, int)
{
io.vertx.core.Promise v2;
int v3;
io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector v1;
io.vertx.core.spi.cluster.impl.selector.SelectorEntry v0;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.SelectorEntry;
v1 := @parameter0: io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector;
v2 := @parameter1: io.vertx.core.Promise;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector selector> = v1;
v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.Promise selectorPromise> = v2;
v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: int counter> = v3;
return;
}
io.vertx.core.spi.cluster.impl.selector.SelectorEntry increment()
{
io.vertx.core.Promise v2;
int v3, v4;
io.vertx.core.spi.cluster.impl.selector.SelectorEntry v0, v1;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.SelectorEntry;
v1 = new io.vertx.core.spi.cluster.impl.selector.SelectorEntry;
v2 = v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.Promise selectorPromise>;
v3 = v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: int counter>;
v4 = v3 + 1;
specialinvoke v1.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: void <init>(io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector,io.vertx.core.Promise,int)>(null, v2, v4);
return v1;
}
io.vertx.core.spi.cluster.impl.selector.SelectorEntry data(java.util.List)
{
io.vertx.core.spi.cluster.impl.selector.SimpleRoundRobinSelector v5;
io.vertx.core.Promise v11;
java.util.Set v7;
java.util.ArrayList v6;
java.util.List v1;
io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector v9;
java.util.Map v3;
int v12;
io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector v8;
io.vertx.core.spi.cluster.impl.selector.SelectorEntry v0, v10;
boolean v2, v4;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.SelectorEntry;
v1 := @parameter0: java.util.List;
if v1 == null goto label1;
v2 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
if v2 == 0 goto label2;
label1:
return null;
label2:
v3 = specialinvoke v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: java.util.Map computeWeights(java.util.List)>(v1);
v4 = specialinvoke v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: boolean isEvenlyDistributed(java.util.Map)>(v3);
if v4 == 0 goto label3;
v5 = new io.vertx.core.spi.cluster.impl.selector.SimpleRoundRobinSelector;
v6 = new java.util.ArrayList;
v7 = interfaceinvoke v3.<java.util.Map: java.util.Set keySet()>();
specialinvoke v6.<java.util.ArrayList: void <init>(java.util.Collection)>(v7);
specialinvoke v5.<io.vertx.core.spi.cluster.impl.selector.SimpleRoundRobinSelector: void <init>(java.util.List)>(v6);
v8 = v5;
goto label4;
label3:
v9 = new io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector;
specialinvoke v9.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: void <init>(java.util.Map)>(v3);
v8 = v9;
label4:
v10 = new io.vertx.core.spi.cluster.impl.selector.SelectorEntry;
v11 = v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.Promise selectorPromise>;
v12 = v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: int counter>;
specialinvoke v10.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: void <init>(io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector,io.vertx.core.Promise,int)>(v8, v11, v12);
return v10;
}
private java.util.Map computeWeights(java.util.List)
{
java.util.List v1;
java.util.Iterator v3;
java.util.function.BiFunction v6;
java.lang.Object v5;
java.util.HashMap v2;
io.vertx.core.spi.cluster.impl.selector.SelectorEntry v0;
boolean v4;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.SelectorEntry;
v1 := @parameter0: java.util.List;
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v3 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = staticinvoke <io.vertx.core.spi.cluster.impl.selector.SelectorEntry$lambda_computeWeights_0__1185: java.util.function.BiFunction bootstrap$()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v5, v6);
goto label1;
label2:
return v2;
}
private boolean isEvenlyDistributed(java.util.Map)
{
java.util.Iterator v5;
java.util.Collection v4;
io.vertx.core.spi.cluster.impl.selector.Weight v3;
java.util.Map v1;
int v2, v8, v9;
java.lang.Object v7;
io.vertx.core.spi.cluster.impl.selector.SelectorEntry v0;
boolean v6;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.SelectorEntry;
v1 := @parameter0: java.util.Map;
v2 = interfaceinvoke v1.<java.util.Map: int size()>();
if v2 <= 1 goto label3;
v3 = null;
v4 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v5 = interfaceinvoke v4.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
if v3 == null goto label2;
v8 = virtualinvoke v3.<io.vertx.core.spi.cluster.impl.selector.Weight: int value()>();
v9 = virtualinvoke v7.<io.vertx.core.spi.cluster.impl.selector.Weight: int value()>();
if v8 == v9 goto label2;
return 0;
label2:
v3 = v7;
goto label1;
label3:
return 1;
}
boolean shouldInitialize()
{
int v1;
io.vertx.core.spi.cluster.impl.selector.SelectorEntry v0;
boolean v2;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.SelectorEntry;
v1 = v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: int counter>;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
boolean isNotReady()
{
io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector v1;
io.vertx.core.spi.cluster.impl.selector.SelectorEntry v0;
boolean v2;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.SelectorEntry;
v1 = v0.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector selector>;
if v1 != null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
}