class io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector extends java.lang.Object implements io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector
{
private final java.util.List uniqueIds;
private final java.util.TreeMap offsets;
private final io.vertx.core.spi.cluster.impl.selector.Index index;
void <init>(java.util.Map)
{
java.lang.Integer v30, v32;
io.vertx.core.spi.cluster.impl.selector.Index v34;
io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector v0;
java.util.Map v1;
java.util.Set v6;
java.util.List v33;
java.util.ArrayList v3, v5;
int v10, v14, v15, v16, v17, v18, v21, v22, v25, v26, v27, v28, v31, v4, v8, v9;
java.util.TreeMap v2, v23, v29;
java.lang.Object v11, v12, v13, v19, v20, v24;
java.util.Comparator v7;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector;
v1 := @parameter0: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.TreeMap;
specialinvoke v2.<java.util.TreeMap: void <init>()>();
v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: java.util.TreeMap offsets> = v2;
v3 = new java.util.ArrayList;
v4 = interfaceinvoke v1.<java.util.Map: int size()>();
specialinvoke v3.<java.util.ArrayList: void <init>(int)>(v4);
v5 = new java.util.ArrayList;
v6 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
specialinvoke v5.<java.util.ArrayList: void <init>(java.util.Collection)>(v6);
v7 = staticinvoke <java.util.Map$Entry: java.util.Comparator comparingByValue()>();
interfaceinvoke v5.<java.util.List: void sort(java.util.Comparator)>(v7);
v8 = 0;
v9 = 0;
label1:
v10 = interfaceinvoke v5.<java.util.List: int size()>();
if v9 >= v10 goto label7;
v11 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(v9);
v12 = interfaceinvoke v11.<java.util.Map$Entry: java.lang.Object getKey()>();
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v12);
v13 = interfaceinvoke v11.<java.util.Map$Entry: java.lang.Object getValue()>();
v14 = virtualinvoke v13.<io.vertx.core.spi.cluster.impl.selector.Weight: int value()>();
v8 = v8 + v14;
v15 = interfaceinvoke v5.<java.util.List: int size()>();
v16 = v15 - 1;
if v9 >= v16 goto label6;
if v9 != 0 goto label2;
v17 = 0;
goto label3;
label2:
v18 = v9 - 1;
v19 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(v18);
v20 = interfaceinvoke v19.<java.util.Map$Entry: java.lang.Object getValue()>();
v17 = virtualinvoke v20.<io.vertx.core.spi.cluster.impl.selector.Weight: int value()>();
label3:
v21 = v14 - v17;
if v9 != 0 goto label4;
v22 = 0;
goto label5;
label4:
v23 = v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: java.util.TreeMap offsets>;
v24 = virtualinvoke v23.<java.util.TreeMap: java.lang.Object lastKey()>();
v22 = virtualinvoke v24.<java.lang.Integer: int intValue()>();
label5:
v25 = interfaceinvoke v1.<java.util.Map: int size()>();
v26 = v25 - v9;
v27 = v26 * v21;
v28 = v22 + v27;
v29 = v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: java.util.TreeMap offsets>;
v30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v28);
v31 = v9 + 1;
v32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v31);
virtualinvoke v29.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v30, v32);
label6:
v9 = v9 + 1;
goto label1;
label7:
v33 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v3);
v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: java.util.List uniqueIds> = v33;
v34 = new io.vertx.core.spi.cluster.impl.selector.Index;
specialinvoke v34.<io.vertx.core.spi.cluster.impl.selector.Index: void <init>(int)>(v8);
v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: io.vertx.core.spi.cluster.impl.selector.Index index> = v34;
return;
}
public java.lang.String selectForSend()
{
java.lang.Integer v4;
io.vertx.core.spi.cluster.impl.selector.Index v1;
io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector v0;
int v12, v14, v15, v2, v20, v21, v22, v23, v8, v9;
java.util.Map$Entry v5;
java.util.List v13, v16, v18, v19, v6, v7;
java.util.TreeMap v3;
java.lang.Object v10, v11, v17, v24;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector;
v1 = v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: io.vertx.core.spi.cluster.impl.selector.Index index>;
v2 = virtualinvoke v1.<io.vertx.core.spi.cluster.impl.selector.Index: int nextVal()>();
v3 = v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: java.util.TreeMap offsets>;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v5 = virtualinvoke v3.<java.util.TreeMap: java.util.Map$Entry floorEntry(java.lang.Object)>(v4);
if v5 != null goto label1;
v6 = v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: java.util.List uniqueIds>;
v7 = v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: java.util.List uniqueIds>;
v8 = interfaceinvoke v7.<java.util.List: int size()>();
v9 = v2 % v8;
v10 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(v9);
return v10;
label1:
v11 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v12 = virtualinvoke v11.<java.lang.Integer: int intValue()>();
v13 = v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: java.util.List uniqueIds>;
v14 = interfaceinvoke v13.<java.util.List: int size()>();
v15 = v14 - 1;
if v12 != v15 goto label2;
v16 = v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: java.util.List uniqueIds>;
v17 = interfaceinvoke v16.<java.util.List: java.lang.Object get(int)>(v12);
return v17;
label2:
v18 = v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: java.util.List uniqueIds>;
v19 = v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: java.util.List uniqueIds>;
v20 = interfaceinvoke v19.<java.util.List: int size()>();
v21 = v20 - v12;
v22 = v2 % v21;
v23 = v12 + v22;
v24 = interfaceinvoke v18.<java.util.List: java.lang.Object get(int)>(v23);
return v24;
}
public java.lang.Iterable selectForPublish()
{
java.util.List v1;
io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector v0;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector;
v1 = v0.<io.vertx.core.spi.cluster.impl.selector.WeightedRoundRobinSelector: java.util.List uniqueIds>;
return v1;
}
}