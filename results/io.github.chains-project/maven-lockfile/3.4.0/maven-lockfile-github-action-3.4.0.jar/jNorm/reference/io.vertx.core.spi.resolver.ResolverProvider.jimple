public interface  io.vertx.core.spi.resolver.ResolverProvider extends java.lang.Object
{
public static final java.lang.String DISABLE_DNS_RESOLVER_PROP_NAME;
public static io.vertx.core.spi.resolver.ResolverProvider factory(io.vertx.core.Vertx, io.vertx.core.dns.AddressResolverOptions)
{
io.vertx.core.impl.logging.Logger v6;
java.lang.Throwable v4;
io.vertx.core.impl.resolver.DnsResolverProvider v3;
io.vertx.core.impl.resolver.DefaultResolverProvider v7;
io.vertx.core.Vertx v0;
io.vertx.core.dns.AddressResolverOptions v1;
boolean v2, v5;
v0 := @parameter0: io.vertx.core.Vertx;
v1 := @parameter1: io.vertx.core.dns.AddressResolverOptions;
label1:
v2 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableDnsResolver");
if v2 != 0 goto label5;
v3 = new io.vertx.core.impl.resolver.DnsResolverProvider;
specialinvoke v3.<io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)>(v0, v1);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = v4 instanceof io.vertx.core.VertxException;
if v5 == 0 goto label4;
throw v4;
label4:
v6 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/spi/resolver/ResolverProvider;");
interfaceinvoke v6.<io.vertx.core.impl.logging.Logger: void info(java.lang.Object)>("Using the default address resolver as the dns resolver could not be loaded");
label5:
v7 = new io.vertx.core.impl.resolver.DefaultResolverProvider;
specialinvoke v7.<io.vertx.core.impl.resolver.DefaultResolverProvider: void <init>()>();
return v7;
catch java.lang.Throwable from label1 to label2 with label3;
}
public abstract io.netty.resolver.AddressResolverGroup resolver(io.vertx.core.dns.AddressResolverOptions);
public abstract void close(io.vertx.core.Handler);
}