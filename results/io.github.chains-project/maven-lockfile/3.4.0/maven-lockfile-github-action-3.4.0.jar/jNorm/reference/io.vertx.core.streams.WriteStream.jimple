public interface  io.vertx.core.streams.WriteStream extends java.lang.Object implements io.vertx.core.streams.StreamBase
{
public abstract io.vertx.core.streams.WriteStream exceptionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.Future write(java.lang.Object);
public abstract void write(java.lang.Object, io.vertx.core.Handler);
public io.vertx.core.Future end()
{
io.vertx.core.Future v2;
io.vertx.core.streams.WriteStream v0;
io.vertx.core.Promise v1;
v0 := @this: io.vertx.core.streams.WriteStream;
v1 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.core.streams.WriteStream: void end(io.vertx.core.Handler)>(v1);
v2 = interfaceinvoke v1.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v2;
}
public abstract void end(io.vertx.core.Handler);
public io.vertx.core.Future end(java.lang.Object)
{
io.vertx.core.streams.WriteStream v0;
io.vertx.core.Promise v2;
java.lang.Object v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.streams.WriteStream;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.core.streams.WriteStream: void end(java.lang.Object,io.vertx.core.Handler)>(v1, v2);
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
public void end(java.lang.Object, io.vertx.core.Handler)
{
io.vertx.core.streams.WriteStream v0;
java.lang.Object v1;
io.vertx.core.Handler v2, v3;
v0 := @this: io.vertx.core.streams.WriteStream;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.vertx.core.Handler;
if v2 == null goto label1;
v3 = staticinvoke <io.vertx.core.streams.WriteStream$lambda_end_0__1243: io.vertx.core.Handler bootstrap$(io.vertx.core.streams.WriteStream,io.vertx.core.Handler)>(v0, v2);
interfaceinvoke v0.<io.vertx.core.streams.WriteStream: void write(java.lang.Object,io.vertx.core.Handler)>(v1, v3);
goto label2;
label1:
interfaceinvoke v0.<io.vertx.core.streams.WriteStream: io.vertx.core.Future end(java.lang.Object)>(v1);
label2:
return;
}
public abstract io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int);
public abstract boolean writeQueueFull();
public abstract io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler);
}