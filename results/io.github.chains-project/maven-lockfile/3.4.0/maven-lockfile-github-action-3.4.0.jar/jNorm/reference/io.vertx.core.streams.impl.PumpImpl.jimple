public class io.vertx.core.streams.impl.PumpImpl extends java.lang.Object implements io.vertx.core.streams.Pump
{
private final io.vertx.core.streams.ReadStream readStream;
private final io.vertx.core.streams.WriteStream writeStream;
private final io.vertx.core.Handler dataHandler;
private final io.vertx.core.Handler drainHandler;
private int pumped;
public void <init>(io.vertx.core.streams.ReadStream, io.vertx.core.streams.WriteStream, int)
{
io.vertx.core.streams.impl.PumpImpl v0;
io.vertx.core.streams.WriteStream v2, v4;
int v3;
io.vertx.core.streams.ReadStream v1;
v0 := @this: io.vertx.core.streams.impl.PumpImpl;
v1 := @parameter0: io.vertx.core.streams.ReadStream;
v2 := @parameter1: io.vertx.core.streams.WriteStream;
v3 := @parameter2: int;
specialinvoke v0.<io.vertx.core.streams.impl.PumpImpl: void <init>(io.vertx.core.streams.ReadStream,io.vertx.core.streams.WriteStream)>(v1, v2);
v4 = v0.<io.vertx.core.streams.impl.PumpImpl: io.vertx.core.streams.WriteStream writeStream>;
interfaceinvoke v4.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int)>(v3);
return;
}
public void <init>(io.vertx.core.streams.ReadStream, io.vertx.core.streams.WriteStream)
{
io.vertx.core.streams.impl.PumpImpl v0;
io.vertx.core.streams.WriteStream v2;
io.vertx.core.streams.ReadStream v1;
io.vertx.core.Handler v3, v4;
v0 := @this: io.vertx.core.streams.impl.PumpImpl;
v1 := @parameter0: io.vertx.core.streams.ReadStream;
v2 := @parameter1: io.vertx.core.streams.WriteStream;
specialinvoke v0.<java.lang.Object: void <init>()>();
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v0.<io.vertx.core.streams.impl.PumpImpl: io.vertx.core.streams.ReadStream readStream> = v1;
v0.<io.vertx.core.streams.impl.PumpImpl: io.vertx.core.streams.WriteStream writeStream> = v2;
v3 = staticinvoke <io.vertx.core.streams.impl.PumpImpl$lambda_new_0__1244: io.vertx.core.Handler bootstrap$(io.vertx.core.streams.impl.PumpImpl)>(v0);
v0.<io.vertx.core.streams.impl.PumpImpl: io.vertx.core.Handler drainHandler> = v3;
v4 = staticinvoke <io.vertx.core.streams.impl.PumpImpl$lambda_new_1__1245: io.vertx.core.Handler bootstrap$(io.vertx.core.streams.impl.PumpImpl)>(v0);
v0.<io.vertx.core.streams.impl.PumpImpl: io.vertx.core.Handler dataHandler> = v4;
return;
}
public io.vertx.core.streams.impl.PumpImpl setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.streams.impl.PumpImpl v0;
io.vertx.core.streams.WriteStream v2;
v0 := @this: io.vertx.core.streams.impl.PumpImpl;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.streams.impl.PumpImpl: io.vertx.core.streams.WriteStream writeStream>;
interfaceinvoke v2.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int)>(v1);
return v0;
}
public io.vertx.core.streams.impl.PumpImpl start()
{
io.vertx.core.streams.ReadStream v1;
io.vertx.core.streams.impl.PumpImpl v0;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.streams.impl.PumpImpl;
v1 = v0.<io.vertx.core.streams.impl.PumpImpl: io.vertx.core.streams.ReadStream readStream>;
v2 = v0.<io.vertx.core.streams.impl.PumpImpl: io.vertx.core.Handler dataHandler>;
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.streams.impl.PumpImpl stop()
{
io.vertx.core.streams.ReadStream v2;
io.vertx.core.streams.impl.PumpImpl v0;
io.vertx.core.streams.WriteStream v1;
v0 := @this: io.vertx.core.streams.impl.PumpImpl;
v1 = v0.<io.vertx.core.streams.impl.PumpImpl: io.vertx.core.streams.WriteStream writeStream>;
interfaceinvoke v1.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)>(null);
v2 = v0.<io.vertx.core.streams.impl.PumpImpl: io.vertx.core.streams.ReadStream readStream>;
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)>(null);
return v0;
}
public synchronized int numberPumped()
{
int v1;
io.vertx.core.streams.impl.PumpImpl v0;
v0 := @this: io.vertx.core.streams.impl.PumpImpl;
v1 = v0.<io.vertx.core.streams.impl.PumpImpl: int pumped>;
return v1;
}
private synchronized void incPumped()
{
int v1, v2;
io.vertx.core.streams.impl.PumpImpl v0;
v0 := @this: io.vertx.core.streams.impl.PumpImpl;
v1 = v0.<io.vertx.core.streams.impl.PumpImpl: int pumped>;
v2 = v1 + 1;
v0.<io.vertx.core.streams.impl.PumpImpl: int pumped> = v2;
return;
}
}