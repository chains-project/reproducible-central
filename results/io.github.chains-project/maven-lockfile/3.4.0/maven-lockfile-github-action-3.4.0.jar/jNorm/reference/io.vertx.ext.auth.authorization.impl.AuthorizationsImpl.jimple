public class io.vertx.ext.auth.authorization.impl.AuthorizationsImpl extends java.lang.Object implements io.vertx.ext.auth.authorization.Authorizations
{
private final java.util.Map authorizations;
public void <init>()
{
java.util.concurrent.ConcurrentHashMap v1;
io.vertx.ext.auth.authorization.impl.AuthorizationsImpl v0;
v0 := @this: io.vertx.ext.auth.authorization.impl.AuthorizationsImpl;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.ext.auth.authorization.impl.AuthorizationsImpl: java.util.Map authorizations> = v1;
return;
}
public io.vertx.ext.auth.authorization.Authorizations add(java.lang.String, io.vertx.ext.auth.authorization.Authorization)
{
io.vertx.ext.auth.authorization.Authorizations v4;
io.vertx.ext.auth.authorization.Authorization v2;
java.util.Set v3;
java.lang.String v1;
io.vertx.ext.auth.authorization.impl.AuthorizationsImpl v0;
v0 := @this: io.vertx.ext.auth.authorization.impl.AuthorizationsImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.ext.auth.authorization.Authorization;
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v2);
v4 = virtualinvoke v0.<io.vertx.ext.auth.authorization.impl.AuthorizationsImpl: io.vertx.ext.auth.authorization.Authorizations add(java.lang.String,java.util.Set)>(v1, v3);
return v4;
}
public io.vertx.ext.auth.authorization.Authorizations add(java.lang.String, java.util.Set)
{
java.util.concurrent.ConcurrentHashMap$KeySetView v3;
java.util.Set v2, v4;
java.lang.String v1;
io.vertx.ext.auth.authorization.impl.AuthorizationsImpl v0;
v0 := @this: io.vertx.ext.auth.authorization.impl.AuthorizationsImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.Set;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$KeySetView newKeySet()>();
virtualinvoke v3.<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>(v2);
v4 = specialinvoke v0.<io.vertx.ext.auth.authorization.impl.AuthorizationsImpl: java.util.Set getOrCreateAuthorizations(java.lang.String)>(v1);
interfaceinvoke v4.<java.util.Set: boolean addAll(java.util.Collection)>(v3);
return v0;
}
public io.vertx.ext.auth.authorization.Authorizations clear(java.lang.String)
{
java.lang.String v1;
io.vertx.ext.auth.authorization.impl.AuthorizationsImpl v0;
java.util.Map v2;
v0 := @this: io.vertx.ext.auth.authorization.impl.AuthorizationsImpl;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.vertx.ext.auth.authorization.impl.AuthorizationsImpl: java.util.Map authorizations>;
interfaceinvoke v2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
return v0;
}
public io.vertx.ext.auth.authorization.Authorizations clear()
{
io.vertx.ext.auth.authorization.impl.AuthorizationsImpl v0;
java.util.Map v1;
v0 := @this: io.vertx.ext.auth.authorization.impl.AuthorizationsImpl;
v1 = v0.<io.vertx.ext.auth.authorization.impl.AuthorizationsImpl: java.util.Map authorizations>;
interfaceinvoke v1.<java.util.Map: void clear()>();
return v0;
}
public boolean equals(java.lang.Object)
{
java.util.Map v3, v4;
java.lang.Object v1;
io.vertx.ext.auth.authorization.impl.AuthorizationsImpl v0;
boolean v2, v5;
v0 := @this: io.vertx.ext.auth.authorization.impl.AuthorizationsImpl;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
v2 = v1 instanceof io.vertx.ext.auth.authorization.impl.AuthorizationsImpl;
if v2 != 0 goto label2;
return 0;
label2:
v3 = v0.<io.vertx.ext.auth.authorization.impl.AuthorizationsImpl: java.util.Map authorizations>;
v4 = v1.<io.vertx.ext.auth.authorization.impl.AuthorizationsImpl: java.util.Map authorizations>;
v5 = interfaceinvoke v3.<java.util.Map: boolean equals(java.lang.Object)>(v4);
return v5;
}
public java.util.Set get(java.lang.String)
{
java.util.Map v2;
java.util.Set v4;
java.lang.Object v3;
java.lang.String v1;
io.vertx.ext.auth.authorization.impl.AuthorizationsImpl v0;
v0 := @this: io.vertx.ext.auth.authorization.impl.AuthorizationsImpl;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.vertx.ext.auth.authorization.impl.AuthorizationsImpl: java.util.Map authorizations>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
v4 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
return v4;
label1:
return v3;
}
private java.util.Set getOrCreateAuthorizations(java.lang.String)
{
java.util.Map v2;
java.lang.Object v4;
java.lang.String v1;
io.vertx.ext.auth.authorization.impl.AuthorizationsImpl v0;
java.util.function.Function v3;
v0 := @this: io.vertx.ext.auth.authorization.impl.AuthorizationsImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.ext.auth.authorization.impl.AuthorizationsImpl: java.util.Map authorizations>;
v3 = staticinvoke <io.vertx.ext.auth.authorization.impl.AuthorizationsImpl$lambda_getOrCreateAuthorizations_0__885: java.util.function.Function bootstrap$()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v3);
return v4;
}
public java.util.Set getProviderIds()
{
java.util.Set v2;
io.vertx.ext.auth.authorization.impl.AuthorizationsImpl v0;
java.util.Map v1;
v0 := @this: io.vertx.ext.auth.authorization.impl.AuthorizationsImpl;
v1 = v0.<io.vertx.ext.auth.authorization.impl.AuthorizationsImpl: java.util.Map authorizations>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
return v2;
}
public int hashCode()
{
java.util.Map v1;
int v2, v3;
io.vertx.ext.auth.authorization.impl.AuthorizationsImpl v0;
v0 := @this: io.vertx.ext.auth.authorization.impl.AuthorizationsImpl;
v1 = v0.<io.vertx.ext.auth.authorization.impl.AuthorizationsImpl: java.util.Map authorizations>;
v2 = interfaceinvoke v1.<java.util.Map: int hashCode()>();
v3 = 31 + v2;
return v3;
}
}