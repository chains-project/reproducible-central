public final class io.vertx.ext.auth.impl.Codec extends java.lang.Object
{
private static final byte[] BASE16;
private static final int[] BASE16_LOOKUP;
private static final char[] BASE32;
private static final int[] BASE32_LOOKUP;
private static final java.util.Base64$Encoder BASE64URL;
private static final java.util.Base64$Decoder BASE64URL_DECODER;
private static final java.util.Base64$Encoder BASE64;
private static final java.util.Base64$Encoder BASE64_NOPADDING;
private static final java.util.Base64$Decoder BASE64_DECODER;
private static final java.util.Base64$Encoder BASE64MIME;
private static final java.util.Base64$Decoder BASE64MIME_DECODER;
private void <init>()
{
io.vertx.ext.auth.impl.Codec v0;
v0 := @this: io.vertx.ext.auth.impl.Codec;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.String base16Encode(byte[])
{
byte[] v0, v14, v3, v9;
short v15, v7;
byte v11, v16, v6;
java.nio.charset.Charset v18;
int v1, v10, v12, v13, v2, v4, v5, v8;
java.lang.String v17;
v0 := @parameter0: byte[];
v1 = lengthof v0;
v2 = v1 * 2;
v3 = newarray (byte)[v2];
v4 = 0;
label1:
v5 = lengthof v0;
if v4 >= v5 goto label2;
v6 = v0[v4];
v7 = v6 & 255;
v8 = v4 * 2;
v9 = <io.vertx.ext.auth.impl.Codec: byte[] BASE16>;
v10 = v7 >>> 4;
v11 = v9[v10];
v3[v8] = v11;
v12 = v4 * 2;
v13 = v12 + 1;
v14 = <io.vertx.ext.auth.impl.Codec: byte[] BASE16>;
v15 = v7 & 15;
v16 = v14[v15];
v3[v13] = v16;
v4 = v4 + 1;
goto label1;
label2:
v17 = new java.lang.String;
v18 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset ISO_8859_1>;
specialinvoke v17.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(v3, v18);
return v17;
}
public static byte[] base16Decode(java.lang.String)
{
byte[] v3;
int[] v13, v21, v27, v8;
int v1, v14, v18, v2, v20, v22, v24, v28, v30, v33, v34, v35, v4, v5, v7, v9;
java.lang.String v0, v12, v17, v26, v32;
char v11, v16, v19, v25, v31, v6;
java.lang.IllegalArgumentException v10, v15, v23, v29;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = v1 / 2;
v3 = newarray (byte)[v2];
v4 = 0;
label1:
v5 = virtualinvoke v0.<java.lang.String: int length()>();
if v4 >= v5 goto label8;
v6 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v4);
v7 = v6 - 48;
if v7 < 0 goto label2;
v8 = <io.vertx.ext.auth.impl.Codec: int[] BASE16_LOOKUP>;
v9 = lengthof v8;
if v7 < v9 goto label3;
label2:
v10 = new java.lang.IllegalArgumentException;
v11 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v4);
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid char: \u0001");
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v12);
throw v10;
label3:
v13 = <io.vertx.ext.auth.impl.Codec: int[] BASE16_LOOKUP>;
v14 = v13[v7];
if v14 != 255 goto label4;
v15 = new java.lang.IllegalArgumentException;
v16 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v4);
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid char: \u0001");
specialinvoke v15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v17);
throw v15;
label4:
v18 = v4 + 1;
v19 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v18);
v20 = v19 - 48;
if v20 < 0 goto label5;
v21 = <io.vertx.ext.auth.impl.Codec: int[] BASE16_LOOKUP>;
v22 = lengthof v21;
if v20 < v22 goto label6;
label5:
v23 = new java.lang.IllegalArgumentException;
v24 = v4 + 1;
v25 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v24);
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v25) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid char: \u0001");
specialinvoke v23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v26);
throw v23;
label6:
v27 = <io.vertx.ext.auth.impl.Codec: int[] BASE16_LOOKUP>;
v28 = v27[v20];
if v28 != 255 goto label7;
v29 = new java.lang.IllegalArgumentException;
v30 = v4 + 1;
v31 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v30);
v32 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v31) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid char: \u0001");
specialinvoke v29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v32);
throw v29;
label7:
v33 = v4 / 2;
v34 = v14 << 4;
v35 = v34 + v28;
v3[v33] = v35;
v4 = v4 + 2;
goto label1;
label8:
return v3;
}
public static java.lang.String base32Encode(byte[])
{
byte[] v0;
byte v11, v16, v20, v9;
java.lang.StringBuilder v3;
int v1, v10, v12, v13, v14, v15, v17, v18, v19, v2, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v4, v5, v6, v7, v8;
java.lang.String v35;
char v34;
char[] v33;
v0 := @parameter0: byte[];
v1 = 0;
v2 = 0;
v3 = new java.lang.StringBuilder;
v4 = lengthof v0;
v5 = v4 + 7;
v6 = v5 * 8;
v7 = v6 / 5;
specialinvoke v3.<java.lang.StringBuilder: void <init>(int)>(v7);
label01:
v8 = lengthof v0;
if v1 >= v8 goto label10;
v9 = v0[v1];
if v9 < 0 goto label02;
v10 = v0[v1];
goto label03;
label02:
v11 = v0[v1];
v10 = v11 + 256;
label03:
v12 = v10;
if v2 <= 3 goto label08;
v13 = v1 + 1;
v14 = lengthof v0;
if v13 >= v14 goto label06;
v15 = v1 + 1;
v16 = v0[v15];
if v16 < 0 goto label04;
v17 = v1 + 1;
v18 = v0[v17];
goto label05;
label04:
v19 = v1 + 1;
v20 = v0[v19];
v18 = v20 + 256;
label05:
v21 = v18;
goto label07;
label06:
v21 = 0;
label07:
v22 = 255 >> v2;
v23 = v12 & v22;
v24 = v2 + 5;
v2 = v24 % 8;
v25 = v23 << v2;
v26 = 8 - v2;
v27 = v21 >> v26;
v28 = v25 | v27;
v1 = v1 + 1;
goto label09;
label08:
v29 = v2 + 5;
v30 = 8 - v29;
v31 = v10 >> v30;
v28 = v31 & 31;
v32 = v2 + 5;
v2 = v32 % 8;
if v2 != 0 goto label09;
v1 = v1 + 1;
label09:
v33 = <io.vertx.ext.auth.impl.Codec: char[] BASE32>;
v34 = v33[v28];
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v34);
goto label01;
label10:
v35 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
return v35;
}
public static byte[] base32Decode(java.lang.String)
{
byte[] v4;
byte v22, v25, v30, v34;
int[] v11, v16;
int v1, v10, v12, v17, v2, v21, v23, v24, v26, v27, v28, v29, v3, v31, v32, v33, v35, v36, v37, v5, v6, v7, v8;
java.lang.String v0, v15, v20;
char v14, v19, v9;
java.lang.IllegalArgumentException v13, v18;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = v1 * 5;
v3 = v2 / 8;
v4 = newarray (byte)[v3];
v5 = 0;
v6 = 0;
v7 = 0;
label1:
v8 = virtualinvoke v0.<java.lang.String: int length()>();
if v5 >= v8 goto label8;
v9 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v5);
v10 = v9 - 48;
if v10 < 0 goto label2;
v11 = <io.vertx.ext.auth.impl.Codec: int[] BASE32_LOOKUP>;
v12 = lengthof v11;
if v10 < v12 goto label3;
label2:
v13 = new java.lang.IllegalArgumentException;
v14 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v5);
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid char: \u0001");
specialinvoke v13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v15);
throw v13;
label3:
v16 = <io.vertx.ext.auth.impl.Codec: int[] BASE32_LOOKUP>;
v17 = v16[v10];
if v17 != 255 goto label4;
v18 = new java.lang.IllegalArgumentException;
v19 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v5);
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid char: \u0001");
specialinvoke v18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v20);
throw v18;
label4:
if v6 > 3 goto label6;
v21 = v6 + 5;
v6 = v21 % 8;
if v6 != 0 goto label5;
v22 = v4[v7];
v23 = v22 | v17;
v4[v7] = v23;
v7 = v7 + 1;
v24 = lengthof v4;
if v7 < v24 goto label7;
goto label8;
label5:
v25 = v4[v7];
v26 = 8 - v6;
v27 = v17 << v26;
v28 = v25 | v27;
v4[v7] = v28;
goto label7;
label6:
v29 = v6 + 5;
v6 = v29 % 8;
v30 = v4[v7];
v31 = v17 >>> v6;
v32 = v30 | v31;
v4[v7] = v32;
v7 = v7 + 1;
v33 = lengthof v4;
if v7 >= v33 goto label8;
v34 = v4[v7];
v35 = 8 - v6;
v36 = v17 << v35;
v37 = v34 | v36;
v4[v7] = v37;
label7:
v5 = v5 + 1;
goto label1;
label8:
return v4;
}
public static java.lang.String base64UrlEncode(byte[])
{
byte[] v0;
java.util.Base64$Encoder v1;
java.lang.String v2;
v0 := @parameter0: byte[];
v1 = <io.vertx.ext.auth.impl.Codec: java.util.Base64$Encoder BASE64URL>;
v2 = virtualinvoke v1.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(v0);
return v2;
}
public static byte[] base64UrlDecode(java.lang.String)
{
byte[] v2;
java.lang.String v0;
java.util.Base64$Decoder v1;
v0 := @parameter0: java.lang.String;
v1 = <io.vertx.ext.auth.impl.Codec: java.util.Base64$Decoder BASE64URL_DECODER>;
v2 = virtualinvoke v1.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(v0);
return v2;
}
public static byte[] base64UrlDecode(byte[])
{
byte[] v0, v2;
java.util.Base64$Decoder v1;
v0 := @parameter0: byte[];
v1 = <io.vertx.ext.auth.impl.Codec: java.util.Base64$Decoder BASE64URL_DECODER>;
v2 = virtualinvoke v1.<java.util.Base64$Decoder: byte[] decode(byte[])>(v0);
return v2;
}
public static java.lang.String base64Encode(byte[])
{
byte[] v0;
java.util.Base64$Encoder v1;
java.lang.String v2;
v0 := @parameter0: byte[];
v1 = <io.vertx.ext.auth.impl.Codec: java.util.Base64$Encoder BASE64>;
v2 = virtualinvoke v1.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(v0);
return v2;
}
public static java.lang.String base64EncodeWithoutPadding(byte[])
{
byte[] v0;
java.util.Base64$Encoder v1;
java.lang.String v2;
v0 := @parameter0: byte[];
v1 = <io.vertx.ext.auth.impl.Codec: java.util.Base64$Encoder BASE64_NOPADDING>;
v2 = virtualinvoke v1.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(v0);
return v2;
}
public static byte[] base64Decode(java.lang.String)
{
byte[] v2;
java.lang.String v0;
java.util.Base64$Decoder v1;
v0 := @parameter0: java.lang.String;
v1 = <io.vertx.ext.auth.impl.Codec: java.util.Base64$Decoder BASE64_DECODER>;
v2 = virtualinvoke v1.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(v0);
return v2;
}
public static byte[] base64Decode(byte[])
{
byte[] v0, v2;
java.util.Base64$Decoder v1;
v0 := @parameter0: byte[];
v1 = <io.vertx.ext.auth.impl.Codec: java.util.Base64$Decoder BASE64_DECODER>;
v2 = virtualinvoke v1.<java.util.Base64$Decoder: byte[] decode(byte[])>(v0);
return v2;
}
public static java.lang.String base64MimeEncode(byte[])
{
byte[] v0;
java.util.Base64$Encoder v1;
java.lang.String v2;
v0 := @parameter0: byte[];
v1 = <io.vertx.ext.auth.impl.Codec: java.util.Base64$Encoder BASE64MIME>;
v2 = virtualinvoke v1.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(v0);
return v2;
}
public static byte[] base64MimeDecode(java.lang.String)
{
byte[] v2;
java.lang.String v0;
java.util.Base64$Decoder v1;
v0 := @parameter0: java.lang.String;
v1 = <io.vertx.ext.auth.impl.Codec: java.util.Base64$Decoder BASE64MIME_DECODER>;
v2 = virtualinvoke v1.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(v0);
return v2;
}
public static byte[] base64MimeDecode(byte[])
{
byte[] v0, v2;
java.util.Base64$Decoder v1;
v0 := @parameter0: byte[];
v1 = <io.vertx.ext.auth.impl.Codec: java.util.Base64$Decoder BASE64MIME_DECODER>;
v2 = virtualinvoke v1.<java.util.Base64$Decoder: byte[] decode(byte[])>(v0);
return v2;
}
static void <clinit>()
{
byte[] v2;
java.util.Base64$Decoder v13, v15, v9;
java.nio.charset.Charset v1;
int[] v3, v6;
java.lang.String v0, v4;
java.util.Base64$Encoder v10, v11, v12, v14, v7, v8;
char[] v5;
v0 = "0123456789abcdef";
v1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
v2 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v1);
<io.vertx.ext.auth.impl.Codec: byte[] BASE16> = v2;
v3 = newarray (int)[56];
v3[0] = 0;
v3[1] = 1;
v3[2] = 2;
v3[3] = 3;
v3[4] = 4;
v3[5] = 5;
v3[6] = 6;
v3[7] = 7;
v3[8] = 8;
v3[9] = 9;
v3[10] = 255;
v3[11] = 255;
v3[12] = 255;
v3[13] = 255;
v3[14] = 255;
v3[15] = 255;
v3[16] = 255;
v3[17] = 10;
v3[18] = 11;
v3[19] = 12;
v3[20] = 13;
v3[21] = 14;
v3[22] = 15;
v3[23] = 255;
v3[24] = 255;
v3[25] = 255;
v3[26] = 255;
v3[27] = 255;
v3[28] = 255;
v3[29] = 255;
v3[30] = 255;
v3[31] = 255;
v3[32] = 255;
v3[33] = 255;
v3[34] = 255;
v3[35] = 255;
v3[36] = 255;
v3[37] = 255;
v3[38] = 255;
v3[39] = 255;
v3[40] = 255;
v3[41] = 255;
v3[42] = 255;
v3[43] = 255;
v3[44] = 255;
v3[45] = 255;
v3[46] = 255;
v3[47] = 255;
v3[48] = 255;
v3[49] = 10;
v3[50] = 11;
v3[51] = 12;
v3[52] = 13;
v3[53] = 14;
v3[54] = 15;
v3[55] = 255;
<io.vertx.ext.auth.impl.Codec: int[] BASE16_LOOKUP> = v3;
v4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
v5 = virtualinvoke v4.<java.lang.String: char[] toCharArray()>();
<io.vertx.ext.auth.impl.Codec: char[] BASE32> = v5;
v6 = newarray (int)[80];
v6[0] = 255;
v6[1] = 255;
v6[2] = 26;
v6[3] = 27;
v6[4] = 28;
v6[5] = 29;
v6[6] = 30;
v6[7] = 31;
v6[8] = 255;
v6[9] = 255;
v6[10] = 255;
v6[11] = 255;
v6[12] = 255;
v6[13] = 255;
v6[14] = 255;
v6[15] = 255;
v6[16] = 255;
v6[17] = 0;
v6[18] = 1;
v6[19] = 2;
v6[20] = 3;
v6[21] = 4;
v6[22] = 5;
v6[23] = 6;
v6[24] = 7;
v6[25] = 8;
v6[26] = 9;
v6[27] = 10;
v6[28] = 11;
v6[29] = 12;
v6[30] = 13;
v6[31] = 14;
v6[32] = 15;
v6[33] = 16;
v6[34] = 17;
v6[35] = 18;
v6[36] = 19;
v6[37] = 20;
v6[38] = 21;
v6[39] = 22;
v6[40] = 23;
v6[41] = 24;
v6[42] = 25;
v6[43] = 255;
v6[44] = 255;
v6[45] = 255;
v6[46] = 255;
v6[47] = 255;
v6[48] = 255;
v6[49] = 0;
v6[50] = 1;
v6[51] = 2;
v6[52] = 3;
v6[53] = 4;
v6[54] = 5;
v6[55] = 6;
v6[56] = 7;
v6[57] = 8;
v6[58] = 9;
v6[59] = 10;
v6[60] = 11;
v6[61] = 12;
v6[62] = 13;
v6[63] = 14;
v6[64] = 15;
v6[65] = 16;
v6[66] = 17;
v6[67] = 18;
v6[68] = 19;
v6[69] = 20;
v6[70] = 21;
v6[71] = 22;
v6[72] = 23;
v6[73] = 24;
v6[74] = 25;
v6[75] = 255;
v6[76] = 255;
v6[77] = 255;
v6[78] = 255;
v6[79] = 255;
<io.vertx.ext.auth.impl.Codec: int[] BASE32_LOOKUP> = v6;
v7 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getUrlEncoder()>();
v8 = virtualinvoke v7.<java.util.Base64$Encoder: java.util.Base64$Encoder withoutPadding()>();
<io.vertx.ext.auth.impl.Codec: java.util.Base64$Encoder BASE64URL> = v8;
v9 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getUrlDecoder()>();
<io.vertx.ext.auth.impl.Codec: java.util.Base64$Decoder BASE64URL_DECODER> = v9;
v10 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getEncoder()>();
<io.vertx.ext.auth.impl.Codec: java.util.Base64$Encoder BASE64> = v10;
v11 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getEncoder()>();
v12 = virtualinvoke v11.<java.util.Base64$Encoder: java.util.Base64$Encoder withoutPadding()>();
<io.vertx.ext.auth.impl.Codec: java.util.Base64$Encoder BASE64_NOPADDING> = v12;
v13 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getDecoder()>();
<io.vertx.ext.auth.impl.Codec: java.util.Base64$Decoder BASE64_DECODER> = v13;
v14 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getMimeEncoder()>();
<io.vertx.ext.auth.impl.Codec: java.util.Base64$Encoder BASE64MIME> = v14;
v15 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getMimeDecoder()>();
<io.vertx.ext.auth.impl.Codec: java.util.Base64$Decoder BASE64MIME_DECODER> = v15;
return;
}
}