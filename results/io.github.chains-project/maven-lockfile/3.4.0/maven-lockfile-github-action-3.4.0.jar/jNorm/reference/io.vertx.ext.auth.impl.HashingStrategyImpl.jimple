public class io.vertx.ext.auth.impl.HashingStrategyImpl extends java.lang.Object implements io.vertx.ext.auth.HashingStrategy
{
private static final io.vertx.core.impl.logging.Logger LOG;
private final java.util.Map algorithms;
public void <init>()
{
java.util.HashMap v1;
io.vertx.ext.auth.impl.HashingStrategyImpl v0;
v0 := @this: io.vertx.ext.auth.impl.HashingStrategyImpl;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v0.<io.vertx.ext.auth.impl.HashingStrategyImpl: java.util.Map algorithms> = v1;
return;
}
public void add(io.vertx.ext.auth.HashingAlgorithm)
{
java.util.Map v2;
io.vertx.ext.auth.HashingAlgorithm v1;
java.lang.String v3;
io.vertx.ext.auth.impl.HashingStrategyImpl v0;
v0 := @this: io.vertx.ext.auth.impl.HashingStrategyImpl;
v1 := @parameter0: io.vertx.ext.auth.HashingAlgorithm;
v2 = v0.<io.vertx.ext.auth.impl.HashingStrategyImpl: java.util.Map algorithms>;
v3 = interfaceinvoke v1.<io.vertx.ext.auth.HashingAlgorithm: java.lang.String id()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v1);
return;
}
public java.lang.String hash(java.lang.String, java.util.Map, java.lang.String, java.lang.String)
{
java.lang.RuntimeException v7;
java.util.Map v11, v2, v5;
io.vertx.ext.auth.HashString v9;
java.lang.Object v6;
java.lang.String v1, v10, v12, v13, v3, v4, v8;
io.vertx.ext.auth.impl.HashingStrategyImpl v0;
v0 := @this: io.vertx.ext.auth.impl.HashingStrategyImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.Map;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = v0.<io.vertx.ext.auth.impl.HashingStrategyImpl: java.util.Map algorithms>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v6 != null goto label1;
v7 = new java.lang.RuntimeException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 algorithm is not available.");
specialinvoke v7.<java.lang.RuntimeException: void <init>(java.lang.String)>(v8);
throw v7;
label1:
v9 = new io.vertx.ext.auth.HashString;
specialinvoke v9.<io.vertx.ext.auth.HashString: void <init>(java.lang.String,java.util.Map,java.lang.String)>(v1, v2, v3);
v10 = interfaceinvoke v6.<io.vertx.ext.auth.HashingAlgorithm: java.lang.String hash(io.vertx.ext.auth.HashString,java.lang.String)>(v9, v4);
v11 = virtualinvoke v9.<io.vertx.ext.auth.HashString: java.util.Map params()>();
v12 = virtualinvoke v9.<io.vertx.ext.auth.HashString: java.lang.String salt()>();
v13 = staticinvoke <io.vertx.ext.auth.HashString: java.lang.String encode(io.vertx.ext.auth.HashingAlgorithm,java.util.Map,java.lang.String,java.lang.String)>(v6, v11, v12, v10);
return v13;
}
public boolean verify(java.lang.String, java.lang.String)
{
java.util.Map v4;
int v15, v16, v17, v18, v19, v20;
java.lang.String v1, v10, v11, v12, v13, v14, v2, v5;
io.vertx.ext.auth.impl.HashingStrategyImpl v0;
boolean v24, v8;
io.vertx.core.impl.logging.Logger v7, v9;
char v21, v22, v23;
io.vertx.ext.auth.HashString v3;
java.lang.Object v6;
v0 := @this: io.vertx.ext.auth.impl.HashingStrategyImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
if v1 == null goto label1;
if v2 != null goto label2;
label1:
return 0;
label2:
v3 = new io.vertx.ext.auth.HashString;
specialinvoke v3.<io.vertx.ext.auth.HashString: void <init>(java.lang.String)>(v1);
v4 = v0.<io.vertx.ext.auth.impl.HashingStrategyImpl: java.util.Map algorithms>;
v5 = virtualinvoke v3.<io.vertx.ext.auth.HashString: java.lang.String id()>();
v6 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v5);
if v6 != null goto label4;
v7 = <io.vertx.ext.auth.impl.HashingStrategyImpl: io.vertx.core.impl.logging.Logger LOG>;
v8 = interfaceinvoke v7.<io.vertx.core.impl.logging.Logger: boolean isDebugEnabled()>();
if v8 == 0 goto label3;
v9 = <io.vertx.ext.auth.impl.HashingStrategyImpl: io.vertx.core.impl.logging.Logger LOG>;
v10 = virtualinvoke v3.<io.vertx.ext.auth.HashString: java.lang.String id()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No hash strategy for algorithm: \u0001");
interfaceinvoke v9.<io.vertx.core.impl.logging.Logger: void debug(java.lang.Object)>(v11);
label3:
return 0;
label4:
v12 = virtualinvoke v3.<io.vertx.ext.auth.HashString: java.lang.String hash()>();
if v12 != null goto label5;
return 0;
label5:
v13 = virtualinvoke v3.<io.vertx.ext.auth.HashString: java.lang.String hash()>();
v14 = interfaceinvoke v6.<io.vertx.ext.auth.HashingAlgorithm: java.lang.String hash(io.vertx.ext.auth.HashString,java.lang.String)>(v3, v2);
v15 = virtualinvoke v13.<java.lang.String: int length()>();
v16 = virtualinvoke v14.<java.lang.String: int length()>();
v17 = v15 ^ v16;
v18 = 0;
label6:
v19 = virtualinvoke v13.<java.lang.String: int length()>();
if v18 >= v19 goto label7;
v20 = virtualinvoke v14.<java.lang.String: int length()>();
if v18 >= v20 goto label7;
v21 = virtualinvoke v13.<java.lang.String: char charAt(int)>(v18);
v22 = virtualinvoke v14.<java.lang.String: char charAt(int)>(v18);
v23 = v21 ^ v22;
v17 = v17 | v23;
v18 = v18 + 1;
goto label6;
label7:
if v17 != 0 goto label8;
v24 = 1;
goto label9;
label8:
v24 = 0;
label9:
return v24;
}
public io.vertx.ext.auth.HashingAlgorithm get(java.lang.String)
{
java.util.Map v2;
java.lang.Object v3;
java.lang.String v1;
io.vertx.ext.auth.impl.HashingStrategyImpl v0;
v0 := @this: io.vertx.ext.auth.impl.HashingStrategyImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.ext.auth.impl.HashingStrategyImpl: java.util.Map algorithms>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
public io.vertx.ext.auth.HashingStrategy put(java.lang.String, io.vertx.ext.auth.HashingAlgorithm)
{
io.vertx.core.impl.logging.Logger v5;
io.vertx.ext.auth.HashingAlgorithm v2;
java.util.Map v3, v7;
java.lang.String v1, v6;
io.vertx.ext.auth.impl.HashingStrategyImpl v0;
boolean v4;
v0 := @this: io.vertx.ext.auth.impl.HashingStrategyImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.ext.auth.HashingAlgorithm;
v3 = v0.<io.vertx.ext.auth.impl.HashingStrategyImpl: java.util.Map algorithms>;
v4 = interfaceinvoke v3.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v4 == 0 goto label1;
v5 = <io.vertx.ext.auth.impl.HashingStrategyImpl: io.vertx.core.impl.logging.Logger LOG>;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Existing algorithm: \u0001 will be replaced!");
interfaceinvoke v5.<io.vertx.core.impl.logging.Logger: void warn(java.lang.Object)>(v6);
label1:
v7 = v0.<io.vertx.ext.auth.impl.HashingStrategyImpl: java.util.Map algorithms>;
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
return v0;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/ext/auth/impl/HashingStrategyImpl;");
<io.vertx.ext.auth.impl.HashingStrategyImpl: io.vertx.core.impl.logging.Logger LOG> = v0;
return;
}
}