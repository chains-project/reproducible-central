public final class io.vertx.ext.auth.impl.http.SimpleHttpClient extends java.lang.Object
{
private final io.vertx.core.http.HttpClient client;
private final java.lang.String userAgent;
public void <init>(io.vertx.core.Vertx, java.lang.String, io.vertx.core.http.HttpClientOptions)
{
io.vertx.core.Vertx v1;
io.vertx.core.http.HttpClientOptions v3;
java.lang.String v2;
io.vertx.core.http.HttpClient v4;
io.vertx.ext.auth.impl.http.SimpleHttpClient v0;
v0 := @this: io.vertx.ext.auth.impl.http.SimpleHttpClient;
v1 := @parameter0: io.vertx.core.Vertx;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.http.HttpClientOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = interfaceinvoke v1.<io.vertx.core.Vertx: io.vertx.core.http.HttpClient createHttpClient(io.vertx.core.http.HttpClientOptions)>(v3);
v0.<io.vertx.ext.auth.impl.http.SimpleHttpClient: io.vertx.core.http.HttpClient client> = v4;
v0.<io.vertx.ext.auth.impl.http.SimpleHttpClient: java.lang.String userAgent> = v2;
return;
}
public io.vertx.core.Future fetch(io.vertx.core.http.HttpMethod, java.lang.String, io.vertx.core.json.JsonObject, io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.RequestOptions v7, v8, v9;
io.vertx.ext.auth.impl.http.SimpleHttpClient v0;
int v5;
io.vertx.core.json.JsonObject v3;
java.lang.String v10, v11, v2;
boolean v13;
java.util.Iterator v12;
io.vertx.core.Future v20, v6;
io.vertx.core.buffer.Buffer v4;
io.vertx.core.http.HttpMethod v1, v17, v18, v19;
java.lang.Object v14, v15, v16;
v0 := @this: io.vertx.ext.auth.impl.http.SimpleHttpClient;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.json.JsonObject;
v4 := @parameter3: io.vertx.core.buffer.Buffer;
if v2 == null goto label1;
v5 = virtualinvoke v2.<java.lang.String: int length()>();
if v5 != 0 goto label2;
label1:
v6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.String)>("Invalid url");
return v6;
label2:
v7 = new io.vertx.core.http.RequestOptions;
specialinvoke v7.<io.vertx.core.http.RequestOptions: void <init>()>();
v8 = virtualinvoke v7.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setMethod(io.vertx.core.http.HttpMethod)>(v1);
v9 = virtualinvoke v8.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setAbsoluteURI(java.lang.String)>(v2);
v10 = v0.<io.vertx.ext.auth.impl.http.SimpleHttpClient: java.lang.String userAgent>;
if v10 == null goto label3;
v11 = v0.<io.vertx.ext.auth.impl.http.SimpleHttpClient: java.lang.String userAgent>;
virtualinvoke v9.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions addHeader(java.lang.String,java.lang.String)>("User-Agent", v11);
label3:
if v3 == null goto label5;
v12 = virtualinvoke v3.<io.vertx.core.json.JsonObject: java.util.Iterator iterator()>();
label4:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label5;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = interfaceinvoke v14.<java.util.Map$Entry: java.lang.Object getKey()>();
v16 = interfaceinvoke v14.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v9.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions addHeader(java.lang.String,java.lang.String)>(v15, v16);
goto label4;
label5:
v17 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod POST>;
if v1 == v17 goto label6;
v18 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod PATCH>;
if v1 == v18 goto label6;
v19 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod PUT>;
if v1 == v19 goto label6;
v4 = null;
label6:
v20 = specialinvoke v0.<io.vertx.ext.auth.impl.http.SimpleHttpClient: io.vertx.core.Future makeRequest(io.vertx.core.http.RequestOptions,io.vertx.core.buffer.Buffer)>(v9, v4);
return v20;
}
public static io.vertx.core.buffer.Buffer jsonToQuery(io.vertx.core.json.JsonObject)
{
java.util.Iterator v2;
java.lang.RuntimeException v12;
io.vertx.core.buffer.Buffer v1;
int v5;
io.vertx.core.json.JsonObject v0;
java.lang.Object v4, v6, v8;
java.lang.String v10, v7, v9;
java.io.UnsupportedEncodingException v11;
boolean v3;
v0 := @parameter0: io.vertx.core.json.JsonObject;
v1 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer()>();
label1:
v2 = virtualinvoke v0.<io.vertx.core.json.JsonObject: java.util.Iterator iterator()>();
label2:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label5;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: int length()>();
if v5 == 0 goto label3;
interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendByte(byte)>(38);
label3:
v6 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(v6, "UTF-8");
interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendString(java.lang.String)>(v7);
interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendByte(byte)>(61);
v8 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
if v8 == null goto label2;
v9 = virtualinvoke v8.<java.lang.Object: java.lang.String toString()>();
v10 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(v9, "UTF-8");
interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendString(java.lang.String)>(v10);
goto label2;
label4:
v11 := @caughtexception;
v12 = new java.lang.RuntimeException;
specialinvoke v12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v11);
throw v12;
label5:
return v1;
catch java.io.UnsupportedEncodingException from label1 to label4 with label4;
}
public static io.vertx.core.json.JsonObject queryToJson(io.vertx.core.buffer.Buffer) throws java.io.UnsupportedEncodingException
{
java.lang.String[] v3;
int v11, v12, v13, v4, v5, v7;
io.vertx.core.json.JsonObject v1;
java.lang.String v10, v14, v15, v16, v2, v6, v8, v9;
boolean v17, v19;
io.vertx.core.json.JsonArray v20;
io.vertx.core.buffer.Buffer v0;
java.lang.Object v18;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
if v0 != null goto label01;
return null;
label01:
v1 = new io.vertx.core.json.JsonObject;
specialinvoke v1.<io.vertx.core.json.JsonObject: void <init>()>();
v2 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: java.lang.String toString()>();
v3 = virtualinvoke v2.<java.lang.String: java.lang.String[] split(java.lang.String)>("&");
v4 = lengthof v3;
v5 = 0;
label02:
if v5 >= v4 goto label11;
v6 = v3[v5];
v7 = virtualinvoke v6.<java.lang.String: int indexOf(java.lang.String)>("=");
if v7 <= 0 goto label03;
v8 = virtualinvoke v6.<java.lang.String: java.lang.String substring(int,int)>(0, v7);
v9 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(v8, "UTF-8");
goto label04;
label03:
v9 = v6;
label04:
v10 = v9;
if v7 <= 0 goto label05;
v11 = virtualinvoke v6.<java.lang.String: int length()>();
v12 = v7 + 1;
if v11 <= v12 goto label05;
v13 = v7 + 1;
v14 = virtualinvoke v6.<java.lang.String: java.lang.String substring(int)>(v13);
v15 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(v14, "UTF-8");
goto label06;
label05:
v15 = null;
label06:
v16 = v15;
v17 = virtualinvoke v1.<io.vertx.core.json.JsonObject: boolean containsKey(java.lang.String)>(v10);
if v17 != 0 goto label07;
virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>(v10, v15);
goto label10;
label07:
v18 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.lang.Object getValue(java.lang.String)>(v10);
v19 = v18 instanceof io.vertx.core.json.JsonArray;
if v19 != 0 goto label08;
v20 = new io.vertx.core.json.JsonArray;
specialinvoke v20.<io.vertx.core.json.JsonArray: void <init>()>();
v18 = v20;
virtualinvoke v20.<io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray add(java.lang.Object)>(v20);
virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>(v10, v20);
label08:
if v16 != null goto label09;
virtualinvoke v18.<io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray addNull()>();
goto label10;
label09:
virtualinvoke v18.<io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray add(java.lang.Object)>(v16);
label10:
v5 = v5 + 1;
goto label02;
label11:
return v1;
}
private io.vertx.core.Future makeRequest(io.vertx.core.http.RequestOptions, io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v2;
io.vertx.core.http.RequestOptions v1;
io.vertx.core.Future v4, v6;
java.util.function.Function v5;
io.vertx.core.http.HttpClient v3;
io.vertx.ext.auth.impl.http.SimpleHttpClient v0;
v0 := @this: io.vertx.ext.auth.impl.http.SimpleHttpClient;
v1 := @parameter0: io.vertx.core.http.RequestOptions;
v2 := @parameter1: io.vertx.core.buffer.Buffer;
v3 = v0.<io.vertx.ext.auth.impl.http.SimpleHttpClient: io.vertx.core.http.HttpClient client>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpClient: io.vertx.core.Future request(io.vertx.core.http.RequestOptions)>(v1);
v5 = staticinvoke <io.vertx.ext.auth.impl.http.SimpleHttpClient$lambda_makeRequest_2__888: java.util.function.Function bootstrap$(io.vertx.core.buffer.Buffer)>(v2);
v6 = interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future compose(java.util.function.Function)>(v5);
return v6;
}
}