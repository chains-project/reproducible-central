public interface  io.vertx.ext.web.client.HttpRequest extends java.lang.Object
{
public abstract io.vertx.ext.web.client.HttpRequest method(io.vertx.core.http.HttpMethod);
public abstract io.vertx.core.http.HttpMethod method();
public abstract io.vertx.ext.web.client.HttpRequest port(int);
public abstract int port();
public abstract io.vertx.ext.web.client.HttpRequest as(io.vertx.ext.web.codec.BodyCodec);
public abstract io.vertx.ext.web.codec.BodyCodec bodyCodec();
public abstract io.vertx.ext.web.client.HttpRequest host(java.lang.String);
public abstract java.lang.String host();
public abstract io.vertx.ext.web.client.HttpRequest virtualHost(java.lang.String);
public abstract java.lang.String virtualHost();
public abstract io.vertx.ext.web.client.HttpRequest uri(java.lang.String);
public abstract java.lang.String uri();
public abstract io.vertx.ext.web.client.HttpRequest putHeaders(io.vertx.core.MultiMap);
public abstract io.vertx.ext.web.client.HttpRequest putHeader(java.lang.String, java.lang.String);
public abstract io.vertx.ext.web.client.HttpRequest putHeader(java.lang.String, java.lang.Iterable);
public abstract io.vertx.core.MultiMap headers();
public abstract io.vertx.ext.web.client.HttpRequest authentication(io.vertx.ext.auth.authentication.Credentials);
public io.vertx.ext.web.client.HttpRequest basicAuthentication(java.lang.String, java.lang.String)
{
io.vertx.ext.auth.authentication.UsernamePasswordCredentials v3;
java.lang.String v1, v2;
io.vertx.ext.auth.authentication.Credentials v4;
io.vertx.ext.web.client.HttpRequest v0, v5;
v0 := @this: io.vertx.ext.web.client.HttpRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = new io.vertx.ext.auth.authentication.UsernamePasswordCredentials;
specialinvoke v3.<io.vertx.ext.auth.authentication.UsernamePasswordCredentials: void <init>(java.lang.String,java.lang.String)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.ext.auth.authentication.UsernamePasswordCredentials: io.vertx.ext.auth.authentication.Credentials applyHttpChallenge(java.lang.String)>(null);
v5 = interfaceinvoke v0.<io.vertx.ext.web.client.HttpRequest: io.vertx.ext.web.client.HttpRequest authentication(io.vertx.ext.auth.authentication.Credentials)>(v4);
return v5;
}
public io.vertx.ext.web.client.HttpRequest basicAuthentication(io.vertx.core.buffer.Buffer, io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v1, v2;
java.lang.String v3, v4;
io.vertx.ext.web.client.HttpRequest v0, v5;
v0 := @this: io.vertx.ext.web.client.HttpRequest;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.buffer.Buffer;
v3 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: java.lang.String toString()>();
v4 = interfaceinvoke v2.<io.vertx.core.buffer.Buffer: java.lang.String toString()>();
v5 = interfaceinvoke v0.<io.vertx.ext.web.client.HttpRequest: io.vertx.ext.web.client.HttpRequest basicAuthentication(java.lang.String,java.lang.String)>(v3, v4);
return v5;
}
public io.vertx.ext.web.client.HttpRequest bearerTokenAuthentication(java.lang.String)
{
io.vertx.ext.auth.authentication.TokenCredentials v2;
java.lang.String v1;
io.vertx.ext.auth.authentication.Credentials v3;
io.vertx.ext.web.client.HttpRequest v0, v4;
v0 := @this: io.vertx.ext.web.client.HttpRequest;
v1 := @parameter0: java.lang.String;
v2 = new io.vertx.ext.auth.authentication.TokenCredentials;
specialinvoke v2.<io.vertx.ext.auth.authentication.TokenCredentials: void <init>(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.ext.auth.authentication.TokenCredentials: io.vertx.ext.auth.authentication.Credentials applyHttpChallenge(java.lang.String)>(null);
v4 = interfaceinvoke v0.<io.vertx.ext.web.client.HttpRequest: io.vertx.ext.web.client.HttpRequest authentication(io.vertx.ext.auth.authentication.Credentials)>(v3);
return v4;
}
public abstract io.vertx.ext.web.client.HttpRequest ssl(java.lang.Boolean);
public abstract java.lang.Boolean ssl();
public abstract io.vertx.ext.web.client.HttpRequest timeout(long);
public abstract long timeout();
public abstract io.vertx.ext.web.client.HttpRequest addQueryParam(java.lang.String, java.lang.String);
public abstract io.vertx.ext.web.client.HttpRequest setQueryParam(java.lang.String, java.lang.String);
public abstract io.vertx.ext.web.client.HttpRequest setTemplateParam(java.lang.String, java.lang.String);
public abstract io.vertx.ext.web.client.HttpRequest setTemplateParam(java.lang.String, java.util.List);
public abstract io.vertx.ext.web.client.HttpRequest setTemplateParam(java.lang.String, java.util.Map);
public abstract io.vertx.ext.web.client.HttpRequest followRedirects(boolean);
public abstract boolean followRedirects();
public abstract io.vertx.ext.web.client.HttpRequest proxy(io.vertx.core.net.ProxyOptions);
public abstract io.vertx.core.net.ProxyOptions proxy();
public io.vertx.ext.web.client.HttpRequest expect(java.util.function.Function)
{
io.vertx.ext.web.client.predicate.ResponsePredicate v2;
java.util.function.Function v1;
io.vertx.ext.web.client.HttpRequest v0, v3;
v0 := @this: io.vertx.ext.web.client.HttpRequest;
v1 := @parameter0: java.util.function.Function;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <io.vertx.ext.web.client.HttpRequest$apply__794: io.vertx.ext.web.client.predicate.ResponsePredicate bootstrap$(java.util.function.Function)>(v1);
v3 = interfaceinvoke v0.<io.vertx.ext.web.client.HttpRequest: io.vertx.ext.web.client.HttpRequest expect(io.vertx.ext.web.client.predicate.ResponsePredicate)>(v2);
return v3;
}
public abstract io.vertx.ext.web.client.HttpRequest expect(io.vertx.ext.web.client.predicate.ResponsePredicate);
public abstract java.util.List expectations();
public abstract io.vertx.core.MultiMap queryParams();
public abstract io.vertx.uritemplate.Variables templateParams();
public abstract io.vertx.ext.web.client.HttpRequest copy();
public abstract io.vertx.ext.web.client.HttpRequest multipartMixed(boolean);
public abstract boolean multipartMixed();
public abstract io.vertx.ext.web.client.HttpRequest traceOperation(java.lang.String);
public abstract java.lang.String traceOperation();
public abstract void sendStream(io.vertx.core.streams.ReadStream, io.vertx.core.Handler);
public io.vertx.core.Future sendStream(io.vertx.core.streams.ReadStream)
{
io.vertx.core.Promise v2;
io.vertx.core.streams.ReadStream v1;
io.vertx.core.Future v3;
io.vertx.ext.web.client.HttpRequest v0;
v0 := @this: io.vertx.ext.web.client.HttpRequest;
v1 := @parameter0: io.vertx.core.streams.ReadStream;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.ext.web.client.HttpRequest: void sendStream(io.vertx.core.streams.ReadStream,io.vertx.core.Handler)>(v1, v2);
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
public abstract void sendBuffer(io.vertx.core.buffer.Buffer, io.vertx.core.Handler);
public io.vertx.core.Future sendBuffer(io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Promise v2;
io.vertx.core.Future v3;
io.vertx.ext.web.client.HttpRequest v0;
v0 := @this: io.vertx.ext.web.client.HttpRequest;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.ext.web.client.HttpRequest: void sendBuffer(io.vertx.core.buffer.Buffer,io.vertx.core.Handler)>(v1, v2);
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
public abstract void sendJsonObject(io.vertx.core.json.JsonObject, io.vertx.core.Handler);
public io.vertx.core.Future sendJsonObject(io.vertx.core.json.JsonObject)
{
io.vertx.core.Promise v2;
io.vertx.core.json.JsonObject v1;
io.vertx.core.Future v3;
io.vertx.ext.web.client.HttpRequest v0;
v0 := @this: io.vertx.ext.web.client.HttpRequest;
v1 := @parameter0: io.vertx.core.json.JsonObject;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.ext.web.client.HttpRequest: void sendJsonObject(io.vertx.core.json.JsonObject,io.vertx.core.Handler)>(v1, v2);
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
public abstract void sendJson(java.lang.Object, io.vertx.core.Handler);
public io.vertx.core.Future sendJson(java.lang.Object)
{
io.vertx.core.Promise v2;
java.lang.Object v1;
io.vertx.core.Future v3;
io.vertx.ext.web.client.HttpRequest v0;
v0 := @this: io.vertx.ext.web.client.HttpRequest;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.ext.web.client.HttpRequest: void sendJson(java.lang.Object,io.vertx.core.Handler)>(v1, v2);
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
public abstract void sendForm(io.vertx.core.MultiMap, io.vertx.core.Handler);
public io.vertx.core.Future sendForm(io.vertx.core.MultiMap)
{
io.vertx.core.Promise v2;
io.vertx.core.MultiMap v1;
io.vertx.core.Future v3;
io.vertx.ext.web.client.HttpRequest v0;
v0 := @this: io.vertx.ext.web.client.HttpRequest;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.ext.web.client.HttpRequest: void sendForm(io.vertx.core.MultiMap,io.vertx.core.Handler)>(v1, v2);
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
public abstract void sendForm(io.vertx.core.MultiMap, java.lang.String, io.vertx.core.Handler);
public io.vertx.core.Future sendForm(io.vertx.core.MultiMap, java.lang.String)
{
io.vertx.core.Promise v3;
io.vertx.core.MultiMap v1;
java.lang.String v2;
io.vertx.core.Future v4;
io.vertx.ext.web.client.HttpRequest v0;
v0 := @this: io.vertx.ext.web.client.HttpRequest;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.ext.web.client.HttpRequest: void sendForm(io.vertx.core.MultiMap,java.lang.String,io.vertx.core.Handler)>(v1, v2, v3);
v4 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v4;
}
public abstract void sendMultipartForm(io.vertx.ext.web.multipart.MultipartForm, io.vertx.core.Handler);
public io.vertx.core.Future sendMultipartForm(io.vertx.ext.web.multipart.MultipartForm)
{
io.vertx.ext.web.multipart.MultipartForm v1;
io.vertx.core.Promise v2;
io.vertx.core.Future v3;
io.vertx.ext.web.client.HttpRequest v0;
v0 := @this: io.vertx.ext.web.client.HttpRequest;
v1 := @parameter0: io.vertx.ext.web.multipart.MultipartForm;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.ext.web.client.HttpRequest: void sendMultipartForm(io.vertx.ext.web.multipart.MultipartForm,io.vertx.core.Handler)>(v1, v2);
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
public abstract void send(io.vertx.core.Handler);
public io.vertx.core.Future send()
{
io.vertx.core.Future v2;
io.vertx.core.Promise v1;
io.vertx.ext.web.client.HttpRequest v0;
v0 := @this: io.vertx.ext.web.client.HttpRequest;
v1 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.ext.web.client.HttpRequest: void send(io.vertx.core.Handler)>(v1);
v2 = interfaceinvoke v1.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v2;
}
}