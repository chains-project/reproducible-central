public class io.vertx.ext.web.client.impl.Oauth2WebClientAware extends io.vertx.ext.web.client.impl.WebClientBase implements io.vertx.ext.web.client.OAuth2WebClient
{
private final io.vertx.ext.auth.oauth2.OAuth2Auth oauth2Auth;
private final io.vertx.ext.web.client.OAuth2WebClientOptions option;
private io.vertx.ext.auth.authentication.Credentials credentials;
private io.vertx.ext.auth.User user;
public void <init>(io.vertx.ext.web.client.WebClient, io.vertx.ext.auth.oauth2.OAuth2Auth, io.vertx.ext.web.client.OAuth2WebClientOptions)
{
io.vertx.ext.web.client.impl.Oauth2WebClientAware v0;
io.vertx.ext.web.client.WebClient v1;
io.vertx.ext.web.client.OAuth2WebClientOptions v3;
io.vertx.ext.web.client.impl.OAuth2AwareInterceptor v6;
io.vertx.ext.auth.oauth2.OAuth2Auth v2;
java.lang.IllegalArgumentException v4, v5;
v0 := @this: io.vertx.ext.web.client.impl.Oauth2WebClientAware;
v1 := @parameter0: io.vertx.ext.web.client.WebClient;
v2 := @parameter1: io.vertx.ext.auth.oauth2.OAuth2Auth;
v3 := @parameter2: io.vertx.ext.web.client.OAuth2WebClientOptions;
specialinvoke v0.<io.vertx.ext.web.client.impl.WebClientBase: void <init>(io.vertx.ext.web.client.impl.WebClientBase)>(v1);
if v2 != null goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("OAuth2Auth cannot be null");
throw v4;
label1:
v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.auth.oauth2.OAuth2Auth oauth2Auth> = v2;
if v3 != null goto label2;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Options cannot be null");
throw v5;
label2:
v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.web.client.OAuth2WebClientOptions option> = v3;
v6 = new io.vertx.ext.web.client.impl.OAuth2AwareInterceptor;
specialinvoke v6.<io.vertx.ext.web.client.impl.OAuth2AwareInterceptor: void <init>(io.vertx.ext.web.client.impl.Oauth2WebClientAware)>(v0);
virtualinvoke v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.web.client.impl.WebClientInternal addInterceptor(io.vertx.core.Handler)>(v6);
return;
}
public io.vertx.ext.web.client.OAuth2WebClient withCredentials(io.vertx.ext.auth.authentication.Credentials)
{
io.vertx.ext.web.client.impl.Oauth2WebClientAware v0;
io.vertx.ext.auth.authentication.Credentials v1, v3, v4;
java.lang.NullPointerException v2;
boolean v5;
v0 := @this: io.vertx.ext.web.client.impl.Oauth2WebClientAware;
v1 := @parameter0: io.vertx.ext.auth.authentication.Credentials;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Token Configuration passed to WebClientOauth2Aware can not be null");
throw v2;
label1:
v3 = v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.auth.authentication.Credentials credentials>;
if v3 == null goto label2;
v4 = v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.auth.authentication.Credentials credentials>;
v5 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v5 != 0 goto label2;
v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.auth.User user> = null;
label2:
v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.auth.authentication.Credentials credentials> = v1;
return v0;
}
io.vertx.ext.auth.authentication.Credentials getCredentials()
{
io.vertx.ext.web.client.impl.Oauth2WebClientAware v0;
io.vertx.ext.auth.authentication.Credentials v1;
v0 := @this: io.vertx.ext.web.client.impl.Oauth2WebClientAware;
v1 = v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.auth.authentication.Credentials credentials>;
return v1;
}
io.vertx.ext.auth.User getUser()
{
io.vertx.ext.web.client.impl.Oauth2WebClientAware v0;
io.vertx.ext.auth.User v1;
v0 := @this: io.vertx.ext.web.client.impl.Oauth2WebClientAware;
v1 = v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.auth.User user>;
return v1;
}
void setUser(io.vertx.ext.auth.User)
{
io.vertx.ext.web.client.impl.Oauth2WebClientAware v0;
io.vertx.ext.auth.User v1;
v0 := @this: io.vertx.ext.web.client.impl.Oauth2WebClientAware;
v1 := @parameter0: io.vertx.ext.auth.User;
v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.auth.User user> = v1;
return;
}
io.vertx.ext.auth.oauth2.OAuth2Auth oauth2Auth()
{
io.vertx.ext.web.client.impl.Oauth2WebClientAware v0;
io.vertx.ext.auth.oauth2.OAuth2Auth v1;
v0 := @this: io.vertx.ext.web.client.impl.Oauth2WebClientAware;
v1 = v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.auth.oauth2.OAuth2Auth oauth2Auth>;
return v1;
}
public int getLeeway()
{
int v2;
io.vertx.ext.web.client.OAuth2WebClientOptions v1;
io.vertx.ext.web.client.impl.Oauth2WebClientAware v0;
v0 := @this: io.vertx.ext.web.client.impl.Oauth2WebClientAware;
v1 = v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.web.client.OAuth2WebClientOptions option>;
v2 = virtualinvoke v1.<io.vertx.ext.web.client.OAuth2WebClientOptions: int getLeeway()>();
return v2;
}
public boolean isRenewTokenOnForbidden()
{
io.vertx.ext.web.client.OAuth2WebClientOptions v1;
io.vertx.ext.web.client.impl.Oauth2WebClientAware v0;
boolean v2;
v0 := @this: io.vertx.ext.web.client.impl.Oauth2WebClientAware;
v1 = v0.<io.vertx.ext.web.client.impl.Oauth2WebClientAware: io.vertx.ext.web.client.OAuth2WebClientOptions option>;
v2 = virtualinvoke v1.<io.vertx.ext.web.client.OAuth2WebClientOptions: boolean isRenewTokenOnForbidden()>();
return v2;
}
}