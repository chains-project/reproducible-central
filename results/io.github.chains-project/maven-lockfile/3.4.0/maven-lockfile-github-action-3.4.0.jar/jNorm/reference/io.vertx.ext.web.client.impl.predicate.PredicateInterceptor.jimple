public class io.vertx.ext.web.client.impl.predicate.PredicateInterceptor extends java.lang.Object implements io.vertx.core.Handler
{
public void <init>()
{
io.vertx.ext.web.client.impl.predicate.PredicateInterceptor v0;
v0 := @this: io.vertx.ext.web.client.impl.predicate.PredicateInterceptor;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void handle(io.vertx.ext.web.client.impl.HttpContext)
{
io.vertx.ext.web.client.predicate.ErrorConverter v14;
io.vertx.ext.web.client.impl.ClientPhase v2, v3;
io.vertx.core.http.HttpClientResponse v5;
boolean v13, v15, v8;
java.util.Iterator v7;
io.vertx.ext.web.client.impl.predicate.PredicateInterceptor v0;
java.lang.Exception v12;
io.vertx.ext.web.client.HttpRequest v4;
io.vertx.ext.web.client.impl.HttpResponseImpl v10, v16;
java.util.List v6;
java.lang.Object v11, v9;
io.vertx.core.Handler v17;
io.vertx.ext.web.client.impl.HttpContext v1;
v0 := @this: io.vertx.ext.web.client.impl.predicate.PredicateInterceptor;
v1 := @parameter0: io.vertx.ext.web.client.impl.HttpContext;
v2 = virtualinvoke v1.<io.vertx.ext.web.client.impl.HttpContext: io.vertx.ext.web.client.impl.ClientPhase phase()>();
v3 = <io.vertx.ext.web.client.impl.ClientPhase: io.vertx.ext.web.client.impl.ClientPhase RECEIVE_RESPONSE>;
if v2 != v3 goto label8;
v4 = virtualinvoke v1.<io.vertx.ext.web.client.impl.HttpContext: io.vertx.ext.web.client.HttpRequest request()>();
v5 = virtualinvoke v1.<io.vertx.ext.web.client.impl.HttpContext: io.vertx.core.http.HttpClientResponse clientResponse()>();
v6 = virtualinvoke v4.<io.vertx.ext.web.client.impl.HttpRequestImpl: java.util.List expectations()>();
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
label1:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label8;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
label2:
v10 = specialinvoke v0.<io.vertx.ext.web.client.impl.predicate.PredicateInterceptor: io.vertx.ext.web.client.impl.HttpResponseImpl responseCopy(io.vertx.core.http.HttpClientResponse,io.vertx.ext.web.client.impl.HttpContext,java.lang.Object)>(v5, v1, null);
v11 = interfaceinvoke v9.<io.vertx.ext.web.client.predicate.ResponsePredicate: java.lang.Object apply(java.lang.Object)>(v10);
label3:
goto label5;
label4:
v12 := @caughtexception;
virtualinvoke v1.<io.vertx.ext.web.client.impl.HttpContext: boolean fail(java.lang.Throwable)>(v12);
return;
label5:
v13 = virtualinvoke v11.<io.vertx.ext.web.client.impl.predicate.ResponsePredicateResultImpl: boolean succeeded()>();
if v13 != 0 goto label1;
v14 = interfaceinvoke v9.<io.vertx.ext.web.client.predicate.ResponsePredicate: io.vertx.ext.web.client.predicate.ErrorConverter errorConverter()>();
v15 = interfaceinvoke v14.<io.vertx.ext.web.client.predicate.ErrorConverter: boolean requiresBody()>();
if v15 != 0 goto label6;
v16 = specialinvoke v0.<io.vertx.ext.web.client.impl.predicate.PredicateInterceptor: io.vertx.ext.web.client.impl.HttpResponseImpl responseCopy(io.vertx.core.http.HttpClientResponse,io.vertx.ext.web.client.impl.HttpContext,java.lang.Object)>(v5, v1, null);
virtualinvoke v11.<io.vertx.ext.web.client.impl.predicate.ResponsePredicateResultImpl: io.vertx.ext.web.client.impl.predicate.ResponsePredicateResultImpl setHttpResponse(io.vertx.ext.web.client.HttpResponse)>(v16);
specialinvoke v0.<io.vertx.ext.web.client.impl.predicate.PredicateInterceptor: void failOnPredicate(io.vertx.ext.web.client.impl.HttpContext,io.vertx.ext.web.client.predicate.ErrorConverter,io.vertx.ext.web.client.impl.predicate.ResponsePredicateResultImpl)>(v1, v14, v11);
goto label7;
label6:
v17 = staticinvoke <io.vertx.ext.web.client.impl.predicate.PredicateInterceptor$lambda_handle_0__852: io.vertx.core.Handler bootstrap$(io.vertx.ext.web.client.impl.predicate.PredicateInterceptor,io.vertx.ext.web.client.impl.predicate.ResponsePredicateResultImpl,io.vertx.core.http.HttpClientResponse,io.vertx.ext.web.client.impl.HttpContext,io.vertx.ext.web.client.predicate.ErrorConverter)>(v0, v11, v5, v1, v14);
interfaceinvoke v5.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse bodyHandler(io.vertx.core.Handler)>(v17);
interfaceinvoke v5.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse resume()>();
label7:
return;
label8:
virtualinvoke v1.<io.vertx.ext.web.client.impl.HttpContext: void next()>();
return;
catch java.lang.Exception from label2 to label3 with label4;
}
private io.vertx.ext.web.client.impl.HttpResponseImpl responseCopy(io.vertx.core.http.HttpClientResponse, io.vertx.ext.web.client.impl.HttpContext, java.lang.Object)
{
io.vertx.ext.web.client.impl.predicate.PredicateInterceptor v0;
io.vertx.core.MultiMap v10, v8, v9;
java.util.ArrayList v11;
io.vertx.ext.web.client.impl.HttpResponseImpl v4;
io.vertx.core.http.HttpClientResponse v1;
java.util.List v12, v13;
io.vertx.core.http.HttpVersion v5;
int v6;
java.lang.Object v3;
java.lang.String v7;
io.vertx.ext.web.client.impl.HttpContext v2;
v0 := @this: io.vertx.ext.web.client.impl.predicate.PredicateInterceptor;
v1 := @parameter0: io.vertx.core.http.HttpClientResponse;
v2 := @parameter1: io.vertx.ext.web.client.impl.HttpContext;
v3 := @parameter2: java.lang.Object;
v4 = new io.vertx.ext.web.client.impl.HttpResponseImpl;
v5 = interfaceinvoke v1.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpVersion version()>();
v6 = interfaceinvoke v1.<io.vertx.core.http.HttpClientResponse: int statusCode()>();
v7 = interfaceinvoke v1.<io.vertx.core.http.HttpClientResponse: java.lang.String statusMessage()>();
v8 = staticinvoke <io.vertx.core.MultiMap: io.vertx.core.MultiMap caseInsensitiveMultiMap()>();
v9 = interfaceinvoke v1.<io.vertx.core.http.HttpClientResponse: io.vertx.core.MultiMap headers()>();
v10 = interfaceinvoke v8.<io.vertx.core.MultiMap: io.vertx.core.MultiMap addAll(io.vertx.core.MultiMap)>(v9);
v11 = new java.util.ArrayList;
v12 = interfaceinvoke v1.<io.vertx.core.http.HttpClientResponse: java.util.List cookies()>();
specialinvoke v11.<java.util.ArrayList: void <init>(java.util.Collection)>(v12);
v13 = virtualinvoke v2.<io.vertx.ext.web.client.impl.HttpContext: java.util.List getRedirectedLocations()>();
specialinvoke v4.<io.vertx.ext.web.client.impl.HttpResponseImpl: void <init>(io.vertx.core.http.HttpVersion,int,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.MultiMap,java.util.List,java.lang.Object,java.util.List)>(v5, v6, v7, v10, null, v11, v3, v13);
return v4;
}
private void failOnPredicate(io.vertx.ext.web.client.impl.HttpContext, io.vertx.ext.web.client.predicate.ErrorConverter, io.vertx.ext.web.client.impl.predicate.ResponsePredicateResultImpl)
{
java.lang.Throwable v4;
io.vertx.ext.web.client.impl.predicate.ResponsePredicateResultImpl v3;
io.vertx.ext.web.client.predicate.ErrorConverter v2;
io.vertx.core.impl.NoStackTraceThrowable v6;
io.vertx.ext.web.client.impl.predicate.PredicateInterceptor v0;
java.lang.Exception v5;
io.vertx.ext.web.client.impl.HttpContext v1;
v0 := @this: io.vertx.ext.web.client.impl.predicate.PredicateInterceptor;
v1 := @parameter0: io.vertx.ext.web.client.impl.HttpContext;
v2 := @parameter1: io.vertx.ext.web.client.predicate.ErrorConverter;
v3 := @parameter2: io.vertx.ext.web.client.impl.predicate.ResponsePredicateResultImpl;
label1:
v4 = interfaceinvoke v2.<io.vertx.ext.web.client.predicate.ErrorConverter: java.lang.Throwable apply(io.vertx.ext.web.client.predicate.ResponsePredicateResult)>(v3);
label2:
goto label4;
label3:
v5 := @caughtexception;
v4 = v5;
label4:
if v4 == null goto label5;
virtualinvoke v1.<io.vertx.ext.web.client.impl.HttpContext: boolean fail(java.lang.Throwable)>(v4);
goto label6;
label5:
v6 = new io.vertx.core.impl.NoStackTraceThrowable;
specialinvoke v6.<io.vertx.core.impl.NoStackTraceThrowable: void <init>(java.lang.String)>("Invalid HTTP response");
virtualinvoke v1.<io.vertx.ext.web.client.impl.HttpContext: boolean fail(java.lang.Throwable)>(v6);
label6:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
}