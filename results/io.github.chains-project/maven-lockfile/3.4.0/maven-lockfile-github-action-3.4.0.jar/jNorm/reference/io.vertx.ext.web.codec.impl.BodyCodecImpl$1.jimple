class io.vertx.ext.web.codec.impl.BodyCodecImpl$1 extends java.lang.Object implements io.vertx.ext.web.codec.spi.BodyStream
{
final io.vertx.core.buffer.Buffer buffer;
final io.vertx.core.Promise state;
final io.vertx.ext.web.codec.impl.BodyCodecImpl this$0;
void <init>(io.vertx.ext.web.codec.impl.BodyCodecImpl)
{
io.vertx.ext.web.codec.impl.BodyCodecImpl$1 v0;
io.vertx.core.buffer.Buffer v2;
io.vertx.core.Promise v3;
io.vertx.ext.web.codec.impl.BodyCodecImpl v1;
v0 := @this: io.vertx.ext.web.codec.impl.BodyCodecImpl$1;
v1 := @parameter0: io.vertx.ext.web.codec.impl.BodyCodecImpl;
v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.ext.web.codec.impl.BodyCodecImpl this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer()>();
v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.core.buffer.Buffer buffer> = v2;
v3 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.core.Promise state> = v3;
return;
}
public void handle(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.ext.web.codec.impl.BodyCodecImpl$1 v0;
io.vertx.core.Promise v2;
v0 := @this: io.vertx.ext.web.codec.impl.BodyCodecImpl$1;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.core.Promise state>;
interfaceinvoke v2.<io.vertx.core.Promise: boolean tryFail(java.lang.Throwable)>(v1);
return;
}
public io.vertx.core.Future result()
{
io.vertx.ext.web.codec.impl.BodyCodecImpl$1 v0;
io.vertx.core.Future v2;
io.vertx.core.Promise v1;
v0 := @this: io.vertx.ext.web.codec.impl.BodyCodecImpl$1;
v1 = v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.core.Promise state>;
v2 = interfaceinvoke v1.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v2;
}
public io.vertx.core.streams.WriteStream exceptionHandler(io.vertx.core.Handler)
{
io.vertx.ext.web.codec.impl.BodyCodecImpl$1 v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.ext.web.codec.impl.BodyCodecImpl$1;
v1 := @parameter0: io.vertx.core.Handler;
return v0;
}
public void write(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.ext.web.codec.impl.BodyCodecImpl$1 v0;
io.vertx.core.buffer.Buffer v1, v3;
io.vertx.core.Handler v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.ext.web.codec.impl.BodyCodecImpl$1;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.core.buffer.Buffer buffer>;
interfaceinvoke v3.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>(v1);
v4 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>();
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(v4);
return;
}
public io.vertx.core.Future write(io.vertx.core.buffer.Buffer)
{
io.vertx.ext.web.codec.impl.BodyCodecImpl$1 v0;
io.vertx.core.buffer.Buffer v1, v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.ext.web.codec.impl.BodyCodecImpl$1;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.core.buffer.Buffer buffer>;
interfaceinvoke v2.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>(v1);
v3 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>();
return v3;
}
public void end(io.vertx.core.Handler)
{
java.lang.Throwable v11;
io.vertx.ext.web.codec.impl.BodyCodecImpl$1 v0;
io.vertx.ext.web.codec.impl.BodyCodecImpl v7;
java.util.function.Function v8;
int v6;
boolean v4;
io.vertx.core.Promise v12, v14, v2;
io.vertx.core.Future v13, v15, v3;
io.vertx.core.buffer.Buffer v5, v9;
java.lang.Object v10;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.ext.web.codec.impl.BodyCodecImpl$1;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.core.Promise state>;
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
v4 = interfaceinvoke v3.<io.vertx.core.Future: boolean isComplete()>();
if v4 != 0 goto label7;
v5 = v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.core.buffer.Buffer buffer>;
v6 = interfaceinvoke v5.<io.vertx.core.buffer.Buffer: int length()>();
if v6 <= 0 goto label5;
label1:
v7 = v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.ext.web.codec.impl.BodyCodecImpl this$0>;
v8 = v7.<io.vertx.ext.web.codec.impl.BodyCodecImpl: java.util.function.Function decoder>;
v9 = v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.core.buffer.Buffer buffer>;
v10 = interfaceinvoke v8.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v9);
label2:
goto label6;
label3:
v11 := @caughtexception;
v12 = v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.core.Promise state>;
interfaceinvoke v12.<io.vertx.core.Promise: void fail(java.lang.Throwable)>(v11);
if v1 == null goto label4;
v13 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v11);
interfaceinvoke v1.<io.vertx.core.Handler: void handle(java.lang.Object)>(v13);
label4:
return;
label5:
v10 = null;
label6:
v14 = v0.<io.vertx.ext.web.codec.impl.BodyCodecImpl$1: io.vertx.core.Promise state>;
interfaceinvoke v14.<io.vertx.core.Promise: void complete(java.lang.Object)>(v10);
if v1 == null goto label7;
v15 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>();
interfaceinvoke v1.<io.vertx.core.Handler: void handle(java.lang.Object)>(v15);
label7:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int)
{
int v1;
io.vertx.ext.web.codec.impl.BodyCodecImpl$1 v0;
v0 := @this: io.vertx.ext.web.codec.impl.BodyCodecImpl$1;
v1 := @parameter0: int;
return v0;
}
public boolean writeQueueFull()
{
io.vertx.ext.web.codec.impl.BodyCodecImpl$1 v0;
v0 := @this: io.vertx.ext.web.codec.impl.BodyCodecImpl$1;
return 0;
}
public io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)
{
io.vertx.ext.web.codec.impl.BodyCodecImpl$1 v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.ext.web.codec.impl.BodyCodecImpl$1;
v1 := @parameter0: io.vertx.core.Handler;
return v0;
}
}