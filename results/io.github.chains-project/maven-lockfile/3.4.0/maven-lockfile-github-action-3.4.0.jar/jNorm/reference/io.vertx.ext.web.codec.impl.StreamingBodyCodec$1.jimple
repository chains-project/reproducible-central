class io.vertx.ext.web.codec.impl.StreamingBodyCodec$1 extends java.lang.Object implements io.vertx.ext.web.codec.spi.BodyStream
{
final io.vertx.core.Promise promise;
final io.vertx.ext.web.codec.impl.StreamingBodyCodec this$0;
void <init>(io.vertx.ext.web.codec.impl.StreamingBodyCodec)
{
io.vertx.ext.web.codec.impl.StreamingBodyCodec$1 v0;
io.vertx.ext.web.codec.impl.StreamingBodyCodec v1;
io.vertx.core.Promise v2;
v0 := @this: io.vertx.ext.web.codec.impl.StreamingBodyCodec$1;
v1 := @parameter0: io.vertx.ext.web.codec.impl.StreamingBodyCodec;
v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: io.vertx.ext.web.codec.impl.StreamingBodyCodec this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: io.vertx.core.Promise promise> = v2;
return;
}
public io.vertx.core.Future result()
{
io.vertx.ext.web.codec.impl.StreamingBodyCodec$1 v0;
io.vertx.core.Future v2;
io.vertx.core.Promise v1;
v0 := @this: io.vertx.ext.web.codec.impl.StreamingBodyCodec$1;
v1 = v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: io.vertx.core.Promise promise>;
v2 = interfaceinvoke v1.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v2;
}
public void handle(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.ext.web.codec.impl.StreamingBodyCodec$1 v0;
io.vertx.core.Promise v2;
v0 := @this: io.vertx.ext.web.codec.impl.StreamingBodyCodec$1;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: io.vertx.core.Promise promise>;
interfaceinvoke v2.<io.vertx.core.Promise: boolean tryFail(java.lang.Throwable)>(v1);
return;
}
public io.vertx.core.streams.WriteStream exceptionHandler(io.vertx.core.Handler)
{
io.vertx.ext.web.codec.impl.StreamingBodyCodec v2;
io.vertx.core.streams.WriteStream v3;
io.vertx.ext.web.codec.impl.StreamingBodyCodec$1 v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.ext.web.codec.impl.StreamingBodyCodec$1;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: io.vertx.ext.web.codec.impl.StreamingBodyCodec this$0>;
v3 = v2.<io.vertx.ext.web.codec.impl.StreamingBodyCodec: io.vertx.core.streams.WriteStream stream>;
interfaceinvoke v3.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public void write(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.ext.web.codec.impl.StreamingBodyCodec v3;
io.vertx.core.streams.WriteStream v4;
io.vertx.ext.web.codec.impl.StreamingBodyCodec$1 v0;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.ext.web.codec.impl.StreamingBodyCodec$1;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: io.vertx.ext.web.codec.impl.StreamingBodyCodec this$0>;
v4 = v3.<io.vertx.ext.web.codec.impl.StreamingBodyCodec: io.vertx.core.streams.WriteStream stream>;
interfaceinvoke v4.<io.vertx.core.streams.WriteStream: void write(java.lang.Object,io.vertx.core.Handler)>(v1, v2);
return;
}
public io.vertx.core.Future write(io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Promise v2;
io.vertx.ext.web.codec.impl.StreamingBodyCodec$1 v0;
io.vertx.core.Future v3;
v0 := @this: io.vertx.ext.web.codec.impl.StreamingBodyCodec$1;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
virtualinvoke v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: void write(io.vertx.core.buffer.Buffer,io.vertx.core.Handler)>(v1, v2);
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
public void end(io.vertx.core.Handler)
{
io.vertx.ext.web.codec.impl.StreamingBodyCodec v2, v4;
io.vertx.core.Promise v7;
io.vertx.core.Future v8;
io.vertx.core.streams.WriteStream v5;
io.vertx.ext.web.codec.impl.StreamingBodyCodec$1 v0;
io.vertx.core.Handler v1, v6;
boolean v3;
v0 := @this: io.vertx.ext.web.codec.impl.StreamingBodyCodec$1;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: io.vertx.ext.web.codec.impl.StreamingBodyCodec this$0>;
v3 = v2.<io.vertx.ext.web.codec.impl.StreamingBodyCodec: boolean close>;
if v3 == 0 goto label1;
v4 = v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: io.vertx.ext.web.codec.impl.StreamingBodyCodec this$0>;
v5 = v4.<io.vertx.ext.web.codec.impl.StreamingBodyCodec: io.vertx.core.streams.WriteStream stream>;
v6 = staticinvoke <io.vertx.ext.web.codec.impl.StreamingBodyCodec$1$lambda_end_0__862: io.vertx.core.Handler bootstrap$(io.vertx.ext.web.codec.impl.StreamingBodyCodec$1,io.vertx.core.Handler)>(v0, v1);
interfaceinvoke v5.<io.vertx.core.streams.WriteStream: void end(io.vertx.core.Handler)>(v6);
goto label2;
label1:
v7 = v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: io.vertx.core.Promise promise>;
interfaceinvoke v7.<io.vertx.core.Promise: boolean tryComplete()>();
if v1 == null goto label2;
v8 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>();
interfaceinvoke v1.<io.vertx.core.Handler: void handle(java.lang.Object)>(v8);
label2:
return;
}
public io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int)
{
io.vertx.ext.web.codec.impl.StreamingBodyCodec v2;
io.vertx.core.streams.WriteStream v3;
int v1;
io.vertx.ext.web.codec.impl.StreamingBodyCodec$1 v0;
v0 := @this: io.vertx.ext.web.codec.impl.StreamingBodyCodec$1;
v1 := @parameter0: int;
v2 = v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: io.vertx.ext.web.codec.impl.StreamingBodyCodec this$0>;
v3 = v2.<io.vertx.ext.web.codec.impl.StreamingBodyCodec: io.vertx.core.streams.WriteStream stream>;
interfaceinvoke v3.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int)>(v1);
return v0;
}
public boolean writeQueueFull()
{
io.vertx.ext.web.codec.impl.StreamingBodyCodec v1;
io.vertx.core.streams.WriteStream v2;
io.vertx.ext.web.codec.impl.StreamingBodyCodec$1 v0;
boolean v3;
v0 := @this: io.vertx.ext.web.codec.impl.StreamingBodyCodec$1;
v1 = v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: io.vertx.ext.web.codec.impl.StreamingBodyCodec this$0>;
v2 = v1.<io.vertx.ext.web.codec.impl.StreamingBodyCodec: io.vertx.core.streams.WriteStream stream>;
v3 = interfaceinvoke v2.<io.vertx.core.streams.WriteStream: boolean writeQueueFull()>();
return v3;
}
public io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)
{
io.vertx.ext.web.codec.impl.StreamingBodyCodec v2;
io.vertx.core.streams.WriteStream v3;
io.vertx.ext.web.codec.impl.StreamingBodyCodec$1 v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.ext.web.codec.impl.StreamingBodyCodec$1;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.ext.web.codec.impl.StreamingBodyCodec$1: io.vertx.ext.web.codec.impl.StreamingBodyCodec this$0>;
v3 = v2.<io.vertx.ext.web.codec.impl.StreamingBodyCodec: io.vertx.core.streams.WriteStream stream>;
interfaceinvoke v3.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)>(v1);
return v0;
}
}