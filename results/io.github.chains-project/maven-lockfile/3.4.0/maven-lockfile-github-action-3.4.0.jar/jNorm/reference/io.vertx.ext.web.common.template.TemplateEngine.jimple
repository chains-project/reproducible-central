public interface  io.vertx.ext.web.common.template.TemplateEngine extends java.lang.Object
{
public void render(io.vertx.core.json.JsonObject, java.lang.String, io.vertx.core.Handler)
{
io.vertx.ext.web.common.template.TemplateEngine v0;
java.util.Map v4;
io.vertx.core.json.JsonObject v1;
java.lang.String v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.ext.web.common.template.TemplateEngine;
v1 := @parameter0: io.vertx.core.json.JsonObject;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>();
interfaceinvoke v0.<io.vertx.ext.web.common.template.TemplateEngine: void render(java.util.Map,java.lang.String,io.vertx.core.Handler)>(v4, v2, v3);
return;
}
public io.vertx.core.Future render(io.vertx.core.json.JsonObject, java.lang.String)
{
io.vertx.core.Promise v3;
io.vertx.ext.web.common.template.TemplateEngine v0;
io.vertx.core.json.JsonObject v1;
java.lang.String v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.ext.web.common.template.TemplateEngine;
v1 := @parameter0: io.vertx.core.json.JsonObject;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.ext.web.common.template.TemplateEngine: void render(io.vertx.core.json.JsonObject,java.lang.String,io.vertx.core.Handler)>(v1, v2, v3);
v4 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v4;
}
public abstract void render(java.util.Map, java.lang.String, io.vertx.core.Handler);
public io.vertx.core.Future render(java.util.Map, java.lang.String)
{
io.vertx.core.Promise v3;
io.vertx.ext.web.common.template.TemplateEngine v0;
java.util.Map v1;
java.lang.String v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.ext.web.common.template.TemplateEngine;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.ext.web.common.template.TemplateEngine: void render(java.util.Map,java.lang.String,io.vertx.core.Handler)>(v1, v2, v3);
v4 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v4;
}
public java.lang.Object unwrap() throws java.lang.ClassCastException
{
io.vertx.ext.web.common.template.TemplateEngine v0;
v0 := @this: io.vertx.ext.web.common.template.TemplateEngine;
return null;
}
public abstract void clearCache();
}