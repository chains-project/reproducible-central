public class io.vertx.mutiny.core.MultiMap extends java.lang.Object implements java.lang.Iterable
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.MultiMap delegate;
public void <init>(io.vertx.core.MultiMap)
{
io.vertx.core.MultiMap v1;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: io.vertx.core.MultiMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
java.lang.Object v1;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate> = null;
return;
}
public io.vertx.core.MultiMap getDelegate()
{
io.vertx.core.MultiMap v1;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.core.MultiMap v1;
java.lang.String v2;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.MultiMap v4, v5;
java.lang.Class v2, v3;
java.lang.Object v1;
io.vertx.mutiny.core.MultiMap v0;
boolean v6;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v5 = v1.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.MultiMap v1;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public java.util.Iterator iterator()
{
io.vertx.core.MultiMap v1;
java.util.Iterator v2;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.MultiMap: java.util.Iterator iterator()>();
return v2;
}
public io.smallrye.mutiny.Multi toMulti()
{
io.smallrye.mutiny.groups.MultiCreate v1;
io.smallrye.mutiny.Multi v2;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 = staticinvoke <io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiCreate createFrom()>();
v2 = virtualinvoke v1.<io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.Multi iterable(java.lang.Iterable)>(v0);
return v2;
}
public static io.vertx.mutiny.core.MultiMap caseInsensitiveMultiMap()
{
io.vertx.core.MultiMap v0;
io.vertx.mutiny.core.MultiMap v1;
v0 = staticinvoke <io.vertx.core.MultiMap: io.vertx.core.MultiMap caseInsensitiveMultiMap()>();
v1 = staticinvoke <io.vertx.mutiny.core.MultiMap: io.vertx.mutiny.core.MultiMap newInstance(io.vertx.core.MultiMap)>(v0);
return v1;
}
public java.lang.String get(java.lang.String)
{
io.vertx.core.MultiMap v2;
java.lang.String v1, v3;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.MultiMap: java.lang.String get(java.lang.String)>(v1);
return v3;
}
public java.util.List getAll(java.lang.String)
{
java.util.List v3;
io.vertx.core.MultiMap v2;
java.lang.String v1;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.String)>(v1);
return v3;
}
public boolean contains(java.lang.String)
{
io.vertx.core.MultiMap v2;
java.lang.String v1;
io.vertx.mutiny.core.MultiMap v0;
boolean v3;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.MultiMap: boolean contains(java.lang.String)>(v1);
return v3;
}
public boolean contains(java.lang.String, java.lang.String, boolean)
{
io.vertx.core.MultiMap v4;
java.lang.String v1, v2;
io.vertx.mutiny.core.MultiMap v0;
boolean v3, v5;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v5 = interfaceinvoke v4.<io.vertx.core.MultiMap: boolean contains(java.lang.String,java.lang.String,boolean)>(v1, v2, v3);
return v5;
}
public boolean isEmpty()
{
io.vertx.core.MultiMap v1;
io.vertx.mutiny.core.MultiMap v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.MultiMap: boolean isEmpty()>();
return v2;
}
public java.util.Set names()
{
io.vertx.core.MultiMap v1;
java.util.Set v2;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.MultiMap: java.util.Set names()>();
return v2;
}
public io.vertx.mutiny.core.MultiMap add(java.lang.String, java.lang.String)
{
io.vertx.core.MultiMap v3;
java.lang.String v1, v2;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.MultiMap addAll(io.vertx.mutiny.core.MultiMap)
{
io.vertx.core.MultiMap v2, v3;
io.vertx.mutiny.core.MultiMap v0, v1;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: io.vertx.mutiny.core.MultiMap;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v3 = virtualinvoke v1.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap getDelegate()>();
interfaceinvoke v2.<io.vertx.core.MultiMap: io.vertx.core.MultiMap addAll(io.vertx.core.MultiMap)>(v3);
return v0;
}
public io.vertx.mutiny.core.MultiMap set(java.lang.String, java.lang.String)
{
io.vertx.core.MultiMap v3;
java.lang.String v1, v2;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.MultiMap setAll(io.vertx.mutiny.core.MultiMap)
{
io.vertx.core.MultiMap v2, v3;
io.vertx.mutiny.core.MultiMap v0, v1;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: io.vertx.mutiny.core.MultiMap;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v3 = virtualinvoke v1.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap getDelegate()>();
interfaceinvoke v2.<io.vertx.core.MultiMap: io.vertx.core.MultiMap setAll(io.vertx.core.MultiMap)>(v3);
return v0;
}
public io.vertx.mutiny.core.MultiMap remove(java.lang.String)
{
io.vertx.core.MultiMap v2;
java.lang.String v1;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v2.<io.vertx.core.MultiMap: io.vertx.core.MultiMap remove(java.lang.String)>(v1);
return v0;
}
public io.vertx.mutiny.core.MultiMap clear()
{
io.vertx.core.MultiMap v1;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v1.<io.vertx.core.MultiMap: io.vertx.core.MultiMap clear()>();
return v0;
}
public int size()
{
int v2;
io.vertx.core.MultiMap v1;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.MultiMap: int size()>();
return v2;
}
public java.lang.String get(java.lang.CharSequence)
{
java.lang.CharSequence v1;
io.vertx.core.MultiMap v2;
java.lang.String v3;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.MultiMap: java.lang.String get(java.lang.CharSequence)>(v1);
return v3;
}
public java.util.List getAll(java.lang.CharSequence)
{
java.util.List v3;
java.lang.CharSequence v1;
io.vertx.core.MultiMap v2;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.CharSequence)>(v1);
return v3;
}
public void forEach(java.util.function.BiConsumer)
{
io.vertx.core.MultiMap v2;
java.util.function.BiConsumer v1;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.util.function.BiConsumer;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v2.<io.vertx.core.MultiMap: void forEach(java.util.function.BiConsumer)>(v1);
return;
}
public java.util.List entries()
{
io.vertx.core.MultiMap v1;
java.util.List v2;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.MultiMap: java.util.List entries()>();
return v2;
}
public boolean contains(java.lang.CharSequence)
{
java.lang.CharSequence v1;
io.vertx.core.MultiMap v2;
io.vertx.mutiny.core.MultiMap v0;
boolean v3;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence)>(v1);
return v3;
}
public boolean contains(java.lang.CharSequence, java.lang.CharSequence, boolean)
{
java.lang.CharSequence v1, v2;
io.vertx.core.MultiMap v4;
io.vertx.mutiny.core.MultiMap v0;
boolean v3, v5;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 := @parameter2: boolean;
v4 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
v5 = interfaceinvoke v4.<io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v1, v2, v3);
return v5;
}
public io.vertx.mutiny.core.MultiMap add(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
io.vertx.core.MultiMap v3;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.MultiMap add(java.lang.String, java.lang.Iterable)
{
io.vertx.core.MultiMap v3;
java.lang.String v1;
io.vertx.mutiny.core.MultiMap v0;
java.lang.Iterable v2;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.String,java.lang.Iterable)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.MultiMap add(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.CharSequence v1;
io.vertx.core.MultiMap v3;
io.vertx.mutiny.core.MultiMap v0;
java.lang.Iterable v2;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.MultiMap addAll(java.util.Map)
{
io.vertx.core.MultiMap v2;
io.vertx.mutiny.core.MultiMap v0;
java.util.Map v1;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.util.Map;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v2.<io.vertx.core.MultiMap: io.vertx.core.MultiMap addAll(java.util.Map)>(v1);
return v0;
}
public io.vertx.mutiny.core.MultiMap set(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
io.vertx.core.MultiMap v3;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.MultiMap set(java.lang.String, java.lang.Iterable)
{
io.vertx.core.MultiMap v3;
java.lang.String v1;
io.vertx.mutiny.core.MultiMap v0;
java.lang.Iterable v2;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.String,java.lang.Iterable)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.MultiMap set(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.CharSequence v1;
io.vertx.core.MultiMap v3;
io.vertx.mutiny.core.MultiMap v0;
java.lang.Iterable v2;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.MultiMap setAll(java.util.Map)
{
io.vertx.core.MultiMap v2;
io.vertx.mutiny.core.MultiMap v0;
java.util.Map v1;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.util.Map;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v2.<io.vertx.core.MultiMap: io.vertx.core.MultiMap setAll(java.util.Map)>(v1);
return v0;
}
public io.vertx.mutiny.core.MultiMap remove(java.lang.CharSequence)
{
io.vertx.core.MultiMap v2;
java.lang.CharSequence v1;
io.vertx.mutiny.core.MultiMap v0;
v0 := @this: io.vertx.mutiny.core.MultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.mutiny.core.MultiMap: io.vertx.core.MultiMap delegate>;
interfaceinvoke v2.<io.vertx.core.MultiMap: io.vertx.core.MultiMap remove(java.lang.CharSequence)>(v1);
return v0;
}
public static io.vertx.mutiny.core.MultiMap newInstance(io.vertx.core.MultiMap)
{
io.vertx.core.MultiMap v0;
io.vertx.mutiny.core.MultiMap v1;
v0 := @parameter0: io.vertx.core.MultiMap;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.MultiMap;
specialinvoke v1.<io.vertx.mutiny.core.MultiMap: void <init>(io.vertx.core.MultiMap)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
java.util.function.Function v1, v2;
io.smallrye.mutiny.vertx.TypeArg v0;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.MultiMap$lambda_static_0__1658: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.MultiMap$getDelegate__1659: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.MultiMap: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
return;
}
}