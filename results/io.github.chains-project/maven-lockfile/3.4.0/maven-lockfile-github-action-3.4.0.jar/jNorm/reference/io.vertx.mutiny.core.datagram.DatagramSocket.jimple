public class io.vertx.mutiny.core.datagram.DatagramSocket extends java.lang.Object implements io.vertx.mutiny.core.streams.ReadStream, io.vertx.mutiny.core.metrics.Measured
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.datagram.DatagramSocket delegate;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_1;
private io.vertx.mutiny.core.net.SocketAddress cached_0;
private io.smallrye.mutiny.Multi multi;
public void <init>(io.vertx.core.datagram.DatagramSocket)
{
io.vertx.core.datagram.DatagramSocket v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: io.vertx.core.datagram.DatagramSocket;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
java.lang.Object v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate> = null;
return;
}
public io.vertx.core.datagram.DatagramSocket getDelegate()
{
io.vertx.core.datagram.DatagramSocket v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
return v1;
}
public java.lang.String toString()
{
java.lang.String v2;
io.vertx.core.datagram.DatagramSocket v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.datagram.DatagramSocket v4, v5;
java.lang.Class v2, v3;
java.lang.Object v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
boolean v6;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
v5 = v1.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.datagram.DatagramSocket v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public boolean isMetricsEnabled()
{
io.vertx.core.datagram.DatagramSocket v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.datagram.DatagramSocket: boolean isMetricsEnabled()>();
return v2;
}
public io.vertx.mutiny.core.streams.Pipe pipe()
{
io.vertx.mutiny.core.streams.Pipe v4;
io.vertx.core.streams.Pipe v2;
io.vertx.core.datagram.DatagramSocket v1;
io.smallrye.mutiny.vertx.TypeArg v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.datagram.DatagramSocket: io.vertx.core.streams.Pipe pipe()>();
v3 = <io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0>;
v4 = staticinvoke <io.vertx.mutiny.core.streams.Pipe: io.vertx.mutiny.core.streams.Pipe newInstance(io.vertx.core.streams.Pipe,io.smallrye.mutiny.vertx.TypeArg)>(v2, v3);
return v4;
}
public io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_pipeTo_5__2075: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.datagram.DatagramSocket,io.vertx.mutiny.core.streams.WriteStream)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void pipeToAndAwait(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void pipeToAndForget(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.buffer.Buffer, int, java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
int v2;
java.lang.String v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_send_6__2076: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.datagram.DatagramSocket,io.vertx.mutiny.core.buffer.Buffer,int,java.lang.String)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void sendAndAwait(io.vertx.mutiny.core.buffer.Buffer, int, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v5;
io.vertx.mutiny.core.buffer.Buffer v1;
int v2;
java.lang.Object v6;
java.lang.String v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.buffer.Buffer,int,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.datagram.DatagramSocket sendAndForget(io.vertx.mutiny.core.buffer.Buffer, int, java.lang.String)
{
java.util.function.Consumer v6;
io.vertx.mutiny.core.buffer.Buffer v1;
int v2;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.buffer.Buffer,int,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.vertx.mutiny.core.streams.WriteStream sender(int, java.lang.String)
{
io.vertx.mutiny.core.streams.WriteStream v6;
io.vertx.core.datagram.DatagramSocket v3;
io.vertx.core.streams.WriteStream v4;
io.smallrye.mutiny.vertx.TypeArg v5;
int v1;
java.lang.String v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.datagram.DatagramSocket: io.vertx.core.streams.WriteStream sender(int,java.lang.String)>(v1, v2);
v5 = <io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_1>;
v6 = staticinvoke <io.vertx.mutiny.core.streams.WriteStream: io.vertx.mutiny.core.streams.WriteStream newInstance(io.vertx.core.streams.WriteStream,io.smallrye.mutiny.vertx.TypeArg)>(v4, v5);
return v6;
}
public io.smallrye.mutiny.Uni send(java.lang.String, int, java.lang.String)
{
java.util.function.Consumer v4;
int v2;
java.lang.String v1, v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_send_7__2077: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.datagram.DatagramSocket,java.lang.String,int,java.lang.String)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void sendAndAwait(java.lang.String, int, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v5;
int v2;
java.lang.Object v6;
java.lang.String v1, v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni send(java.lang.String,int,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.datagram.DatagramSocket sendAndForget(java.lang.String, int, java.lang.String)
{
java.util.function.Consumer v6;
int v2;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v1, v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni send(java.lang.String,int,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.smallrye.mutiny.Uni send(java.lang.String, java.lang.String, int, java.lang.String)
{
java.util.function.Consumer v5;
int v3;
java.lang.String v1, v2, v4;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v6;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.String;
v5 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_send_8__2078: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.datagram.DatagramSocket,java.lang.String,java.lang.String,int,java.lang.String)>(v0, v1, v2, v3, v4);
v6 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v5);
return v6;
}
public java.lang.Void sendAndAwait(java.lang.String, java.lang.String, int, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v6;
io.smallrye.mutiny.Uni v5;
int v3;
java.lang.Object v7;
java.lang.String v1, v2, v4;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni send(java.lang.String,java.lang.String,int,java.lang.String)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v7 = virtualinvoke v6.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v7;
}
public io.vertx.mutiny.core.datagram.DatagramSocket sendAndForget(java.lang.String, java.lang.String, int, java.lang.String)
{
io.smallrye.mutiny.Uni v5;
java.util.function.Consumer v7;
int v3;
io.smallrye.mutiny.groups.UniSubscribe v6;
java.lang.String v1, v2, v4;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni send(java.lang.String,java.lang.String,int,java.lang.String)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v7 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v6.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v7);
return v0;
}
public io.smallrye.mutiny.Uni close()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_close_9__2079: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.datagram.DatagramSocket)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void closeAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void closeAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.vertx.mutiny.core.net.SocketAddress localAddress()
{
io.vertx.core.datagram.DatagramSocket v3;
io.vertx.mutiny.core.net.SocketAddress v1, v2, v5;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.vertx.core.net.SocketAddress v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.mutiny.core.net.SocketAddress cached_0>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.mutiny.core.net.SocketAddress cached_0>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.datagram.DatagramSocket: io.vertx.core.net.SocketAddress localAddress()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v4);
v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.mutiny.core.net.SocketAddress cached_0> = v5;
return v5;
}
public io.smallrye.mutiny.Uni listenMulticastGroup(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_listenMulticastGroup_10__2080: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.datagram.DatagramSocket,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void listenMulticastGroupAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni listenMulticastGroup(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.datagram.DatagramSocket listenMulticastGroupAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni listenMulticastGroup(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni listenMulticastGroup(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v4;
java.lang.String v1, v2, v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_listenMulticastGroup_11__2081: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.datagram.DatagramSocket,java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void listenMulticastGroupAndAwait(java.lang.String, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v5;
java.lang.Object v6;
java.lang.String v1, v2, v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni listenMulticastGroup(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.datagram.DatagramSocket listenMulticastGroupAndForget(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v6;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v1, v2, v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni listenMulticastGroup(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.smallrye.mutiny.Uni unlistenMulticastGroup(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_unlistenMulticastGroup_12__2082: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.datagram.DatagramSocket,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void unlistenMulticastGroupAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni unlistenMulticastGroup(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.datagram.DatagramSocket unlistenMulticastGroupAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni unlistenMulticastGroup(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni unlistenMulticastGroup(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v4;
java.lang.String v1, v2, v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_unlistenMulticastGroup_13__2083: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.datagram.DatagramSocket,java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void unlistenMulticastGroupAndAwait(java.lang.String, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v5;
java.lang.Object v6;
java.lang.String v1, v2, v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni unlistenMulticastGroup(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.datagram.DatagramSocket unlistenMulticastGroupAndForget(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v6;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v1, v2, v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni unlistenMulticastGroup(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.smallrye.mutiny.Uni blockMulticastGroup(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
java.lang.String v1, v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_blockMulticastGroup_14__2084: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.datagram.DatagramSocket,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void blockMulticastGroupAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
java.lang.Object v5;
java.lang.String v1, v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni blockMulticastGroup(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.datagram.DatagramSocket blockMulticastGroupAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni blockMulticastGroup(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.smallrye.mutiny.Uni blockMulticastGroup(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v4;
java.lang.String v1, v2, v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_blockMulticastGroup_15__2085: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.datagram.DatagramSocket,java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void blockMulticastGroupAndAwait(java.lang.String, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v5;
java.lang.Object v6;
java.lang.String v1, v2, v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni blockMulticastGroup(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.datagram.DatagramSocket blockMulticastGroupAndForget(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v6;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v1, v2, v3;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni blockMulticastGroup(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.smallrye.mutiny.Uni listen(int, java.lang.String)
{
java.util.function.Consumer v3;
int v1;
java.lang.String v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_listen_18__2086: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.datagram.DatagramSocket,int,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public io.vertx.mutiny.core.datagram.DatagramSocket listenAndAwait(int, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
int v1;
java.lang.Object v5;
java.lang.String v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni listen(int,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.datagram.DatagramSocket listenAndForget(int, java.lang.String)
{
java.util.function.Consumer v5;
int v1;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Uni listen(int,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.vertx.mutiny.core.datagram.DatagramSocket pause()
{
io.vertx.core.datagram.DatagramSocket v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
interfaceinvoke v1.<io.vertx.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket pause()>();
return v0;
}
public io.vertx.mutiny.core.datagram.DatagramSocket resume()
{
io.vertx.core.datagram.DatagramSocket v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
interfaceinvoke v1.<io.vertx.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket resume()>();
return v0;
}
public io.vertx.mutiny.core.datagram.DatagramSocket fetch(long)
{
long v1;
io.vertx.core.datagram.DatagramSocket v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
interfaceinvoke v2.<io.vertx.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket fetch(long)>(v1);
return v0;
}
private io.vertx.mutiny.core.datagram.DatagramSocket __endHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.datagram.DatagramSocket v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
interfaceinvoke v2.<io.vertx.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket endHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.datagram.DatagramSocket endHandler(java.lang.Runnable)
{
io.vertx.core.Handler v2;
java.lang.Runnable v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0, v3;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_endHandler_19__2087: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.mutiny.core.datagram.DatagramSocket __endHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.datagram.DatagramSocket __handler(io.vertx.core.Handler)
{
io.vertx.core.datagram.DatagramSocket v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
java.util.function.Function v4;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda___handler_20__2088: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket handler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.datagram.DatagramSocket handler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0, v3;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.mutiny.core.datagram.DatagramSocket __handler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.datagram.DatagramSocket __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.datagram.DatagramSocket v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
interfaceinvoke v2.<io.vertx.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.datagram.DatagramSocket exceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.datagram.DatagramSocket v0, v3;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.mutiny.core.datagram.DatagramSocket __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public synchronized io.smallrye.mutiny.Multi toMulti()
{
io.vertx.core.datagram.DatagramSocket v3;
java.util.function.Function v2;
io.smallrye.mutiny.Multi v1, v4, v5;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Multi multi>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$newInstance__2089: java.util.function.Function bootstrap$()>();
v3 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.vertx.core.datagram.DatagramSocket delegate>;
v4 = staticinvoke <io.smallrye.mutiny.vertx.MultiHelper: io.smallrye.mutiny.Multi toMulti(io.vertx.core.streams.ReadStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Multi multi> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Multi multi>;
return v5;
}
public java.lang.Iterable toBlockingIterable()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
io.smallrye.mutiny.helpers.BlockingIterable v3;
io.smallrye.mutiny.Multi v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.helpers.BlockingIterable asIterable()>();
return v3;
}
public java.util.stream.Stream toBlockingStream()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
java.util.stream.Stream v3;
io.smallrye.mutiny.Multi v1;
io.vertx.mutiny.core.datagram.DatagramSocket v0;
v0 := @this: io.vertx.mutiny.core.datagram.DatagramSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: java.util.stream.Stream asStream()>();
return v3;
}
public static io.vertx.mutiny.core.datagram.DatagramSocket newInstance(io.vertx.core.datagram.DatagramSocket)
{
io.vertx.core.datagram.DatagramSocket v0;
io.vertx.mutiny.core.datagram.DatagramSocket v1;
v0 := @parameter0: io.vertx.core.datagram.DatagramSocket;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.datagram.DatagramSocket;
specialinvoke v1.<io.vertx.mutiny.core.datagram.DatagramSocket: void <init>(io.vertx.core.datagram.DatagramSocket)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
io.smallrye.mutiny.vertx.TypeArg v0, v3, v6;
java.util.function.Function v1, v2, v4, v5, v7, v8;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_static_0__2092: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$getDelegate__2093: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
v3 = new io.smallrye.mutiny.vertx.TypeArg;
v4 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_static_1__2094: java.util.function.Function bootstrap$()>();
v5 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_static_2__2095: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v4, v5);
<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0> = v3;
v6 = new io.smallrye.mutiny.vertx.TypeArg;
v7 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_static_3__2096: java.util.function.Function bootstrap$()>();
v8 = staticinvoke <io.vertx.mutiny.core.datagram.DatagramSocket$lambda_static_4__2097: java.util.function.Function bootstrap$()>();
specialinvoke v6.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v7, v8);
<io.vertx.mutiny.core.datagram.DatagramSocket: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_1> = v6;
return;
}
}