public class io.vertx.mutiny.core.file.AsyncFile extends java.lang.Object implements io.vertx.mutiny.core.streams.ReadStream, io.vertx.mutiny.core.streams.WriteStream
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.file.AsyncFile delegate;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0;
private io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber;
private io.smallrye.mutiny.Multi multi;
public void <init>(io.vertx.core.file.AsyncFile)
{
io.vertx.core.file.AsyncFile v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.core.file.AsyncFile;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
java.lang.Object v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate> = null;
return;
}
public io.vertx.core.file.AsyncFile getDelegate()
{
io.vertx.core.file.AsyncFile v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.core.file.AsyncFile v1;
java.lang.String v2;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.file.AsyncFile v4, v5;
io.vertx.mutiny.core.file.AsyncFile v0;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v5 = v1.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.file.AsyncFile v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public synchronized io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber()
{
io.vertx.core.file.AsyncFile v3;
io.smallrye.mutiny.vertx.WriteStreamSubscriber v1, v4, v5;
io.vertx.mutiny.core.file.AsyncFile v0;
java.util.function.Function v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$getDelegate__2102: java.util.function.Function bootstrap$()>();
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile getDelegate()>();
v4 = staticinvoke <io.smallrye.mutiny.vertx.MutinyHelper: io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber(io.vertx.core.streams.WriteStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber>;
return v5;
}
public io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_write_3__2103: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFile,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.file.AsyncFile v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void writeAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni end()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_end_4__2104: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFile)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void endAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.file.AsyncFile v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void endAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_end_5__2105: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFile,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void endAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.file.AsyncFile v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void endAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public boolean writeQueueFull()
{
io.vertx.core.file.AsyncFile v1;
boolean v2;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.file.AsyncFile: boolean writeQueueFull()>();
return v2;
}
public io.vertx.mutiny.core.streams.Pipe pipe()
{
io.vertx.mutiny.core.streams.Pipe v4;
io.vertx.core.file.AsyncFile v1;
io.vertx.core.streams.Pipe v2;
io.smallrye.mutiny.vertx.TypeArg v3;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.file.AsyncFile: io.vertx.core.streams.Pipe pipe()>();
v3 = <io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0>;
v4 = staticinvoke <io.vertx.mutiny.core.streams.Pipe: io.vertx.mutiny.core.streams.Pipe newInstance(io.vertx.core.streams.Pipe,io.smallrye.mutiny.vertx.TypeArg)>(v2, v3);
return v4;
}
public io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_pipeTo_6__2106: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFile,io.vertx.mutiny.core.streams.WriteStream)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void pipeToAndAwait(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.AsyncFile v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void pipeToAndForget(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
private io.vertx.mutiny.core.file.AsyncFile __handler(io.vertx.core.Handler)
{
io.vertx.core.file.AsyncFile v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.mutiny.core.file.AsyncFile v0;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda___handler_7__2107: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFile handler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.file.AsyncFile handler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.file.AsyncFile v0, v3;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.mutiny.core.file.AsyncFile __handler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.file.AsyncFile pause()
{
io.vertx.core.file.AsyncFile v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
interfaceinvoke v1.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFile pause()>();
return v0;
}
public io.vertx.mutiny.core.file.AsyncFile resume()
{
io.vertx.core.file.AsyncFile v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
interfaceinvoke v1.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFile resume()>();
return v0;
}
private io.vertx.mutiny.core.file.AsyncFile __endHandler(io.vertx.core.Handler)
{
io.vertx.core.file.AsyncFile v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
interfaceinvoke v2.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFile endHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.file.AsyncFile endHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.file.AsyncFile v0, v3;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_endHandler_8__2108: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.mutiny.core.file.AsyncFile __endHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.file.AsyncFile setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.file.AsyncFile v2;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
interfaceinvoke v2.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFile setWriteQueueMaxSize(int)>(v1);
return v0;
}
private io.vertx.mutiny.core.file.AsyncFile __drainHandler(io.vertx.core.Handler)
{
io.vertx.core.file.AsyncFile v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
interfaceinvoke v2.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFile drainHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.file.AsyncFile drainHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.file.AsyncFile v0, v3;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_drainHandler_9__2109: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.mutiny.core.file.AsyncFile __drainHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.file.AsyncFile __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.file.AsyncFile v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
interfaceinvoke v2.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFile exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.file.AsyncFile exceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.file.AsyncFile v0, v3;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.mutiny.core.file.AsyncFile __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.file.AsyncFile fetch(long)
{
io.vertx.core.file.AsyncFile v2;
long v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
interfaceinvoke v2.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFile fetch(long)>(v1);
return v0;
}
public io.smallrye.mutiny.Uni close()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_close_10__2110: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFile)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void closeAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.file.AsyncFile v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void closeAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer, long)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.file.AsyncFile v0;
long v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 := @parameter1: long;
v3 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_write_11__2111: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFile,io.vertx.mutiny.core.buffer.Buffer,long)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void writeAndAwait(io.vertx.mutiny.core.buffer.Buffer, long)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.file.AsyncFile v0;
java.lang.Object v5;
long v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 := @parameter1: long;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer,long)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void writeAndForget(io.vertx.mutiny.core.buffer.Buffer, long)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
long v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 := @parameter1: long;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer,long)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.smallrye.mutiny.Uni read(io.vertx.mutiny.core.buffer.Buffer, int, long, int)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.file.AsyncFile v0;
int v2, v4;
long v3;
io.smallrye.mutiny.Uni v6;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 := @parameter1: int;
v3 := @parameter2: long;
v4 := @parameter3: int;
v5 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_read_14__2112: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFile,io.vertx.mutiny.core.buffer.Buffer,int,long,int)>(v0, v1, v2, v3, v4);
v6 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v5);
return v6;
}
public io.vertx.mutiny.core.buffer.Buffer readAndAwait(io.vertx.mutiny.core.buffer.Buffer, int, long, int)
{
io.smallrye.mutiny.groups.UniAwait v6;
long v3;
io.smallrye.mutiny.Uni v5;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.file.AsyncFile v0;
int v2, v4;
java.lang.Object v7;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 := @parameter1: int;
v3 := @parameter2: long;
v4 := @parameter3: int;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni read(io.vertx.mutiny.core.buffer.Buffer,int,long,int)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v7 = virtualinvoke v6.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v7;
}
public io.vertx.mutiny.core.file.AsyncFile readAndForget(io.vertx.mutiny.core.buffer.Buffer, int, long, int)
{
long v3;
io.smallrye.mutiny.Uni v5;
java.util.function.Consumer v7;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.file.AsyncFile v0;
int v2, v4;
io.smallrye.mutiny.groups.UniSubscribe v6;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 := @parameter1: int;
v3 := @parameter2: long;
v4 := @parameter3: int;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni read(io.vertx.mutiny.core.buffer.Buffer,int,long,int)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v7 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v6.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v7);
return v0;
}
public io.smallrye.mutiny.Uni flush()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_flush_15__2113: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFile)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void flushAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.file.AsyncFile v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni flush()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public io.vertx.mutiny.core.file.AsyncFile flushAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni flush()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return v0;
}
public io.vertx.mutiny.core.file.AsyncFile setReadPos(long)
{
io.vertx.core.file.AsyncFile v2;
long v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
interfaceinvoke v2.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFile setReadPos(long)>(v1);
return v0;
}
public io.vertx.mutiny.core.file.AsyncFile setReadLength(long)
{
io.vertx.core.file.AsyncFile v2;
long v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
interfaceinvoke v2.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFile setReadLength(long)>(v1);
return v0;
}
public long getReadLength()
{
io.vertx.core.file.AsyncFile v1;
long v2;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.file.AsyncFile: long getReadLength()>();
return v2;
}
public io.vertx.mutiny.core.file.AsyncFile setWritePos(long)
{
io.vertx.core.file.AsyncFile v2;
long v1;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
interfaceinvoke v2.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFile setWritePos(long)>(v1);
return v0;
}
public long getWritePos()
{
io.vertx.core.file.AsyncFile v1;
long v2;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.file.AsyncFile: long getWritePos()>();
return v2;
}
public io.vertx.mutiny.core.file.AsyncFile setReadBufferSize(int)
{
int v1;
io.vertx.core.file.AsyncFile v2;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
interfaceinvoke v2.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFile setReadBufferSize(int)>(v1);
return v0;
}
public long sizeBlocking()
{
io.vertx.core.file.AsyncFile v1;
long v2;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.file.AsyncFile: long sizeBlocking()>();
return v2;
}
public io.smallrye.mutiny.Uni size()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_size_16__2114: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFile)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Long sizeAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.file.AsyncFile v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni size()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void sizeAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni size()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.vertx.mutiny.core.file.AsyncFileLock tryLock()
{
io.vertx.core.file.AsyncFile v1;
io.vertx.mutiny.core.file.AsyncFileLock v3;
io.vertx.mutiny.core.file.AsyncFile v0;
io.vertx.core.file.AsyncFileLock v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFileLock tryLock()>();
v3 = staticinvoke <io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.mutiny.core.file.AsyncFileLock newInstance(io.vertx.core.file.AsyncFileLock)>(v2);
return v3;
}
public io.vertx.mutiny.core.file.AsyncFileLock tryLock(long, long, boolean)
{
io.vertx.core.file.AsyncFile v4;
io.vertx.mutiny.core.file.AsyncFileLock v6;
io.vertx.mutiny.core.file.AsyncFile v0;
io.vertx.core.file.AsyncFileLock v5;
long v1, v2;
boolean v3;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: boolean;
v4 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v5 = interfaceinvoke v4.<io.vertx.core.file.AsyncFile: io.vertx.core.file.AsyncFileLock tryLock(long,long,boolean)>(v1, v2, v3);
v6 = staticinvoke <io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.mutiny.core.file.AsyncFileLock newInstance(io.vertx.core.file.AsyncFileLock)>(v5);
return v6;
}
public io.smallrye.mutiny.Uni lock()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.file.AsyncFile v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_lock_19__2115: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFile)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public io.vertx.mutiny.core.file.AsyncFileLock lockAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.file.AsyncFile v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni lock()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void lockAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni lock()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni lock(long, long, boolean)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.AsyncFile v0;
long v1, v2;
boolean v3;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: boolean;
v4 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_lock_22__2116: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFile,long,long,boolean)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public io.vertx.mutiny.core.file.AsyncFileLock lockAndAwait(long, long, boolean)
{
io.smallrye.mutiny.groups.UniAwait v5;
io.vertx.mutiny.core.file.AsyncFile v0;
java.lang.Object v6;
long v1, v2;
boolean v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: boolean;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni lock(long,long,boolean)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public void lockAndForget(long, long, boolean)
{
java.util.function.Consumer v6;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.groups.UniSubscribe v5;
long v1, v2;
boolean v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: boolean;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Uni lock(long,long,boolean)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return;
}
public synchronized io.smallrye.mutiny.Multi toMulti()
{
io.vertx.core.file.AsyncFile v3;
io.vertx.mutiny.core.file.AsyncFile v0;
java.util.function.Function v2;
io.smallrye.mutiny.Multi v1, v4, v5;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Multi multi>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$newInstance__2117: java.util.function.Function bootstrap$()>();
v3 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.vertx.core.file.AsyncFile delegate>;
v4 = staticinvoke <io.smallrye.mutiny.vertx.MultiHelper: io.smallrye.mutiny.Multi toMulti(io.vertx.core.streams.ReadStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Multi multi> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Multi multi>;
return v5;
}
public java.lang.Iterable toBlockingIterable()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
io.smallrye.mutiny.helpers.BlockingIterable v3;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.helpers.BlockingIterable asIterable()>();
return v3;
}
public java.util.stream.Stream toBlockingStream()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
java.util.stream.Stream v3;
io.vertx.mutiny.core.file.AsyncFile v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFile;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: java.util.stream.Stream asStream()>();
return v3;
}
public static io.vertx.mutiny.core.file.AsyncFile newInstance(io.vertx.core.file.AsyncFile)
{
io.vertx.core.file.AsyncFile v0;
io.vertx.mutiny.core.file.AsyncFile v1;
v0 := @parameter0: io.vertx.core.file.AsyncFile;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.file.AsyncFile;
specialinvoke v1.<io.vertx.mutiny.core.file.AsyncFile: void <init>(io.vertx.core.file.AsyncFile)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
io.smallrye.mutiny.vertx.TypeArg v0, v3;
java.util.function.Function v1, v2, v4, v5;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_static_0__2124: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$getDelegate__2125: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
v3 = new io.smallrye.mutiny.vertx.TypeArg;
v4 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_static_1__2126: java.util.function.Function bootstrap$()>();
v5 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile$lambda_static_2__2127: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v4, v5);
<io.vertx.mutiny.core.file.AsyncFile: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0> = v3;
return;
}
}