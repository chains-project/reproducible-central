public class io.vertx.mutiny.core.http.HttpClient extends java.lang.Object implements io.vertx.mutiny.core.metrics.Measured
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.http.HttpClient delegate;
public void <init>(io.vertx.core.http.HttpClient)
{
io.vertx.core.http.HttpClient v1;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.HttpClient;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpClient: io.vertx.core.http.HttpClient delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
java.lang.Object v1;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpClient: io.vertx.core.http.HttpClient delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpClient: io.vertx.core.http.HttpClient delegate> = null;
return;
}
public io.vertx.core.http.HttpClient getDelegate()
{
io.vertx.core.http.HttpClient v1;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 = v0.<io.vertx.mutiny.core.http.HttpClient: io.vertx.core.http.HttpClient delegate>;
return v1;
}
public java.lang.String toString()
{
java.lang.String v2;
io.vertx.core.http.HttpClient v1;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 = v0.<io.vertx.mutiny.core.http.HttpClient: io.vertx.core.http.HttpClient delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
io.vertx.core.http.HttpClient v4, v5;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.http.HttpClient: io.vertx.core.http.HttpClient delegate>;
v5 = v1.<io.vertx.mutiny.core.http.HttpClient: io.vertx.core.http.HttpClient delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.http.HttpClient v1;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 = v0.<io.vertx.mutiny.core.http.HttpClient: io.vertx.core.http.HttpClient delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public boolean isMetricsEnabled()
{
boolean v2;
io.vertx.core.http.HttpClient v1;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 = v0.<io.vertx.mutiny.core.http.HttpClient: io.vertx.core.http.HttpClient delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClient: boolean isMetricsEnabled()>();
return v2;
}
public io.smallrye.mutiny.Uni request(io.vertx.core.http.RequestOptions)
{
java.util.function.Consumer v2;
io.vertx.core.http.RequestOptions v1;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.RequestOptions;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda_request_3__1730: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClient,io.vertx.core.http.RequestOptions)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpClientRequest requestAndAwait(io.vertx.core.http.RequestOptions)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.core.http.RequestOptions v1;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.RequestOptions;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni request(io.vertx.core.http.RequestOptions)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void requestAndForget(io.vertx.core.http.RequestOptions)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.core.http.RequestOptions v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.RequestOptions;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni request(io.vertx.core.http.RequestOptions)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni request(io.vertx.core.http.HttpMethod, int, java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.core.http.HttpMethod v1;
int v2;
java.lang.String v3, v4;
io.smallrye.mutiny.Uni v6;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda_request_6__1731: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClient,io.vertx.core.http.HttpMethod,int,java.lang.String,java.lang.String)>(v0, v1, v2, v3, v4);
v6 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v5);
return v6;
}
public io.vertx.mutiny.core.http.HttpClientRequest requestAndAwait(io.vertx.core.http.HttpMethod, int, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v6;
io.smallrye.mutiny.Uni v5;
io.vertx.core.http.HttpMethod v1;
int v2;
java.lang.Object v7;
java.lang.String v3, v4;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni request(io.vertx.core.http.HttpMethod,int,java.lang.String,java.lang.String)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v7 = virtualinvoke v6.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v7;
}
public void requestAndForget(io.vertx.core.http.HttpMethod, int, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.Uni v5;
java.util.function.Consumer v7;
io.vertx.core.http.HttpMethod v1;
int v2;
io.smallrye.mutiny.groups.UniSubscribe v6;
java.lang.String v3, v4;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni request(io.vertx.core.http.HttpMethod,int,java.lang.String,java.lang.String)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v7 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v6.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v7);
return;
}
public io.smallrye.mutiny.Uni request(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.core.http.HttpMethod v1;
java.lang.String v2, v3;
io.smallrye.mutiny.Uni v5;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda_request_9__1732: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClient,io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public io.vertx.mutiny.core.http.HttpClientRequest requestAndAwait(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v5;
io.vertx.core.http.HttpMethod v1;
java.lang.Object v6;
java.lang.String v2, v3;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni request(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public void requestAndForget(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String)
{
java.util.function.Consumer v6;
io.vertx.core.http.HttpMethod v1;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v2, v3;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni request(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return;
}
public io.smallrye.mutiny.Uni request(io.vertx.core.http.HttpMethod, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.core.http.HttpMethod v1;
java.lang.String v2;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda_request_12__1733: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClient,io.vertx.core.http.HttpMethod,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public io.vertx.mutiny.core.http.HttpClientRequest requestAndAwait(io.vertx.core.http.HttpMethod, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.core.http.HttpMethod v1;
java.lang.Object v5;
java.lang.String v2;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni request(io.vertx.core.http.HttpMethod,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void requestAndForget(io.vertx.core.http.HttpMethod, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.core.http.HttpMethod v1;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v2;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni request(io.vertx.core.http.HttpMethod,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.smallrye.mutiny.Uni webSocket(int, java.lang.String, java.lang.String)
{
java.util.function.Consumer v4;
int v1;
java.lang.String v2, v3;
io.smallrye.mutiny.Uni v5;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda_webSocket_15__1734: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClient,int,java.lang.String,java.lang.String)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public io.vertx.mutiny.core.http.WebSocket webSocketAndAwait(int, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v5;
int v1;
java.lang.Object v6;
java.lang.String v2, v3;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni webSocket(int,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public void webSocketAndForget(int, java.lang.String, java.lang.String)
{
java.util.function.Consumer v6;
int v1;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v2, v3;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni webSocket(int,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return;
}
public io.smallrye.mutiny.Uni webSocket(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda_webSocket_18__1735: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClient,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public io.vertx.mutiny.core.http.WebSocket webSocketAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni webSocket(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void webSocketAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni webSocket(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.smallrye.mutiny.Uni webSocket(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda_webSocket_21__1736: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.WebSocket webSocketAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni webSocket(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void webSocketAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni webSocket(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni webSocket(io.vertx.core.http.WebSocketConnectOptions)
{
java.util.function.Consumer v2;
io.vertx.core.http.WebSocketConnectOptions v1;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.WebSocketConnectOptions;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda_webSocket_24__1737: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClient,io.vertx.core.http.WebSocketConnectOptions)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.WebSocket webSocketAndAwait(io.vertx.core.http.WebSocketConnectOptions)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.core.http.WebSocketConnectOptions v1;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.WebSocketConnectOptions;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni webSocket(io.vertx.core.http.WebSocketConnectOptions)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void webSocketAndForget(io.vertx.core.http.WebSocketConnectOptions)
{
java.util.function.Consumer v4;
io.vertx.core.http.WebSocketConnectOptions v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.http.WebSocketConnectOptions;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni webSocket(io.vertx.core.http.WebSocketConnectOptions)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni webSocketAbs(java.lang.String, io.vertx.mutiny.core.MultiMap, io.vertx.core.http.WebsocketVersion, java.util.List)
{
java.util.function.Consumer v5;
java.util.List v4;
io.vertx.core.http.WebsocketVersion v3;
java.lang.String v1;
io.vertx.mutiny.core.MultiMap v2;
io.smallrye.mutiny.Uni v6;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.mutiny.core.MultiMap;
v3 := @parameter2: io.vertx.core.http.WebsocketVersion;
v4 := @parameter3: java.util.List;
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda_webSocketAbs_27__1738: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClient,java.lang.String,io.vertx.mutiny.core.MultiMap,io.vertx.core.http.WebsocketVersion,java.util.List)>(v0, v1, v2, v3, v4);
v6 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v5);
return v6;
}
public io.vertx.mutiny.core.http.WebSocket webSocketAbsAndAwait(java.lang.String, io.vertx.mutiny.core.MultiMap, io.vertx.core.http.WebsocketVersion, java.util.List)
{
io.smallrye.mutiny.groups.UniAwait v6;
io.vertx.core.http.WebsocketVersion v3;
io.vertx.mutiny.core.MultiMap v2;
io.smallrye.mutiny.Uni v5;
java.util.List v4;
java.lang.Object v7;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.mutiny.core.MultiMap;
v3 := @parameter2: io.vertx.core.http.WebsocketVersion;
v4 := @parameter3: java.util.List;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni webSocketAbs(java.lang.String,io.vertx.mutiny.core.MultiMap,io.vertx.core.http.WebsocketVersion,java.util.List)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v7 = virtualinvoke v6.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v7;
}
public void webSocketAbsAndForget(java.lang.String, io.vertx.mutiny.core.MultiMap, io.vertx.core.http.WebsocketVersion, java.util.List)
{
io.vertx.core.http.WebsocketVersion v3;
io.vertx.mutiny.core.MultiMap v2;
io.smallrye.mutiny.Uni v5;
java.util.function.Consumer v7;
java.util.List v4;
io.smallrye.mutiny.groups.UniSubscribe v6;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.mutiny.core.MultiMap;
v3 := @parameter2: io.vertx.core.http.WebsocketVersion;
v4 := @parameter3: java.util.List;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni webSocketAbs(java.lang.String,io.vertx.mutiny.core.MultiMap,io.vertx.core.http.WebsocketVersion,java.util.List)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v7 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v6.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v7);
return;
}
public io.smallrye.mutiny.Uni updateSSLOptions(io.vertx.core.net.SSLOptions)
{
java.util.function.Consumer v2;
io.vertx.core.net.SSLOptions v1;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.net.SSLOptions;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda_updateSSLOptions_28__1739: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClient,io.vertx.core.net.SSLOptions)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void updateSSLOptionsAndAwait(io.vertx.core.net.SSLOptions)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.core.net.SSLOptions v1;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.net.SSLOptions;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni updateSSLOptions(io.vertx.core.net.SSLOptions)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void updateSSLOptionsAndForget(io.vertx.core.net.SSLOptions)
{
java.util.function.Consumer v4;
io.vertx.core.net.SSLOptions v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.net.SSLOptions;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni updateSSLOptions(io.vertx.core.net.SSLOptions)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
private io.vertx.mutiny.core.http.HttpClient __connectionHandler(io.vertx.core.Handler)
{
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
java.util.function.Function v4;
io.vertx.core.http.HttpClient v2;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpClient: io.vertx.core.http.HttpClient delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda___connectionHandler_29__1740: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.HttpClient: io.vertx.core.http.HttpClient connectionHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpClient connectionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpClient v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.vertx.mutiny.core.http.HttpClient __connectionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpClient redirectHandler(java.util.function.Function)
{
io.vertx.mutiny.core.http.HttpClient$1 v3;
java.util.function.Function v1;
io.vertx.core.http.HttpClient v2;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 := @parameter0: java.util.function.Function;
v2 = v0.<io.vertx.mutiny.core.http.HttpClient: io.vertx.core.http.HttpClient delegate>;
v3 = new io.vertx.mutiny.core.http.HttpClient$1;
specialinvoke v3.<io.vertx.mutiny.core.http.HttpClient$1: void <init>(io.vertx.mutiny.core.http.HttpClient,java.util.function.Function)>(v0, v1);
interfaceinvoke v2.<io.vertx.core.http.HttpClient: io.vertx.core.http.HttpClient redirectHandler(java.util.function.Function)>(v3);
return v0;
}
public io.smallrye.mutiny.Uni close()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda_close_30__1741: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClient)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void closeAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void closeAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
io.vertx.mutiny.core.http.HttpClient v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClient;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public static io.vertx.mutiny.core.http.HttpClient newInstance(io.vertx.core.http.HttpClient)
{
io.vertx.core.http.HttpClient v0;
io.vertx.mutiny.core.http.HttpClient v1;
v0 := @parameter0: io.vertx.core.http.HttpClient;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.http.HttpClient;
specialinvoke v1.<io.vertx.mutiny.core.http.HttpClient: void <init>(io.vertx.core.http.HttpClient)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
java.util.function.Function v1, v2;
io.smallrye.mutiny.vertx.TypeArg v0;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$lambda_static_0__1760: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClient$getDelegate__1761: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.http.HttpClient: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
return;
}
}