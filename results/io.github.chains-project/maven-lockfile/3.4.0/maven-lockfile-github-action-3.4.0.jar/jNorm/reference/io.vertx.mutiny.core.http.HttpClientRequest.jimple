public class io.vertx.mutiny.core.http.HttpClientRequest extends java.lang.Object implements io.vertx.mutiny.core.streams.WriteStream
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.http.HttpClientRequest delegate;
private io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber;
private io.vertx.mutiny.core.MultiMap cached_0;
private io.vertx.mutiny.core.http.HttpConnection cached_1;
public void <init>(io.vertx.core.http.HttpClientRequest)
{
io.vertx.core.http.HttpClientRequest v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.http.HttpClientRequest;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
java.lang.Object v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate> = null;
return;
}
public io.vertx.core.http.HttpClientRequest getDelegate()
{
io.vertx.core.http.HttpClientRequest v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.core.http.HttpClientRequest v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.http.HttpClientRequest v4, v5;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v5 = v1.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.http.HttpClientRequest v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public synchronized io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber()
{
io.vertx.core.http.HttpClientRequest v3;
io.smallrye.mutiny.vertx.WriteStreamSubscriber v1, v4, v5;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.util.function.Function v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$getDelegate__1793: java.util.function.Function bootstrap$()>();
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest getDelegate()>();
v4 = staticinvoke <io.smallrye.mutiny.vertx.MutinyHelper: io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber(io.vertx.core.streams.WriteStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber>;
return v5;
}
public io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_write_1__1794: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void writeAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public boolean writeQueueFull()
{
io.vertx.core.http.HttpClientRequest v1;
boolean v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: boolean writeQueueFull()>();
return v2;
}
private io.vertx.mutiny.core.http.HttpClientRequest __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientRequest v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientRequest exceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpClientRequest v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.mutiny.core.http.HttpClientRequest __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpClientRequest setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.http.HttpClientRequest v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setWriteQueueMaxSize(int)>(v1);
return v0;
}
private io.vertx.mutiny.core.http.HttpClientRequest __drainHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientRequest v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest drainHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientRequest drainHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.http.HttpClientRequest v0, v3;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_drainHandler_2__1795: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.mutiny.core.http.HttpClientRequest __drainHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpClientRequest setHost(java.lang.String)
{
io.vertx.core.http.HttpClientRequest v2;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setHost(java.lang.String)>(v1);
return v0;
}
public java.lang.String getHost()
{
io.vertx.core.http.HttpClientRequest v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: java.lang.String getHost()>();
return v2;
}
public io.vertx.mutiny.core.http.HttpClientRequest setPort(int)
{
int v1;
io.vertx.core.http.HttpClientRequest v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setPort(int)>(v1);
return v0;
}
public int getPort()
{
int v2;
io.vertx.core.http.HttpClientRequest v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: int getPort()>();
return v2;
}
public io.vertx.mutiny.core.http.HttpClientRequest setFollowRedirects(boolean)
{
io.vertx.core.http.HttpClientRequest v2;
boolean v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setFollowRedirects(boolean)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientRequest setMaxRedirects(int)
{
int v1;
io.vertx.core.http.HttpClientRequest v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setMaxRedirects(int)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientRequest setChunked(boolean)
{
io.vertx.core.http.HttpClientRequest v2;
boolean v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setChunked(boolean)>(v1);
return v0;
}
public boolean isChunked()
{
io.vertx.core.http.HttpClientRequest v1;
boolean v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: boolean isChunked()>();
return v2;
}
public io.vertx.core.http.HttpMethod getMethod()
{
io.vertx.core.http.HttpClientRequest v1;
io.vertx.core.http.HttpMethod v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpMethod getMethod()>();
return v2;
}
public io.vertx.mutiny.core.http.HttpClientRequest setMethod(io.vertx.core.http.HttpMethod)
{
io.vertx.core.http.HttpClientRequest v2;
io.vertx.core.http.HttpMethod v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setMethod(io.vertx.core.http.HttpMethod)>(v1);
return v0;
}
public java.lang.String absoluteURI()
{
io.vertx.core.http.HttpClientRequest v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: java.lang.String absoluteURI()>();
return v2;
}
public java.lang.String getURI()
{
io.vertx.core.http.HttpClientRequest v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: java.lang.String getURI()>();
return v2;
}
public io.vertx.mutiny.core.http.HttpClientRequest setURI(java.lang.String)
{
io.vertx.core.http.HttpClientRequest v2;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setURI(java.lang.String)>(v1);
return v0;
}
public java.lang.String path()
{
io.vertx.core.http.HttpClientRequest v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: java.lang.String path()>();
return v2;
}
public java.lang.String query()
{
io.vertx.core.http.HttpClientRequest v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: java.lang.String query()>();
return v2;
}
public io.vertx.mutiny.core.MultiMap headers()
{
io.vertx.core.http.HttpClientRequest v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.vertx.core.MultiMap v4;
io.vertx.mutiny.core.MultiMap v1, v2, v5;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.mutiny.core.MultiMap cached_0>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.mutiny.core.MultiMap cached_0>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpClientRequest: io.vertx.core.MultiMap headers()>();
v5 = staticinvoke <io.vertx.mutiny.core.MultiMap: io.vertx.mutiny.core.MultiMap newInstance(io.vertx.core.MultiMap)>(v4);
v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.mutiny.core.MultiMap cached_0> = v5;
return v5;
}
public io.vertx.mutiny.core.http.HttpClientRequest putHeader(java.lang.String, java.lang.String)
{
io.vertx.core.http.HttpClientRequest v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.String v1, v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest putHeader(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.vertx.core.http.HttpVersion version()
{
io.vertx.core.http.HttpClientRequest v1;
io.vertx.core.http.HttpVersion v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpVersion version()>();
return v2;
}
public io.smallrye.mutiny.Uni write(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_write_3__1796: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni write(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void writeAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni write(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni write(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_write_4__1797: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void writeAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni write(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void writeAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni write(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
private io.vertx.mutiny.core.http.HttpClientRequest __continueHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientRequest v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest continueHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientRequest continueHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.http.HttpClientRequest v0, v3;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_continueHandler_5__1798: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.mutiny.core.http.HttpClientRequest __continueHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.HttpClientRequest __earlyHintsHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientRequest v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda___earlyHintsHandler_6__1799: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest earlyHintsHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientRequest earlyHintsHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpClientRequest v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.mutiny.core.http.HttpClientRequest __earlyHintsHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni sendHead()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_sendHead_7__1800: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void sendHeadAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni sendHead()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public io.vertx.mutiny.core.http.HttpClientRequest sendHeadAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni sendHead()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return v0;
}
public io.smallrye.mutiny.Uni connect()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_connect_10__1801: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public io.vertx.mutiny.core.http.HttpClientResponse connectAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni connect()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void connectAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni connect()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni response()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_response_13__1802: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public io.vertx.mutiny.core.http.HttpClientResponse responseAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni response()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public io.vertx.mutiny.core.http.HttpClientRequest responseAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni response()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return v0;
}
public io.smallrye.mutiny.Uni send()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_send_16__1803: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public io.vertx.mutiny.core.http.HttpClientResponse sendAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni send()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void sendAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni send()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni send(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_send_19__1804: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpClientResponse sendAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni send(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void sendAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni send(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_send_22__1805: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpClientResponse sendAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void sendAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.streams.ReadStream)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.streams.ReadStream v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.streams.ReadStream;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_send_25__1806: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest,io.vertx.mutiny.core.streams.ReadStream)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpClientResponse sendAndAwait(io.vertx.mutiny.core.streams.ReadStream)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.streams.ReadStream v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.streams.ReadStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.streams.ReadStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void sendAndForget(io.vertx.mutiny.core.streams.ReadStream)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.streams.ReadStream v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.streams.ReadStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.streams.ReadStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni send(java.util.concurrent.Flow$Publisher)
{
java.util.function.Consumer v2;
java.util.concurrent.Flow$Publisher v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.util.concurrent.Flow$Publisher;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_send_29__1807: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest,java.util.concurrent.Flow$Publisher)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpClientResponse sendAndAwait(java.util.concurrent.Flow$Publisher)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.util.concurrent.Flow$Publisher v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.util.concurrent.Flow$Publisher;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni send(java.util.concurrent.Flow$Publisher)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void sendAndForget(java.util.concurrent.Flow$Publisher)
{
java.util.function.Consumer v4;
java.util.concurrent.Flow$Publisher v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.util.concurrent.Flow$Publisher;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni send(java.util.concurrent.Flow$Publisher)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni end(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_end_30__1808: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void endAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni end(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void endAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni end(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni end(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_end_31__1809: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void endAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni end(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void endAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni end(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_end_32__1810: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void endAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void endAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni end()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_end_33__1811: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientRequest)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void endAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void endAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.vertx.mutiny.core.http.HttpClientRequest setTimeout(long)
{
io.vertx.core.http.HttpClientRequest v2;
long v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setTimeout(long)>(v1);
return v0;
}
private io.vertx.mutiny.core.http.HttpClientRequest __pushHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientRequest v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda___pushHandler_34__1812: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest pushHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientRequest pushHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpClientRequest v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.mutiny.core.http.HttpClientRequest __pushHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public boolean reset()
{
io.vertx.core.http.HttpClientRequest v1;
boolean v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: boolean reset()>();
return v2;
}
public boolean reset(long)
{
io.vertx.core.http.HttpClientRequest v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
long v1;
boolean v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: boolean reset(long)>(v1);
return v3;
}
public boolean reset(long, java.lang.Throwable)
{
java.lang.Throwable v2;
io.vertx.core.http.HttpClientRequest v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
long v1;
boolean v4;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: long;
v2 := @parameter1: java.lang.Throwable;
v3 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpClientRequest: boolean reset(long,java.lang.Throwable)>(v1, v2);
return v4;
}
public io.vertx.mutiny.core.http.HttpConnection connection()
{
io.vertx.core.http.HttpClientRequest v3;
io.vertx.mutiny.core.http.HttpConnection v1, v2, v5;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.vertx.core.http.HttpConnection v4;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.mutiny.core.http.HttpConnection cached_1>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.mutiny.core.http.HttpConnection cached_1>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpConnection connection()>();
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.http.HttpConnection newInstance(io.vertx.core.http.HttpConnection)>(v4);
v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.mutiny.core.http.HttpConnection cached_1> = v5;
return v5;
}
public io.vertx.mutiny.core.http.HttpClientRequest writeCustomFrame(int, int, io.vertx.mutiny.core.buffer.Buffer)
{
io.vertx.core.http.HttpClientRequest v4;
io.vertx.core.buffer.Buffer v5;
io.vertx.mutiny.core.buffer.Buffer v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
int v1, v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.vertx.mutiny.core.buffer.Buffer;
v4 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v5 = virtualinvoke v3.<io.vertx.mutiny.core.buffer.Buffer: io.vertx.core.buffer.Buffer getDelegate()>();
interfaceinvoke v4.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest writeCustomFrame(int,int,io.vertx.core.buffer.Buffer)>(v1, v2, v5);
return v0;
}
public int streamId()
{
int v2;
io.vertx.core.http.HttpClientRequest v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: int streamId()>();
return v2;
}
public io.vertx.mutiny.core.http.HttpClientRequest writeCustomFrame(io.vertx.mutiny.core.http.HttpFrame)
{
io.vertx.core.http.HttpClientRequest v2;
io.vertx.core.http.HttpFrame v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
io.vertx.mutiny.core.http.HttpFrame v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.mutiny.core.http.HttpFrame;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v3 = virtualinvoke v1.<io.vertx.mutiny.core.http.HttpFrame: io.vertx.core.http.HttpFrame getDelegate()>();
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest writeCustomFrame(io.vertx.core.http.HttpFrame)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientRequest setStreamPriority(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.HttpClientRequest v2;
io.vertx.core.http.StreamPriority v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setStreamPriority(io.vertx.core.http.StreamPriority)>(v1);
return v0;
}
public io.vertx.core.http.StreamPriority getStreamPriority()
{
io.vertx.core.http.HttpClientRequest v1;
io.vertx.core.http.StreamPriority v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.StreamPriority getStreamPriority()>();
return v2;
}
public io.vertx.mutiny.core.http.HttpClientRequest putHeader(java.lang.CharSequence, java.lang.CharSequence)
{
io.vertx.core.http.HttpClientRequest v3;
java.lang.CharSequence v1, v2;
io.vertx.mutiny.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest putHeader(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientRequest putHeader(java.lang.String, java.lang.Iterable)
{
io.vertx.core.http.HttpClientRequest v3;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.String v1;
java.lang.Iterable v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest putHeader(java.lang.String,java.lang.Iterable)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientRequest putHeader(java.lang.CharSequence, java.lang.Iterable)
{
io.vertx.core.http.HttpClientRequest v3;
java.lang.CharSequence v1;
io.vertx.mutiny.core.http.HttpClientRequest v0;
java.lang.Iterable v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest putHeader(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
return v0;
}
public static io.vertx.mutiny.core.http.HttpClientRequest newInstance(io.vertx.core.http.HttpClientRequest)
{
io.vertx.core.http.HttpClientRequest v0;
io.vertx.mutiny.core.http.HttpClientRequest v1;
v0 := @parameter0: io.vertx.core.http.HttpClientRequest;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.http.HttpClientRequest;
specialinvoke v1.<io.vertx.mutiny.core.http.HttpClientRequest: void <init>(io.vertx.core.http.HttpClientRequest)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
java.util.function.Function v1, v2;
io.smallrye.mutiny.vertx.TypeArg v0;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$lambda_static_0__1828: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest$getDelegate__1829: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.http.HttpClientRequest: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
return;
}
}