public class io.vertx.mutiny.core.http.HttpServerResponse extends java.lang.Object implements io.vertx.mutiny.core.streams.WriteStream
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.http.HttpServerResponse delegate;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_1;
private io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber;
private io.vertx.mutiny.core.MultiMap cached_0;
private io.vertx.mutiny.core.MultiMap cached_1;
public void <init>(io.vertx.core.http.HttpServerResponse)
{
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpServerResponse;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
java.lang.Object v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate> = null;
return;
}
public io.vertx.core.http.HttpServerResponse getDelegate()
{
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
return v1;
}
public java.lang.String toString()
{
java.lang.String v2;
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.http.HttpServerResponse v4, v5;
java.lang.Class v2, v3;
java.lang.Object v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
boolean v6;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v5 = v1.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public synchronized io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber()
{
io.smallrye.mutiny.vertx.WriteStreamSubscriber v1, v4, v5;
io.vertx.core.http.HttpServerResponse v3;
java.util.function.Function v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$getDelegate__1891: java.util.function.Function bootstrap$()>();
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse getDelegate()>();
v4 = staticinvoke <io.smallrye.mutiny.vertx.MutinyHelper: io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber(io.vertx.core.streams.WriteStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber>;
return v5;
}
public io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_write_5__1892: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void writeAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni end()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_end_6__1893: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void endAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void endAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public boolean writeQueueFull()
{
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerResponse: boolean writeQueueFull()>();
return v2;
}
private io.vertx.mutiny.core.http.HttpServerResponse __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.HttpServerResponse v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse exceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpServerResponse v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.http.HttpServerResponse __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpServerResponse setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.http.HttpServerResponse v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse setWriteQueueMaxSize(int)>(v1);
return v0;
}
private io.vertx.mutiny.core.http.HttpServerResponse __drainHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.HttpServerResponse v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse drainHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse drainHandler(java.lang.Runnable)
{
io.vertx.core.Handler v2;
java.lang.Runnable v1;
io.vertx.mutiny.core.http.HttpServerResponse v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_drainHandler_7__1894: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.http.HttpServerResponse __drainHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public int getStatusCode()
{
int v2;
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerResponse: int getStatusCode()>();
return v2;
}
public io.vertx.mutiny.core.http.HttpServerResponse setStatusCode(int)
{
int v1;
io.vertx.core.http.HttpServerResponse v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse setStatusCode(int)>(v1);
return v0;
}
public java.lang.String getStatusMessage()
{
java.lang.String v2;
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerResponse: java.lang.String getStatusMessage()>();
return v2;
}
public io.vertx.mutiny.core.http.HttpServerResponse setStatusMessage(java.lang.String)
{
java.lang.String v1;
io.vertx.core.http.HttpServerResponse v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse setStatusMessage(java.lang.String)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse setChunked(boolean)
{
io.vertx.core.http.HttpServerResponse v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
boolean v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse setChunked(boolean)>(v1);
return v0;
}
public boolean isChunked()
{
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerResponse: boolean isChunked()>();
return v2;
}
public io.vertx.mutiny.core.MultiMap headers()
{
io.vertx.core.http.HttpServerResponse v3;
io.vertx.core.MultiMap v4;
io.vertx.mutiny.core.MultiMap v1, v2, v5;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.MultiMap cached_0>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.MultiMap cached_0>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpServerResponse: io.vertx.core.MultiMap headers()>();
v5 = staticinvoke <io.vertx.mutiny.core.MultiMap: io.vertx.mutiny.core.MultiMap newInstance(io.vertx.core.MultiMap)>(v4);
v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.MultiMap cached_0> = v5;
return v5;
}
public io.vertx.mutiny.core.http.HttpServerResponse putHeader(java.lang.String, java.lang.String)
{
io.vertx.core.http.HttpServerResponse v3;
java.lang.String v1, v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse putHeader(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.MultiMap trailers()
{
io.vertx.core.http.HttpServerResponse v3;
io.vertx.core.MultiMap v4;
io.vertx.mutiny.core.MultiMap v1, v2, v5;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.MultiMap cached_1>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.MultiMap cached_1>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpServerResponse: io.vertx.core.MultiMap trailers()>();
v5 = staticinvoke <io.vertx.mutiny.core.MultiMap: io.vertx.mutiny.core.MultiMap newInstance(io.vertx.core.MultiMap)>(v4);
v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.MultiMap cached_1> = v5;
return v5;
}
public io.vertx.mutiny.core.http.HttpServerResponse putTrailer(java.lang.String, java.lang.String)
{
io.vertx.core.http.HttpServerResponse v3;
java.lang.String v1, v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse putTrailer(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
private io.vertx.mutiny.core.http.HttpServerResponse __closeHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.HttpServerResponse v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse closeHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse closeHandler(java.lang.Runnable)
{
io.vertx.core.Handler v2;
java.lang.Runnable v1;
io.vertx.mutiny.core.http.HttpServerResponse v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_closeHandler_8__1895: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.http.HttpServerResponse __closeHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.HttpServerResponse __endHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.HttpServerResponse v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse endHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse endHandler(java.lang.Runnable)
{
io.vertx.core.Handler v2;
java.lang.Runnable v1;
io.vertx.mutiny.core.http.HttpServerResponse v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_endHandler_9__1896: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.http.HttpServerResponse __endHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni write(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
java.lang.String v1, v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_write_10__1897: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void writeAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
java.lang.Object v5;
java.lang.String v1, v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni write(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void writeAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni write(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.smallrye.mutiny.Uni write(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_write_11__1898: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni write(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void writeAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni write(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.vertx.mutiny.core.http.HttpServerResponse writeContinue()
{
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v1.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse writeContinue()>();
return v0;
}
public io.smallrye.mutiny.Uni writeEarlyHints(io.vertx.mutiny.core.MultiMap)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.MultiMap v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.MultiMap;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_writeEarlyHints_12__1899: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,io.vertx.mutiny.core.MultiMap)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeEarlyHintsAndAwait(io.vertx.mutiny.core.MultiMap)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
io.vertx.mutiny.core.MultiMap v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.MultiMap;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni writeEarlyHints(io.vertx.mutiny.core.MultiMap)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void writeEarlyHintsAndForget(io.vertx.mutiny.core.MultiMap)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.MultiMap v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.MultiMap;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni writeEarlyHints(io.vertx.mutiny.core.MultiMap)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni end(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_end_13__1900: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void endAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni end(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void endAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni end(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni end(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
java.lang.String v1, v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_end_14__1901: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void endAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
java.lang.Object v5;
java.lang.String v1, v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni end(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void endAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni end(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_end_15__1902: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void endAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void endAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni send()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_send_16__1903: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void sendAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni send()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void sendAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni send()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni send(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_send_17__1904: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void sendAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni send(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void sendAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni send(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_send_18__1905: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void sendAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void sendAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.streams.ReadStream)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.streams.ReadStream v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.streams.ReadStream;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_send_19__1906: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,io.vertx.mutiny.core.streams.ReadStream)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void sendAndAwait(io.vertx.mutiny.core.streams.ReadStream)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.streams.ReadStream v1;
java.lang.Object v4;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.streams.ReadStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.streams.ReadStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void sendAndForget(io.vertx.mutiny.core.streams.ReadStream)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.streams.ReadStream v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.streams.ReadStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni send(io.vertx.mutiny.core.streams.ReadStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni send(java.util.concurrent.Flow$Publisher)
{
java.util.function.Consumer v2;
java.util.concurrent.Flow$Publisher v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.util.concurrent.Flow$Publisher;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_send_21__1907: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,java.util.concurrent.Flow$Publisher)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void sendAndAwait(java.util.concurrent.Flow$Publisher)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.util.concurrent.Flow$Publisher v1;
java.lang.Object v4;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.util.concurrent.Flow$Publisher;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni send(java.util.concurrent.Flow$Publisher)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void sendAndForget(java.util.concurrent.Flow$Publisher)
{
java.util.function.Consumer v4;
java.util.concurrent.Flow$Publisher v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.util.concurrent.Flow$Publisher;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni send(java.util.concurrent.Flow$Publisher)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni sendFile(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_sendFile_22__1908: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void sendFileAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni sendFile(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.HttpServerResponse sendFileAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni sendFile(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni sendFile(java.lang.String, long)
{
java.util.function.Consumer v3;
long v2;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_sendFile_23__1909: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,java.lang.String,long)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void sendFileAndAwait(java.lang.String, long)
{
io.smallrye.mutiny.groups.UniAwait v4;
java.lang.Object v5;
long v2;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni sendFile(java.lang.String,long)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.http.HttpServerResponse sendFileAndForget(java.lang.String, long)
{
java.util.function.Consumer v5;
io.smallrye.mutiny.groups.UniSubscribe v4;
long v2;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni sendFile(java.lang.String,long)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.smallrye.mutiny.Uni sendFile(java.lang.String, long, long)
{
java.util.function.Consumer v4;
long v2, v3;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_sendFile_24__1910: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,java.lang.String,long,long)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void sendFileAndAwait(java.lang.String, long, long)
{
io.smallrye.mutiny.groups.UniAwait v5;
java.lang.Object v6;
long v2, v3;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni sendFile(java.lang.String,long,long)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.http.HttpServerResponse sendFileAndForget(java.lang.String, long, long)
{
java.util.function.Consumer v6;
io.smallrye.mutiny.groups.UniSubscribe v5;
long v2, v3;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni sendFile(java.lang.String,long,long)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public void close()
{
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v1.<io.vertx.core.http.HttpServerResponse: void close()>();
return;
}
public boolean ended()
{
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerResponse: boolean ended()>();
return v2;
}
public boolean closed()
{
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerResponse: boolean closed()>();
return v2;
}
public boolean headWritten()
{
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerResponse: boolean headWritten()>();
return v2;
}
private io.vertx.mutiny.core.http.HttpServerResponse __headersEndHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.HttpServerResponse v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse headersEndHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse headersEndHandler(java.lang.Runnable)
{
io.vertx.core.Handler v2;
java.lang.Runnable v1;
io.vertx.mutiny.core.http.HttpServerResponse v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_headersEndHandler_25__1911: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.http.HttpServerResponse __headersEndHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.HttpServerResponse __bodyEndHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.HttpServerResponse v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse bodyEndHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse bodyEndHandler(java.lang.Runnable)
{
io.vertx.core.Handler v2;
java.lang.Runnable v1;
io.vertx.mutiny.core.http.HttpServerResponse v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_bodyEndHandler_26__1912: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.http.HttpServerResponse __bodyEndHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public long bytesWritten()
{
long v2;
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerResponse: long bytesWritten()>();
return v2;
}
public int streamId()
{
int v2;
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerResponse: int streamId()>();
return v2;
}
public io.smallrye.mutiny.Uni push(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.core.http.HttpMethod v1;
java.lang.String v2, v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_push_29__1913: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public io.vertx.mutiny.core.http.HttpServerResponse pushAndAwait(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v5;
io.vertx.core.http.HttpMethod v1;
java.lang.Object v6;
java.lang.String v2, v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni push(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.http.HttpServerResponse pushAndForget(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String)
{
java.util.function.Consumer v6;
io.vertx.core.http.HttpMethod v1;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v2, v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni push(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.smallrye.mutiny.Uni push(io.vertx.core.http.HttpMethod, java.lang.String, io.vertx.mutiny.core.MultiMap)
{
java.util.function.Consumer v4;
io.vertx.core.http.HttpMethod v1;
java.lang.String v2;
io.vertx.mutiny.core.MultiMap v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.mutiny.core.MultiMap;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_push_32__1914: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,io.vertx.core.http.HttpMethod,java.lang.String,io.vertx.mutiny.core.MultiMap)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public io.vertx.mutiny.core.http.HttpServerResponse pushAndAwait(io.vertx.core.http.HttpMethod, java.lang.String, io.vertx.mutiny.core.MultiMap)
{
io.smallrye.mutiny.groups.UniAwait v5;
io.vertx.core.http.HttpMethod v1;
java.lang.Object v6;
java.lang.String v2;
io.vertx.mutiny.core.MultiMap v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.mutiny.core.MultiMap;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni push(io.vertx.core.http.HttpMethod,java.lang.String,io.vertx.mutiny.core.MultiMap)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.http.HttpServerResponse pushAndForget(io.vertx.core.http.HttpMethod, java.lang.String, io.vertx.mutiny.core.MultiMap)
{
java.util.function.Consumer v6;
io.vertx.core.http.HttpMethod v1;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v2;
io.vertx.mutiny.core.MultiMap v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.mutiny.core.MultiMap;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni push(io.vertx.core.http.HttpMethod,java.lang.String,io.vertx.mutiny.core.MultiMap)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.smallrye.mutiny.Uni push(io.vertx.core.http.HttpMethod, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.core.http.HttpMethod v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_push_35__1915: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,io.vertx.core.http.HttpMethod,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public io.vertx.mutiny.core.http.HttpServerResponse pushAndAwait(io.vertx.core.http.HttpMethod, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.core.http.HttpMethod v1;
java.lang.Object v5;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni push(io.vertx.core.http.HttpMethod,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.http.HttpServerResponse pushAndForget(io.vertx.core.http.HttpMethod, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.core.http.HttpMethod v1;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni push(io.vertx.core.http.HttpMethod,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.smallrye.mutiny.Uni push(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String, io.vertx.mutiny.core.MultiMap)
{
java.util.function.Consumer v5;
io.vertx.core.http.HttpMethod v1;
java.lang.String v2, v3;
io.vertx.mutiny.core.MultiMap v4;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v6;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.mutiny.core.MultiMap;
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_push_38__1916: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerResponse,io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String,io.vertx.mutiny.core.MultiMap)>(v0, v1, v2, v3, v4);
v6 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v5);
return v6;
}
public io.vertx.mutiny.core.http.HttpServerResponse pushAndAwait(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String, io.vertx.mutiny.core.MultiMap)
{
io.smallrye.mutiny.groups.UniAwait v6;
io.vertx.mutiny.core.MultiMap v4;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v5;
io.vertx.core.http.HttpMethod v1;
java.lang.Object v7;
java.lang.String v2, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.mutiny.core.MultiMap;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni push(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String,io.vertx.mutiny.core.MultiMap)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v7 = virtualinvoke v6.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v7;
}
public io.vertx.mutiny.core.http.HttpServerResponse pushAndForget(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String, io.vertx.mutiny.core.MultiMap)
{
io.vertx.mutiny.core.MultiMap v4;
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.smallrye.mutiny.Uni v5;
java.util.function.Consumer v7;
io.vertx.core.http.HttpMethod v1;
io.smallrye.mutiny.groups.UniSubscribe v6;
java.lang.String v2, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.mutiny.core.MultiMap;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.Uni push(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String,io.vertx.mutiny.core.MultiMap)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v7 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v6.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v7);
return v0;
}
public boolean reset()
{
io.vertx.core.http.HttpServerResponse v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerResponse: boolean reset()>();
return v2;
}
public boolean reset(long)
{
io.vertx.core.http.HttpServerResponse v2;
long v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
boolean v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: boolean reset(long)>(v1);
return v3;
}
public io.vertx.mutiny.core.http.HttpServerResponse writeCustomFrame(int, int, io.vertx.mutiny.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v5;
io.vertx.mutiny.core.buffer.Buffer v3;
io.vertx.core.http.HttpServerResponse v4;
int v1, v2;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.vertx.mutiny.core.buffer.Buffer;
v4 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v5 = virtualinvoke v3.<io.vertx.mutiny.core.buffer.Buffer: io.vertx.core.buffer.Buffer getDelegate()>();
interfaceinvoke v4.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse writeCustomFrame(int,int,io.vertx.core.buffer.Buffer)>(v1, v2, v5);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse writeCustomFrame(io.vertx.mutiny.core.http.HttpFrame)
{
io.vertx.core.http.HttpFrame v3;
io.vertx.core.http.HttpServerResponse v2;
io.vertx.mutiny.core.http.HttpFrame v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.http.HttpFrame;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v3 = virtualinvoke v1.<io.vertx.mutiny.core.http.HttpFrame: io.vertx.core.http.HttpFrame getDelegate()>();
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse writeCustomFrame(io.vertx.core.http.HttpFrame)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse setStreamPriority(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.HttpServerResponse v2;
io.vertx.core.http.StreamPriority v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse setStreamPriority(io.vertx.core.http.StreamPriority)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse addCookie(io.vertx.mutiny.core.http.Cookie)
{
io.vertx.core.http.HttpServerResponse v2;
io.vertx.core.http.Cookie v3;
io.vertx.mutiny.core.http.Cookie v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.mutiny.core.http.Cookie;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v3 = virtualinvoke v1.<io.vertx.mutiny.core.http.Cookie: io.vertx.core.http.Cookie getDelegate()>();
interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse addCookie(io.vertx.core.http.Cookie)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.Cookie removeCookie(java.lang.String)
{
io.vertx.core.http.HttpServerResponse v2;
java.lang.String v1;
io.vertx.core.http.Cookie v3;
io.vertx.mutiny.core.http.Cookie v4;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.Cookie removeCookie(java.lang.String)>(v1);
v4 = staticinvoke <io.vertx.mutiny.core.http.Cookie: io.vertx.mutiny.core.http.Cookie newInstance(io.vertx.core.http.Cookie)>(v3);
return v4;
}
public io.vertx.mutiny.core.http.Cookie removeCookie(java.lang.String, boolean)
{
io.vertx.core.http.HttpServerResponse v3;
java.lang.String v1;
io.vertx.core.http.Cookie v4;
io.vertx.mutiny.core.http.Cookie v5;
io.vertx.mutiny.core.http.HttpServerResponse v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.Cookie removeCookie(java.lang.String,boolean)>(v1, v2);
v5 = staticinvoke <io.vertx.mutiny.core.http.Cookie: io.vertx.mutiny.core.http.Cookie newInstance(io.vertx.core.http.Cookie)>(v4);
return v5;
}
public java.util.Set removeCookies(java.lang.String)
{
java.util.Set v3;
java.util.function.Function v5;
io.vertx.mutiny.core.http.HttpServerResponse v0;
java.util.stream.Stream v4, v6;
io.vertx.core.http.HttpServerResponse v2;
java.lang.Object v8;
java.lang.String v1;
java.util.stream.Collector v7;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpServerResponse: java.util.Set removeCookies(java.lang.String)>(v1);
v4 = interfaceinvoke v3.<java.util.Set: java.util.stream.Stream stream()>();
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_removeCookies_39__1917: java.util.function.Function bootstrap$()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v5);
v7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();
v8 = interfaceinvoke v6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v7);
return v8;
}
public java.util.Set removeCookies(java.lang.String, boolean)
{
java.util.Set v4;
java.util.function.Function v6;
io.vertx.mutiny.core.http.HttpServerResponse v0;
java.util.stream.Stream v5, v7;
io.vertx.core.http.HttpServerResponse v3;
java.lang.Object v9;
java.lang.String v1;
java.util.stream.Collector v8;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpServerResponse: java.util.Set removeCookies(java.lang.String,boolean)>(v1, v2);
v5 = interfaceinvoke v4.<java.util.Set: java.util.stream.Stream stream()>();
v6 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_removeCookies_40__1918: java.util.function.Function bootstrap$()>();
v7 = interfaceinvoke v5.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v6);
v8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();
v9 = interfaceinvoke v7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v8);
return v9;
}
public io.vertx.mutiny.core.http.Cookie removeCookie(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.http.HttpServerResponse v4;
java.lang.String v1, v2, v3;
io.vertx.core.http.Cookie v5;
io.vertx.mutiny.core.http.Cookie v6;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v5 = interfaceinvoke v4.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.Cookie removeCookie(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v6 = staticinvoke <io.vertx.mutiny.core.http.Cookie: io.vertx.mutiny.core.http.Cookie newInstance(io.vertx.core.http.Cookie)>(v5);
return v6;
}
public io.vertx.mutiny.core.http.Cookie removeCookie(java.lang.String, java.lang.String, java.lang.String, boolean)
{
io.vertx.mutiny.core.http.HttpServerResponse v0;
io.vertx.core.http.HttpServerResponse v5;
java.lang.String v1, v2, v3;
io.vertx.core.http.Cookie v6;
io.vertx.mutiny.core.http.Cookie v7;
boolean v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: boolean;
v5 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
v6 = interfaceinvoke v5.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.Cookie removeCookie(java.lang.String,java.lang.String,java.lang.String,boolean)>(v1, v2, v3, v4);
v7 = staticinvoke <io.vertx.mutiny.core.http.Cookie: io.vertx.mutiny.core.http.Cookie newInstance(io.vertx.core.http.Cookie)>(v6);
return v7;
}
public io.vertx.mutiny.core.http.HttpServerResponse putHeader(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
io.vertx.core.http.HttpServerResponse v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse putHeader(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse putHeader(java.lang.String, java.lang.Iterable)
{
io.vertx.core.http.HttpServerResponse v3;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
java.lang.Iterable v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse putHeader(java.lang.String,java.lang.Iterable)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse putHeader(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.CharSequence v1;
io.vertx.core.http.HttpServerResponse v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
java.lang.Iterable v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse putHeader(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse putTrailer(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
io.vertx.core.http.HttpServerResponse v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse putTrailer(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse putTrailer(java.lang.String, java.lang.Iterable)
{
io.vertx.core.http.HttpServerResponse v3;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerResponse v0;
java.lang.Iterable v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse putTrailer(java.lang.String,java.lang.Iterable)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerResponse putTrailer(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.CharSequence v1;
io.vertx.core.http.HttpServerResponse v3;
io.vertx.mutiny.core.http.HttpServerResponse v0;
java.lang.Iterable v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse putTrailer(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
return v0;
}
public static io.vertx.mutiny.core.http.HttpServerResponse newInstance(io.vertx.core.http.HttpServerResponse)
{
io.vertx.core.http.HttpServerResponse v0;
io.vertx.mutiny.core.http.HttpServerResponse v1;
v0 := @parameter0: io.vertx.core.http.HttpServerResponse;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.http.HttpServerResponse;
specialinvoke v1.<io.vertx.mutiny.core.http.HttpServerResponse: void <init>(io.vertx.core.http.HttpServerResponse)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
io.smallrye.mutiny.vertx.TypeArg v0, v3, v6;
java.util.function.Function v1, v2, v4, v5, v7, v8;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_static_0__1928: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$getDelegate__1929: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
v3 = new io.smallrye.mutiny.vertx.TypeArg;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_static_1__1930: java.util.function.Function bootstrap$()>();
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_static_2__1931: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v4, v5);
<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0> = v3;
v6 = new io.smallrye.mutiny.vertx.TypeArg;
v7 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_static_3__1932: java.util.function.Function bootstrap$()>();
v8 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse$lambda_static_4__1933: java.util.function.Function bootstrap$()>();
specialinvoke v6.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v7, v8);
<io.vertx.mutiny.core.http.HttpServerResponse: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_1> = v6;
return;
}
}