public interface  io.vertx.mutiny.core.http.WebSocketBase extends java.lang.Object implements io.vertx.mutiny.core.streams.ReadStream, io.vertx.mutiny.core.streams.WriteStream
{
public static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0;
public abstract io.vertx.core.http.WebSocketBase getDelegate();
public abstract io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer);
public abstract java.lang.Void writeAndAwait(io.vertx.mutiny.core.buffer.Buffer);
public abstract void writeAndForget(io.vertx.mutiny.core.buffer.Buffer);
public abstract io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer);
public abstract java.lang.Void endAndAwait(io.vertx.mutiny.core.buffer.Buffer);
public abstract void endAndForget(io.vertx.mutiny.core.buffer.Buffer);
public abstract boolean writeQueueFull();
public abstract io.vertx.mutiny.core.streams.Pipe pipe();
public abstract io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream);
public abstract java.lang.Void pipeToAndAwait(io.vertx.mutiny.core.streams.WriteStream);
public abstract void pipeToAndForget(io.vertx.mutiny.core.streams.WriteStream);
public abstract io.vertx.mutiny.core.http.WebSocketBase exceptionHandler(java.util.function.Consumer);
public abstract io.vertx.mutiny.core.http.WebSocketBase handler(java.util.function.Consumer);
public abstract io.vertx.mutiny.core.http.WebSocketBase pause();
public abstract io.vertx.mutiny.core.http.WebSocketBase resume();
public abstract io.vertx.mutiny.core.http.WebSocketBase fetch(long);
public abstract io.vertx.mutiny.core.http.WebSocketBase endHandler(java.lang.Runnable);
public abstract io.vertx.mutiny.core.http.WebSocketBase setWriteQueueMaxSize(int);
public abstract io.vertx.mutiny.core.http.WebSocketBase drainHandler(java.lang.Runnable);
public abstract java.lang.String binaryHandlerID();
public abstract java.lang.String textHandlerID();
public abstract java.lang.String subProtocol();
public abstract java.lang.Short closeStatusCode();
public abstract java.lang.String closeReason();
public abstract io.vertx.mutiny.core.MultiMap headers();
public abstract io.smallrye.mutiny.Uni writeFrame(io.vertx.mutiny.core.http.WebSocketFrame);
public abstract java.lang.Void writeFrameAndAwait(io.vertx.mutiny.core.http.WebSocketFrame);
public abstract io.vertx.mutiny.core.http.WebSocketBase writeFrameAndForget(io.vertx.mutiny.core.http.WebSocketFrame);
public abstract io.smallrye.mutiny.Uni writeFinalTextFrame(java.lang.String);
public abstract java.lang.Void writeFinalTextFrameAndAwait(java.lang.String);
public abstract io.vertx.mutiny.core.http.WebSocketBase writeFinalTextFrameAndForget(java.lang.String);
public abstract io.smallrye.mutiny.Uni writeFinalBinaryFrame(io.vertx.mutiny.core.buffer.Buffer);
public abstract java.lang.Void writeFinalBinaryFrameAndAwait(io.vertx.mutiny.core.buffer.Buffer);
public abstract io.vertx.mutiny.core.http.WebSocketBase writeFinalBinaryFrameAndForget(io.vertx.mutiny.core.buffer.Buffer);
public abstract io.smallrye.mutiny.Uni writeBinaryMessage(io.vertx.mutiny.core.buffer.Buffer);
public abstract java.lang.Void writeBinaryMessageAndAwait(io.vertx.mutiny.core.buffer.Buffer);
public abstract io.vertx.mutiny.core.http.WebSocketBase writeBinaryMessageAndForget(io.vertx.mutiny.core.buffer.Buffer);
public abstract io.smallrye.mutiny.Uni writeTextMessage(java.lang.String);
public abstract java.lang.Void writeTextMessageAndAwait(java.lang.String);
public abstract io.vertx.mutiny.core.http.WebSocketBase writeTextMessageAndForget(java.lang.String);
public abstract io.smallrye.mutiny.Uni writePing(io.vertx.mutiny.core.buffer.Buffer);
public abstract java.lang.Void writePingAndAwait(io.vertx.mutiny.core.buffer.Buffer);
public abstract io.vertx.mutiny.core.http.WebSocketBase writePingAndForget(io.vertx.mutiny.core.buffer.Buffer);
public abstract io.smallrye.mutiny.Uni writePong(io.vertx.mutiny.core.buffer.Buffer);
public abstract java.lang.Void writePongAndAwait(io.vertx.mutiny.core.buffer.Buffer);
public abstract io.vertx.mutiny.core.http.WebSocketBase writePongAndForget(io.vertx.mutiny.core.buffer.Buffer);
public abstract io.vertx.mutiny.core.http.WebSocketBase closeHandler(java.lang.Runnable);
public abstract io.vertx.mutiny.core.http.WebSocketBase frameHandler(java.util.function.Consumer);
public abstract io.vertx.mutiny.core.http.WebSocketBase textMessageHandler(java.util.function.Consumer);
public abstract io.vertx.mutiny.core.http.WebSocketBase binaryMessageHandler(java.util.function.Consumer);
public abstract io.vertx.mutiny.core.http.WebSocketBase pongHandler(java.util.function.Consumer);
public abstract io.smallrye.mutiny.Uni end();
public abstract java.lang.Void endAndAwait();
public abstract void endAndForget();
public abstract io.smallrye.mutiny.Uni close();
public abstract java.lang.Void closeAndAwait();
public abstract void closeAndForget();
public abstract io.smallrye.mutiny.Uni close(short);
public abstract java.lang.Void closeAndAwait(short);
public abstract void closeAndForget(short);
public abstract io.smallrye.mutiny.Uni close(short, java.lang.String);
public abstract java.lang.Void closeAndAwait(short, java.lang.String);
public abstract void closeAndForget(short, java.lang.String);
public abstract io.vertx.mutiny.core.net.SocketAddress remoteAddress();
public abstract io.vertx.mutiny.core.net.SocketAddress localAddress();
public abstract boolean isSsl();
public abstract boolean isClosed();
public abstract javax.net.ssl.SSLSession sslSession();
public static io.vertx.mutiny.core.http.WebSocketBase newInstance(io.vertx.core.http.WebSocketBase)
{
io.vertx.core.http.WebSocketBase v0;
io.vertx.mutiny.core.http.WebSocketBaseImpl v1;
v0 := @parameter0: io.vertx.core.http.WebSocketBase;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.http.WebSocketBaseImpl;
specialinvoke v1.<io.vertx.mutiny.core.http.WebSocketBaseImpl: void <init>(io.vertx.core.http.WebSocketBase)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
java.util.function.Function v1, v2;
io.smallrye.mutiny.vertx.TypeArg v0;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBase$lambda_static_0__1776: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBase$lambda_static_1__1777: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.http.WebSocketBase: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0> = v0;
return;
}
}