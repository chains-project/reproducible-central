public class io.vertx.mutiny.core.shareddata.AsyncMap extends java.lang.Object
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.shareddata.AsyncMap delegate;
public final io.smallrye.mutiny.vertx.TypeArg __typeArg_0;
public final io.smallrye.mutiny.vertx.TypeArg __typeArg_1;
public void <init>(io.vertx.core.shareddata.AsyncMap)
{
io.vertx.core.shareddata.AsyncMap v1;
io.smallrye.mutiny.vertx.TypeArg v2, v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: io.vertx.core.shareddata.AsyncMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.vertx.core.shareddata.AsyncMap delegate> = v1;
v2 = staticinvoke <io.smallrye.mutiny.vertx.TypeArg: io.smallrye.mutiny.vertx.TypeArg 'unknown'()>();
v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.vertx.TypeArg __typeArg_0> = v2;
v3 = staticinvoke <io.smallrye.mutiny.vertx.TypeArg: io.smallrye.mutiny.vertx.TypeArg 'unknown'()>();
v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.vertx.TypeArg __typeArg_1> = v3;
return;
}
public void <init>(java.lang.Object, io.smallrye.mutiny.vertx.TypeArg, io.smallrye.mutiny.vertx.TypeArg)
{
io.smallrye.mutiny.vertx.TypeArg v2, v3;
java.lang.Object v1;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.smallrye.mutiny.vertx.TypeArg;
v3 := @parameter2: io.smallrye.mutiny.vertx.TypeArg;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.vertx.core.shareddata.AsyncMap delegate> = v1;
v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.vertx.TypeArg __typeArg_0> = v2;
v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.vertx.TypeArg __typeArg_1> = v3;
return;
}
public void <init>(io.vertx.core.shareddata.AsyncMap, io.smallrye.mutiny.vertx.TypeArg, io.smallrye.mutiny.vertx.TypeArg)
{
io.vertx.core.shareddata.AsyncMap v1;
io.smallrye.mutiny.vertx.TypeArg v2, v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: io.vertx.core.shareddata.AsyncMap;
v2 := @parameter1: io.smallrye.mutiny.vertx.TypeArg;
v3 := @parameter2: io.smallrye.mutiny.vertx.TypeArg;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.vertx.core.shareddata.AsyncMap delegate> = v1;
v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.vertx.TypeArg __typeArg_0> = v2;
v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.vertx.TypeArg __typeArg_1> = v3;
return;
}
void <init>()
{
io.smallrye.mutiny.vertx.TypeArg v1, v2;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.vertx.core.shareddata.AsyncMap delegate> = null;
v1 = staticinvoke <io.smallrye.mutiny.vertx.TypeArg: io.smallrye.mutiny.vertx.TypeArg 'unknown'()>();
v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.vertx.TypeArg __typeArg_0> = v1;
v2 = staticinvoke <io.smallrye.mutiny.vertx.TypeArg: io.smallrye.mutiny.vertx.TypeArg 'unknown'()>();
v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.vertx.TypeArg __typeArg_1> = v2;
return;
}
public io.vertx.core.shareddata.AsyncMap getDelegate()
{
io.vertx.core.shareddata.AsyncMap v1;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.core.shareddata.AsyncMap v1;
java.lang.String v2;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.shareddata.AsyncMap v4, v5;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v5 = v1.<io.vertx.mutiny.core.shareddata.AsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.shareddata.AsyncMap v1;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public io.smallrye.mutiny.Uni get(java.lang.Object)
{
java.util.function.Consumer v2;
java.lang.Object v1;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_get_3__2182: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap,java.lang.Object)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Object getAndAwait(java.lang.Object)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v1, v4;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni get(java.lang.Object)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void getAndForget(java.lang.Object)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.Object v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni get(java.lang.Object)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni put(java.lang.Object, java.lang.Object)
{
java.util.function.Consumer v3;
java.lang.Object v1, v2;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_put_4__2183: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap,java.lang.Object,java.lang.Object)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void putAndAwait(java.lang.Object, java.lang.Object)
{
io.smallrye.mutiny.groups.UniAwait v4;
java.lang.Object v1, v2, v5;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni put(java.lang.Object,java.lang.Object)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void putAndForget(java.lang.Object, java.lang.Object)
{
java.util.function.Consumer v5;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.Object v1, v2;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni put(java.lang.Object,java.lang.Object)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.smallrye.mutiny.Uni put(java.lang.Object, java.lang.Object, long)
{
java.util.function.Consumer v4;
java.lang.Object v1, v2;
long v3;
io.smallrye.mutiny.Uni v5;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_put_5__2184: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap,java.lang.Object,java.lang.Object,long)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void putAndAwait(java.lang.Object, java.lang.Object, long)
{
io.smallrye.mutiny.groups.UniAwait v5;
java.lang.Object v1, v2, v6;
long v3;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni put(java.lang.Object,java.lang.Object,long)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public void putAndForget(java.lang.Object, java.lang.Object, long)
{
java.util.function.Consumer v6;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.Object v1, v2;
long v3;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni put(java.lang.Object,java.lang.Object,long)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return;
}
public io.smallrye.mutiny.Uni putIfAbsent(java.lang.Object, java.lang.Object)
{
java.util.function.Consumer v3;
java.lang.Object v1, v2;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_putIfAbsent_8__2185: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap,java.lang.Object,java.lang.Object)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Object putIfAbsentAndAwait(java.lang.Object, java.lang.Object)
{
io.smallrye.mutiny.groups.UniAwait v4;
java.lang.Object v1, v2, v5;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void putIfAbsentAndForget(java.lang.Object, java.lang.Object)
{
java.util.function.Consumer v5;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.Object v1, v2;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.smallrye.mutiny.Uni putIfAbsent(java.lang.Object, java.lang.Object, long)
{
java.util.function.Consumer v4;
java.lang.Object v1, v2;
long v3;
io.smallrye.mutiny.Uni v5;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_putIfAbsent_11__2186: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap,java.lang.Object,java.lang.Object,long)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Object putIfAbsentAndAwait(java.lang.Object, java.lang.Object, long)
{
io.smallrye.mutiny.groups.UniAwait v5;
java.lang.Object v1, v2, v6;
long v3;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni putIfAbsent(java.lang.Object,java.lang.Object,long)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public void putIfAbsentAndForget(java.lang.Object, java.lang.Object, long)
{
java.util.function.Consumer v6;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.Object v1, v2;
long v3;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni putIfAbsent(java.lang.Object,java.lang.Object,long)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return;
}
public io.smallrye.mutiny.Uni remove(java.lang.Object)
{
java.util.function.Consumer v2;
java.lang.Object v1;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_remove_14__2187: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap,java.lang.Object)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Object removeAndAwait(java.lang.Object)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v1, v4;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni remove(java.lang.Object)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void removeAndForget(java.lang.Object)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.Object v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni remove(java.lang.Object)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni removeIfPresent(java.lang.Object, java.lang.Object)
{
java.util.function.Consumer v3;
java.lang.Object v1, v2;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_removeIfPresent_15__2188: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap,java.lang.Object,java.lang.Object)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Boolean removeIfPresentAndAwait(java.lang.Object, java.lang.Object)
{
io.smallrye.mutiny.groups.UniAwait v4;
java.lang.Object v1, v2, v5;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni removeIfPresent(java.lang.Object,java.lang.Object)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void removeIfPresentAndForget(java.lang.Object, java.lang.Object)
{
java.util.function.Consumer v5;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.Object v1, v2;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni removeIfPresent(java.lang.Object,java.lang.Object)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.smallrye.mutiny.Uni replace(java.lang.Object, java.lang.Object)
{
java.util.function.Consumer v3;
java.lang.Object v1, v2;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_replace_18__2189: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap,java.lang.Object,java.lang.Object)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Object replaceAndAwait(java.lang.Object, java.lang.Object)
{
io.smallrye.mutiny.groups.UniAwait v4;
java.lang.Object v1, v2, v5;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni replace(java.lang.Object,java.lang.Object)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void replaceAndForget(java.lang.Object, java.lang.Object)
{
java.util.function.Consumer v5;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.Object v1, v2;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni replace(java.lang.Object,java.lang.Object)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.smallrye.mutiny.Uni replace(java.lang.Object, java.lang.Object, long)
{
java.util.function.Consumer v4;
java.lang.Object v1, v2;
long v3;
io.smallrye.mutiny.Uni v5;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_replace_21__2190: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap,java.lang.Object,java.lang.Object,long)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Object replaceAndAwait(java.lang.Object, java.lang.Object, long)
{
io.smallrye.mutiny.groups.UniAwait v5;
java.lang.Object v1, v2, v6;
long v3;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni replace(java.lang.Object,java.lang.Object,long)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public void replaceAndForget(java.lang.Object, java.lang.Object, long)
{
java.util.function.Consumer v6;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.Object v1, v2;
long v3;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni replace(java.lang.Object,java.lang.Object,long)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return;
}
public io.smallrye.mutiny.Uni replaceIfPresent(java.lang.Object, java.lang.Object, java.lang.Object)
{
java.util.function.Consumer v4;
java.lang.Object v1, v2, v3;
io.smallrye.mutiny.Uni v5;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_replaceIfPresent_22__2191: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap,java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Boolean replaceIfPresentAndAwait(java.lang.Object, java.lang.Object, java.lang.Object)
{
io.smallrye.mutiny.groups.UniAwait v5;
java.lang.Object v1, v2, v3, v6;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni replaceIfPresent(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public void replaceIfPresentAndForget(java.lang.Object, java.lang.Object, java.lang.Object)
{
java.util.function.Consumer v6;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.Object v1, v2, v3;
io.smallrye.mutiny.Uni v4;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni replaceIfPresent(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return;
}
public io.smallrye.mutiny.Uni replaceIfPresent(java.lang.Object, java.lang.Object, java.lang.Object, long)
{
java.util.function.Consumer v5;
java.lang.Object v1, v2, v3;
long v4;
io.smallrye.mutiny.Uni v6;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: long;
v5 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_replaceIfPresent_23__2192: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap,java.lang.Object,java.lang.Object,java.lang.Object,long)>(v0, v1, v2, v3, v4);
v6 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v5);
return v6;
}
public java.lang.Boolean replaceIfPresentAndAwait(java.lang.Object, java.lang.Object, java.lang.Object, long)
{
io.smallrye.mutiny.groups.UniAwait v6;
long v4;
io.smallrye.mutiny.Uni v5;
java.lang.Object v1, v2, v3, v7;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: long;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni replaceIfPresent(java.lang.Object,java.lang.Object,java.lang.Object,long)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v7 = virtualinvoke v6.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v7;
}
public void replaceIfPresentAndForget(java.lang.Object, java.lang.Object, java.lang.Object, long)
{
long v4;
io.smallrye.mutiny.Uni v5;
java.util.function.Consumer v7;
io.smallrye.mutiny.groups.UniSubscribe v6;
java.lang.Object v1, v2, v3;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: long;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni replaceIfPresent(java.lang.Object,java.lang.Object,java.lang.Object,long)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v7 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v6.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v7);
return;
}
public io.smallrye.mutiny.Uni clear()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_clear_24__2193: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void clearAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni clear()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void clearAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni clear()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni size()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_size_25__2194: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Integer sizeAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni size()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void sizeAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni size()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni keys()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_keys_29__2195: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.util.Set keysAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni keys()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void keysAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni keys()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni values()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_values_33__2196: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.shareddata.AsyncMap)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.util.List valuesAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni values()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void valuesAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
io.vertx.mutiny.core.shareddata.AsyncMap v0;
v0 := @this: io.vertx.mutiny.core.shareddata.AsyncMap;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.Uni values()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public static io.vertx.mutiny.core.shareddata.AsyncMap newInstance(io.vertx.core.shareddata.AsyncMap)
{
io.vertx.core.shareddata.AsyncMap v0;
io.vertx.mutiny.core.shareddata.AsyncMap v1;
v0 := @parameter0: io.vertx.core.shareddata.AsyncMap;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.shareddata.AsyncMap;
specialinvoke v1.<io.vertx.mutiny.core.shareddata.AsyncMap: void <init>(io.vertx.core.shareddata.AsyncMap)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
public static io.vertx.mutiny.core.shareddata.AsyncMap newInstance(io.vertx.core.shareddata.AsyncMap, io.smallrye.mutiny.vertx.TypeArg, io.smallrye.mutiny.vertx.TypeArg)
{
io.vertx.core.shareddata.AsyncMap v0;
io.smallrye.mutiny.vertx.TypeArg v1, v2;
io.vertx.mutiny.core.shareddata.AsyncMap v3;
v0 := @parameter0: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter1: io.smallrye.mutiny.vertx.TypeArg;
v2 := @parameter2: io.smallrye.mutiny.vertx.TypeArg;
if v0 == null goto label1;
v3 = new io.vertx.mutiny.core.shareddata.AsyncMap;
specialinvoke v3.<io.vertx.mutiny.core.shareddata.AsyncMap: void <init>(io.vertx.core.shareddata.AsyncMap,io.smallrye.mutiny.vertx.TypeArg,io.smallrye.mutiny.vertx.TypeArg)>(v0, v1, v2);
goto label2;
label1:
v3 = null;
label2:
return v3;
}
static void <clinit>()
{
java.util.function.Function v1, v2;
io.smallrye.mutiny.vertx.TypeArg v0;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$lambda_static_0__2215: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.shareddata.AsyncMap$getDelegate__2216: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.shareddata.AsyncMap: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
return;
}
}