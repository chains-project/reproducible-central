public class io.vertx.uritemplate.impl.UriTemplateImpl$Parser extends java.lang.Object
{
private io.vertx.uritemplate.impl.UriTemplateImpl template;
private io.vertx.uritemplate.impl.UriTemplateImpl$Expression expression;
private int digit;
private char pctEncoded;
public java.lang.StringBuilder literals;
public io.vertx.uritemplate.impl.UriTemplateImpl$Varspec varspec;
private java.lang.StringBuilder sb;
private boolean exploded;
private int maxLength;
public void <init>()
{
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public io.vertx.uritemplate.impl.UriTemplateImpl parseURITemplate(java.lang.String)
{
io.vertx.uritemplate.impl.UriTemplateImpl$Term v16;
int v3, v4;
java.lang.String v1;
io.vertx.uritemplate.impl.UriTemplateImpl$Operator v12, v13;
boolean v11, v9;
java.util.Iterator v8;
java.lang.IllegalArgumentException v14, v5;
java.util.List v7;
io.vertx.uritemplate.impl.UriTemplateImpl v15, v2, v6;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
java.lang.Object v10;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 = new io.vertx.uritemplate.impl.UriTemplateImpl;
specialinvoke v2.<io.vertx.uritemplate.impl.UriTemplateImpl: void <init>()>();
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl template> = v2;
v3 = virtualinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseURITemplate(java.lang.String,int)>(v1, 0);
v4 = virtualinvoke v1.<java.lang.String: int length()>();
if v3 == v4 goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>()>();
throw v5;
label1:
v6 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl template>;
v7 = v6.<io.vertx.uritemplate.impl.UriTemplateImpl: java.util.List terms>;
v8 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
label2:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label3;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = v10 instanceof io.vertx.uritemplate.impl.UriTemplateImpl$Expression;
if v11 == 0 goto label2;
v12 = v16.<io.vertx.uritemplate.impl.UriTemplateImpl$Expression: io.vertx.uritemplate.impl.UriTemplateImpl$Operator operator>;
v13 = <io.vertx.uritemplate.impl.UriTemplateImpl$Operator: io.vertx.uritemplate.impl.UriTemplateImpl$Operator FUTURE>;
if v12 != v13 goto label2;
v14 = new java.lang.IllegalArgumentException;
specialinvoke v14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid reserved operator");
throw v14;
label3:
v15 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl template>;
return v15;
}
public int parseURITemplate(java.lang.String, int)
{
io.vertx.uritemplate.impl.UriTemplateImpl$Literals v6;
java.util.List v5;
io.vertx.uritemplate.impl.UriTemplateImpl v4;
int v2, v3, v9;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
java.lang.StringBuilder v7;
java.lang.String v1, v8;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
label1:
v3 = virtualinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseLiterals(java.lang.String,int)>(v1, v2);
if v3 <= v2 goto label2;
v4 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl template>;
v5 = v4.<io.vertx.uritemplate.impl.UriTemplateImpl: java.util.List terms>;
v6 = new io.vertx.uritemplate.impl.UriTemplateImpl$Literals;
v7 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: java.lang.StringBuilder literals>;
v8 = virtualinvoke v7.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v6.<io.vertx.uritemplate.impl.UriTemplateImpl$Literals: void <init>(java.lang.String)>(v8);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v6);
v2 = v3;
goto label1;
label2:
v9 = virtualinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseExpression(java.lang.String,int)>(v1, v2);
if v9 <= v2 goto label3;
v2 = v9;
goto label1;
label3:
return v2;
}
public int parseExpression(java.lang.String, int)
{
io.vertx.uritemplate.impl.UriTemplateImpl$Expression v12, v19;
io.netty.util.collection.CharObjectMap v9;
int v13, v14, v2, v3, v5, v6;
java.lang.String v1;
boolean v8;
char v10, v15, v4, v7;
java.util.List v18;
io.vertx.uritemplate.impl.UriTemplateImpl v16, v17;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
java.lang.Object v11;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 >= v3 goto label5;
v4 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v4 != 123 goto label5;
v5 = v2 + 1;
v6 = virtualinvoke v1.<java.lang.String: int length()>();
if v5 >= v6 goto label1;
v7 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v5);
v8 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isOperator(char)>(v7);
if v8 == 0 goto label1;
v9 = <io.vertx.uritemplate.impl.UriTemplateImpl: io.netty.util.collection.CharObjectMap mapping>;
v10 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v5);
v11 = interfaceinvoke v9.<io.netty.util.collection.CharObjectMap: java.lang.Object get(char)>(v10);
v5 = v5 + 1;
goto label2;
label1:
v11 = <io.vertx.uritemplate.impl.UriTemplateImpl$Operator: io.vertx.uritemplate.impl.UriTemplateImpl$Operator SIMPLE_STRING_EXPANSION>;
label2:
v12 = new io.vertx.uritemplate.impl.UriTemplateImpl$Expression;
specialinvoke v12.<io.vertx.uritemplate.impl.UriTemplateImpl$Expression: void <init>(io.vertx.uritemplate.impl.UriTemplateImpl$Operator)>(v11);
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl$Expression expression> = v12;
v13 = virtualinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseVariableList(java.lang.String,int)>(v1, v5);
v14 = virtualinvoke v1.<java.lang.String: int length()>();
if v13 >= v14 goto label3;
v15 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v13);
if v15 != 125 goto label3;
v2 = v13 + 1;
label3:
v16 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl template>;
if v16 == null goto label4;
v17 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl template>;
v18 = v17.<io.vertx.uritemplate.impl.UriTemplateImpl: java.util.List terms>;
v19 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl$Expression expression>;
interfaceinvoke v18.<java.util.List: boolean add(java.lang.Object)>(v19);
label4:
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl$Expression expression> = null;
label5:
return v2;
}
private static boolean isALPHA(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if 65 > v0 goto label1;
if v0 <= 90 goto label2;
label1:
if 97 > v0 goto label3;
if v0 > 122 goto label3;
label2:
v1 = 1;
goto label4;
label3:
v1 = 0;
label4:
return v1;
}
public int parseDIGIT(java.lang.String, int)
{
int v2, v3, v6;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
char v4;
java.lang.String v1;
boolean v5;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 >= v3 goto label1;
v4 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
v5 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isDIGIT(char)>(v4);
if v5 == 0 goto label1;
v6 = v4 - 48;
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int digit> = v6;
v2 = v2 + 1;
label1:
return v2;
}
private static boolean isDIGIT(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if 48 > v0 goto label1;
if v0 > 57 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
static boolean isHEXDIG(char)
{
char v0;
boolean v1, v2;
v0 := @parameter0: char;
v1 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isDIGIT(char)>(v0);
if v1 != 0 goto label2;
if 65 > v0 goto label1;
if v0 <= 70 goto label2;
label1:
if 97 > v0 goto label3;
if v0 > 102 goto label3;
label2:
v2 = 1;
goto label4;
label3:
v2 = 0;
label4:
return v2;
}
private int parsePctEncoded(java.lang.String, int)
{
byte[] v3;
java.nio.ByteBuffer v21;
java.nio.charset.CoderResult v25;
java.nio.charset.Charset v22;
int v10, v13, v14, v15, v16, v17, v18, v2, v20, v4, v5, v7;
java.lang.String v1, v19;
boolean v12, v26, v9;
java.nio.CharBuffer v24;
char v11, v27, v6, v8;
java.nio.charset.CharsetDecoder v23;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = newarray (byte)[0];
label1:
v4 = v2 + 2;
v5 = virtualinvoke v1.<java.lang.String: int length()>();
if v4 >= v5 goto label2;
v6 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v6 != 37 goto label2;
v7 = v2 + 1;
v8 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v7);
v9 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isHEXDIG(char)>(v8);
if v9 == 0 goto label2;
v10 = v2 + 2;
v11 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v10);
v12 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isHEXDIG(char)>(v11);
if v12 == 0 goto label2;
v13 = lengthof v3;
v14 = v13 + 1;
v3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(v3, v14);
v15 = lengthof v3;
v16 = v15 - 1;
v17 = v2 + 1;
v18 = v2 + 3;
v19 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(v17, v18);
v20 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(v19, 16);
v3[v16] = v20;
v2 = v2 + 3;
v21 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(v3);
v22 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
v23 = virtualinvoke v22.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();
v24 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(1);
v25 = virtualinvoke v23.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>(v21, v24, 1);
v26 = virtualinvoke v25.<java.nio.charset.CoderResult: boolean isUnderflow()>();
if v26 == 0 goto label1;
virtualinvoke v23.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>(v24);
virtualinvoke v24.<java.nio.CharBuffer: java.nio.CharBuffer flip()>();
v27 = virtualinvoke v24.<java.nio.CharBuffer: char charAt(int)>(0);
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: char pctEncoded> = v27;
label2:
return v2;
}
private static boolean isUnreserved(char)
{
char v0;
boolean v1, v2, v3;
v0 := @parameter0: char;
v1 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isALPHA(char)>(v0);
if v1 != 0 goto label1;
v2 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isDIGIT(char)>(v0);
if v2 != 0 goto label1;
if v0 == 45 goto label1;
if v0 == 46 goto label1;
if v0 == 95 goto label1;
if v0 != 126 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
private static boolean isReserved(char)
{
char v0;
boolean v1, v2, v3;
v0 := @parameter0: char;
v1 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isGenDelims(char)>(v0);
if v1 != 0 goto label1;
v2 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isSubDelims(char)>(v0);
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
private static boolean isGenDelims(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 == 58 goto label1;
if v0 == 47 goto label1;
if v0 == 63 goto label1;
if v0 == 35 goto label1;
if v0 == 91 goto label1;
if v0 == 93 goto label1;
if v0 != 64 goto label2;
label1:
v1 = 1;
goto label3;
label2:
v1 = 0;
label3:
return v1;
}
private static boolean isSubDelims(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 == 33 goto label1;
if v0 == 36 goto label1;
if v0 == 38 goto label1;
if v0 == 39 goto label1;
if v0 == 40 goto label1;
if v0 == 41 goto label1;
if v0 == 42 goto label1;
if v0 == 43 goto label1;
if v0 == 44 goto label1;
if v0 == 59 goto label1;
if v0 != 61 goto label2;
label1:
v1 = 1;
goto label3;
label2:
v1 = 0;
label3:
return v1;
}
private static boolean isIprivate(int)
{
int v0, v1, v2;
boolean v3;
v0 := @parameter0: int;
v1 = (int) 57344;
if v1 > v0 goto label1;
v2 = (int) 63743;
if v0 <= v2 goto label3;
label1:
if 983040 > v0 goto label2;
if v0 <= 1048573 goto label3;
label2:
if 1048576 > v0 goto label4;
if v0 > 1114109 goto label4;
label3:
v3 = 1;
goto label5;
label4:
v3 = 0;
label5:
return v3;
}
private static boolean isUcschar(int)
{
int v0, v1, v2, v3, v4, v5;
boolean v6;
v0 := @parameter0: int;
if 160 > v0 goto label01;
v1 = (int) 55295;
if v0 <= v1 goto label17;
label01:
v2 = (int) 63744;
if v2 > v0 goto label02;
v3 = (int) 64975;
if v0 <= v3 goto label17;
label02:
v4 = (int) 65008;
if v4 > v0 goto label03;
v5 = (int) 65519;
if v0 <= v5 goto label17;
label03:
if 65536 > v0 goto label04;
if v0 <= 131069 goto label17;
label04:
if 131072 > v0 goto label05;
if v0 <= 196605 goto label17;
label05:
if 196608 > v0 goto label06;
if v0 <= 262141 goto label17;
label06:
if 262144 > v0 goto label07;
if v0 <= 327677 goto label17;
label07:
if 327680 > v0 goto label08;
if v0 <= 393213 goto label17;
label08:
if 393216 > v0 goto label09;
if v0 <= 458749 goto label17;
label09:
if 458752 > v0 goto label10;
if v0 <= 524285 goto label17;
label10:
if 524288 > v0 goto label11;
if v0 <= 589821 goto label17;
label11:
if 589824 > v0 goto label12;
if v0 <= 655357 goto label17;
label12:
if 655360 > v0 goto label13;
if v0 <= 720893 goto label17;
label13:
if 720896 > v0 goto label14;
if v0 <= 786429 goto label17;
label14:
if 786432 > v0 goto label15;
if v0 <= 851965 goto label17;
label15:
if 851968 > v0 goto label16;
if v0 <= 917501 goto label17;
label16:
if 921600 > v0 goto label18;
if v0 > 983037 goto label18;
label17:
v6 = 1;
goto label19;
label18:
v6 = 0;
label19:
return v6;
}
public int parseLiterals(java.lang.String, int)
{
int v10, v12, v15, v18, v2, v4, v9;
io.vertx.uritemplate.impl.UriTemplateImpl$CharSet v6;
java.lang.String v1, v16;
boolean v13, v14, v8;
char v5;
java.lang.IllegalArgumentException v11;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
java.lang.StringBuilder v17, v19, v3, v7;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = new java.lang.StringBuilder;
specialinvoke v3.<java.lang.StringBuilder: void <init>()>();
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: java.lang.StringBuilder literals> = v3;
label01:
v4 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 >= v4 goto label11;
v5 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v5 == 33 goto label06;
if 35 > v5 goto label02;
if v5 <= 36 goto label06;
label02:
if v5 == 38 goto label06;
if 40 > v5 goto label03;
if v5 <= 59 goto label06;
label03:
if v5 == 61 goto label06;
if 63 > v5 goto label04;
if v5 <= 91 goto label06;
label04:
if v5 == 93 goto label06;
if v5 == 95 goto label06;
if 97 > v5 goto label05;
if v5 <= 122 goto label06;
label05:
if v5 != 126 goto label07;
label06:
v2 = v2 + 1;
v6 = <io.vertx.uritemplate.impl.UriTemplateImpl$CharSet: io.vertx.uritemplate.impl.UriTemplateImpl$CharSet LITERALS>;
v7 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: java.lang.StringBuilder literals>;
staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl: void encodeChar(char,io.vertx.uritemplate.impl.UriTemplateImpl$CharSet,java.lang.StringBuilder)>(v5, v6, v7);
goto label01;
label07:
v8 = staticinvoke <java.lang.Character: boolean isSurrogate(char)>(v5);
if v8 == 0 goto label10;
v9 = v2 + 1;
v10 = virtualinvoke v1.<java.lang.String: int length()>();
if v9 < v10 goto label08;
v11 = new java.lang.IllegalArgumentException;
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>()>();
throw v11;
label08:
v12 = virtualinvoke v1.<java.lang.String: int codePointAt(int)>(v2);
v13 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isUcschar(int)>(v12);
if v13 != 0 goto label09;
v14 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isIprivate(int)>(v12);
if v14 == 0 goto label11;
label09:
v15 = v2 + 2;
v16 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(v2, v15);
v17 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: java.lang.StringBuilder literals>;
staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl: void pctEncode(java.lang.String,java.lang.StringBuilder)>(v16, v17);
v2 = v2 + 2;
goto label01;
label10:
v18 = specialinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parsePctEncoded(java.lang.String,int)>(v1, v2);
if v18 == v2 goto label11;
v19 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: java.lang.StringBuilder literals>;
virtualinvoke v19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v1, v2, v18);
v2 = v18;
goto label01;
label11:
return v2;
}
private static boolean isOperator(char)
{
char v0;
boolean v1, v2, v3, v4;
v0 := @parameter0: char;
v1 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isOpLevel2(char)>(v0);
if v1 != 0 goto label1;
v2 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isOpLevel3(char)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isOpReserve(char)>(v0);
if v3 == 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
private static boolean isOpLevel2(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 == 43 goto label1;
if v0 != 35 goto label2;
label1:
v1 = 1;
goto label3;
label2:
v1 = 0;
label3:
return v1;
}
private static boolean isOpLevel3(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 == 46 goto label1;
if v0 == 47 goto label1;
if v0 == 59 goto label1;
if v0 == 63 goto label1;
if v0 != 38 goto label2;
label1:
v1 = 1;
goto label3;
label2:
v1 = 0;
label3:
return v1;
}
private static boolean isOpReserve(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 == 61 goto label1;
if v0 == 44 goto label1;
if v0 == 33 goto label1;
if v0 == 64 goto label1;
if v0 != 124 goto label2;
label1:
v1 = 1;
goto label3;
label2:
v1 = 0;
label3:
return v1;
}
public int parseVariableList(java.lang.String, int)
{
io.vertx.uritemplate.impl.UriTemplateImpl$Expression v13, v14, v4, v5;
int v10, v11, v12, v2, v3, v8;
java.lang.String v1;
io.vertx.uritemplate.impl.UriTemplateImpl$Varspec v16, v7;
char v9;
java.util.List v15, v6;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseVarspec(java.lang.String,int)>(v1, v2);
v4 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl$Expression expression>;
if v4 == null goto label1;
v5 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl$Expression expression>;
v6 = v5.<io.vertx.uritemplate.impl.UriTemplateImpl$Expression: java.util.List value>;
v7 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl$Varspec varspec>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v7);
label1:
if v3 <= v2 goto label4;
v2 = v3;
label2:
v8 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 >= v8 goto label4;
v9 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v9 != 44 goto label4;
v10 = v2 + 1;
v11 = virtualinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseVarspec(java.lang.String,int)>(v1, v10);
v12 = v2 + 1;
if v11 <= v12 goto label4;
v13 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl$Expression expression>;
if v13 == null goto label3;
v14 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl$Expression expression>;
v15 = v14.<io.vertx.uritemplate.impl.UriTemplateImpl$Expression: java.util.List value>;
v16 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl$Varspec varspec>;
interfaceinvoke v15.<java.util.List: boolean add(java.lang.Object)>(v16);
label3:
v2 = v11;
goto label2;
label4:
return v2;
}
public int parseVarspec(java.lang.String, int)
{
io.vertx.uritemplate.impl.UriTemplateImpl$Varspec v5;
int v2, v3, v8;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
java.lang.StringBuilder v6;
java.lang.String v1, v4, v7;
boolean v9;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl$Varspec varspec> = null;
v3 = virtualinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseVarname(java.lang.String,int)>(v1, v2);
if v3 <= v2 goto label1;
v4 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(v2, v3);
v2 = virtualinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseModifierLevel4(java.lang.String,int)>(v1, v3);
v5 = new io.vertx.uritemplate.impl.UriTemplateImpl$Varspec;
v6 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: java.lang.StringBuilder sb>;
v7 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.String toString()>();
v8 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int maxLength>;
v9 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean exploded>;
specialinvoke v5.<io.vertx.uritemplate.impl.UriTemplateImpl$Varspec: void <init>(java.lang.String,java.lang.String,int,boolean)>(v4, v7, v8, v9);
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: io.vertx.uritemplate.impl.UriTemplateImpl$Varspec varspec> = v5;
label1:
return v2;
}
public int parseVarname(java.lang.String, int)
{
char v6;
int v10, v2, v4, v5, v8, v9;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
java.lang.StringBuilder v3, v7;
java.lang.String v1;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = new java.lang.StringBuilder;
specialinvoke v3.<java.lang.StringBuilder: void <init>()>();
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: java.lang.StringBuilder sb> = v3;
v4 = specialinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseVarchar(java.lang.String,int)>(v1, v2);
label1:
if v4 <= v2 goto label3;
v2 = v4;
v5 = virtualinvoke v1.<java.lang.String: int length()>();
if v4 >= v5 goto label2;
v6 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v4);
if v6 != 46 goto label2;
v7 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: java.lang.StringBuilder sb>;
virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
v8 = v4 + 1;
v9 = specialinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseVarchar(java.lang.String,int)>(v1, v8);
v10 = v4 + 1;
if v9 <= v10 goto label1;
v4 = v9;
goto label1;
label2:
v4 = specialinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseVarchar(java.lang.String,int)>(v1, v2);
goto label1;
label3:
return v4;
}
private int parseVarchar(java.lang.String, int)
{
char v10, v4;
int v2, v3, v8;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
java.lang.StringBuilder v7, v9;
java.lang.String v1;
boolean v5, v6;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 >= v3 goto label3;
v4 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
v5 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isALPHA(char)>(v4);
if v5 != 0 goto label1;
v6 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isDIGIT(char)>(v4);
if v6 != 0 goto label1;
if v4 != 95 goto label2;
label1:
v7 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: java.lang.StringBuilder sb>;
virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v4);
v2 = v2 + 1;
goto label3;
label2:
v8 = specialinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parsePctEncoded(java.lang.String,int)>(v1, v2);
if v8 <= v2 goto label3;
v9 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: java.lang.StringBuilder sb>;
v10 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: char pctEncoded>;
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v10);
v2 = v8;
label3:
return v2;
}
public int parseModifierLevel4(java.lang.String, int)
{
char v6;
int v2, v3, v4, v5;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
java.lang.String v1;
boolean v7;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean exploded> = 0;
v3 = (int) -1;
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int maxLength> = v3;
v4 = virtualinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parsePrefixModifier(java.lang.String,int)>(v1, v2);
if v4 <= v2 goto label1;
v2 = v4;
goto label2;
label1:
v5 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 >= v5 goto label2;
v6 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
v7 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isExplode(char)>(v6);
if v7 == 0 goto label2;
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean exploded> = 1;
v2 = v2 + 1;
label2:
return v2;
}
public int parsePrefixModifier(java.lang.String, int)
{
char v4;
int v2, v3, v5, v6, v7;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
java.lang.String v1;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 >= v3 goto label1;
v4 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v4 != 58 goto label1;
v5 = v2 + 1;
v6 = virtualinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseMaxLength(java.lang.String,int)>(v1, v5);
v7 = v2 + 1;
if v6 <= v7 goto label1;
v2 = v6;
label1:
return v2;
}
public int parseMaxLength(java.lang.String, int)
{
char v4;
int v10, v11, v2, v3, v5, v6, v7, v8, v9;
io.vertx.uritemplate.impl.UriTemplateImpl$Parser v0;
java.lang.String v1;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl$Parser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 >= v3 goto label3;
v4 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if 49 > v4 goto label3;
if v4 > 57 goto label3;
v2 = v2 + 1;
v5 = v4 - 48;
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int maxLength> = v5;
v6 = 0;
label1:
if v6 >= 3 goto label3;
v7 = virtualinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int parseDIGIT(java.lang.String,int)>(v1, v2);
if v7 <= v2 goto label2;
v8 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int maxLength>;
v9 = v8 * 10;
v10 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int digit>;
v11 = v9 + v10;
v0.<io.vertx.uritemplate.impl.UriTemplateImpl$Parser: int maxLength> = v11;
v2 = v2 + 1;
label2:
v6 = v6 + 1;
goto label1;
label3:
return v2;
}
private static boolean isExplode(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 != 42 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
}