class jakarta.el.ELUtil$ConstructorWrapper extends jakarta.el.ELUtil$Wrapper
{
private final java.lang.reflect.Constructor c;
public void <init>(java.lang.reflect.Constructor)
{
java.lang.reflect.Constructor v1;
jakarta.el.ELUtil$ConstructorWrapper v0;
v0 := @this: jakarta.el.ELUtil$ConstructorWrapper;
v1 := @parameter0: java.lang.reflect.Constructor;
specialinvoke v0.<jakarta.el.ELUtil$Wrapper: void <init>()>();
v0.<jakarta.el.ELUtil$ConstructorWrapper: java.lang.reflect.Constructor c> = v1;
return;
}
public java.lang.Object unWrap()
{
java.lang.reflect.Constructor v1;
jakarta.el.ELUtil$ConstructorWrapper v0;
v0 := @this: jakarta.el.ELUtil$ConstructorWrapper;
v1 = v0.<jakarta.el.ELUtil$ConstructorWrapper: java.lang.reflect.Constructor c>;
return v1;
}
public java.lang.Class[] getParameterTypes()
{
java.lang.Class[] v2;
java.lang.reflect.Constructor v1;
jakarta.el.ELUtil$ConstructorWrapper v0;
v0 := @this: jakarta.el.ELUtil$ConstructorWrapper;
v1 = v0.<jakarta.el.ELUtil$ConstructorWrapper: java.lang.reflect.Constructor c>;
v2 = virtualinvoke v1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
return v2;
}
public boolean isVarArgs()
{
java.lang.reflect.Constructor v1;
jakarta.el.ELUtil$ConstructorWrapper v0;
boolean v2;
v0 := @this: jakarta.el.ELUtil$ConstructorWrapper;
v1 = v0.<jakarta.el.ELUtil$ConstructorWrapper: java.lang.reflect.Constructor c>;
v2 = virtualinvoke v1.<java.lang.reflect.Constructor: boolean isVarArgs()>();
return v2;
}
public boolean isBridge()
{
jakarta.el.ELUtil$ConstructorWrapper v0;
v0 := @this: jakarta.el.ELUtil$ConstructorWrapper;
return 0;
}
}