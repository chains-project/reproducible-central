abstract class jakarta.el.ELUtil$Wrapper extends java.lang.Object
{
private void <init>()
{
jakarta.el.ELUtil$Wrapper v0;
v0 := @this: jakarta.el.ELUtil$Wrapper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.List wrap(java.lang.reflect.Method[], java.lang.String)
{
jakarta.el.ELUtil$MethodWrapper v8;
java.lang.reflect.Method[] v0;
java.util.ArrayList v2;
int v3, v4;
java.lang.String v1, v6;
java.lang.reflect.Method v5;
boolean v7;
v0 := @parameter0: java.lang.reflect.Method[];
v1 := @parameter1: java.lang.String;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = lengthof v0;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v0[v4];
v6 = virtualinvoke v5.<java.lang.reflect.Method: java.lang.String getName()>();
v7 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v7 == 0 goto label2;
v8 = new jakarta.el.ELUtil$MethodWrapper;
specialinvoke v8.<jakarta.el.ELUtil$MethodWrapper: void <init>(java.lang.reflect.Method)>(v5);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v8);
label2:
v4 = v4 + 1;
goto label1;
label3:
return v2;
}
public static java.util.List wrap(java.lang.reflect.Constructor[])
{
java.lang.reflect.Constructor[] v0;
int v2, v3;
java.lang.reflect.Constructor v4;
jakarta.el.ELUtil$ConstructorWrapper v5;
java.util.ArrayList v1;
v0 := @parameter0: java.lang.reflect.Constructor[];
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = lengthof v0;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v0[v3];
v5 = new jakarta.el.ELUtil$ConstructorWrapper;
specialinvoke v5.<jakarta.el.ELUtil$ConstructorWrapper: void <init>(java.lang.reflect.Constructor)>(v4);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v5);
v3 = v3 + 1;
goto label1;
label2:
return v1;
}
public abstract java.lang.Object unWrap();
public abstract java.lang.Class[] getParameterTypes();
public abstract boolean isVarArgs();
public abstract boolean isBridge();
}