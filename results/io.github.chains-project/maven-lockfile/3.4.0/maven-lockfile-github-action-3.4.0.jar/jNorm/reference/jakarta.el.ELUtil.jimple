class jakarta.el.ELUtil extends java.lang.Object
{
private static java.lang.ThreadLocal instance;
private void <init>()
{
jakarta.el.ELUtil v0;
v0 := @this: jakarta.el.ELUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
private static java.util.Map getCurrentInstance()
{
java.lang.Object v1;
java.lang.ThreadLocal v0;
java.util.HashMap v2;
v0 = <jakarta.el.ELUtil: java.lang.ThreadLocal instance>;
v1 = virtualinvoke v0.<java.lang.ThreadLocal: java.lang.Object get()>();
if v1 != null goto label1;
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v1 = v2;
staticinvoke <jakarta.el.ELUtil: void setCurrentInstance(java.util.Map)>(v2);
label1:
return v1;
}
private static void setCurrentInstance(java.util.Map)
{
java.lang.ThreadLocal v1;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = <jakarta.el.ELUtil: java.lang.ThreadLocal instance>;
virtualinvoke v1.<java.lang.ThreadLocal: void set(java.lang.Object)>(v0);
return;
}
public static java.lang.String getExceptionMessageString(jakarta.el.ELContext, java.lang.String)
{
jakarta.el.ELContext v0;
java.lang.String v1, v2;
v0 := @parameter0: jakarta.el.ELContext;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <jakarta.el.ELUtil: java.lang.String getExceptionMessageString(jakarta.el.ELContext,java.lang.String,java.lang.Object[])>(v0, v1, null);
return v2;
}
public static java.lang.String getExceptionMessageString(jakarta.el.ELContext, java.lang.String, java.lang.Object[])
{
jakarta.el.ELContext v0;
java.lang.Object[] v2;
java.util.MissingResourceException v12;
java.lang.IllegalArgumentException v11;
java.lang.Exception v13;
java.util.ResourceBundle v9;
java.util.Locale v4, v5;
java.util.Map v6;
java.lang.Object v8;
java.lang.String v1, v10, v3, v7;
v0 := @parameter0: jakarta.el.ELContext;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
v3 = "";
if null == v0 goto label01;
if null != v1 goto label02;
label01:
return "";
label02:
v4 = virtualinvoke v0.<jakarta.el.ELContext: java.util.Locale getLocale()>();
v5 = v4;
if null != v4 goto label03;
v5 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
label03:
if v5 == null goto label10;
v6 = staticinvoke <jakarta.el.ELUtil: java.util.Map getCurrentInstance()>();
v7 = virtualinvoke v5.<java.util.Locale: java.lang.String toString()>();
v8 = interfaceinvoke v6.<java.util.Map: java.lang.Object get(java.lang.Object)>(v7);
v9 = v8;
if null != v8 goto label04;
v9 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>("jakarta.el.PrivateMessages", v5);
v10 = virtualinvoke v5.<java.util.Locale: java.lang.String toString()>();
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v9);
label04:
if null == v9 goto label10;
label05:
v3 = virtualinvoke v9.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(v1);
if null == v2 goto label10;
v3 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>(v3, v2);
label06:
goto label10;
label07:
v11 := @caughtexception;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t get localized message: parameters to message appear to be incorrect.  Message to format: \u0001");
goto label10;
label08:
v12 := @caughtexception;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Missing Resource in Jakarta Expression Language implementation: ???\u0001???");
goto label10;
label09:
v13 := @caughtexception;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Exception resolving message in Jakarta Expression Language implementation: ???\u0001???");
label10:
return v3;
catch java.lang.IllegalArgumentException from label05 to label06 with label07;
catch java.util.MissingResourceException from label05 to label06 with label08;
catch java.lang.Exception from label05 to label06 with label09;
}
static java.lang.reflect.Constructor findConstructor(java.lang.Class, java.lang.Class[], java.lang.Object[])
{
java.lang.Object[] v2;
java.lang.Class[] v1;
java.lang.reflect.Constructor v10;
java.lang.reflect.Constructor[] v6;
java.util.List v7;
jakarta.el.ELUtil$Wrapper v8;
java.lang.Class v0;
java.lang.Object v9;
java.lang.String v4, v5;
jakarta.el.MethodNotFoundException v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class[];
v2 := @parameter2: java.lang.Object[];
if v0 != null goto label1;
v3 = new jakarta.el.MethodNotFoundException;
v4 = staticinvoke <jakarta.el.ELUtil: java.lang.String paramString(java.lang.Class[])>(v1);
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class,java.lang.String,java.lang.String)>(v0, "<init>", v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Method not found: \u0001.\u0001(\u0001)");
specialinvoke v3.<jakarta.el.MethodNotFoundException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
if v1 != null goto label2;
v1 = staticinvoke <jakarta.el.ELUtil: java.lang.Class[] getTypesFromValues(java.lang.Object[])>(v2);
label2:
v6 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();
v7 = staticinvoke <jakarta.el.ELUtil$Wrapper: java.util.List wrap(java.lang.reflect.Constructor[])>(v6);
v8 = staticinvoke <jakarta.el.ELUtil: jakarta.el.ELUtil$Wrapper findWrapper(java.lang.Class,java.util.List,java.lang.String,java.lang.Class[],java.lang.Object[])>(v0, v7, "<init>", v1, v2);
if v8 != null goto label3;
return null;
label3:
v9 = virtualinvoke v8.<jakarta.el.ELUtil$Wrapper: java.lang.Object unWrap()>();
v10 = staticinvoke <jakarta.el.ELUtil: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.reflect.Constructor)>(v0, v9);
return v10;
}
static java.lang.Object invokeConstructor(jakarta.el.ELContext, java.lang.reflect.Constructor, java.lang.Object[])
{
java.lang.Throwable v13, v16;
java.lang.Object[] v2, v5;
jakarta.el.ELException v10, v12, v15, v8;
java.lang.reflect.Constructor v1;
java.lang.InstantiationException v14;
boolean v4;
jakarta.el.ELContext v0;
java.lang.IllegalAccessException v7;
java.lang.Class[] v3;
java.lang.IllegalArgumentException v9;
java.lang.reflect.InvocationTargetException v11;
java.lang.Object v6;
v0 := @parameter0: jakarta.el.ELContext;
v1 := @parameter1: java.lang.reflect.Constructor;
v2 := @parameter2: java.lang.Object[];
v3 = virtualinvoke v1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
v4 = virtualinvoke v1.<java.lang.reflect.Constructor: boolean isVarArgs()>();
v5 = staticinvoke <jakarta.el.ELUtil: java.lang.Object[] buildParameters(jakarta.el.ELContext,java.lang.Class[],boolean,java.lang.Object[])>(v0, v3, v4, v2);
label1:
v6 = virtualinvoke v1.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v5);
label2:
return v6;
label3:
v7 := @caughtexception;
v8 = new jakarta.el.ELException;
specialinvoke v8.<jakarta.el.ELException: void <init>(java.lang.Throwable)>(v7);
throw v8;
label4:
v9 := @caughtexception;
v10 = new jakarta.el.ELException;
specialinvoke v10.<jakarta.el.ELException: void <init>(java.lang.Throwable)>(v9);
throw v10;
label5:
v11 := @caughtexception;
v12 = new jakarta.el.ELException;
v13 = virtualinvoke v11.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
specialinvoke v12.<jakarta.el.ELException: void <init>(java.lang.Throwable)>(v13);
throw v12;
label6:
v14 := @caughtexception;
v15 = new jakarta.el.ELException;
v16 = virtualinvoke v14.<java.lang.InstantiationException: java.lang.Throwable getCause()>();
specialinvoke v15.<jakarta.el.ELException: void <init>(java.lang.Throwable)>(v16);
throw v15;
catch java.lang.IllegalAccessException from label1 to label2 with label3;
catch java.lang.IllegalArgumentException from label1 to label2 with label4;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
catch java.lang.InstantiationException from label1 to label2 with label6;
}
static java.lang.reflect.Method findMethod(java.lang.Class, java.lang.Object, java.lang.String, java.lang.Class[], java.lang.Object[], boolean)
{
java.lang.Object[] v4;
java.lang.Class[] v3;
int v7;
java.lang.Class v0;
java.lang.Object v1;
java.lang.String v10, v2;
jakarta.el.MethodNotFoundException v9;
java.lang.reflect.Method v6;
boolean v5, v8;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: java.lang.Class[];
v4 := @parameter4: java.lang.Object[];
v5 := @parameter5: boolean;
v6 = staticinvoke <jakarta.el.ELUtil: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])>(v0, v1, v2, v3, v4);
if v5 == 0 goto label1;
v7 = virtualinvoke v6.<java.lang.reflect.Method: int getModifiers()>();
v8 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v7);
if v8 != 0 goto label1;
v9 = new jakarta.el.MethodNotFoundException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Class)>(v2, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Method \u0001for class \u0001 not found or accessible");
specialinvoke v9.<jakarta.el.MethodNotFoundException: void <init>(java.lang.String)>(v10);
throw v9;
label1:
return v6;
}
static java.lang.Object invokeMethod(jakarta.el.ELContext, java.lang.reflect.Method, java.lang.Object, java.lang.Object[])
{
java.lang.Throwable v14;
jakarta.el.ELContext v0;
java.lang.IllegalAccessException v8;
java.lang.Object[] v3, v6;
java.lang.Class[] v4;
java.lang.IllegalArgumentException v10;
jakarta.el.ELException v11, v13, v9;
java.lang.reflect.InvocationTargetException v12;
java.lang.Object v2, v7;
java.lang.reflect.Method v1;
boolean v5;
v0 := @parameter0: jakarta.el.ELContext;
v1 := @parameter1: java.lang.reflect.Method;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: java.lang.Object[];
v4 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v5 = virtualinvoke v1.<java.lang.reflect.Method: boolean isVarArgs()>();
v6 = staticinvoke <jakarta.el.ELUtil: java.lang.Object[] buildParameters(jakarta.el.ELContext,java.lang.Class[],boolean,java.lang.Object[])>(v0, v4, v5, v3);
label1:
v7 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v2, v6);
label2:
return v7;
label3:
v8 := @caughtexception;
v9 = new jakarta.el.ELException;
specialinvoke v9.<jakarta.el.ELException: void <init>(java.lang.Throwable)>(v8);
throw v9;
label4:
v10 := @caughtexception;
v11 = new jakarta.el.ELException;
specialinvoke v11.<jakarta.el.ELException: void <init>(java.lang.Throwable)>(v10);
throw v11;
label5:
v12 := @caughtexception;
v13 = new jakarta.el.ELException;
v14 = virtualinvoke v12.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
specialinvoke v13.<jakarta.el.ELException: void <init>(java.lang.Throwable)>(v14);
throw v13;
catch java.lang.IllegalAccessException from label1 to label2 with label3;
catch java.lang.IllegalArgumentException from label1 to label2 with label4;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
}
static java.lang.reflect.Method findMethod(java.lang.Class, java.lang.Object, java.lang.String, java.lang.Class[], java.lang.Object[])
{
java.lang.Object[] v4;
java.lang.Class[] v3;
java.lang.reflect.Method[] v8;
java.util.List v9;
jakarta.el.ELUtil$Wrapper v10;
java.lang.Class v0;
java.lang.Object v1, v11;
java.lang.String v2, v6, v7;
jakarta.el.MethodNotFoundException v5;
java.lang.reflect.Method v12;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: java.lang.Class[];
v4 := @parameter4: java.lang.Object[];
if v0 == null goto label1;
if v2 != null goto label2;
label1:
v5 = new jakarta.el.MethodNotFoundException;
v6 = staticinvoke <jakarta.el.ELUtil: java.lang.String paramString(java.lang.Class[])>(v3);
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class,java.lang.String,java.lang.String)>(v0, v2, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Method not found: \u0001.\u0001(\u0001)");
specialinvoke v5.<jakarta.el.MethodNotFoundException: void <init>(java.lang.String)>(v7);
throw v5;
label2:
if v3 != null goto label3;
v3 = staticinvoke <jakarta.el.ELUtil: java.lang.Class[] getTypesFromValues(java.lang.Object[])>(v4);
label3:
v8 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();
v9 = staticinvoke <jakarta.el.ELUtil$Wrapper: java.util.List wrap(java.lang.reflect.Method[],java.lang.String)>(v8, v2);
v10 = staticinvoke <jakarta.el.ELUtil: jakarta.el.ELUtil$Wrapper findWrapper(java.lang.Class,java.util.List,java.lang.String,java.lang.Class[],java.lang.Object[])>(v0, v9, v2, v3, v4);
if v10 != null goto label4;
return null;
label4:
v11 = virtualinvoke v10.<jakarta.el.ELUtil$Wrapper: java.lang.Object unWrap()>();
v12 = staticinvoke <jakarta.el.ELUtil: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.Object,java.lang.reflect.Method)>(v0, v1, v11);
return v12;
}
private static jakarta.el.ELUtil$Wrapper findWrapper(java.lang.Class, java.util.List, java.lang.String, java.lang.Class[], java.lang.Object[])
{
boolean v10, v14, v16, v17, v18, v19, v22, v29, v32, v35, v38, v42, v45, v47, v49;
java.util.List v1;
jakarta.el.ELUtil$Wrapper v46, v48, v50;
jakarta.el.MethodNotFoundException v51;
java.lang.Object[] v4;
java.util.ArrayList v5, v6, v7;
int v13, v15, v20, v21, v27, v30, v39, v8;
java.lang.String v2, v43, v44, v52, v53;
java.util.Iterator v9;
java.lang.Class[] v12, v3;
java.lang.Class v0, v23, v24, v25, v26, v28, v33, v34, v36, v37, v41;
java.lang.Object v11, v31, v40;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.util.List;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: java.lang.Class[];
v4 := @parameter4: java.lang.Object[];
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>()>();
v7 = new java.util.ArrayList;
specialinvoke v7.<java.util.ArrayList: void <init>()>();
if v3 != null goto label01;
v8 = 0;
goto label02;
label01:
v8 = lengthof v3;
label02:
v9 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label03:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label22;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = virtualinvoke v11.<jakarta.el.ELUtil$Wrapper: java.lang.Class[] getParameterTypes()>();
if v12 != null goto label04;
v13 = 0;
goto label05;
label04:
v13 = lengthof v12;
label05:
if v8 == v13 goto label06;
v14 = virtualinvoke v11.<jakarta.el.ELUtil$Wrapper: boolean isVarArgs()>();
if v14 == 0 goto label03;
v15 = v13 - 1;
if v8 < v15 goto label03;
label06:
v16 = 0;
v17 = 0;
v18 = 0;
v19 = 0;
v20 = 0;
label07:
if v20 >= v13 goto label18;
v21 = v13 - 1;
if v20 != v21 goto label12;
v22 = virtualinvoke v11.<jakarta.el.ELUtil$Wrapper: boolean isVarArgs()>();
if v22 == 0 goto label12;
v18 = 1;
if v13 != v8 goto label08;
v23 = v12[v20];
v24 = v3[v20];
if v23 == v24 goto label17;
label08:
v25 = v12[v20];
v26 = virtualinvoke v25.<java.lang.Class: java.lang.Class getComponentType()>();
v27 = v20;
label09:
if v27 >= v8 goto label17;
v28 = v3[v27];
v29 = staticinvoke <jakarta.el.ELUtil: boolean isAssignableFrom(java.lang.Class,java.lang.Class)>(v28, v26);
if v29 != 0 goto label11;
if v4 == null goto label10;
v30 = lengthof v4;
if v27 >= v30 goto label10;
v31 = v4[v27];
v32 = staticinvoke <jakarta.el.ELUtil: boolean isCoercibleFrom(java.lang.Object,java.lang.Class)>(v31, v26);
if v32 != 0 goto label11;
label10:
v19 = 1;
goto label17;
label11:
v27 = v27 + 1;
goto label09;
label12:
v33 = v12[v20];
v34 = v3[v20];
v35 = virtualinvoke v33.<java.lang.Object: boolean equals(java.lang.Object)>(v34);
if v35 != 0 goto label17;
v36 = v3[v20];
v37 = v12[v20];
v38 = staticinvoke <jakarta.el.ELUtil: boolean isAssignableFrom(java.lang.Class,java.lang.Class)>(v36, v37);
if v38 == 0 goto label13;
v16 = 1;
goto label17;
label13:
if v4 == null goto label14;
v39 = lengthof v4;
if v20 < v39 goto label15;
label14:
v19 = 1;
goto label18;
label15:
v40 = v4[v20];
v41 = v12[v20];
v42 = staticinvoke <jakarta.el.ELUtil: boolean isCoercibleFrom(java.lang.Object,java.lang.Class)>(v40, v41);
if v42 == 0 goto label16;
v17 = 1;
goto label17;
label16:
v19 = 1;
goto label18;
label17:
v20 = v20 + 1;
goto label07;
label18:
if v19 != 0 goto label03;
if v18 == 0 goto label19;
interfaceinvoke v7.<java.util.List: boolean add(java.lang.Object)>(v11);
goto label03;
label19:
if v17 == 0 goto label20;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v11);
goto label03;
label20:
if v16 == 0 goto label21;
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v11);
goto label03;
label21:
return v11;
label22:
v43 = staticinvoke <jakarta.el.ELUtil: java.lang.String paramString(java.lang.Class[])>(v3);
v44 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class,java.lang.String,java.lang.String)>(v0, v2, v43) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to find unambiguous method: \u0001.\u0001(\u0001)");
v45 = interfaceinvoke v5.<java.util.List: boolean isEmpty()>();
if v45 != 0 goto label23;
v46 = staticinvoke <jakarta.el.ELUtil: jakarta.el.ELUtil$Wrapper findMostSpecificWrapper(java.util.List,java.lang.Class[],boolean,java.lang.String)>(v5, v3, 0, v44);
return v46;
label23:
v47 = interfaceinvoke v6.<java.util.List: boolean isEmpty()>();
if v47 != 0 goto label24;
v48 = staticinvoke <jakarta.el.ELUtil: jakarta.el.ELUtil$Wrapper findMostSpecificWrapper(java.util.List,java.lang.Class[],boolean,java.lang.String)>(v6, v3, 1, v44);
return v48;
label24:
v49 = interfaceinvoke v7.<java.util.List: boolean isEmpty()>();
if v49 != 0 goto label25;
v50 = staticinvoke <jakarta.el.ELUtil: jakarta.el.ELUtil$Wrapper findMostSpecificWrapper(java.util.List,java.lang.Class[],boolean,java.lang.String)>(v7, v3, 1, v44);
return v50;
label25:
v51 = new jakarta.el.MethodNotFoundException;
v52 = staticinvoke <jakarta.el.ELUtil: java.lang.String paramString(java.lang.Class[])>(v3);
v53 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class,java.lang.String,java.lang.String)>(v0, v2, v52) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Method not found: \u0001.\u0001(\u0001)");
specialinvoke v51.<jakarta.el.MethodNotFoundException: void <init>(java.lang.String)>(v53);
throw v51;
}
private static jakarta.el.ELUtil$Wrapper findMostSpecificWrapper(java.util.List, java.lang.Class[], boolean, java.lang.String)
{
java.util.ArrayList v4;
int v12, v13, v14;
java.lang.String v3;
boolean v10, v2, v6, v8;
java.util.Iterator v5, v9;
java.lang.Class[] v1;
java.util.List v0;
java.lang.Object v11, v16, v7;
jakarta.el.MethodNotFoundException v15;
v0 := @parameter0: java.util.List;
v1 := @parameter1: java.lang.Class[];
v2 := @parameter2: boolean;
v3 := @parameter3: java.lang.String;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v5 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label5;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = 0;
v9 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label2:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label4;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = staticinvoke <jakarta.el.ELUtil: int isMoreSpecific(jakarta.el.ELUtil$Wrapper,jakarta.el.ELUtil$Wrapper,java.lang.Class[],boolean)>(v7, v11, v1, v2);
if v12 != 1 goto label3;
interfaceinvoke v9.<java.util.Iterator: void remove()>();
goto label2;
label3:
v13 = (int) -1;
if v12 != v13 goto label2;
v8 = 1;
goto label2;
label4:
if v8 != 0 goto label1;
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v7);
goto label1;
label5:
v14 = interfaceinvoke v4.<java.util.List: int size()>();
if v14 <= 1 goto label6;
v15 = new jakarta.el.MethodNotFoundException;
specialinvoke v15.<jakarta.el.MethodNotFoundException: void <init>(java.lang.String)>(v3);
throw v15;
label6:
v16 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(0);
return v16;
}
private static int isMoreSpecific(jakarta.el.ELUtil$Wrapper, jakarta.el.ELUtil$Wrapper, java.lang.Class[], boolean)
{
int v10, v11, v12, v14, v15, v16, v17, v23, v24, v25, v26, v7, v8, v9;
boolean v27, v28, v3, v6;
java.lang.Class[] v13, v2, v4, v5;
jakarta.el.ELUtil$Wrapper v0, v1;
java.lang.Class v18, v19, v20, v21, v22;
v0 := @parameter0: jakarta.el.ELUtil$Wrapper;
v1 := @parameter1: jakarta.el.ELUtil$Wrapper;
v2 := @parameter2: java.lang.Class[];
v3 := @parameter3: boolean;
v4 = virtualinvoke v0.<jakarta.el.ELUtil$Wrapper: java.lang.Class[] getParameterTypes()>();
v5 = virtualinvoke v1.<jakarta.el.ELUtil$Wrapper: java.lang.Class[] getParameterTypes()>();
v6 = virtualinvoke v0.<jakarta.el.ELUtil$Wrapper: boolean isVarArgs()>();
if v6 == 0 goto label1;
v7 = lengthof v4;
v8 = lengthof v5;
v9 = staticinvoke <java.lang.Math: int max(int,int)>(v7, v8);
v10 = lengthof v2;
v11 = staticinvoke <java.lang.Math: int max(int,int)>(v9, v10);
v4 = staticinvoke <jakarta.el.ELUtil: java.lang.Class[] getComparingParamTypesForVarArgsMethod(java.lang.Class[],int)>(v4, v11);
v5 = staticinvoke <jakarta.el.ELUtil: java.lang.Class[] getComparingParamTypesForVarArgsMethod(java.lang.Class[],int)>(v5, v11);
v12 = lengthof v2;
if v11 <= v12 goto label1;
v13 = newarray (java.lang.Class)[v11];
v14 = lengthof v2;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v2, 0, v13, 0, v14);
v2 = v13;
label1:
v15 = 0;
v16 = 0;
label2:
v17 = lengthof v4;
if v16 >= v17 goto label8;
v18 = v4[v16];
v19 = v5[v16];
if v18 == v19 goto label7;
v20 = v4[v16];
v21 = v5[v16];
v22 = v2[v16];
v23 = staticinvoke <jakarta.el.ELUtil: int isMoreSpecific(java.lang.Class,java.lang.Class,java.lang.Class,boolean)>(v20, v21, v22, v3);
if v23 != 1 goto label4;
v24 = (int) -1;
if v15 != v24 goto label3;
return 0;
label3:
v15 = 1;
goto label7;
label4:
v25 = (int) -1;
if v23 != v25 goto label6;
if v15 != 1 goto label5;
return 0;
label5:
v26 = (int) -1;
v15 = v26;
goto label7;
label6:
return 0;
label7:
v16 = v16 + 1;
goto label2;
label8:
if v15 != 0 goto label9;
v27 = virtualinvoke v0.<jakarta.el.ELUtil$Wrapper: boolean isBridge()>();
v28 = virtualinvoke v1.<jakarta.el.ELUtil$Wrapper: boolean isBridge()>();
v15 = staticinvoke <java.lang.Boolean: int compare(boolean,boolean)>(v27, v28);
label9:
return v15;
}
private static int isMoreSpecific(java.lang.Class, java.lang.Class, java.lang.Class, boolean)
{
int v21, v8;
boolean v10, v12, v13, v14, v15, v17, v18, v19, v20, v3, v6, v7;
java.lang.Class v0, v1, v11, v16, v2, v4, v5, v9;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: java.lang.Class;
v3 := @parameter3: boolean;
v4 = staticinvoke <jakarta.el.ELUtil: java.lang.Class getBoxingTypeIfPrimitive(java.lang.Class)>(v0);
v5 = staticinvoke <jakarta.el.ELUtil: java.lang.Class getBoxingTypeIfPrimitive(java.lang.Class)>(v1);
v6 = virtualinvoke v5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v4);
if v6 == 0 goto label01;
return 1;
label01:
v7 = virtualinvoke v4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v5);
if v7 == 0 goto label02;
v8 = (int) -1;
return v8;
label02:
if v3 == 0 goto label12;
if v2 == null goto label11;
v9 = class "Ljava/lang/Number;";
v10 = virtualinvoke v9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v10 == 0 goto label11;
v11 = class "Ljava/lang/Number;";
v12 = virtualinvoke v11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v4);
if v12 != 0 goto label03;
v13 = virtualinvoke v4.<java.lang.Class: boolean isPrimitive()>();
if v13 == 0 goto label04;
label03:
v14 = 1;
goto label05;
label04:
v14 = 0;
label05:
v15 = v14;
v16 = class "Ljava/lang/Number;";
v17 = virtualinvoke v16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v5);
if v17 != 0 goto label06;
v18 = virtualinvoke v5.<java.lang.Class: boolean isPrimitive()>();
if v18 == 0 goto label07;
label06:
v19 = 1;
goto label08;
label07:
v19 = 0;
label08:
v20 = v19;
if v15 == 0 goto label09;
if v19 != 0 goto label09;
return 1;
label09:
if v20 == 0 goto label10;
if v15 != 0 goto label10;
v21 = (int) -1;
return v21;
label10:
return 0;
label11:
return 0;
label12:
return 0;
}
private static java.lang.Class getBoxingTypeIfPrimitive(java.lang.Class)
{
java.lang.Class v0, v2, v3, v4, v5, v6, v7, v8;
boolean v1;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v1 == 0 goto label8;
v2 = <java.lang.Boolean: java.lang.Class TYPE>;
if v0 != v2 goto label1;
return class "Ljava/lang/Boolean;";
label1:
v3 = <java.lang.Character: java.lang.Class TYPE>;
if v0 != v3 goto label2;
return class "Ljava/lang/Character;";
label2:
v4 = <java.lang.Byte: java.lang.Class TYPE>;
if v0 != v4 goto label3;
return class "Ljava/lang/Byte;";
label3:
v5 = <java.lang.Short: java.lang.Class TYPE>;
if v0 != v5 goto label4;
return class "Ljava/lang/Short;";
label4:
v6 = <java.lang.Integer: java.lang.Class TYPE>;
if v0 != v6 goto label5;
return class "Ljava/lang/Integer;";
label5:
v7 = <java.lang.Long: java.lang.Class TYPE>;
if v0 != v7 goto label6;
return class "Ljava/lang/Long;";
label6:
v8 = <java.lang.Float: java.lang.Class TYPE>;
if v0 != v8 goto label7;
return class "Ljava/lang/Float;";
label7:
return class "Ljava/lang/Double;";
label8:
return v0;
}
private static java.lang.Class[] getComparingParamTypesForVarArgsMethod(java.lang.Class[], int)
{
java.lang.Class[] v0, v2;
int v1, v10, v3, v4, v5, v6, v9;
java.lang.Class v7, v8;
v0 := @parameter0: java.lang.Class[];
v1 := @parameter1: int;
v2 = newarray (java.lang.Class)[v1];
v3 = lengthof v0;
v4 = v3 - 1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v2, 0, v4);
v5 = lengthof v0;
v6 = v5 - 1;
v7 = v0[v6];
v8 = virtualinvoke v7.<java.lang.Class: java.lang.Class getComponentType()>();
v9 = lengthof v0;
v10 = v9 - 1;
label1:
if v10 >= v1 goto label2;
v2[v10] = v8;
v10 = v10 + 1;
goto label1;
label2:
return v2;
}
private static final java.lang.String paramString(java.lang.Class[])
{
java.lang.Class[] v0;
int v10, v2, v3, v8, v9;
java.lang.Class v4, v5;
java.lang.StringBuilder v1, v7;
java.lang.String v11, v6;
v0 := @parameter0: java.lang.Class[];
if v0 == null goto label6;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = 0;
label1:
v3 = lengthof v0;
if v2 >= v3 goto label4;
v4 = v0[v2];
if v4 != null goto label2;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null, ");
goto label3;
label2:
v5 = v0[v2];
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v6);
virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label3:
v2 = v2 + 1;
goto label1;
label4:
v8 = virtualinvoke v1.<java.lang.StringBuilder: int length()>();
if v8 <= 2 goto label5;
v9 = virtualinvoke v1.<java.lang.StringBuilder: int length()>();
v10 = v9 - 2;
virtualinvoke v1.<java.lang.StringBuilder: void setLength(int)>(v10);
label5:
v11 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v11;
label6:
return null;
}
static boolean isAssignableFrom(java.lang.Class, java.lang.Class)
{
java.lang.Class v0, v1, v2;
boolean v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
if v0 != null goto label1;
return 1;
label1:
v2 = staticinvoke <jakarta.el.ELUtil: java.lang.Class getBoxingTypeIfPrimitive(java.lang.Class)>(v1);
v3 = virtualinvoke v2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v0);
return v3;
}
private static boolean isCoercibleFrom(java.lang.Object, java.lang.Class)
{
jakarta.el.ExpressionFactory v2;
java.lang.Class v1;
java.lang.Object v0;
java.lang.Exception v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Class;
label1:
v2 = staticinvoke <jakarta.el.ELManager: jakarta.el.ExpressionFactory getExpressionFactory()>();
virtualinvoke v2.<jakarta.el.ExpressionFactory: java.lang.Object coerceToType(java.lang.Object,java.lang.Class)>(v0, v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
return 0;
label4:
return 1;
catch java.lang.Exception from label1 to label2 with label3;
}
private static java.lang.Class[] getTypesFromValues(java.lang.Object[])
{
java.lang.Object[] v0;
java.lang.Class[] v2;
int v1, v3, v4;
java.lang.Class v7;
java.lang.Object v5, v6;
v0 := @parameter0: java.lang.Object[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
v2 = newarray (java.lang.Class)[v1];
v3 = 0;
label2:
v4 = lengthof v0;
if v3 >= v4 goto label5;
v5 = v0[v3];
if v5 != null goto label3;
v2[v3] = null;
goto label4;
label3:
v6 = v0[v3];
v7 = virtualinvoke v6.<java.lang.Object: java.lang.Class getClass()>();
v2[v3] = v7;
label4:
v3 = v3 + 1;
goto label2;
label5:
return v2;
}
static java.lang.reflect.Method getMethod(java.lang.Class, java.lang.Object, java.lang.reflect.Method)
{
java.lang.NoSuchMethodException v16, v23;
int v3, v8, v9;
java.lang.String v11, v18;
java.lang.reflect.Method v13, v15, v2, v20, v22;
boolean v4, v5, v6;
java.lang.Class[] v12, v19, v7;
java.lang.Class v0, v10, v14, v17, v21;
java.lang.Object v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.reflect.Method;
if v2 == null goto label01;
v3 = virtualinvoke v0.<java.lang.Class: int getModifiers()>();
v4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v3);
if v4 == 0 goto label02;
v5 = staticinvoke <jakarta.el.ELUtil: boolean canAccess(java.lang.Object,java.lang.reflect.AccessibleObject)>(v1, v2);
if v5 != 0 goto label01;
if v1 == null goto label02;
v6 = staticinvoke <jakarta.el.ELUtil: boolean canAccess(java.lang.Object,java.lang.reflect.AccessibleObject)>(null, v2);
if v6 == 0 goto label02;
label01:
return v2;
label02:
v7 = virtualinvoke v0.<java.lang.Class: java.lang.Class[] getInterfaces()>();
v8 = 0;
label03:
v9 = lengthof v7;
if v8 >= v9 goto label08;
label04:
v10 = v7[v8];
v11 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.String getName()>();
v12 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v13 = virtualinvoke v10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v11, v12);
v14 = virtualinvoke v13.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
v15 = staticinvoke <jakarta.el.ELUtil: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.Object,java.lang.reflect.Method)>(v14, v1, v13);
if v15 == null goto label07;
label05:
return v15;
label06:
v16 := @caughtexception;
label07:
v8 = v8 + 1;
goto label03;
label08:
v17 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
if v17 == null goto label12;
label09:
v18 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.String getName()>();
v19 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v20 = virtualinvoke v17.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v18, v19);
v21 = virtualinvoke v20.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
v22 = staticinvoke <jakarta.el.ELUtil: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.Object,java.lang.reflect.Method)>(v21, v1, v20);
if v22 == null goto label12;
label10:
return v22;
label11:
v23 := @caughtexception;
label12:
return null;
catch java.lang.NoSuchMethodException from label04 to label05 with label06;
catch java.lang.NoSuchMethodException from label09 to label10 with label11;
}
static java.lang.reflect.Constructor getConstructor(java.lang.Class, java.lang.reflect.Constructor)
{
java.lang.NoSuchMethodException v9;
java.lang.Class[] v5;
java.lang.reflect.Constructor v1, v6, v8;
int v2;
java.lang.Class v0, v4, v7;
boolean v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.Constructor;
if v1 == null goto label1;
v2 = virtualinvoke v0.<java.lang.Class: int getModifiers()>();
v3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v2);
if v3 == 0 goto label2;
label1:
return v1;
label2:
v4 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
if v4 == null goto label6;
label3:
v5 = virtualinvoke v1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
v6 = virtualinvoke v4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v5);
v7 = virtualinvoke v6.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
v8 = staticinvoke <jakarta.el.ELUtil: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.reflect.Constructor)>(v7, v6);
if v8 == null goto label6;
label4:
return v8;
label5:
v9 := @caughtexception;
label6:
return null;
catch java.lang.NoSuchMethodException from label3 to label4 with label5;
}
static boolean canAccess(java.lang.Object, java.lang.reflect.AccessibleObject)
{
java.lang.reflect.AccessibleObject v1;
java.lang.Object v0;
java.lang.IllegalArgumentException v3;
boolean v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.reflect.AccessibleObject;
label1:
v2 = virtualinvoke v1.<java.lang.reflect.AccessibleObject: boolean canAccess(java.lang.Object)>(v0);
label2:
return v2;
label3:
v3 := @caughtexception;
return 0;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
static java.lang.Object[] buildParameters(jakarta.el.ELContext, java.lang.Class[], boolean, java.lang.Object[])
{
boolean v2;
jakarta.el.ELContext v0;
java.lang.Object[] v3, v4;
int v10, v11, v15, v23, v25, v26, v29, v30, v5, v6, v7, v8, v9;
java.lang.Class[] v1;
java.lang.Class v13, v17, v19, v21, v22, v32;
java.lang.Object v12, v14, v16, v18, v20, v24, v27, v28, v31, v33;
v0 := @parameter0: jakarta.el.ELContext;
v1 := @parameter1: java.lang.Class[];
v2 := @parameter2: boolean;
v3 := @parameter3: java.lang.Object[];
v4 = null;
v5 = lengthof v1;
if v5 <= 0 goto label10;
v6 = lengthof v1;
v4 = newarray (java.lang.Object)[v6];
if v3 != null goto label01;
v7 = 0;
goto label02;
label01:
v7 = lengthof v3;
label02:
v8 = v7;
if v2 == 0 goto label08;
v9 = lengthof v1;
v10 = v9 - 1;
v11 = 0;
label03:
if v11 >= v10 goto label04;
if v11 >= v8 goto label04;
v12 = v3[v11];
v13 = v1[v11];
v14 = virtualinvoke v0.<jakarta.el.ELContext: java.lang.Object convertToType(java.lang.Object,java.lang.Class)>(v12, v13);
v4[v11] = v14;
v11 = v11 + 1;
goto label03;
label04:
v15 = lengthof v1;
if v15 != v8 goto label05;
v16 = v3[v10];
if v16 == null goto label05;
v17 = v1[v10];
v18 = v3[v10];
v19 = virtualinvoke v18.<java.lang.Object: java.lang.Class getClass()>();
if v17 != v19 goto label05;
v20 = v3[v10];
v4[v10] = v20;
goto label10;
label05:
v21 = v1[v10];
v22 = virtualinvoke v21.<java.lang.Class: java.lang.Class getComponentType()>();
v23 = v8 - v10;
v24 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v22, v23);
v25 = v10;
label06:
if v25 >= v8 goto label07;
v26 = v25 - v10;
v27 = v3[v25];
v28 = virtualinvoke v0.<jakarta.el.ELContext: java.lang.Object convertToType(java.lang.Object,java.lang.Class)>(v27, v22);
staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(v24, v26, v28);
v25 = v25 + 1;
goto label06;
label07:
v4[v10] = v24;
goto label10;
label08:
v29 = 0;
label09:
v30 = lengthof v1;
if v29 >= v30 goto label10;
if v29 >= v8 goto label10;
v31 = v3[v29];
v32 = v1[v29];
v33 = virtualinvoke v0.<jakarta.el.ELContext: java.lang.Object convertToType(java.lang.Object,java.lang.Class)>(v31, v32);
v4[v29] = v33;
v29 = v29 + 1;
goto label09;
label10:
return v4;
}
static void <clinit>()
{
jakarta.el.ELUtil$1 v0;
v0 = new jakarta.el.ELUtil$1;
specialinvoke v0.<jakarta.el.ELUtil$1: void <init>()>();
<jakarta.el.ELUtil: java.lang.ThreadLocal instance> = v0;
return;
}
}