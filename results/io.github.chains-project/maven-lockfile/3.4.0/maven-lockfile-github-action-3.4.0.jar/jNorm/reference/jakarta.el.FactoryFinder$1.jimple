class jakarta.el.FactoryFinder$1 extends java.lang.Object implements java.security.PrivilegedAction
{
final java.lang.Class val$spiClass;
final java.lang.String val$className;
void <init>(java.lang.Class, java.lang.String)
{
java.lang.Class v1;
java.lang.String v2;
jakarta.el.FactoryFinder$1 v0;
v0 := @this: jakarta.el.FactoryFinder$1;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v0.<jakarta.el.FactoryFinder$1: java.lang.Class val$spiClass> = v1;
v0.<jakarta.el.FactoryFinder$1: java.lang.String val$className> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.Object run()
{
java.lang.Object[] v4;
java.lang.Class[] v2;
jakarta.el.ELException v7;
java.lang.reflect.Constructor v3;
java.lang.Exception v6;
jakarta.el.FactoryFinder$1 v0;
java.lang.Class v1;
java.lang.Object v5;
java.lang.String v8, v9;
v0 := @this: jakarta.el.FactoryFinder$1;
label1:
v1 = v0.<jakarta.el.FactoryFinder$1: java.lang.Class val$spiClass>;
v2 = newarray (java.lang.Class)[0];
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v2);
v4 = newarray (java.lang.Object)[0];
v5 = virtualinvoke v3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v4);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = new jakarta.el.ELException;
v8 = v0.<jakarta.el.FactoryFinder$1: java.lang.String val$className>;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Exception)>(v8, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Provider \u0001 could not be instantiated: \u0001");
specialinvoke v7.<jakarta.el.ELException: void <init>(java.lang.String,java.lang.Throwable)>(v9, v6);
throw v7;
catch java.lang.Exception from label1 to label2 with label3;
}
}