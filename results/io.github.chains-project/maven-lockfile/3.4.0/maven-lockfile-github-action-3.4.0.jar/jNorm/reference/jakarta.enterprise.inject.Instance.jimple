public interface  jakarta.enterprise.inject.Instance extends java.lang.Object implements java.lang.Iterable, jakarta.inject.Provider
{
public abstract transient jakarta.enterprise.inject.Instance select(java.lang.'annotation'.Annotation[]);
public abstract transient jakarta.enterprise.inject.Instance select(java.lang.Class, java.lang.'annotation'.Annotation[]);
public abstract transient jakarta.enterprise.inject.Instance select(jakarta.enterprise.util.TypeLiteral, java.lang.'annotation'.Annotation[]);
public java.util.stream.Stream stream()
{
java.util.stream.Stream v2;
jakarta.enterprise.inject.Instance v0;
java.util.Spliterator v1;
v0 := @this: jakarta.enterprise.inject.Instance;
v1 = interfaceinvoke v0.<jakarta.enterprise.inject.Instance: java.util.Spliterator spliterator()>();
v2 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>(v1, 0);
return v2;
}
public abstract boolean isUnsatisfied();
public abstract boolean isAmbiguous();
public boolean isResolvable()
{
jakarta.enterprise.inject.Instance v0;
boolean v1, v2, v3;
v0 := @this: jakarta.enterprise.inject.Instance;
v1 = interfaceinvoke v0.<jakarta.enterprise.inject.Instance: boolean isUnsatisfied()>();
if v1 != 0 goto label1;
v2 = interfaceinvoke v0.<jakarta.enterprise.inject.Instance: boolean isAmbiguous()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public abstract void destroy(java.lang.Object);
public abstract jakarta.enterprise.inject.Instance$Handle getHandle();
public abstract java.lang.Iterable handles();
public java.util.stream.Stream handlesStream()
{
java.util.stream.Stream v3;
jakarta.enterprise.inject.Instance v0;
java.util.Spliterator v2;
java.lang.Iterable v1;
v0 := @this: jakarta.enterprise.inject.Instance;
v1 = interfaceinvoke v0.<jakarta.enterprise.inject.Instance: java.lang.Iterable handles()>();
v2 = interfaceinvoke v1.<java.lang.Iterable: java.util.Spliterator spliterator()>();
v3 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>(v2, 0);
return v3;
}
}