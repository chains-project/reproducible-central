public interface  jakarta.enterprise.lang.model.declarations.DeclarationInfo extends java.lang.Object implements jakarta.enterprise.lang.model.AnnotationTarget
{
public boolean isDeclaration()
{
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
return 1;
}
public boolean isType()
{
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
return 0;
}
public jakarta.enterprise.lang.model.declarations.DeclarationInfo asDeclaration()
{
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
return v0;
}
public jakarta.enterprise.lang.model.types.Type asType()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a type");
throw v1;
}
public abstract jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind kind();
public boolean isPackage()
{
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.declarations.DeclarationInfo: jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind: jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind PACKAGE>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isClass()
{
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.declarations.DeclarationInfo: jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind: jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind CLASS>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isMethod()
{
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.declarations.DeclarationInfo: jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind: jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind METHOD>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isParameter()
{
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.declarations.DeclarationInfo: jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind: jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind PARAMETER>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isField()
{
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.declarations.DeclarationInfo: jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind: jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind FIELD>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isRecordComponent()
{
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.declarations.DeclarationInfo: jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind: jakarta.enterprise.lang.model.declarations.DeclarationInfo$Kind RECORD_COMPONENT>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public jakarta.enterprise.lang.model.declarations.PackageInfo asPackage()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a package");
throw v1;
}
public jakarta.enterprise.lang.model.declarations.ClassInfo asClass()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a class");
throw v1;
}
public jakarta.enterprise.lang.model.declarations.MethodInfo asMethod()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a method");
throw v1;
}
public jakarta.enterprise.lang.model.declarations.ParameterInfo asParameter()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a parameter");
throw v1;
}
public jakarta.enterprise.lang.model.declarations.FieldInfo asField()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a field");
throw v1;
}
public jakarta.enterprise.lang.model.declarations.RecordComponentInfo asRecordComponent()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.declarations.DeclarationInfo v0;
v0 := @this: jakarta.enterprise.lang.model.declarations.DeclarationInfo;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a record component");
throw v1;
}
}