public abstract class jakarta.enterprise.util.TypeLiteral extends java.lang.Object implements java.io.Serializable
{
private static final long serialVersionUID;
private transient java.lang.reflect.Type actualType;
protected void <init>()
{
jakarta.enterprise.util.TypeLiteral v0;
v0 := @this: jakarta.enterprise.util.TypeLiteral;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public final java.lang.reflect.Type getType()
{
java.lang.RuntimeException v4, v9;
jakarta.enterprise.util.TypeLiteral v0;
java.lang.reflect.Type v1, v12, v7, v8;
java.lang.Class v10, v2, v3, v5;
java.lang.String v11, v6;
v0 := @this: jakarta.enterprise.util.TypeLiteral;
v1 = v0.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type actualType>;
if v1 != null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <jakarta.enterprise.util.TypeLiteral: java.lang.Class getTypeLiteralSubclass(java.lang.Class)>(v2);
if v3 != null goto label1;
v4 = new java.lang.RuntimeException;
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a subclass of TypeLiteral");
specialinvoke v4.<java.lang.RuntimeException: void <init>(java.lang.String)>(v6);
throw v4;
label1:
v7 = staticinvoke <jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type getTypeParameter(java.lang.Class)>(v3);
v0.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type actualType> = v7;
v8 = v0.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type actualType>;
if v8 != null goto label2;
v9 = new java.lang.RuntimeException;
v10 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 does not specify the type parameter T of TypeLiteral<T>");
specialinvoke v9.<java.lang.RuntimeException: void <init>(java.lang.String)>(v11);
throw v9;
label2:
v12 = v0.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type actualType>;
return v12;
}
public final java.lang.Class getRawType()
{
jakarta.enterprise.util.TypeLiteral v0;
java.lang.reflect.Type v1, v4;
java.lang.RuntimeException v6;
boolean v2, v3, v5;
v0 := @this: jakarta.enterprise.util.TypeLiteral;
v1 = virtualinvoke v0.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type getType()>();
v2 = v1 instanceof java.lang.Class;
if v2 == 0 goto label1;
return v1;
label1:
v3 = v1 instanceof java.lang.reflect.ParameterizedType;
if v3 == 0 goto label2;
v4 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
return v4;
label2:
v5 = v1 instanceof java.lang.reflect.GenericArrayType;
if v5 == 0 goto label3;
return class "[Ljava/lang/Object;";
label3:
v6 = new java.lang.RuntimeException;
specialinvoke v6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Illegal type");
throw v6;
}
private static java.lang.Class getTypeLiteralSubclass(java.lang.Class)
{
java.lang.Class v0, v1, v4;
boolean v2, v3;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
v2 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljakarta/enterprise/util/TypeLiteral;");
if v2 == 0 goto label1;
return v0;
label1:
v3 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Object;");
if v3 == 0 goto label2;
return null;
label2:
v4 = staticinvoke <jakarta.enterprise.util.TypeLiteral: java.lang.Class getTypeLiteralSubclass(java.lang.Class)>(v1);
return v4;
}
private static java.lang.reflect.Type getTypeParameter(java.lang.Class)
{
java.lang.reflect.Type v1, v6;
int v4;
java.lang.reflect.Type[] v3, v5;
java.lang.Class v0;
boolean v2;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
v2 = v1 instanceof java.lang.reflect.ParameterizedType;
if v2 == 0 goto label1;
v3 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v4 = lengthof v3;
if v4 != 1 goto label1;
v5 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v6 = v5[0];
return v6;
label1:
return null;
}
public boolean equals(java.lang.Object)
{
jakarta.enterprise.util.TypeLiteral v0;
java.lang.reflect.Type v3, v4;
java.lang.Object v1;
boolean v2, v5;
v0 := @this: jakarta.enterprise.util.TypeLiteral;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof jakarta.enterprise.util.TypeLiteral;
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type getType()>();
v4 = virtualinvoke v1.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type getType()>();
v5 = virtualinvoke v3.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
return v5;
label1:
return 0;
}
public int hashCode()
{
int v2;
jakarta.enterprise.util.TypeLiteral v0;
java.lang.reflect.Type v1;
v0 := @this: jakarta.enterprise.util.TypeLiteral;
v1 = virtualinvoke v0.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type getType()>();
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public java.lang.String toString()
{
jakarta.enterprise.util.TypeLiteral v0;
java.lang.String v2;
java.lang.reflect.Type v1;
v0 := @this: jakarta.enterprise.util.TypeLiteral;
v1 = virtualinvoke v0.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type getType()>();
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
}