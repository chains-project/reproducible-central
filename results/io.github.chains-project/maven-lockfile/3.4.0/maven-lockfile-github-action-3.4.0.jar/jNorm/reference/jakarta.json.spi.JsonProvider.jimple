public abstract class jakarta.json.spi.JsonProvider extends java.lang.Object
{
public static final java.lang.String JSONP_PROVIDER_FACTORY;
private static final java.lang.String DEFAULT_PROVIDER;
private static final java.util.logging.Logger LOG;
private static final java.lang.String OSGI_SERVICE_LOADER_CLASS_NAME;
protected void <init>()
{
jakarta.json.spi.JsonProvider v0;
v0 := @this: jakarta.json.spi.JsonProvider;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static jakarta.json.spi.JsonProvider provider()
{
java.util.logging.Level v1, v11, v17, v22, v25, v7;
java.lang.String v19, v27, v9;
boolean v14, v20;
jakarta.json.spi.JsonProvider v29, v5;
java.util.Iterator v13;
java.util.ServiceLoader v12;
java.security.PrivilegedAction v3;
java.util.logging.Logger v0, v10, v16, v21, v24, v28, v6;
java.lang.SecurityManager v2;
java.lang.Class v18, v26, v8;
java.lang.Object v15, v23, v4;
v0 = <jakarta.json.spi.JsonProvider: java.util.logging.Logger LOG>;
v1 = <java.util.logging.Level: java.util.logging.Level FINE>;
virtualinvoke v0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>(v1, "Checking system property {0}", "jakarta.json.provider");
v2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v2 == null goto label1;
v3 = staticinvoke <jakarta.json.spi.JsonProvider$lambda_provider_0__565: java.security.PrivilegedAction bootstrap$()>();
v4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v3);
goto label2;
label1:
v4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("jakarta.json.provider");
label2:
if v4 == null goto label3;
v5 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider newInstance(java.lang.String)>(v4);
v6 = <jakarta.json.spi.JsonProvider: java.util.logging.Logger LOG>;
v7 = <java.util.logging.Level: java.util.logging.Level FINE>;
v8 = virtualinvoke v5.<java.lang.Object: java.lang.Class getClass()>();
v9 = virtualinvoke v8.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v6.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>(v7, "System property used; returning object [{0}]", v9);
return v5;
label3:
v10 = <jakarta.json.spi.JsonProvider: java.util.logging.Logger LOG>;
v11 = <java.util.logging.Level: java.util.logging.Level FINE>;
virtualinvoke v10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(v11, "Checking ServiceLoader");
v12 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Ljakarta/json/spi/JsonProvider;");
v13 = virtualinvoke v12.<java.util.ServiceLoader: java.util.Iterator iterator()>();
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label4;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = <jakarta.json.spi.JsonProvider: java.util.logging.Logger LOG>;
v17 = <java.util.logging.Level: java.util.logging.Level FINE>;
v18 = virtualinvoke v15.<java.lang.Object: java.lang.Class getClass()>();
v19 = virtualinvoke v18.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v16.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>(v17, "ServiceLoader loading Facility used; returning object [{0}]", v19);
return v15;
label4:
v20 = staticinvoke <jakarta.json.spi.JsonProvider: boolean isOsgi()>();
if v20 == 0 goto label5;
v21 = <jakarta.json.spi.JsonProvider: java.util.logging.Logger LOG>;
v22 = <java.util.logging.Level: java.util.logging.Level FINE>;
virtualinvoke v21.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(v22, "Checking OSGi");
v23 = staticinvoke <jakarta.json.spi.JsonProvider: java.lang.Object lookupUsingOSGiServiceLoader(java.lang.Class)>(class "Ljakarta/json/spi/JsonProvider;");
if v23 == null goto label5;
v24 = <jakarta.json.spi.JsonProvider: java.util.logging.Logger LOG>;
v25 = <java.util.logging.Level: java.util.logging.Level FINE>;
v26 = virtualinvoke v23.<java.lang.Object: java.lang.Class getClass()>();
v27 = virtualinvoke v26.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v24.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>(v25, "OSGi loading facility used; returning object [{0}].", v27);
return v23;
label5:
v28 = <jakarta.json.spi.JsonProvider: java.util.logging.Logger LOG>;
virtualinvoke v28.<java.util.logging.Logger: void fine(java.lang.String)>("Trying to create the platform default provider");
v29 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider newInstance(java.lang.String)>("org.eclipse.parsson.JsonProviderImpl");
return v29;
}
private static jakarta.json.spi.JsonProvider newInstance(java.lang.String)
{
java.lang.Object[] v4;
java.lang.Class[] v2;
java.lang.reflect.Constructor v3;
java.lang.Exception v9;
java.lang.Class v1;
java.lang.ClassNotFoundException v6;
java.lang.Object v5;
jakarta.json.JsonException v10, v7;
java.lang.String v0, v11, v8;
v0 := @parameter0: java.lang.String;
label1:
staticinvoke <jakarta.json.spi.JsonProvider: void checkPackageAccess(java.lang.String)>(v0);
v1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(v0);
v2 = newarray (java.lang.Class)[0];
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v2);
v4 = newarray (java.lang.Object)[0];
v5 = virtualinvoke v3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v4);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = new jakarta.json.JsonException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Provider \u0001 not found");
specialinvoke v7.<jakarta.json.JsonException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v6);
throw v7;
label4:
v9 := @caughtexception;
v10 = new jakarta.json.JsonException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Exception)>(v0, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Provider \u0001 could not be instantiated: \u0001");
specialinvoke v10.<jakarta.json.JsonException: void <init>(java.lang.String,java.lang.Throwable)>(v11, v9);
throw v10;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
private static void checkPackageAccess(java.lang.String)
{
int v2, v3;
java.lang.String v0, v4;
java.lang.SecurityManager v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v1 == null goto label1;
v2 = virtualinvoke v0.<java.lang.String: int lastIndexOf(int)>(46);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
virtualinvoke v1.<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>(v4);
label1:
return;
}
public abstract jakarta.json.stream.JsonParser createParser(java.io.Reader);
public abstract jakarta.json.stream.JsonParser createParser(java.io.InputStream);
public abstract jakarta.json.stream.JsonParserFactory createParserFactory(java.util.Map);
public abstract jakarta.json.stream.JsonGenerator createGenerator(java.io.Writer);
public abstract jakarta.json.stream.JsonGenerator createGenerator(java.io.OutputStream);
public abstract jakarta.json.stream.JsonGeneratorFactory createGeneratorFactory(java.util.Map);
public abstract jakarta.json.JsonReader createReader(java.io.Reader);
public abstract jakarta.json.JsonReader createReader(java.io.InputStream);
public abstract jakarta.json.JsonWriter createWriter(java.io.Writer);
public abstract jakarta.json.JsonWriter createWriter(java.io.OutputStream);
public abstract jakarta.json.JsonWriterFactory createWriterFactory(java.util.Map);
public abstract jakarta.json.JsonReaderFactory createReaderFactory(java.util.Map);
public abstract jakarta.json.JsonObjectBuilder createObjectBuilder();
public jakarta.json.JsonObjectBuilder createObjectBuilder(jakarta.json.JsonObject)
{
jakarta.json.JsonObject v1;
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: jakarta.json.JsonObject;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public jakarta.json.JsonObjectBuilder createObjectBuilder(java.util.Map)
{
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
java.util.Map v1;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: java.util.Map;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public abstract jakarta.json.JsonArrayBuilder createArrayBuilder();
public jakarta.json.JsonArrayBuilder createArrayBuilder(jakarta.json.JsonArray)
{
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
jakarta.json.JsonArray v1;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: jakarta.json.JsonArray;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public jakarta.json.JsonPointer createPointer(java.lang.String)
{
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
java.lang.String v1;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public jakarta.json.JsonPatchBuilder createPatchBuilder()
{
java.lang.UnsupportedOperationException v1;
jakarta.json.spi.JsonProvider v0;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public jakarta.json.JsonPatchBuilder createPatchBuilder(jakarta.json.JsonArray)
{
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
jakarta.json.JsonArray v1;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: jakarta.json.JsonArray;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public jakarta.json.JsonPatch createPatch(jakarta.json.JsonArray)
{
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
jakarta.json.JsonArray v1;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: jakarta.json.JsonArray;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public jakarta.json.JsonPatch createDiff(jakarta.json.JsonStructure, jakarta.json.JsonStructure)
{
java.lang.UnsupportedOperationException v3;
jakarta.json.JsonStructure v1, v2;
jakarta.json.spi.JsonProvider v0;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: jakarta.json.JsonStructure;
v2 := @parameter1: jakarta.json.JsonStructure;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public jakarta.json.JsonMergePatch createMergePatch(jakarta.json.JsonValue)
{
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
jakarta.json.JsonValue v1;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: jakarta.json.JsonValue;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public jakarta.json.JsonMergePatch createMergeDiff(jakarta.json.JsonValue, jakarta.json.JsonValue)
{
java.lang.UnsupportedOperationException v3;
jakarta.json.spi.JsonProvider v0;
jakarta.json.JsonValue v1, v2;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: jakarta.json.JsonValue;
v2 := @parameter1: jakarta.json.JsonValue;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public jakarta.json.JsonArrayBuilder createArrayBuilder(java.util.Collection)
{
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
java.util.Collection v1;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: java.util.Collection;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public abstract jakarta.json.JsonBuilderFactory createBuilderFactory(java.util.Map);
public jakarta.json.JsonString createValue(java.lang.String)
{
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
java.lang.String v1;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public jakarta.json.JsonNumber createValue(int)
{
int v1;
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: int;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public jakarta.json.JsonNumber createValue(long)
{
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
long v1;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: long;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public jakarta.json.JsonNumber createValue(double)
{
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
double v1;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: double;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public jakarta.json.JsonNumber createValue(java.math.BigDecimal)
{
java.lang.UnsupportedOperationException v2;
java.math.BigDecimal v1;
jakarta.json.spi.JsonProvider v0;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: java.math.BigDecimal;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public jakarta.json.JsonNumber createValue(java.math.BigInteger)
{
java.lang.UnsupportedOperationException v2;
jakarta.json.spi.JsonProvider v0;
java.math.BigInteger v1;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: java.math.BigInteger;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public jakarta.json.JsonNumber createValue(java.lang.Number)
{
long v6;
int v3;
java.lang.String v16;
java.lang.Number v1;
boolean v11, v13, v2, v5, v8;
double v9;
java.lang.UnsupportedOperationException v15;
jakarta.json.spi.JsonProvider v0;
jakarta.json.JsonNumber v10, v12, v14, v4, v7;
v0 := @this: jakarta.json.spi.JsonProvider;
v1 := @parameter0: java.lang.Number;
v2 = v1 instanceof java.lang.Integer;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<java.lang.Number: int intValue()>();
v4 = virtualinvoke v0.<jakarta.json.spi.JsonProvider: jakarta.json.JsonNumber createValue(int)>(v3);
return v4;
label1:
v5 = v1 instanceof java.lang.Long;
if v5 == 0 goto label2;
v6 = virtualinvoke v1.<java.lang.Number: long longValue()>();
v7 = virtualinvoke v0.<jakarta.json.spi.JsonProvider: jakarta.json.JsonNumber createValue(long)>(v6);
return v7;
label2:
v8 = v1 instanceof java.lang.Double;
if v8 == 0 goto label3;
v9 = virtualinvoke v1.<java.lang.Number: double doubleValue()>();
v10 = virtualinvoke v0.<jakarta.json.spi.JsonProvider: jakarta.json.JsonNumber createValue(double)>(v9);
return v10;
label3:
v11 = v1 instanceof java.math.BigInteger;
if v11 == 0 goto label4;
v12 = virtualinvoke v0.<jakarta.json.spi.JsonProvider: jakarta.json.JsonNumber createValue(java.math.BigInteger)>(v1);
return v12;
label4:
v13 = v1 instanceof java.math.BigDecimal;
if v13 == 0 goto label5;
v14 = virtualinvoke v0.<jakarta.json.spi.JsonProvider: jakarta.json.JsonNumber createValue(java.math.BigDecimal)>(v1);
return v14;
label5:
v15 = new java.lang.UnsupportedOperationException;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Number)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 type is not known");
specialinvoke v15.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v16);
throw v15;
}
private static boolean isOsgi()
{
java.lang.ClassNotFoundException v0;
label1:
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.glassfish.hk2.osgiresourcelocator.ServiceLoader");
label2:
return 1;
label3:
v0 := @caughtexception;
return 0;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
}
private static java.lang.Object lookupUsingOSGiServiceLoader(java.lang.Class)
{
java.util.Iterator v6;
java.lang.Class[] v1, v3;
java.util.logging.Logger v10;
java.lang.Exception v9;
java.util.logging.Level v11;
java.lang.Class v0, v2;
java.lang.Object v5, v8;
java.lang.String v12, v13;
java.lang.reflect.Method v4;
boolean v7;
v0 := @parameter0: java.lang.Class;
label1:
v1 = newarray (java.lang.Class)[1];
v1[0] = v0;
v2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.glassfish.hk2.osgiresourcelocator.ServiceLoader");
v3 = newarray (java.lang.Class)[1];
v3[0] = class "Ljava/lang/Class;";
v4 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("lookupProviderInstances", v3);
v5 = virtualinvoke v4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v1);
v6 = interfaceinvoke v5.<java.lang.Iterable: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
goto label3;
label2:
v8 = null;
label3:
return v8;
label4:
v9 := @caughtexception;
v10 = <jakarta.json.spi.JsonProvider: java.util.logging.Logger LOG>;
v11 = <java.util.logging.Level: java.util.logging.Level FINE>;
v12 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to find from OSGi: [\u0001]");
virtualinvoke v10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>(v11, v13, v9);
return null;
catch java.lang.Exception from label1 to label3 with label4;
}
static void <clinit>()
{
java.lang.Class v0;
java.lang.String v1;
java.util.logging.Logger v2;
v0 = class "Ljakarta/json/spi/JsonProvider;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(v1);
<jakarta.json.spi.JsonProvider: java.util.logging.Logger LOG> = v2;
return;
}
}