public abstract class org.apache.commons.io.DirectoryWalker extends java.lang.Object
{
private final java.io.FileFilter filter;
private final int depthLimit;
protected void <init>()
{
int v1;
org.apache.commons.io.DirectoryWalker v0;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 = (int) -1;
specialinvoke v0.<org.apache.commons.io.DirectoryWalker: void <init>(java.io.FileFilter,int)>(null, v1);
return;
}
protected void <init>(java.io.FileFilter, int)
{
int v2;
java.io.FileFilter v1;
org.apache.commons.io.DirectoryWalker v0;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.FileFilter;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter> = v1;
v0.<org.apache.commons.io.DirectoryWalker: int depthLimit> = v2;
return;
}
protected void <init>(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter, int)
{
org.apache.commons.io.filefilter.IOFileFilter v1, v2, v4, v5, v6, v7, v8, v9;
org.apache.commons.io.DirectoryWalker v0;
int v3;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v2 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 != null goto label1;
if v2 != null goto label1;
v0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter> = null;
goto label6;
label1:
if v1 == null goto label2;
v4 = v1;
goto label3;
label2:
v4 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE>;
label3:
v5 = v4;
if v2 == null goto label4;
v6 = v2;
goto label5;
label4:
v6 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE>;
label5:
v7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)>(v5);
v8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)>(v6);
v9 = interfaceinvoke v7.<org.apache.commons.io.filefilter.IOFileFilter: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter)>(v8);
v0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter> = v9;
label6:
v0.<org.apache.commons.io.DirectoryWalker: int depthLimit> = v3;
return;
}
protected final void walk(java.io.File, java.util.Collection) throws java.io.IOException
{
org.apache.commons.io.DirectoryWalker$CancelException v3;
java.util.Collection v2;
org.apache.commons.io.DirectoryWalker v0;
java.io.File v1;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.util.Collection;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "startDirectory");
label1:
virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: void handleStart(java.io.File,java.util.Collection)>(v1, v2);
specialinvoke v0.<org.apache.commons.io.DirectoryWalker: void walk(java.io.File,int,java.util.Collection)>(v1, 0, v2);
virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: void handleEnd(java.util.Collection)>(v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: void handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)>(v1, v2, v3);
label4:
return;
catch org.apache.commons.io.DirectoryWalker$CancelException from label1 to label2 with label3;
}
private void walk(java.io.File, int, java.util.Collection) throws java.io.IOException
{
int v12, v13, v2, v5, v6, v7;
boolean v15, v4;
java.util.Collection v3;
org.apache.commons.io.DirectoryWalker v0;
java.io.File v1, v14;
java.io.FileFilter v10, v8;
java.io.File[] v11, v9;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: int;
v3 := @parameter2: java.util.Collection;
virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(v1, v2, v3);
v4 = virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: boolean handleDirectory(java.io.File,int,java.util.Collection)>(v1, v2, v3);
if v4 == 0 goto label9;
virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: void handleDirectoryStart(java.io.File,int,java.util.Collection)>(v1, v2, v3);
v5 = v2 + 1;
v6 = v0.<org.apache.commons.io.DirectoryWalker: int depthLimit>;
if v6 < 0 goto label1;
v7 = v0.<org.apache.commons.io.DirectoryWalker: int depthLimit>;
if v5 > v7 goto label8;
label1:
virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(v1, v2, v3);
v8 = v0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter>;
if v8 != null goto label2;
v9 = virtualinvoke v1.<java.io.File: java.io.File[] listFiles()>();
goto label3;
label2:
v10 = v0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter>;
v9 = virtualinvoke v1.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>(v10);
label3:
v11 = virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: java.io.File[] filterDirectoryContents(java.io.File,int,java.io.File[])>(v1, v2, v9);
if v11 != null goto label4;
virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: void handleRestricted(java.io.File,int,java.util.Collection)>(v1, v5, v3);
goto label8;
label4:
v12 = lengthof v11;
v13 = 0;
label5:
if v13 >= v12 goto label8;
v14 = v11[v13];
v15 = virtualinvoke v14.<java.io.File: boolean isDirectory()>();
if v15 == 0 goto label6;
specialinvoke v0.<org.apache.commons.io.DirectoryWalker: void walk(java.io.File,int,java.util.Collection)>(v14, v5, v3);
goto label7;
label6:
virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(v14, v5, v3);
virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: void handleFile(java.io.File,int,java.util.Collection)>(v14, v5, v3);
virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(v14, v5, v3);
label7:
v13 = v13 + 1;
goto label5;
label8:
virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: void handleDirectoryEnd(java.io.File,int,java.util.Collection)>(v1, v2, v3);
label9:
virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(v1, v2, v3);
return;
}
protected final void checkIfCancelled(java.io.File, int, java.util.Collection) throws java.io.IOException
{
org.apache.commons.io.DirectoryWalker$CancelException v5;
java.util.Collection v3;
org.apache.commons.io.DirectoryWalker v0;
int v2;
java.io.File v1;
boolean v4;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: int;
v3 := @parameter2: java.util.Collection;
v4 = virtualinvoke v0.<org.apache.commons.io.DirectoryWalker: boolean handleIsCancelled(java.io.File,int,java.util.Collection)>(v1, v2, v3);
if v4 == 0 goto label1;
v5 = new org.apache.commons.io.DirectoryWalker$CancelException;
specialinvoke v5.<org.apache.commons.io.DirectoryWalker$CancelException: void <init>(java.io.File,int)>(v1, v2);
throw v5;
label1:
return;
}
protected boolean handleIsCancelled(java.io.File, int, java.util.Collection) throws java.io.IOException
{
java.util.Collection v3;
org.apache.commons.io.DirectoryWalker v0;
int v2;
java.io.File v1;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: int;
v3 := @parameter2: java.util.Collection;
return 0;
}
protected void handleCancelled(java.io.File, java.util.Collection, org.apache.commons.io.DirectoryWalker$CancelException) throws java.io.IOException
{
org.apache.commons.io.DirectoryWalker$CancelException v3;
java.util.Collection v2;
org.apache.commons.io.DirectoryWalker v0;
java.io.File v1;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.util.Collection;
v3 := @parameter2: org.apache.commons.io.DirectoryWalker$CancelException;
throw v3;
}
protected void handleStart(java.io.File, java.util.Collection) throws java.io.IOException
{
java.io.File v1;
java.util.Collection v2;
org.apache.commons.io.DirectoryWalker v0;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.util.Collection;
return;
}
protected boolean handleDirectory(java.io.File, int, java.util.Collection) throws java.io.IOException
{
java.util.Collection v3;
org.apache.commons.io.DirectoryWalker v0;
int v2;
java.io.File v1;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: int;
v3 := @parameter2: java.util.Collection;
return 1;
}
protected void handleDirectoryStart(java.io.File, int, java.util.Collection) throws java.io.IOException
{
java.util.Collection v3;
org.apache.commons.io.DirectoryWalker v0;
int v2;
java.io.File v1;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: int;
v3 := @parameter2: java.util.Collection;
return;
}
protected transient java.io.File[] filterDirectoryContents(java.io.File, int, java.io.File[]) throws java.io.IOException
{
org.apache.commons.io.DirectoryWalker v0;
int v2;
java.io.File[] v3;
java.io.File v1;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: int;
v3 := @parameter2: java.io.File[];
return v3;
}
protected void handleFile(java.io.File, int, java.util.Collection) throws java.io.IOException
{
java.util.Collection v3;
org.apache.commons.io.DirectoryWalker v0;
int v2;
java.io.File v1;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: int;
v3 := @parameter2: java.util.Collection;
return;
}
protected void handleRestricted(java.io.File, int, java.util.Collection) throws java.io.IOException
{
java.util.Collection v3;
org.apache.commons.io.DirectoryWalker v0;
int v2;
java.io.File v1;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: int;
v3 := @parameter2: java.util.Collection;
return;
}
protected void handleDirectoryEnd(java.io.File, int, java.util.Collection) throws java.io.IOException
{
java.util.Collection v3;
org.apache.commons.io.DirectoryWalker v0;
int v2;
java.io.File v1;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: int;
v3 := @parameter2: java.util.Collection;
return;
}
protected void handleEnd(java.util.Collection) throws java.io.IOException
{
java.util.Collection v1;
org.apache.commons.io.DirectoryWalker v0;
v0 := @this: org.apache.commons.io.DirectoryWalker;
v1 := @parameter0: java.util.Collection;
return;
}
}