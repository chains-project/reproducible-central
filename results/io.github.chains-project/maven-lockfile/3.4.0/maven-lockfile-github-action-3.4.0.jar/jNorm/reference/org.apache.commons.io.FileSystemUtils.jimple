public class org.apache.commons.io.FileSystemUtils extends java.lang.Object
{
private static final org.apache.commons.io.FileSystemUtils INSTANCE;
private static final int INIT_PROBLEM;
private static final int OTHER;
private static final int WINDOWS;
private static final int UNIX;
private static final int POSIX_UNIX;
private static final int OS;
private static final java.lang.String DF;
public void <init>()
{
org.apache.commons.io.FileSystemUtils v0;
v0 := @this: org.apache.commons.io.FileSystemUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static long freeSpace(java.lang.String) throws java.io.IOException
{
java.time.Duration v3;
int v2;
long v4;
java.lang.String v0;
org.apache.commons.io.FileSystemUtils v1;
v0 := @parameter0: java.lang.String;
v1 = <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE>;
v2 = <org.apache.commons.io.FileSystemUtils: int OS>;
v3 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(-1L);
v4 = virtualinvoke v1.<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,java.time.Duration)>(v0, v2, 0, v3);
return v4;
}
public static long freeSpaceKb(java.lang.String) throws java.io.IOException
{
long v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>(v0, -1L);
return v1;
}
public static long freeSpaceKb(java.lang.String, long) throws java.io.IOException
{
java.time.Duration v4;
int v3;
long v1, v5;
java.lang.String v0;
org.apache.commons.io.FileSystemUtils v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: long;
v2 = <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE>;
v3 = <org.apache.commons.io.FileSystemUtils: int OS>;
v4 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(v1);
v5 = virtualinvoke v2.<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,java.time.Duration)>(v0, v3, 1, v4);
return v5;
}
public static long freeSpaceKb() throws java.io.IOException
{
long v0;
v0 = staticinvoke <org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>(-1L);
return v0;
}
public static long freeSpaceKb(long) throws java.io.IOException
{
long v0, v3;
java.lang.String v2;
java.io.File v1;
v0 := @parameter0: long;
v1 = new java.io.File;
specialinvoke v1.<java.io.File: void <init>(java.lang.String)>(".");
v2 = virtualinvoke v1.<java.io.File: java.lang.String getAbsolutePath()>();
v3 = staticinvoke <org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>(v2, v0);
return v3;
}
long freeSpaceOS(java.lang.String, int, boolean, java.time.Duration) throws java.io.IOException
{
java.lang.IllegalStateException v10, v11;
long v6, v7, v8, v9;
java.lang.IllegalArgumentException v5;
org.apache.commons.io.FileSystemUtils v0;
java.time.Duration v4;
int v2;
java.lang.String v1;
boolean v3;
v0 := @this: org.apache.commons.io.FileSystemUtils;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
v4 := @parameter3: java.time.Duration;
if v1 != null goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path must not be null");
throw v5;
label1:
tableswitch(v2)
{
case 0: goto label7;
case 1: goto label2;
case 2: goto label5;
case 3: goto label6;
default: goto label8;
};
label2:
if v3 == 0 goto label3;
v6 = virtualinvoke v0.<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String,java.time.Duration)>(v1, v4);
v7 = v6 / 1024L;
goto label4;
label3:
v7 = virtualinvoke v0.<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String,java.time.Duration)>(v1, v4);
label4:
return v7;
label5:
v8 = virtualinvoke v0.<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean,java.time.Duration)>(v1, v3, 0, v4);
return v8;
label6:
v9 = virtualinvoke v0.<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean,java.time.Duration)>(v1, v3, 1, v4);
return v9;
label7:
v10 = new java.lang.IllegalStateException;
specialinvoke v10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unsupported operating system");
throw v10;
label8:
v11 = new java.lang.IllegalStateException;
specialinvoke v11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Exception caught when determining operating system");
throw v11;
}
long freeSpaceWindows(java.lang.String, java.time.Duration) throws java.io.IOException
{
java.lang.String[] v7;
long v14;
org.apache.commons.io.FileSystemUtils v0;
java.time.Duration v2;
int v10, v11;
java.lang.String v1, v16, v3, v8;
boolean v13, v5;
char v6;
java.io.IOException v15;
java.lang.IllegalArgumentException v4;
java.util.List v9;
java.lang.Object v12;
v0 := @this: org.apache.commons.io.FileSystemUtils;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.time.Duration;
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(v1, 0);
if v3 != null goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v1);
throw v4;
label1:
v5 = virtualinvoke v3.<java.lang.String: boolean isEmpty()>();
if v5 != 0 goto label2;
v6 = virtualinvoke v3.<java.lang.String: char charAt(int)>(0);
if v6 == 34 goto label2;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\"\u0001\"");
label2:
v7 = newarray (java.lang.String)[3];
v7[0] = "cmd.exe";
v7[1] = "/C";
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("dir /a /-c \u0001");
v7[2] = v8;
v9 = virtualinvoke v0.<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int,java.time.Duration)>(v7, 2147483647, v2);
v10 = interfaceinvoke v9.<java.util.List: int size()>();
v11 = v10 - 1;
label3:
if v11 < 0 goto label5;
v12 = interfaceinvoke v9.<java.util.List: java.lang.Object get(int)>(v11);
v13 = virtualinvoke v12.<java.lang.String: boolean isEmpty()>();
if v13 != 0 goto label4;
v14 = virtualinvoke v0.<org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)>(v12, v3);
return v14;
label4:
v11 = v11 - 1;
goto label3;
label5:
v15 = new java.io.IOException;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Command line \'dir /-c\' did not return any info for path \'\u0001\'");
specialinvoke v15.<java.io.IOException: void <init>(java.lang.String)>(v16);
throw v15;
}
long parseDir(java.lang.String, java.lang.String) throws java.io.IOException
{
long v21;
org.apache.commons.io.FileSystemUtils v0;
int v15, v16, v19, v3, v4, v5, v6;
java.lang.String v1, v12, v14, v2, v20;
boolean v10, v8;
char v17, v18, v7, v9;
java.io.IOException v11;
java.lang.StringBuilder v13;
v0 := @this: org.apache.commons.io.FileSystemUtils;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = 0;
v4 = 0;
v5 = virtualinvoke v1.<java.lang.String: int length()>();
v6 = v5 - 1;
label01:
if v6 < 0 goto label05;
v7 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v6);
v8 = staticinvoke <java.lang.Character: boolean isDigit(char)>(v7);
if v8 == 0 goto label02;
v4 = v6 + 1;
goto label03;
label02:
v6 = v6 - 1;
goto label01;
label03:
if v6 < 0 goto label05;
v9 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v6);
v10 = staticinvoke <java.lang.Character: boolean isDigit(char)>(v9);
if v10 != 0 goto label04;
if v9 == 44 goto label04;
if v9 == 46 goto label04;
v3 = v6 + 1;
goto label05;
label04:
v6 = v6 - 1;
goto label03;
label05:
if v6 >= 0 goto label06;
v11 = new java.io.IOException;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Command line \'dir /-c\' did not return valid info for path \'\u0001\'");
specialinvoke v11.<java.io.IOException: void <init>(java.lang.String)>(v12);
throw v11;
label06:
v13 = new java.lang.StringBuilder;
v14 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(v3, v4);
specialinvoke v13.<java.lang.StringBuilder: void <init>(java.lang.String)>(v14);
v15 = 0;
label07:
v16 = virtualinvoke v13.<java.lang.StringBuilder: int length()>();
if v15 >= v16 goto label10;
v17 = virtualinvoke v13.<java.lang.StringBuilder: char charAt(int)>(v15);
if v17 == 44 goto label08;
v18 = virtualinvoke v13.<java.lang.StringBuilder: char charAt(int)>(v15);
if v18 != 46 goto label09;
label08:
v19 = v15;
v15 = v15 - 1;
virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>(v19);
label09:
v15 = v15 + 1;
goto label07;
label10:
v20 = virtualinvoke v13.<java.lang.StringBuilder: java.lang.String toString()>();
v21 = virtualinvoke v0.<org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>(v20, v2);
return v21;
}
long freeSpaceUnix(java.lang.String, boolean, boolean, java.time.Duration) throws java.io.IOException
{
java.lang.String[] v9;
long v29;
org.apache.commons.io.FileSystemUtils v0;
java.util.StringTokenizer v18, v19, v27;
java.time.Duration v4;
int v13, v20, v21, v22, v8;
java.lang.String v1, v10, v11, v15, v16, v24, v25, v28, v7;
boolean v2, v3, v5;
java.io.IOException v14, v23;
java.lang.IllegalArgumentException v6;
java.util.List v12;
java.lang.Object v17, v26;
v0 := @this: org.apache.commons.io.FileSystemUtils;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 := @parameter2: boolean;
v4 := @parameter3: java.time.Duration;
v5 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v5 == 0 goto label01;
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path must not be empty");
throw v6;
label01:
v7 = "-";
if v2 == 0 goto label02;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>("-") <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001k");
label02:
if v3 == 0 goto label03;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001P");
label03:
v8 = virtualinvoke v7.<java.lang.String: int length()>();
if v8 <= 1 goto label04;
v9 = newarray (java.lang.String)[3];
v10 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;
v9[0] = v10;
v9[1] = v7;
v9[2] = v1;
goto label05;
label04:
v9 = newarray (java.lang.String)[2];
v11 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;
v9[0] = v11;
v9[1] = v1;
label05:
v12 = virtualinvoke v0.<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int,java.time.Duration)>(v9, 3, v4);
v13 = interfaceinvoke v12.<java.util.List: int size()>();
if v13 >= 2 goto label06;
v14 = new java.io.IOException;
v15 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.util.List)>(v15, v1, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Command line \'\u0001\' did not return info as expected for path \'\u0001\'- response was \u0001");
specialinvoke v14.<java.io.IOException: void <init>(java.lang.String)>(v16);
throw v14;
label06:
v17 = interfaceinvoke v12.<java.util.List: java.lang.Object get(int)>(1);
v18 = new java.util.StringTokenizer;
specialinvoke v18.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(v17, " ");
v19 = v18;
v20 = virtualinvoke v18.<java.util.StringTokenizer: int countTokens()>();
if v20 >= 4 goto label09;
v21 = virtualinvoke v18.<java.util.StringTokenizer: int countTokens()>();
if v21 != 1 goto label07;
v22 = interfaceinvoke v12.<java.util.List: int size()>();
if v22 >= 3 goto label08;
label07:
v23 = new java.io.IOException;
v24 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v24, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Command line \'\u0001\' did not return data as expected for path \'\u0001\'- check path is valid");
specialinvoke v23.<java.io.IOException: void <init>(java.lang.String)>(v25);
throw v23;
label08:
v26 = interfaceinvoke v12.<java.util.List: java.lang.Object get(int)>(2);
v27 = new java.util.StringTokenizer;
specialinvoke v27.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(v26, " ");
v19 = v27;
goto label10;
label09:
virtualinvoke v18.<java.util.StringTokenizer: java.lang.String nextToken()>();
label10:
virtualinvoke v19.<java.util.StringTokenizer: java.lang.String nextToken()>();
virtualinvoke v19.<java.util.StringTokenizer: java.lang.String nextToken()>();
v28 = virtualinvoke v19.<java.util.StringTokenizer: java.lang.String nextToken()>();
v29 = virtualinvoke v0.<org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>(v28, v1);
return v29;
}
long parseBytes(java.lang.String, java.lang.String) throws java.io.IOException
{
java.io.IOException v5, v9;
java.lang.NumberFormatException v8;
long v3;
org.apache.commons.io.FileSystemUtils v0;
byte v4;
java.lang.String v1, v10, v11, v2, v6, v7;
v0 := @this: org.apache.commons.io.FileSystemUtils;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
label1:
v3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(v1);
v4 = v3 cmp 0L;
if v4 >= 0 goto label2;
v5 = new java.io.IOException;
v6 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v6, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Command line \'\u0001\' did not find free space in response for path \'\u0001\'- check path is valid");
specialinvoke v5.<java.io.IOException: void <init>(java.lang.String)>(v7);
throw v5;
label2:
return v3;
label3:
v8 := @caughtexception;
v9 = new java.io.IOException;
v10 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v10, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Command line \'\u0001\' did not return numeric data as expected for path \'\u0001\'- check path is valid");
specialinvoke v9.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>(v11, v8);
throw v9;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
java.util.List performCommand(java.lang.String[], int, java.time.Duration) throws java.io.IOException
{
java.util.Locale v16;
java.lang.Thread v10;
java.time.Duration v3;
boolean v24;
java.lang.Process v5;
java.util.List v22, v26, v30;
java.lang.Throwable v32;
java.lang.String[] v1;
org.apache.commons.io.FileSystemUtils v0;
java.util.ArrayList v4;
java.nio.charset.Charset v13;
int v15, v19, v2, v21;
java.lang.String v14, v17, v18, v23, v27, v31;
java.io.OutputStream v7;
java.io.IOException v20, v25, v29;
java.io.InputStreamReader v12;
java.lang.InterruptedException v28;
java.io.BufferedReader v11, v9;
java.io.InputStream v6, v8;
v0 := @this: org.apache.commons.io.FileSystemUtils;
v1 := @parameter0: java.lang.String[];
v2 := @parameter1: int;
v3 := @parameter2: java.time.Duration;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>(int)>(20);
v5 = null;
v6 = null;
v7 = null;
v8 = null;
v9 = null;
label01:
v10 = staticinvoke <org.apache.commons.io.ThreadMonitor: java.lang.Thread start(java.time.Duration)>(v3);
v5 = virtualinvoke v0.<org.apache.commons.io.FileSystemUtils: java.lang.Process openProcess(java.lang.String[])>(v1);
v6 = virtualinvoke v5.<java.lang.Process: java.io.InputStream getInputStream()>();
v7 = virtualinvoke v5.<java.lang.Process: java.io.OutputStream getOutputStream()>();
v8 = virtualinvoke v5.<java.lang.Process: java.io.InputStream getErrorStream()>();
v11 = new java.io.BufferedReader;
v12 = new java.io.InputStreamReader;
v13 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
specialinvoke v12.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(v6, v13);
specialinvoke v11.<java.io.BufferedReader: void <init>(java.io.Reader)>(v12);
v9 = v11;
v14 = virtualinvoke v11.<java.io.BufferedReader: java.lang.String readLine()>();
label02:
if v14 == null goto label03;
v15 = interfaceinvoke v4.<java.util.List: int size()>();
if v15 >= v2 goto label03;
v16 = <java.util.Locale: java.util.Locale ENGLISH>;
v17 = virtualinvoke v14.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v16);
v18 = virtualinvoke v17.<java.lang.String: java.lang.String trim()>();
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v18);
v14 = virtualinvoke v11.<java.io.BufferedReader: java.lang.String readLine()>();
goto label02;
label03:
virtualinvoke v5.<java.lang.Process: int waitFor()>();
staticinvoke <org.apache.commons.io.ThreadMonitor: void stop(java.lang.Thread)>(v10);
v19 = virtualinvoke v5.<java.lang.Process: int exitValue()>();
if v19 == 0 goto label04;
v20 = new java.io.IOException;
v21 = virtualinvoke v5.<java.lang.Process: int exitValue()>();
v22 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v23 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.util.List)>(v21, v22) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Command line returned OS error code \'\u0001\' for command \u0001");
specialinvoke v20.<java.io.IOException: void <init>(java.lang.String)>(v23);
throw v20;
label04:
v24 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v24 == 0 goto label05;
v25 = new java.io.IOException;
v26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v27 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List)>(v26) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Command line did not return any info for command \u0001");
specialinvoke v25.<java.io.IOException: void <init>(java.lang.String)>(v27);
throw v25;
label05:
virtualinvoke v11.<java.io.BufferedReader: void close()>();
v9 = null;
virtualinvoke v6.<java.io.InputStream: void close()>();
v6 = null;
if v7 == null goto label06;
virtualinvoke v7.<java.io.OutputStream: void close()>();
v7 = null;
label06:
if v8 == null goto label07;
virtualinvoke v8.<java.io.InputStream: void close()>();
v8 = null;
label07:
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(null);
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(v7);
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(v8);
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(null);
virtualinvoke v5.<java.lang.Process: void destroy()>();
return v4;
label08:
v28 := @caughtexception;
v29 = new java.io.IOException;
v30 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v31 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List,java.time.Duration)>(v30, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Command line threw an InterruptedException for command \u0001 timeout=\u0001");
specialinvoke v29.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>(v31, v28);
throw v29;
label09:
v32 := @caughtexception;
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(v6);
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(v7);
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(v8);
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(v9);
if v5 == null goto label10;
virtualinvoke v5.<java.lang.Process: void destroy()>();
label10:
throw v32;
catch java.lang.InterruptedException from label01 to label07 with label08;
catch java.lang.Throwable from label01 to label07 with label09;
}
java.lang.Process openProcess(java.lang.String[]) throws java.io.IOException
{
java.lang.Process v3;
java.lang.Runtime v2;
java.lang.String[] v1;
org.apache.commons.io.FileSystemUtils v0;
v0 := @this: org.apache.commons.io.FileSystemUtils;
v1 := @parameter0: java.lang.String[];
v2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
v3 = virtualinvoke v2.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>(v1);
return v3;
}
static void <clinit>()
{
org.apache.commons.io.FileSystemUtils v0;
byte v1;
java.util.Locale v5;
java.lang.String v2, v3, v6;
boolean v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v7, v8, v9;
java.io.IOException v4;
java.lang.Exception v21;
v0 = new org.apache.commons.io.FileSystemUtils;
specialinvoke v0.<org.apache.commons.io.FileSystemUtils: void <init>()>();
<org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE> = v0;
v1 = 0;
v2 = "df";
label01:
v3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");
if v3 != null goto label02;
v4 = new java.io.IOException;
specialinvoke v4.<java.io.IOException: void <init>(java.lang.String)>("os.name not found");
throw v4;
label02:
v5 = <java.util.Locale: java.util.Locale ENGLISH>;
v6 = virtualinvoke v3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v5);
v7 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("windows");
if v7 == 0 goto label03;
v1 = 1;
goto label11;
label03:
v8 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("linux");
if v8 != 0 goto label04;
v9 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("mpe/ix");
if v9 != 0 goto label04;
v10 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("freebsd");
if v10 != 0 goto label04;
v11 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("openbsd");
if v11 != 0 goto label04;
v12 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("irix");
if v12 != 0 goto label04;
v13 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("digital unix");
if v13 != 0 goto label04;
v14 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("unix");
if v14 != 0 goto label04;
v15 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("mac os x");
if v15 == 0 goto label05;
label04:
v1 = 2;
goto label11;
label05:
v16 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("sun os");
if v16 != 0 goto label06;
v17 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("sunos");
if v17 != 0 goto label06;
v18 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("solaris");
if v18 == 0 goto label07;
label06:
v1 = 3;
v2 = "/usr/xpg4/bin/df";
goto label11;
label07:
v19 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("hp-ux");
if v19 != 0 goto label08;
v20 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("aix");
if v20 == 0 goto label11;
label08:
v1 = 3;
label09:
goto label11;
label10:
v21 := @caughtexception;
v1 = -1;
label11:
<org.apache.commons.io.FileSystemUtils: int OS> = v1;
<org.apache.commons.io.FileSystemUtils: java.lang.String DF> = v2;
return;
catch java.lang.Exception from label01 to label09 with label10;
}
}