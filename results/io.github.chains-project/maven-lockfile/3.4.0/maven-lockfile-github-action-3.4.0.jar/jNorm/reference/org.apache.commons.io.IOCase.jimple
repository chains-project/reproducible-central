public final enum class org.apache.commons.io.IOCase extends java.lang.Enum
{
public static final enum org.apache.commons.io.IOCase SENSITIVE;
public static final enum org.apache.commons.io.IOCase INSENSITIVE;
public static final enum org.apache.commons.io.IOCase SYSTEM;
private static final long serialVersionUID;
private final java.lang.String name;
private final transient boolean sensitive;
private static final org.apache.commons.io.IOCase[] $VALUES;
public static org.apache.commons.io.IOCase[] values()
{
java.lang.Object v1;
org.apache.commons.io.IOCase[] v0;
v0 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static org.apache.commons.io.IOCase valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/commons/io/IOCase;", v0);
return v1;
}
public static boolean isCaseSensitive(org.apache.commons.io.IOCase)
{
org.apache.commons.io.IOCase v0;
boolean v1, v2;
v0 := @parameter0: org.apache.commons.io.IOCase;
if v0 == null goto label1;
v1 = virtualinvoke v0.<org.apache.commons.io.IOCase: boolean isCaseSensitive()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static org.apache.commons.io.IOCase forName(java.lang.String)
{
org.apache.commons.io.IOCase v4;
java.lang.IllegalArgumentException v7;
org.apache.commons.io.IOCase[] v1;
int v2, v3;
java.lang.String v0, v5, v8;
boolean v6;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase[] values()>();
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
v5 = virtualinvoke v4.<org.apache.commons.io.IOCase: java.lang.String getName()>();
v6 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>(v0);
if v6 == 0 goto label2;
return v4;
label2:
v3 = v3 + 1;
goto label1;
label3:
v7 = new java.lang.IllegalArgumentException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid IOCase name: \u0001");
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
throw v7;
}
private void <init>(java.lang.String, int, java.lang.String, boolean)
{
org.apache.commons.io.IOCase v0;
int v2;
java.lang.String v1, v3;
boolean v4;
v0 := @this: org.apache.commons.io.IOCase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: boolean;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
v0.<org.apache.commons.io.IOCase: java.lang.String name> = v3;
v0.<org.apache.commons.io.IOCase: boolean sensitive> = v4;
return;
}
private java.lang.Object readResolve()
{
java.lang.String v1;
org.apache.commons.io.IOCase v0, v2;
v0 := @this: org.apache.commons.io.IOCase;
v1 = v0.<org.apache.commons.io.IOCase: java.lang.String name>;
v2 = staticinvoke <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase forName(java.lang.String)>(v1);
return v2;
}
public java.lang.String getName()
{
java.lang.String v1;
org.apache.commons.io.IOCase v0;
v0 := @this: org.apache.commons.io.IOCase;
v1 = v0.<org.apache.commons.io.IOCase: java.lang.String name>;
return v1;
}
public boolean isCaseSensitive()
{
org.apache.commons.io.IOCase v0;
boolean v1;
v0 := @this: org.apache.commons.io.IOCase;
v1 = v0.<org.apache.commons.io.IOCase: boolean sensitive>;
return v1;
}
public int checkCompareTo(java.lang.String, java.lang.String)
{
org.apache.commons.io.IOCase v0;
int v4;
java.lang.String v1, v2;
boolean v3;
v0 := @this: org.apache.commons.io.IOCase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "str1");
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "str2");
v3 = v0.<org.apache.commons.io.IOCase: boolean sensitive>;
if v3 == 0 goto label1;
v4 = virtualinvoke v1.<java.lang.String: int compareTo(java.lang.String)>(v2);
goto label2;
label1:
v4 = virtualinvoke v1.<java.lang.String: int compareToIgnoreCase(java.lang.String)>(v2);
label2:
return v4;
}
public boolean checkEquals(java.lang.String, java.lang.String)
{
org.apache.commons.io.IOCase v0;
java.lang.String v1, v2;
boolean v3, v4;
v0 := @this: org.apache.commons.io.IOCase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "str1");
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "str2");
v3 = v0.<org.apache.commons.io.IOCase: boolean sensitive>;
if v3 == 0 goto label1;
v4 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>(v2);
goto label2;
label1:
v4 = virtualinvoke v1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v2);
label2:
return v4;
}
public boolean checkStartsWith(java.lang.String, java.lang.String)
{
org.apache.commons.io.IOCase v0;
int v5;
java.lang.String v1, v2;
boolean v3, v4, v6, v7;
v0 := @this: org.apache.commons.io.IOCase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
if v1 == null goto label3;
if v2 == null goto label3;
v3 = v0.<org.apache.commons.io.IOCase: boolean sensitive>;
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
v5 = virtualinvoke v2.<java.lang.String: int length()>();
v6 = virtualinvoke v1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(v4, 0, v2, 0, v5);
if v6 == 0 goto label3;
v7 = 1;
goto label4;
label3:
v7 = 0;
label4:
return v7;
}
public boolean checkEndsWith(java.lang.String, java.lang.String)
{
org.apache.commons.io.IOCase v0;
int v3, v6, v7;
java.lang.String v1, v2;
boolean v4, v5, v8;
v0 := @this: org.apache.commons.io.IOCase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
if v1 == null goto label1;
if v2 != null goto label2;
label1:
return 0;
label2:
v3 = virtualinvoke v2.<java.lang.String: int length()>();
v4 = v0.<org.apache.commons.io.IOCase: boolean sensitive>;
if v4 != 0 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
v6 = virtualinvoke v1.<java.lang.String: int length()>();
v7 = v6 - v3;
v8 = virtualinvoke v1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(v5, v7, v2, 0, v3);
return v8;
}
public int checkIndexOf(java.lang.String, int, java.lang.String)
{
org.apache.commons.io.IOCase v0;
int v2, v4, v5, v6, v7, v9;
java.lang.String v1, v3;
boolean v8;
v0 := @this: org.apache.commons.io.IOCase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v1.<java.lang.String: int length()>();
v5 = virtualinvoke v3.<java.lang.String: int length()>();
v6 = v4 - v5;
if v6 < v2 goto label3;
v7 = v2;
label1:
if v7 > v6 goto label3;
v8 = virtualinvoke v0.<org.apache.commons.io.IOCase: boolean checkRegionMatches(java.lang.String,int,java.lang.String)>(v1, v7, v3);
if v8 == 0 goto label2;
return v7;
label2:
v7 = v7 + 1;
goto label1;
label3:
v9 = (int) -1;
return v9;
}
public boolean checkRegionMatches(java.lang.String, int, java.lang.String)
{
org.apache.commons.io.IOCase v0;
int v2, v6;
java.lang.String v1, v3;
boolean v4, v5, v7;
v0 := @this: org.apache.commons.io.IOCase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 = v0.<org.apache.commons.io.IOCase: boolean sensitive>;
if v4 != 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
v6 = virtualinvoke v3.<java.lang.String: int length()>();
v7 = virtualinvoke v1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(v5, v2, v3, 0, v6);
return v7;
}
public java.lang.String toString()
{
java.lang.String v1;
org.apache.commons.io.IOCase v0;
v0 := @this: org.apache.commons.io.IOCase;
v1 = v0.<org.apache.commons.io.IOCase: java.lang.String name>;
return v1;
}
private static org.apache.commons.io.IOCase[] $values()
{
org.apache.commons.io.IOCase v1, v2, v3;
org.apache.commons.io.IOCase[] v0;
v0 = newarray (org.apache.commons.io.IOCase)[3];
v1 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;
v0[0] = v1;
v2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;
v0[1] = v2;
v3 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;
v0[2] = v3;
return v0;
}
static void <clinit>()
{
org.apache.commons.io.IOCase v0, v1, v2;
org.apache.commons.io.IOCase[] v5;
boolean v3, v4;
v0 = new org.apache.commons.io.IOCase;
specialinvoke v0.<org.apache.commons.io.IOCase: void <init>(java.lang.String,int,java.lang.String,boolean)>("SENSITIVE", 0, "Sensitive", 1);
<org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> = v0;
v1 = new org.apache.commons.io.IOCase;
specialinvoke v1.<org.apache.commons.io.IOCase: void <init>(java.lang.String,int,java.lang.String,boolean)>("INSENSITIVE", 1, "Insensitive", 0);
<org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE> = v1;
v2 = new org.apache.commons.io.IOCase;
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>();
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
specialinvoke v2.<org.apache.commons.io.IOCase: void <init>(java.lang.String,int,java.lang.String,boolean)>("SYSTEM", 2, "System", v4);
<org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM> = v2;
v5 = staticinvoke <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase[] $values()>();
<org.apache.commons.io.IOCase: org.apache.commons.io.IOCase[] $VALUES> = v5;
return;
}
}