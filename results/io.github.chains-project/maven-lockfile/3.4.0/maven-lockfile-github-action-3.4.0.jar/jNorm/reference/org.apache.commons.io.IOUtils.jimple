public class org.apache.commons.io.IOUtils extends java.lang.Object
{
public static final int CR;
public static final int DEFAULT_BUFFER_SIZE;
public static final char DIR_SEPARATOR;
public static final char DIR_SEPARATOR_UNIX;
public static final char DIR_SEPARATOR_WINDOWS;
public static final byte[] EMPTY_BYTE_ARRAY;
public static final int EOF;
public static final int LF;
public static final java.lang.String LINE_SEPARATOR;
public static final java.lang.String LINE_SEPARATOR_UNIX;
public static final java.lang.String LINE_SEPARATOR_WINDOWS;
private static final java.lang.ThreadLocal SKIP_BYTE_BUFFER;
private static final java.lang.ThreadLocal SKIP_CHAR_BUFFER;
public static java.io.BufferedInputStream buffer(java.io.InputStream)
{
boolean v1;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "inputStream");
v1 = v0 instanceof java.io.BufferedInputStream;
if v1 != 0 goto label1;
v0 = new java.io.BufferedInputStream;
specialinvoke v0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(v0);
label1:
return v0;
}
public static java.io.BufferedInputStream buffer(java.io.InputStream, int)
{
int v1;
boolean v2;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: int;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "inputStream");
v2 = v0 instanceof java.io.BufferedInputStream;
if v2 != 0 goto label1;
v0 = new java.io.BufferedInputStream;
specialinvoke v0.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(v0, v1);
label1:
return v0;
}
public static java.io.BufferedOutputStream buffer(java.io.OutputStream)
{
java.io.OutputStream v0;
boolean v1;
v0 := @parameter0: java.io.OutputStream;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "outputStream");
v1 = v0 instanceof java.io.BufferedOutputStream;
if v1 != 0 goto label1;
v0 = new java.io.BufferedOutputStream;
specialinvoke v0.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(v0);
label1:
return v0;
}
public static java.io.BufferedOutputStream buffer(java.io.OutputStream, int)
{
int v1;
java.io.OutputStream v0;
boolean v2;
v0 := @parameter0: java.io.OutputStream;
v1 := @parameter1: int;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "outputStream");
v2 = v0 instanceof java.io.BufferedOutputStream;
if v2 != 0 goto label1;
v0 = new java.io.BufferedOutputStream;
specialinvoke v0.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>(v0, v1);
label1:
return v0;
}
public static java.io.BufferedReader buffer(java.io.Reader)
{
java.io.Reader v0;
boolean v1;
v0 := @parameter0: java.io.Reader;
v1 = v0 instanceof java.io.BufferedReader;
if v1 != 0 goto label1;
v0 = new java.io.BufferedReader;
specialinvoke v0.<java.io.BufferedReader: void <init>(java.io.Reader)>(v0);
label1:
return v0;
}
public static java.io.BufferedReader buffer(java.io.Reader, int)
{
int v1;
java.io.Reader v0;
boolean v2;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: int;
v2 = v0 instanceof java.io.BufferedReader;
if v2 != 0 goto label1;
v0 = new java.io.BufferedReader;
specialinvoke v0.<java.io.BufferedReader: void <init>(java.io.Reader,int)>(v0, v1);
label1:
return v0;
}
public static java.io.BufferedWriter buffer(java.io.Writer)
{
java.io.Writer v0;
boolean v1;
v0 := @parameter0: java.io.Writer;
v1 = v0 instanceof java.io.BufferedWriter;
if v1 != 0 goto label1;
v0 = new java.io.BufferedWriter;
specialinvoke v0.<java.io.BufferedWriter: void <init>(java.io.Writer)>(v0);
label1:
return v0;
}
public static java.io.BufferedWriter buffer(java.io.Writer, int)
{
int v1;
java.io.Writer v0;
boolean v2;
v0 := @parameter0: java.io.Writer;
v1 := @parameter1: int;
v2 = v0 instanceof java.io.BufferedWriter;
if v2 != 0 goto label1;
v0 = new java.io.BufferedWriter;
specialinvoke v0.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>(v0, v1);
label1:
return v0;
}
public static byte[] byteArray()
{
byte[] v0;
v0 = staticinvoke <org.apache.commons.io.IOUtils: byte[] byteArray(int)>(8192);
return v0;
}
public static byte[] byteArray(int)
{
int v0;
byte[] v1;
v0 := @parameter0: int;
v1 = newarray (byte)[v0];
return v1;
}
public static char[] charArray()
{
char[] v0;
v0 = staticinvoke <org.apache.commons.io.IOUtils: char[] charArray(int)>(8192);
return v0;
}
private static char[] charArray(int)
{
int v0;
char[] v1;
v0 := @parameter0: int;
v1 = newarray (char)[v0];
return v1;
}
public static void close(java.io.Closeable) throws java.io.IOException
{
java.io.Closeable v0;
v0 := @parameter0: java.io.Closeable;
if v0 == null goto label1;
interfaceinvoke v0.<java.io.Closeable: void close()>();
label1:
return;
}
public static transient void close(java.io.Closeable[]) throws java.io.IOException
{
java.io.Closeable v3;
int v1, v2;
java.io.Closeable[] v0;
v0 := @parameter0: java.io.Closeable[];
if v0 == null goto label2;
v1 = lengthof v0;
v2 = 0;
label1:
if v2 >= v1 goto label2;
v3 = v0[v2];
staticinvoke <org.apache.commons.io.IOUtils: void close(java.io.Closeable)>(v3);
v2 = v2 + 1;
goto label1;
label2:
return;
}
public static void close(java.io.Closeable, org.apache.commons.io.function.IOConsumer) throws java.io.IOException
{
org.apache.commons.io.function.IOConsumer v1;
java.io.Closeable v0;
v0 := @parameter0: java.io.Closeable;
v1 := @parameter1: org.apache.commons.io.function.IOConsumer;
return;
}
public static void close(java.net.URLConnection)
{
java.net.URLConnection v0;
boolean v1;
v0 := @parameter0: java.net.URLConnection;
v1 = v0 instanceof java.net.HttpURLConnection;
if v1 == 0 goto label1;
virtualinvoke v0.<java.net.HttpURLConnection: void disconnect()>();
label1:
return;
}
public static void closeQuietly(java.io.Closeable)
{
java.util.function.Consumer v1;
java.io.Closeable v0;
v0 := @parameter0: java.io.Closeable;
v1 = null;
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable,java.util.function.Consumer)>(v0, v1);
return;
}
public static transient void closeQuietly(java.io.Closeable[])
{
java.io.Closeable v3;
int v1, v2;
java.io.Closeable[] v0;
v0 := @parameter0: java.io.Closeable[];
if v0 != null goto label1;
return;
label1:
v1 = lengthof v0;
v2 = 0;
label2:
if v2 >= v1 goto label3;
v3 = v0[v2];
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(v3);
v2 = v2 + 1;
goto label2;
label3:
return;
}
public static void closeQuietly(java.io.Closeable, java.util.function.Consumer)
{
java.util.function.Consumer v1;
java.io.Closeable v0;
v0 := @parameter0: java.io.Closeable;
v1 := @parameter1: java.util.function.Consumer;
return;
}
public static void closeQuietly(java.io.InputStream)
{
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(v0);
return;
}
public static void closeQuietly(java.io.OutputStream)
{
java.io.OutputStream v0;
v0 := @parameter0: java.io.OutputStream;
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(v0);
return;
}
public static void closeQuietly(java.io.Reader)
{
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(v0);
return;
}
public static void closeQuietly(java.nio.channels.Selector)
{
java.nio.channels.Selector v0;
v0 := @parameter0: java.nio.channels.Selector;
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(v0);
return;
}
public static void closeQuietly(java.net.ServerSocket)
{
java.net.ServerSocket v0;
v0 := @parameter0: java.net.ServerSocket;
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(v0);
return;
}
public static void closeQuietly(java.net.Socket)
{
java.net.Socket v0;
v0 := @parameter0: java.net.Socket;
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(v0);
return;
}
public static void closeQuietly(java.io.Writer)
{
java.io.Writer v0;
v0 := @parameter0: java.io.Writer;
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(v0);
return;
}
public static long consume(java.io.InputStream) throws java.io.IOException
{
byte[] v2;
org.apache.commons.io.output.NullOutputStream v1;
long v3;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 = <org.apache.commons.io.output.NullOutputStream: org.apache.commons.io.output.NullOutputStream NULL_OUTPUT_STREAM>;
v2 = staticinvoke <org.apache.commons.io.IOUtils: byte[] getByteArray()>();
v3 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,byte[])>(v0, v1, v2);
return v3;
}
public static boolean contentEquals(java.io.InputStream, java.io.InputStream) throws java.io.IOException
{
byte[] v2, v3;
byte v19, v20;
int v10, v11, v13, v14, v15, v16, v17, v4, v5, v6, v7, v8, v9;
boolean v12, v18;
java.io.InputStream v0, v1;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.io.InputStream;
if v0 != v1 goto label01;
return 1;
label01:
if v0 == null goto label02;
if v1 != null goto label03;
label02:
return 0;
label03:
v2 = staticinvoke <org.apache.commons.io.IOUtils: byte[] getByteArray()>();
v3 = staticinvoke <org.apache.commons.io.IOUtils: byte[] byteArray()>();
label04:
v4 = 0;
v5 = 0;
v6 = 0;
label05:
if v6 >= 8192 goto label04;
if v4 != v6 goto label10;
label06:
v7 = 8192 - v4;
v8 = virtualinvoke v0.<java.io.InputStream: int read(byte[],int,int)>(v2, v4, v7);
if v8 == 0 goto label06;
v9 = (int) -1;
if v8 != v9 goto label09;
if v5 != v6 goto label07;
v10 = virtualinvoke v1.<java.io.InputStream: int read()>();
v11 = (int) -1;
if v10 != v11 goto label07;
v12 = 1;
goto label08;
label07:
v12 = 0;
label08:
return v12;
label09:
v4 = v4 + v8;
label10:
if v5 != v6 goto label15;
label11:
v13 = 8192 - v5;
v14 = virtualinvoke v1.<java.io.InputStream: int read(byte[],int,int)>(v3, v5, v13);
if v14 == 0 goto label11;
v15 = (int) -1;
if v14 != v15 goto label14;
if v4 != v6 goto label12;
v16 = virtualinvoke v0.<java.io.InputStream: int read()>();
v17 = (int) -1;
if v16 != v17 goto label12;
v18 = 1;
goto label13;
label12:
v18 = 0;
label13:
return v18;
label14:
v5 = v5 + v14;
label15:
v19 = v2[v6];
v20 = v3[v6];
if v19 == v20 goto label16;
return 0;
label16:
v6 = v6 + 1;
goto label05;
}
public static boolean contentEquals(java.io.Reader, java.io.Reader) throws java.io.IOException
{
int v10, v11, v13, v14, v15, v16, v17, v4, v5, v6, v7, v8, v9;
boolean v12, v18;
char v19, v20;
java.io.Reader v0, v1;
char[] v2, v3;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.io.Reader;
if v0 != v1 goto label01;
return 1;
label01:
if v0 == null goto label02;
if v1 != null goto label03;
label02:
return 0;
label03:
v2 = staticinvoke <org.apache.commons.io.IOUtils: char[] getCharArray()>();
v3 = staticinvoke <org.apache.commons.io.IOUtils: char[] charArray()>();
label04:
v4 = 0;
v5 = 0;
v6 = 0;
label05:
if v6 >= 8192 goto label04;
if v4 != v6 goto label10;
label06:
v7 = 8192 - v4;
v8 = virtualinvoke v0.<java.io.Reader: int read(char[],int,int)>(v2, v4, v7);
if v8 == 0 goto label06;
v9 = (int) -1;
if v8 != v9 goto label09;
if v5 != v6 goto label07;
v10 = virtualinvoke v1.<java.io.Reader: int read()>();
v11 = (int) -1;
if v10 != v11 goto label07;
v12 = 1;
goto label08;
label07:
v12 = 0;
label08:
return v12;
label09:
v4 = v4 + v8;
label10:
if v5 != v6 goto label15;
label11:
v13 = 8192 - v5;
v14 = virtualinvoke v1.<java.io.Reader: int read(char[],int,int)>(v3, v5, v13);
if v14 == 0 goto label11;
v15 = (int) -1;
if v14 != v15 goto label14;
if v4 != v6 goto label12;
v16 = virtualinvoke v0.<java.io.Reader: int read()>();
v17 = (int) -1;
if v16 != v17 goto label12;
v18 = 1;
goto label13;
label12:
v18 = 0;
label13:
return v18;
label14:
v5 = v5 + v14;
label15:
v19 = v2[v6];
v20 = v3[v6];
if v19 == v20 goto label16;
return 0;
label16:
v6 = v6 + 1;
goto label05;
}
public static boolean contentEqualsIgnoreEOL(java.io.Reader, java.io.Reader) throws java.io.IOException
{
java.io.Reader v0, v1;
java.io.BufferedReader v5, v6;
java.lang.String v7, v8;
boolean v10, v2, v3, v4, v9;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.io.Reader;
if v0 != v1 goto label1;
return 1;
label1:
if v0 != null goto label2;
v2 = 1;
goto label3;
label2:
v2 = 0;
label3:
if v1 != null goto label4;
v3 = 1;
goto label5;
label4:
v3 = 0;
label5:
v4 = v2 ^ v3;
if v4 == 0 goto label6;
return 0;
label6:
v5 = staticinvoke <org.apache.commons.io.IOUtils: java.io.BufferedReader toBufferedReader(java.io.Reader)>(v0);
v6 = staticinvoke <org.apache.commons.io.IOUtils: java.io.BufferedReader toBufferedReader(java.io.Reader)>(v1);
v7 = virtualinvoke v5.<java.io.BufferedReader: java.lang.String readLine()>();
v8 = virtualinvoke v6.<java.io.BufferedReader: java.lang.String readLine()>();
label7:
if v7 == null goto label8;
v9 = virtualinvoke v7.<java.lang.String: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label8;
v7 = virtualinvoke v5.<java.io.BufferedReader: java.lang.String readLine()>();
v8 = virtualinvoke v6.<java.io.BufferedReader: java.lang.String readLine()>();
goto label7;
label8:
v10 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v7, v8);
return v10;
}
public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
byte v3;
int v4;
long v2;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.io.OutputStream;
v2 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(v0, v1);
v3 = v2 cmp 2147483647L;
if v3 <= 0 goto label1;
v4 = (int) -1;
return v4;
label1:
return v2;
}
public static long copy(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException
{
java.io.OutputStream v1;
byte[] v3;
int v2;
long v4;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.io.IOUtils: byte[] byteArray(int)>(v2);
v4 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,byte[])>(v0, v1, v3);
return v4;
}
public static void copy(java.io.InputStream, java.io.Writer) throws java.io.IOException
{
java.io.Writer v1;
java.nio.charset.Charset v2;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.io.Writer;
v2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.nio.charset.Charset)>(v0, v1, v2);
return;
}
public static void copy(java.io.InputStream, java.io.Writer, java.nio.charset.Charset) throws java.io.IOException
{
java.nio.charset.Charset v2, v4;
java.io.Writer v1;
java.io.InputStreamReader v3;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.io.Writer;
v2 := @parameter2: java.nio.charset.Charset;
v3 = new java.io.InputStreamReader;
v4 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(v2);
specialinvoke v3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(v0, v4);
staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(v3, v1);
return;
}
public static void copy(java.io.InputStream, java.io.Writer, java.lang.String) throws java.io.IOException
{
java.nio.charset.Charset v3;
java.io.Writer v1;
java.lang.String v2;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.io.Writer;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v2);
staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.nio.charset.Charset)>(v0, v1, v3);
return;
}
public static long copy(java.io.Reader, java.lang.Appendable) throws java.io.IOException
{
java.nio.CharBuffer v2;
java.lang.Appendable v1;
long v3;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.lang.Appendable;
v2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(8192);
v3 = staticinvoke <org.apache.commons.io.IOUtils: long copy(java.io.Reader,java.lang.Appendable,java.nio.CharBuffer)>(v0, v1, v2);
return v3;
}
public static long copy(java.io.Reader, java.lang.Appendable, java.nio.CharBuffer) throws java.io.IOException
{
java.nio.CharBuffer v2;
java.lang.Appendable v1;
int v4, v5;
long v3;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.lang.Appendable;
v2 := @parameter2: java.nio.CharBuffer;
v3 = 0L;
label1:
v4 = virtualinvoke v0.<java.io.Reader: int read(java.nio.CharBuffer)>(v2);
v5 = (int) -1;
if v5 == v4 goto label2;
virtualinvoke v2.<java.nio.CharBuffer: java.nio.CharBuffer flip()>();
interfaceinvoke v1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence,int,int)>(v2, 0, v4);
v3 = v3 + v4;
goto label1;
label2:
return v3;
}
public static void copy(java.io.Reader, java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
java.io.Reader v0;
java.nio.charset.Charset v2;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.io.OutputStream;
v2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.nio.charset.Charset)>(v0, v1, v2);
return;
}
public static void copy(java.io.Reader, java.io.OutputStream, java.nio.charset.Charset) throws java.io.IOException
{
java.io.OutputStream v1;
java.nio.charset.Charset v2, v4;
java.io.OutputStreamWriter v3;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: java.nio.charset.Charset;
v3 = new java.io.OutputStreamWriter;
v4 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(v2);
specialinvoke v3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(v1, v4);
staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(v0, v3);
virtualinvoke v3.<java.io.OutputStreamWriter: void flush()>();
return;
}
public static void copy(java.io.Reader, java.io.OutputStream, java.lang.String) throws java.io.IOException
{
java.io.OutputStream v1;
java.nio.charset.Charset v3;
java.io.Reader v0;
java.lang.String v2;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v2);
staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.nio.charset.Charset)>(v0, v1, v3);
return;
}
public static int copy(java.io.Reader, java.io.Writer) throws java.io.IOException
{
byte v3;
int v4;
java.io.Writer v1;
long v2;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.io.Writer;
v2 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)>(v0, v1);
v3 = v2 cmp 2147483647L;
if v3 <= 0 goto label1;
v4 = (int) -1;
return v4;
label1:
return v2;
}
public static long copy(java.net.URL, java.io.File) throws java.io.IOException
{
java.io.OutputStream v5;
java.lang.Throwable v7;
java.net.URL v0;
long v6;
java.io.File v1;
java.nio.file.OpenOption[] v4;
java.lang.Object v2;
java.nio.file.Path v3;
v0 := @parameter0: java.net.URL;
v1 := @parameter1: java.io.File;
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "file");
v3 = virtualinvoke v2.<java.io.File: java.nio.file.Path toPath()>();
v4 = newarray (java.nio.file.OpenOption)[0];
v5 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(v3, v4);
label1:
v6 = staticinvoke <org.apache.commons.io.IOUtils: long copy(java.net.URL,java.io.OutputStream)>(v0, v5);
label2:
if v5 == null goto label3;
virtualinvoke v5.<java.io.OutputStream: void close()>();
label3:
return v6;
label4:
v7 := @caughtexception;
throw v7;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static long copy(java.net.URL, java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
java.lang.Throwable v5;
java.net.URL v0;
java.lang.Object v2;
long v4;
java.io.InputStream v3;
v0 := @parameter0: java.net.URL;
v1 := @parameter1: java.io.OutputStream;
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "url");
v3 = virtualinvoke v2.<java.net.URL: java.io.InputStream openStream()>();
label1:
v4 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(v3, v1);
label2:
if v3 == null goto label3;
virtualinvoke v3.<java.io.InputStream: void close()>();
label3:
return v4;
label4:
v5 := @caughtexception;
throw v5;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static long copyLarge(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
long v2;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.io.OutputStream;
v2 = staticinvoke <org.apache.commons.io.IOUtils: long copy(java.io.InputStream,java.io.OutputStream,int)>(v0, v1, 8192);
return v2;
}
public static long copyLarge(java.io.InputStream, java.io.OutputStream, byte[]) throws java.io.IOException
{
java.io.OutputStream v1;
byte[] v2;
int v4, v5;
long v3;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: byte[];
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "inputStream");
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "outputStream");
v3 = 0L;
label1:
v4 = virtualinvoke v0.<java.io.InputStream: int read(byte[])>(v2);
v5 = (int) -1;
if v5 == v4 goto label2;
virtualinvoke v1.<java.io.OutputStream: void write(byte[],int,int)>(v2, 0, v4);
v3 = v3 + v4;
goto label1;
label2:
return v3;
}
public static long copyLarge(java.io.InputStream, java.io.OutputStream, long, long) throws java.io.IOException
{
java.io.OutputStream v1;
byte[] v4;
long v2, v3, v5;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: long;
v3 := @parameter3: long;
v4 = staticinvoke <org.apache.commons.io.IOUtils: byte[] getByteArray()>();
v5 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])>(v0, v1, v2, v3, v4);
return v5;
}
public static long copyLarge(java.io.InputStream, java.io.OutputStream, long, long, byte[]) throws java.io.IOException
{
java.io.OutputStream v1;
byte[] v4;
long v13, v2, v3, v9;
byte v12, v14, v5, v6, v8;
int v10, v11, v7;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: long;
v3 := @parameter3: long;
v4 := @parameter4: byte[];
v5 = v2 cmp 0L;
if v5 <= 0 goto label1;
staticinvoke <org.apache.commons.io.IOUtils: void skipFully(java.io.InputStream,long)>(v0, v2);
label1:
v6 = v3 cmp 0L;
if v6 != 0 goto label2;
return 0L;
label2:
v7 = lengthof v4;
v8 = v3 cmp 0L;
if v8 <= 0 goto label3;
label3:
v9 = 0L;
label4:
if v3 <= 0 goto label5;
v10 = virtualinvoke v0.<java.io.InputStream: int read(byte[],int,int)>(v4, 0, v3);
v11 = (int) -1;
if v11 == v10 goto label5;
virtualinvoke v1.<java.io.OutputStream: void write(byte[],int,int)>(v4, 0, v10);
v9 = v9 + v10;
v12 = v3 cmp 0L;
if v12 <= 0 goto label4;
v13 = v3 - v9;
staticinvoke <java.lang.Math: long min(long,long)>(v13, v7);
goto label4;
label5:
return v9;
}
public static long copyLarge(java.io.Reader, java.io.Writer) throws java.io.IOException
{
java.io.Writer v1;
char[] v2;
long v3;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.io.Writer;
v2 = staticinvoke <org.apache.commons.io.IOUtils: char[] getCharArray()>();
v3 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer,char[])>(v0, v1, v2);
return v3;
}
public static long copyLarge(java.io.Reader, java.io.Writer, char[]) throws java.io.IOException
{
int v4, v5;
java.io.Writer v1;
char[] v2;
long v3;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.io.Writer;
v2 := @parameter2: char[];
v3 = 0L;
label1:
v4 = virtualinvoke v0.<java.io.Reader: int read(char[])>(v2);
v5 = (int) -1;
if v5 == v4 goto label2;
virtualinvoke v1.<java.io.Writer: void write(char[],int,int)>(v2, 0, v4);
v3 = v3 + v4;
goto label1;
label2:
return v3;
}
public static long copyLarge(java.io.Reader, java.io.Writer, long, long) throws java.io.IOException
{
java.io.Writer v1;
char[] v4;
long v2, v3, v5;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.io.Writer;
v2 := @parameter2: long;
v3 := @parameter3: long;
v4 = staticinvoke <org.apache.commons.io.IOUtils: char[] getCharArray()>();
v5 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer,long,long,char[])>(v0, v1, v2, v3, v4);
return v5;
}
public static long copyLarge(java.io.Reader, java.io.Writer, long, long, char[]) throws java.io.IOException
{
long v10, v14, v2, v3;
byte v13, v16, v5, v6, v8;
int v11, v12, v15, v7, v9;
java.io.Reader v0;
java.io.Writer v1;
char[] v4;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.io.Writer;
v2 := @parameter2: long;
v3 := @parameter3: long;
v4 := @parameter4: char[];
v5 = v2 cmp 0L;
if v5 <= 0 goto label1;
staticinvoke <org.apache.commons.io.IOUtils: void skipFully(java.io.Reader,long)>(v0, v2);
label1:
v6 = v3 cmp 0L;
if v6 != 0 goto label2;
return 0L;
label2:
v7 = lengthof v4;
v8 = v3 cmp 0L;
if v8 <= 0 goto label3;
v9 = lengthof v4;
label3:
v10 = 0L;
label4:
if v3 <= 0 goto label5;
v11 = virtualinvoke v0.<java.io.Reader: int read(char[],int,int)>(v4, 0, v3);
v12 = (int) -1;
if v12 == v11 goto label5;
virtualinvoke v1.<java.io.Writer: void write(char[],int,int)>(v4, 0, v11);
v10 = v10 + v11;
v13 = v3 cmp 0L;
if v13 <= 0 goto label4;
v14 = v3 - v10;
v15 = lengthof v4;
staticinvoke <java.lang.Math: long min(long,long)>(v14, v15);
goto label4;
label5:
return v10;
}
static byte[] getByteArray()
{
java.lang.Object v1;
java.lang.ThreadLocal v0;
v0 = <org.apache.commons.io.IOUtils: java.lang.ThreadLocal SKIP_BYTE_BUFFER>;
v1 = virtualinvoke v0.<java.lang.ThreadLocal: java.lang.Object get()>();
return v1;
}
static char[] getCharArray()
{
java.lang.Object v1;
java.lang.ThreadLocal v0;
v0 = <org.apache.commons.io.IOUtils: java.lang.ThreadLocal SKIP_CHAR_BUFFER>;
v1 = virtualinvoke v0.<java.lang.ThreadLocal: java.lang.Object get()>();
return v1;
}
public static int length(byte[])
{
int v1;
byte[] v0;
v0 := @parameter0: byte[];
if v0 != null goto label1;
v1 = 0;
goto label2;
label1:
v1 = lengthof v0;
label2:
return v1;
}
public static int length(char[])
{
int v1;
char[] v0;
v0 := @parameter0: char[];
if v0 != null goto label1;
v1 = 0;
goto label2;
label1:
v1 = lengthof v0;
label2:
return v1;
}
public static int length(java.lang.CharSequence)
{
int v1;
java.lang.CharSequence v0;
v0 := @parameter0: java.lang.CharSequence;
if v0 != null goto label1;
v1 = 0;
goto label2;
label1:
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
label2:
return v1;
}
public static int length(java.lang.Object[])
{
int v1;
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
if v0 != null goto label1;
v1 = 0;
goto label2;
label1:
v1 = lengthof v0;
label2:
return v1;
}
public static org.apache.commons.io.LineIterator lineIterator(java.io.InputStream, java.nio.charset.Charset)
{
org.apache.commons.io.LineIterator v2;
java.nio.charset.Charset v1, v4;
java.io.InputStreamReader v3;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.nio.charset.Charset;
v2 = new org.apache.commons.io.LineIterator;
v3 = new java.io.InputStreamReader;
v4 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(v1);
specialinvoke v3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(v0, v4);
specialinvoke v2.<org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>(v3);
return v2;
}
public static org.apache.commons.io.LineIterator lineIterator(java.io.InputStream, java.lang.String)
{
org.apache.commons.io.LineIterator v3;
java.nio.charset.Charset v2;
java.lang.String v1;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v1);
v3 = staticinvoke <org.apache.commons.io.IOUtils: org.apache.commons.io.LineIterator lineIterator(java.io.InputStream,java.nio.charset.Charset)>(v0, v2);
return v3;
}
public static org.apache.commons.io.LineIterator lineIterator(java.io.Reader)
{
org.apache.commons.io.LineIterator v1;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 = new org.apache.commons.io.LineIterator;
specialinvoke v1.<org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>(v0);
return v1;
}
public static int read(java.io.InputStream, byte[]) throws java.io.IOException
{
byte[] v1;
int v2, v3;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: byte[];
v2 = lengthof v1;
v3 = staticinvoke <org.apache.commons.io.IOUtils: int read(java.io.InputStream,byte[],int,int)>(v0, v1, 0, v2);
return v3;
}
public static int read(java.io.InputStream, byte[], int, int) throws java.io.IOException
{
byte[] v1;
java.lang.IllegalArgumentException v4;
int v10, v11, v2, v3, v6, v7, v8, v9;
java.lang.String v5;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: byte[];
v2 := @parameter2: int;
v3 := @parameter3: int;
if v3 >= 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Length must not be negative: \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
v6 = v3;
label2:
if v6 <= 0 goto label3;
v7 = v3 - v6;
v8 = v2 + v7;
v9 = virtualinvoke v0.<java.io.InputStream: int read(byte[],int,int)>(v1, v8, v6);
v10 = (int) -1;
if v10 == v9 goto label3;
v6 = v6 - v9;
goto label2;
label3:
v11 = v3 - v6;
return v11;
}
public static int read(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer) throws java.io.IOException
{
java.nio.channels.ReadableByteChannel v0;
java.nio.ByteBuffer v1;
int v2, v3, v4, v5, v6, v7;
v0 := @parameter0: java.nio.channels.ReadableByteChannel;
v1 := @parameter1: java.nio.ByteBuffer;
v2 = virtualinvoke v1.<java.nio.ByteBuffer: int remaining()>();
label1:
v3 = virtualinvoke v1.<java.nio.ByteBuffer: int remaining()>();
if v3 <= 0 goto label2;
v4 = interfaceinvoke v0.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(v1);
v5 = (int) -1;
if v5 != v4 goto label1;
label2:
v6 = virtualinvoke v1.<java.nio.ByteBuffer: int remaining()>();
v7 = v2 - v6;
return v7;
}
public static int read(java.io.Reader, char[]) throws java.io.IOException
{
int v2, v3;
char[] v1;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: char[];
v2 = lengthof v1;
v3 = staticinvoke <org.apache.commons.io.IOUtils: int read(java.io.Reader,char[],int,int)>(v0, v1, 0, v2);
return v3;
}
public static int read(java.io.Reader, char[], int, int) throws java.io.IOException
{
java.io.Reader v0;
java.lang.IllegalArgumentException v4;
int v10, v11, v2, v3, v6, v7, v8, v9;
char[] v1;
java.lang.String v5;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: char[];
v2 := @parameter2: int;
v3 := @parameter3: int;
if v3 >= 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Length must not be negative: \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
v6 = v3;
label2:
if v6 <= 0 goto label3;
v7 = v3 - v6;
v8 = v2 + v7;
v9 = virtualinvoke v0.<java.io.Reader: int read(char[],int,int)>(v1, v8, v6);
v10 = (int) -1;
if v10 == v9 goto label3;
v6 = v6 - v9;
goto label2;
label3:
v11 = v3 - v6;
return v11;
}
public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException
{
int v2;
byte[] v1;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: byte[];
v2 = lengthof v1;
staticinvoke <org.apache.commons.io.IOUtils: void readFully(java.io.InputStream,byte[],int,int)>(v0, v1, 0, v2);
return;
}
public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
{
byte[] v1;
int v2, v3, v4;
java.lang.String v6;
java.io.EOFException v5;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: byte[];
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.io.IOUtils: int read(java.io.InputStream,byte[],int,int)>(v0, v1, v2, v3);
if v4 == v3 goto label1;
v5 = new java.io.EOFException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v3, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Length to read: \u0001 actual: \u0001");
specialinvoke v5.<java.io.EOFException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return;
}
public static byte[] readFully(java.io.InputStream, int) throws java.io.IOException
{
byte[] v2;
int v1, v3;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.io.IOUtils: byte[] byteArray(int)>(v1);
v3 = lengthof v2;
staticinvoke <org.apache.commons.io.IOUtils: void readFully(java.io.InputStream,byte[],int,int)>(v0, v2, 0, v3);
return v2;
}
public static void readFully(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer) throws java.io.IOException
{
java.nio.channels.ReadableByteChannel v0;
int v2, v3;
java.lang.String v5;
java.io.EOFException v4;
java.nio.ByteBuffer v1;
v0 := @parameter0: java.nio.channels.ReadableByteChannel;
v1 := @parameter1: java.nio.ByteBuffer;
v2 = virtualinvoke v1.<java.nio.ByteBuffer: int remaining()>();
v3 = staticinvoke <org.apache.commons.io.IOUtils: int read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)>(v0, v1);
if v3 == v2 goto label1;
v4 = new java.io.EOFException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Length to read: \u0001 actual: \u0001");
specialinvoke v4.<java.io.EOFException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return;
}
public static void readFully(java.io.Reader, char[]) throws java.io.IOException
{
int v2;
char[] v1;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: char[];
v2 = lengthof v1;
staticinvoke <org.apache.commons.io.IOUtils: void readFully(java.io.Reader,char[],int,int)>(v0, v1, 0, v2);
return;
}
public static void readFully(java.io.Reader, char[], int, int) throws java.io.IOException
{
int v2, v3, v4;
char[] v1;
java.io.Reader v0;
java.lang.String v6;
java.io.EOFException v5;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: char[];
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.io.IOUtils: int read(java.io.Reader,char[],int,int)>(v0, v1, v2, v3);
if v4 == v3 goto label1;
v5 = new java.io.EOFException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v3, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Length to read: \u0001 actual: \u0001");
specialinvoke v5.<java.io.EOFException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return;
}
public static java.util.List readLines(java.io.InputStream) throws java.io.IOException
{
java.util.List v2;
java.nio.charset.Charset v1;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v2 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.nio.charset.Charset)>(v0, v1);
return v2;
}
public static java.util.List readLines(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException
{
java.util.List v4;
java.nio.charset.Charset v1, v3;
java.io.InputStreamReader v2;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.nio.charset.Charset;
v2 = new java.io.InputStreamReader;
v3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(v1);
specialinvoke v2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(v0, v3);
v4 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>(v2);
return v4;
}
public static java.util.List readLines(java.io.InputStream, java.lang.String) throws java.io.IOException
{
java.util.List v3;
java.nio.charset.Charset v2;
java.lang.String v1;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v1);
v3 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.nio.charset.Charset)>(v0, v2);
return v3;
}
public static java.util.List readLines(java.io.Reader) throws java.io.IOException
{
java.io.BufferedReader v1;
java.io.Reader v0;
java.lang.String v3;
java.util.ArrayList v2;
v0 := @parameter0: java.io.Reader;
v1 = staticinvoke <org.apache.commons.io.IOUtils: java.io.BufferedReader toBufferedReader(java.io.Reader)>(v0);
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
label1:
v3 = virtualinvoke v1.<java.io.BufferedReader: java.lang.String readLine()>();
if v3 == null goto label2;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
goto label1;
label2:
return v2;
}
public static byte[] resourceToByteArray(java.lang.String) throws java.io.IOException
{
byte[] v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.io.IOUtils: byte[] resourceToByteArray(java.lang.String,java.lang.ClassLoader)>(v0, null);
return v1;
}
public static byte[] resourceToByteArray(java.lang.String, java.lang.ClassLoader) throws java.io.IOException
{
byte[] v3;
java.net.URL v2;
java.lang.ClassLoader v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.ClassLoader;
v2 = staticinvoke <org.apache.commons.io.IOUtils: java.net.URL resourceToURL(java.lang.String,java.lang.ClassLoader)>(v0, v1);
v3 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.net.URL)>(v2);
return v3;
}
public static java.lang.String resourceToString(java.lang.String, java.nio.charset.Charset) throws java.io.IOException
{
java.lang.String v0, v2;
java.nio.charset.Charset v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.nio.charset.Charset;
v2 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String resourceToString(java.lang.String,java.nio.charset.Charset,java.lang.ClassLoader)>(v0, v1, null);
return v2;
}
public static java.lang.String resourceToString(java.lang.String, java.nio.charset.Charset, java.lang.ClassLoader) throws java.io.IOException
{
java.nio.charset.Charset v1;
java.net.URL v3;
java.lang.ClassLoader v2;
java.lang.String v0, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.nio.charset.Charset;
v2 := @parameter2: java.lang.ClassLoader;
v3 = staticinvoke <org.apache.commons.io.IOUtils: java.net.URL resourceToURL(java.lang.String,java.lang.ClassLoader)>(v0, v2);
v4 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URL,java.nio.charset.Charset)>(v3, v1);
return v4;
}
public static java.net.URL resourceToURL(java.lang.String) throws java.io.IOException
{
java.lang.String v0;
java.net.URL v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.io.IOUtils: java.net.URL resourceToURL(java.lang.String,java.lang.ClassLoader)>(v0, null);
return v1;
}
public static java.net.URL resourceToURL(java.lang.String, java.lang.ClassLoader) throws java.io.IOException
{
java.net.URL v3;
java.io.IOException v4;
java.lang.Class v2;
java.lang.ClassLoader v1;
java.lang.String v0, v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.ClassLoader;
if v1 != null goto label1;
v2 = class "Lorg/apache/commons/io/IOUtils;";
v3 = virtualinvoke v2.<java.lang.Class: java.net.URL getResource(java.lang.String)>(v0);
goto label2;
label1:
v3 = virtualinvoke v1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(v0);
label2:
if v3 != null goto label3;
v4 = new java.io.IOException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Resource not found: \u0001");
specialinvoke v4.<java.io.IOException: void <init>(java.lang.String)>(v5);
throw v4;
label3:
return v3;
}
public static long skip(java.io.InputStream, long) throws java.io.IOException
{
byte[] v7;
long v1, v12, v5, v9;
java.lang.IllegalArgumentException v3;
byte v11, v2, v6;
int v10, v8;
java.lang.String v4;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: long;
v2 = v1 cmp 0L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Skip count must be non-negative, actual: \u0001");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v5 = v1;
label2:
v6 = v5 cmp 0L;
if v6 <= 0 goto label3;
v7 = staticinvoke <org.apache.commons.io.IOUtils: byte[] getByteArray()>();
v8 = lengthof v7;
v9 = staticinvoke <java.lang.Math: long min(long,long)>(v5, v8);
v10 = virtualinvoke v0.<java.io.InputStream: int read(byte[],int,int)>(v7, 0, v9);
v11 = v10 cmp 0L;
if v11 < 0 goto label3;
v5 = v5 - v10;
goto label2;
label3:
v12 = v1 - v5;
return v12;
}
public static long skip(java.nio.channels.ReadableByteChannel, long) throws java.io.IOException
{
java.nio.channels.ReadableByteChannel v0;
long v1, v12, v5, v7, v9;
java.lang.IllegalArgumentException v3;
java.nio.ByteBuffer v6;
byte v2, v8;
int v10, v11;
java.lang.String v4;
v0 := @parameter0: java.nio.channels.ReadableByteChannel;
v1 := @parameter1: long;
v2 = v1 cmp 0L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Skip count must be non-negative, actual: \u0001");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v5 = staticinvoke <java.lang.Math: long min(long,long)>(v1, 8192L);
v6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(v5);
v7 = v1;
label2:
v8 = v7 cmp 0L;
if v8 <= 0 goto label3;
virtualinvoke v6.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(0);
v9 = staticinvoke <java.lang.Math: long min(long,long)>(v7, 8192L);
virtualinvoke v6.<java.nio.ByteBuffer: java.nio.ByteBuffer limit(int)>(v9);
v10 = interfaceinvoke v0.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(v6);
v11 = (int) -1;
if v10 == v11 goto label3;
v7 = v7 - v10;
goto label2;
label3:
v12 = v1 - v7;
return v12;
}
public static long skip(java.io.Reader, long) throws java.io.IOException
{
long v1, v12, v5, v9;
java.io.Reader v0;
java.lang.IllegalArgumentException v3;
byte v11, v2, v6;
int v10, v8;
char[] v7;
java.lang.String v4;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: long;
v2 = v1 cmp 0L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Skip count must be non-negative, actual: \u0001");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v5 = v1;
label2:
v6 = v5 cmp 0L;
if v6 <= 0 goto label3;
v7 = staticinvoke <org.apache.commons.io.IOUtils: char[] getCharArray()>();
v8 = lengthof v7;
v9 = staticinvoke <java.lang.Math: long min(long,long)>(v5, v8);
v10 = virtualinvoke v0.<java.io.Reader: int read(char[],int,int)>(v7, 0, v9);
v11 = v10 cmp 0L;
if v11 < 0 goto label3;
v5 = v5 - v10;
goto label2;
label3:
v12 = v1 - v5;
return v12;
}
public static void skipFully(java.io.InputStream, long) throws java.io.IOException
{
long v1, v5;
java.lang.IllegalArgumentException v3;
java.io.EOFException v7;
byte v2, v6;
java.lang.String v4, v8;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: long;
v2 = v1 cmp 0L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Bytes to skip must not be negative: \u0001");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v5 = staticinvoke <org.apache.commons.io.IOUtils: long skip(java.io.InputStream,long)>(v0, v1);
v6 = v5 cmp v1;
if v6 == 0 goto label2;
v7 = new java.io.EOFException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long)>(v1, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Bytes to skip: \u0001 actual: \u0001");
specialinvoke v7.<java.io.EOFException: void <init>(java.lang.String)>(v8);
throw v7;
label2:
return;
}
public static void skipFully(java.nio.channels.ReadableByteChannel, long) throws java.io.IOException
{
java.nio.channels.ReadableByteChannel v0;
long v1, v5;
java.lang.IllegalArgumentException v3;
java.io.EOFException v7;
byte v2, v6;
java.lang.String v4, v8;
v0 := @parameter0: java.nio.channels.ReadableByteChannel;
v1 := @parameter1: long;
v2 = v1 cmp 0L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Bytes to skip must not be negative: \u0001");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v5 = staticinvoke <org.apache.commons.io.IOUtils: long skip(java.nio.channels.ReadableByteChannel,long)>(v0, v1);
v6 = v5 cmp v1;
if v6 == 0 goto label2;
v7 = new java.io.EOFException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long)>(v1, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Bytes to skip: \u0001 actual: \u0001");
specialinvoke v7.<java.io.EOFException: void <init>(java.lang.String)>(v8);
throw v7;
label2:
return;
}
public static void skipFully(java.io.Reader, long) throws java.io.IOException
{
byte v3;
long v1, v2;
java.io.Reader v0;
java.lang.String v5;
java.io.EOFException v4;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: long;
v2 = staticinvoke <org.apache.commons.io.IOUtils: long skip(java.io.Reader,long)>(v0, v1);
v3 = v2 cmp v1;
if v3 == 0 goto label1;
v4 = new java.io.EOFException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Chars to skip: \u0001 actual: \u0001");
specialinvoke v4.<java.io.EOFException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return;
}
public static java.io.InputStream toBufferedInputStream(java.io.InputStream) throws java.io.IOException
{
java.io.InputStream v0, v1;
v0 := @parameter0: java.io.InputStream;
v1 = staticinvoke <org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toBufferedInputStream(java.io.InputStream)>(v0);
return v1;
}
public static java.io.InputStream toBufferedInputStream(java.io.InputStream, int) throws java.io.IOException
{
int v1;
java.io.InputStream v0, v2;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toBufferedInputStream(java.io.InputStream,int)>(v0, v1);
return v2;
}
public static java.io.BufferedReader toBufferedReader(java.io.Reader)
{
java.io.Reader v0;
boolean v1;
v0 := @parameter0: java.io.Reader;
v1 = v0 instanceof java.io.BufferedReader;
if v1 != 0 goto label1;
v0 = new java.io.BufferedReader;
specialinvoke v0.<java.io.BufferedReader: void <init>(java.io.Reader)>(v0);
label1:
return v0;
}
public static java.io.BufferedReader toBufferedReader(java.io.Reader, int)
{
int v1;
java.io.Reader v0;
boolean v2;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: int;
v2 = v0 instanceof java.io.BufferedReader;
if v2 != 0 goto label1;
v0 = new java.io.BufferedReader;
specialinvoke v0.<java.io.BufferedReader: void <init>(java.io.Reader,int)>(v0, v1);
label1:
return v0;
}
public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException
{
java.lang.Throwable v6, v7;
byte[] v5;
org.apache.commons.io.function.IOFunction v4;
org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream v1;
org.apache.commons.io.function.IOConsumer v3;
org.apache.commons.io.output.ThresholdingOutputStream v2;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 = new org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream;
specialinvoke v1.<org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream: void <init>()>();
label1:
v2 = new org.apache.commons.io.output.ThresholdingOutputStream;
v3 = staticinvoke <org.apache.commons.io.IOUtils$lambda_toByteArray_0__254: org.apache.commons.io.function.IOConsumer bootstrap$()>();
v4 = staticinvoke <org.apache.commons.io.IOUtils$lambda_toByteArray_1__255: org.apache.commons.io.function.IOFunction bootstrap$(org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream)>(v1);
specialinvoke v2.<org.apache.commons.io.output.ThresholdingOutputStream: void <init>(int,org.apache.commons.io.function.IOConsumer,org.apache.commons.io.function.IOFunction)>(2147483647, v3, v4);
label2:
staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(v0, v2);
v5 = virtualinvoke v1.<org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream: byte[] toByteArray()>();
label3:
virtualinvoke v2.<org.apache.commons.io.output.ThresholdingOutputStream: void close()>();
label4:
virtualinvoke v1.<org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream: void close()>();
return v5;
label5:
v6 := @caughtexception;
throw v6;
label6:
v7 := @caughtexception;
throw v7;
catch java.lang.Throwable from label2 to label3 with label5;
catch java.lang.Throwable from label1 to label4 with label6;
}
public static byte[] toByteArray(java.io.InputStream, int) throws java.io.IOException
{
byte[] v4, v5;
java.io.IOException v10;
java.lang.IllegalArgumentException v2;
int v1, v6, v7, v8, v9;
java.lang.String v11, v3;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Size must be equal or greater than zero: \u0001");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
if v1 != 0 goto label2;
v4 = <org.apache.commons.io.IOUtils: byte[] EMPTY_BYTE_ARRAY>;
return v4;
label2:
v5 = staticinvoke <org.apache.commons.io.IOUtils: byte[] byteArray(int)>(v1);
v6 = 0;
label3:
if v6 >= v1 goto label4;
v7 = v1 - v6;
v8 = virtualinvoke v0.<java.io.InputStream: int read(byte[],int,int)>(v5, v6, v7);
v9 = (int) -1;
if v8 == v9 goto label4;
v6 = v6 + v8;
goto label3;
label4:
if v6 == v1 goto label5;
v10 = new java.io.IOException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v6, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected read size, current: \u0001, expected: \u0001");
specialinvoke v10.<java.io.IOException: void <init>(java.lang.String)>(v11);
throw v10;
label5:
return v5;
}
public static byte[] toByteArray(java.io.InputStream, long) throws java.io.IOException
{
byte[] v5;
byte v2;
long v1;
java.lang.String v4;
java.lang.IllegalArgumentException v3;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: long;
v2 = v1 cmp 2147483647L;
if v2 <= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Size cannot be greater than Integer max value: \u0001");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v5 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream,int)>(v0, v1);
return v5;
}
public static byte[] toByteArray(java.io.Reader) throws java.io.IOException
{
byte[] v2;
java.io.Reader v0;
java.nio.charset.Charset v1;
v0 := @parameter0: java.io.Reader;
v1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v2 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.Reader,java.nio.charset.Charset)>(v0, v1);
return v2;
}
public static byte[] toByteArray(java.io.Reader, java.nio.charset.Charset) throws java.io.IOException
{
java.lang.Throwable v4;
byte[] v3;
java.nio.charset.Charset v1;
org.apache.commons.io.output.ByteArrayOutputStream v2;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.nio.charset.Charset;
v2 = new org.apache.commons.io.output.ByteArrayOutputStream;
specialinvoke v2.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();
label1:
staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.nio.charset.Charset)>(v0, v2, v1);
v3 = virtualinvoke v2.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();
label2:
virtualinvoke v2.<org.apache.commons.io.output.ByteArrayOutputStream: void close()>();
return v3;
label3:
v4 := @caughtexception;
throw v4;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static byte[] toByteArray(java.io.Reader, java.lang.String) throws java.io.IOException
{
byte[] v3;
java.nio.charset.Charset v2;
java.io.Reader v0;
java.lang.String v1;
v0 := @parameter0: java.io.Reader;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v1);
v3 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.Reader,java.nio.charset.Charset)>(v0, v2);
return v3;
}
public static byte[] toByteArray(java.lang.String)
{
byte[] v2;
java.lang.String v0;
java.nio.charset.Charset v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v2 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v1);
return v2;
}
public static byte[] toByteArray(java.net.URI) throws java.io.IOException
{
byte[] v2;
java.net.URI v0;
java.net.URL v1;
v0 := @parameter0: java.net.URI;
v1 = virtualinvoke v0.<java.net.URI: java.net.URL toURL()>();
v2 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.net.URL)>(v1);
return v2;
}
public static byte[] toByteArray(java.net.URL) throws java.io.IOException
{
java.lang.Throwable v3;
byte[] v2;
java.net.URL v0;
java.net.URLConnection v1;
v0 := @parameter0: java.net.URL;
v1 = virtualinvoke v0.<java.net.URL: java.net.URLConnection openConnection()>();
label1:
v2 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.net.URLConnection)>(v1);
label2:
staticinvoke <org.apache.commons.io.IOUtils: void close(java.net.URLConnection)>(v1);
return v2;
label3:
v3 := @caughtexception;
staticinvoke <org.apache.commons.io.IOUtils: void close(java.net.URLConnection)>(v1);
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static byte[] toByteArray(java.net.URLConnection) throws java.io.IOException
{
java.lang.Throwable v3;
byte[] v2;
java.net.URLConnection v0;
java.io.InputStream v1;
v0 := @parameter0: java.net.URLConnection;
v1 = virtualinvoke v0.<java.net.URLConnection: java.io.InputStream getInputStream()>();
label1:
v2 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(v1);
label2:
if v1 == null goto label3;
virtualinvoke v1.<java.io.InputStream: void close()>();
label3:
return v2;
label4:
v3 := @caughtexception;
throw v3;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static char[] toCharArray(java.io.InputStream) throws java.io.IOException
{
char[] v2;
java.nio.charset.Charset v1;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v2 = staticinvoke <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream,java.nio.charset.Charset)>(v0, v1);
return v2;
}
public static char[] toCharArray(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException
{
java.nio.charset.Charset v1;
char[] v3;
java.io.CharArrayWriter v2;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.nio.charset.Charset;
v2 = new java.io.CharArrayWriter;
specialinvoke v2.<java.io.CharArrayWriter: void <init>()>();
staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.nio.charset.Charset)>(v0, v2, v1);
v3 = virtualinvoke v2.<java.io.CharArrayWriter: char[] toCharArray()>();
return v3;
}
public static char[] toCharArray(java.io.InputStream, java.lang.String) throws java.io.IOException
{
java.nio.charset.Charset v2;
char[] v3;
java.lang.String v1;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v1);
v3 = staticinvoke <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream,java.nio.charset.Charset)>(v0, v2);
return v3;
}
public static char[] toCharArray(java.io.Reader) throws java.io.IOException
{
char[] v2;
java.io.CharArrayWriter v1;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 = new java.io.CharArrayWriter;
specialinvoke v1.<java.io.CharArrayWriter: void <init>()>();
staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(v0, v1);
v2 = virtualinvoke v1.<java.io.CharArrayWriter: char[] toCharArray()>();
return v2;
}
public static java.io.InputStream toInputStream(java.lang.CharSequence)
{
java.lang.CharSequence v0;
java.nio.charset.Charset v1;
java.io.InputStream v2;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v2 = staticinvoke <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.CharSequence,java.nio.charset.Charset)>(v0, v1);
return v2;
}
public static java.io.InputStream toInputStream(java.lang.CharSequence, java.nio.charset.Charset)
{
java.lang.CharSequence v0;
java.nio.charset.Charset v1;
java.lang.String v2;
java.io.InputStream v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.nio.charset.Charset;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
v3 = staticinvoke <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.String,java.nio.charset.Charset)>(v2, v1);
return v3;
}
public static java.io.InputStream toInputStream(java.lang.CharSequence, java.lang.String)
{
java.lang.CharSequence v0;
java.nio.charset.Charset v2;
java.lang.String v1;
java.io.InputStream v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v1);
v3 = staticinvoke <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.CharSequence,java.nio.charset.Charset)>(v0, v2);
return v3;
}
public static java.io.InputStream toInputStream(java.lang.String)
{
java.lang.String v0;
java.nio.charset.Charset v1;
java.io.InputStream v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v2 = staticinvoke <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.String,java.nio.charset.Charset)>(v0, v1);
return v2;
}
public static java.io.InputStream toInputStream(java.lang.String, java.nio.charset.Charset)
{
byte[] v4;
java.io.ByteArrayInputStream v2;
java.nio.charset.Charset v1, v3;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.nio.charset.Charset;
v2 = new java.io.ByteArrayInputStream;
v3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(v1);
v4 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v3);
specialinvoke v2.<java.io.ByteArrayInputStream: void <init>(byte[])>(v4);
return v2;
}
public static java.io.InputStream toInputStream(java.lang.String, java.lang.String)
{
byte[] v3;
java.io.ByteArrayInputStream v4;
java.nio.charset.Charset v2;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v1);
v3 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v2);
v4 = new java.io.ByteArrayInputStream;
specialinvoke v4.<java.io.ByteArrayInputStream: void <init>(byte[])>(v3);
return v4;
}
public static java.lang.String toString(byte[])
{
byte[] v0;
java.lang.String v1;
java.nio.charset.Charset v2;
v0 := @parameter0: byte[];
v1 = new java.lang.String;
v2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
specialinvoke v1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(v0, v2);
return v1;
}
public static java.lang.String toString(byte[], java.lang.String)
{
byte[] v0;
java.nio.charset.Charset v3;
java.lang.String v1, v2;
v0 := @parameter0: byte[];
v1 := @parameter1: java.lang.String;
v2 = new java.lang.String;
v3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v1);
specialinvoke v2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(v0, v3);
return v2;
}
public static java.lang.String toString(java.io.InputStream) throws java.io.IOException
{
java.lang.String v2;
java.nio.charset.Charset v1;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v2 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.nio.charset.Charset)>(v0, v1);
return v2;
}
public static java.lang.String toString(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException
{
java.lang.Throwable v4;
java.nio.charset.Charset v1;
org.apache.commons.io.output.StringBuilderWriter v2;
java.lang.String v3;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.nio.charset.Charset;
v2 = new org.apache.commons.io.output.StringBuilderWriter;
specialinvoke v2.<org.apache.commons.io.output.StringBuilderWriter: void <init>()>();
label1:
staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.nio.charset.Charset)>(v0, v2, v1);
v3 = virtualinvoke v2.<org.apache.commons.io.output.StringBuilderWriter: java.lang.String toString()>();
label2:
virtualinvoke v2.<org.apache.commons.io.output.StringBuilderWriter: void close()>();
return v3;
label3:
v4 := @caughtexception;
throw v4;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static java.lang.String toString(java.io.InputStream, java.lang.String) throws java.io.IOException
{
java.nio.charset.Charset v2;
java.lang.String v1, v3;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v1);
v3 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.nio.charset.Charset)>(v0, v2);
return v3;
}
public static java.lang.String toString(java.io.Reader) throws java.io.IOException
{
java.lang.Throwable v3;
org.apache.commons.io.output.StringBuilderWriter v1;
java.io.Reader v0;
java.lang.String v2;
v0 := @parameter0: java.io.Reader;
v1 = new org.apache.commons.io.output.StringBuilderWriter;
specialinvoke v1.<org.apache.commons.io.output.StringBuilderWriter: void <init>()>();
label1:
staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(v0, v1);
v2 = virtualinvoke v1.<org.apache.commons.io.output.StringBuilderWriter: java.lang.String toString()>();
label2:
virtualinvoke v1.<org.apache.commons.io.output.StringBuilderWriter: void close()>();
return v2;
label3:
v3 := @caughtexception;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static java.lang.String toString(java.net.URI) throws java.io.IOException
{
java.lang.String v2;
java.net.URI v0;
java.nio.charset.Charset v1;
v0 := @parameter0: java.net.URI;
v1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v2 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URI,java.nio.charset.Charset)>(v0, v1);
return v2;
}
public static java.lang.String toString(java.net.URI, java.nio.charset.Charset) throws java.io.IOException
{
java.nio.charset.Charset v1, v3;
java.net.URL v2;
java.lang.String v4;
java.net.URI v0;
v0 := @parameter0: java.net.URI;
v1 := @parameter1: java.nio.charset.Charset;
v2 = virtualinvoke v0.<java.net.URI: java.net.URL toURL()>();
v3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(v1);
v4 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URL,java.nio.charset.Charset)>(v2, v3);
return v4;
}
public static java.lang.String toString(java.net.URI, java.lang.String) throws java.io.IOException
{
java.nio.charset.Charset v2;
java.lang.String v1, v3;
java.net.URI v0;
v0 := @parameter0: java.net.URI;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v1);
v3 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URI,java.nio.charset.Charset)>(v0, v2);
return v3;
}
public static java.lang.String toString(java.net.URL) throws java.io.IOException
{
java.lang.String v2;
java.nio.charset.Charset v1;
java.net.URL v0;
v0 := @parameter0: java.net.URL;
v1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v2 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URL,java.nio.charset.Charset)>(v0, v1);
return v2;
}
public static java.lang.String toString(java.net.URL, java.nio.charset.Charset) throws java.io.IOException
{
java.lang.Throwable v4;
java.nio.charset.Charset v1;
java.net.URL v0;
java.lang.String v3;
java.io.InputStream v2;
v0 := @parameter0: java.net.URL;
v1 := @parameter1: java.nio.charset.Charset;
v2 = virtualinvoke v0.<java.net.URL: java.io.InputStream openStream()>();
label1:
v3 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.nio.charset.Charset)>(v2, v1);
label2:
if v2 == null goto label3;
virtualinvoke v2.<java.io.InputStream: void close()>();
label3:
return v3;
label4:
v4 := @caughtexception;
throw v4;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static java.lang.String toString(java.net.URL, java.lang.String) throws java.io.IOException
{
java.nio.charset.Charset v2;
java.net.URL v0;
java.lang.String v1, v3;
v0 := @parameter0: java.net.URL;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v1);
v3 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URL,java.nio.charset.Charset)>(v0, v2);
return v3;
}
public static void write(byte[], java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
byte[] v0;
v0 := @parameter0: byte[];
v1 := @parameter1: java.io.OutputStream;
if v0 == null goto label1;
virtualinvoke v1.<java.io.OutputStream: void write(byte[])>(v0);
label1:
return;
}
public static void write(byte[], java.io.Writer) throws java.io.IOException
{
java.io.Writer v1;
byte[] v0;
java.nio.charset.Charset v2;
v0 := @parameter0: byte[];
v1 := @parameter1: java.io.Writer;
v2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
staticinvoke <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.nio.charset.Charset)>(v0, v1, v2);
return;
}
public static void write(byte[], java.io.Writer, java.nio.charset.Charset) throws java.io.IOException
{
byte[] v0;
java.nio.charset.Charset v2, v4;
java.io.Writer v1;
java.lang.String v3;
v0 := @parameter0: byte[];
v1 := @parameter1: java.io.Writer;
v2 := @parameter2: java.nio.charset.Charset;
if v0 == null goto label1;
v3 = new java.lang.String;
v4 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(v2);
specialinvoke v3.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(v0, v4);
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v3);
label1:
return;
}
public static void write(byte[], java.io.Writer, java.lang.String) throws java.io.IOException
{
byte[] v0;
java.nio.charset.Charset v3;
java.io.Writer v1;
java.lang.String v2;
v0 := @parameter0: byte[];
v1 := @parameter1: java.io.Writer;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v2);
staticinvoke <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.nio.charset.Charset)>(v0, v1, v3);
return;
}
public static void write(char[], java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
char[] v0;
java.nio.charset.Charset v2;
v0 := @parameter0: char[];
v1 := @parameter1: java.io.OutputStream;
v2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
staticinvoke <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.nio.charset.Charset)>(v0, v1, v2);
return;
}
public static void write(char[], java.io.OutputStream, java.nio.charset.Charset) throws java.io.IOException
{
java.io.OutputStream v1;
byte[] v5;
java.nio.charset.Charset v2, v4;
char[] v0;
java.lang.String v3;
v0 := @parameter0: char[];
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: java.nio.charset.Charset;
if v0 == null goto label1;
v3 = new java.lang.String;
specialinvoke v3.<java.lang.String: void <init>(char[])>(v0);
v4 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(v2);
v5 = virtualinvoke v3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v4);
virtualinvoke v1.<java.io.OutputStream: void write(byte[])>(v5);
label1:
return;
}
public static void write(char[], java.io.OutputStream, java.lang.String) throws java.io.IOException
{
java.io.OutputStream v1;
java.nio.charset.Charset v3;
char[] v0;
java.lang.String v2;
v0 := @parameter0: char[];
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v2);
staticinvoke <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.nio.charset.Charset)>(v0, v1, v3);
return;
}
public static void write(char[], java.io.Writer) throws java.io.IOException
{
java.io.Writer v1;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: java.io.Writer;
if v0 == null goto label1;
virtualinvoke v1.<java.io.Writer: void write(char[])>(v0);
label1:
return;
}
public static void write(java.lang.CharSequence, java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
java.lang.CharSequence v0;
java.nio.charset.Charset v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.io.OutputStream;
v2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.CharSequence,java.io.OutputStream,java.nio.charset.Charset)>(v0, v1, v2);
return;
}
public static void write(java.lang.CharSequence, java.io.OutputStream, java.nio.charset.Charset) throws java.io.IOException
{
java.io.OutputStream v1;
java.lang.CharSequence v0;
java.nio.charset.Charset v2;
java.lang.String v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: java.nio.charset.Charset;
if v0 == null goto label1;
v3 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)>(v3, v1, v2);
label1:
return;
}
public static void write(java.lang.CharSequence, java.io.OutputStream, java.lang.String) throws java.io.IOException
{
java.io.OutputStream v1;
java.lang.CharSequence v0;
java.nio.charset.Charset v3;
java.lang.String v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v2);
staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.CharSequence,java.io.OutputStream,java.nio.charset.Charset)>(v0, v1, v3);
return;
}
public static void write(java.lang.CharSequence, java.io.Writer) throws java.io.IOException
{
java.io.Writer v1;
java.lang.String v2;
java.lang.CharSequence v0;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.io.Writer;
if v0 == null goto label1;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.Writer)>(v2, v1);
label1:
return;
}
public static void write(java.lang.String, java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
java.lang.String v0;
java.nio.charset.Charset v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.io.OutputStream;
v2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)>(v0, v1, v2);
return;
}
public static void write(java.lang.String, java.io.OutputStream, java.nio.charset.Charset) throws java.io.IOException
{
java.io.OutputStream v1;
byte[] v4;
java.nio.charset.Charset v2, v3;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: java.nio.charset.Charset;
if v0 == null goto label1;
v3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(v2);
v4 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v3);
virtualinvoke v1.<java.io.OutputStream: void write(byte[])>(v4);
label1:
return;
}
public static void write(java.lang.String, java.io.OutputStream, java.lang.String) throws java.io.IOException
{
java.io.OutputStream v1;
java.nio.charset.Charset v3;
java.lang.String v0, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v2);
staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)>(v0, v1, v3);
return;
}
public static void write(java.lang.String, java.io.Writer) throws java.io.IOException
{
java.io.Writer v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.io.Writer;
if v0 == null goto label1;
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v0);
label1:
return;
}
public static void write(java.lang.StringBuffer, java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
java.lang.String v2;
java.lang.StringBuffer v0;
v0 := @parameter0: java.lang.StringBuffer;
v1 := @parameter1: java.io.OutputStream;
v2 = null;
staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)>(v0, v1, v2);
return;
}
public static void write(java.lang.StringBuffer, java.io.OutputStream, java.lang.String) throws java.io.IOException
{
java.io.OutputStream v1;
byte[] v5;
java.nio.charset.Charset v4;
java.lang.StringBuffer v0;
java.lang.String v2, v3;
v0 := @parameter0: java.lang.StringBuffer;
v1 := @parameter1: java.io.OutputStream;
v2 := @parameter2: java.lang.String;
if v0 == null goto label1;
v3 = virtualinvoke v0.<java.lang.StringBuffer: java.lang.String toString()>();
v4 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v2);
v5 = virtualinvoke v3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v4);
virtualinvoke v1.<java.io.OutputStream: void write(byte[])>(v5);
label1:
return;
}
public static void write(java.lang.StringBuffer, java.io.Writer) throws java.io.IOException
{
java.io.Writer v1;
java.lang.String v2;
java.lang.StringBuffer v0;
v0 := @parameter0: java.lang.StringBuffer;
v1 := @parameter1: java.io.Writer;
if v0 == null goto label1;
v2 = virtualinvoke v0.<java.lang.StringBuffer: java.lang.String toString()>();
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v2);
label1:
return;
}
public static void writeChunked(byte[], java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
byte[] v0;
int v2, v3, v4;
v0 := @parameter0: byte[];
v1 := @parameter1: java.io.OutputStream;
if v0 == null goto label2;
v2 = lengthof v0;
v3 = 0;
label1:
if v2 <= 0 goto label2;
v4 = staticinvoke <java.lang.Math: int min(int,int)>(v2, 8192);
virtualinvoke v1.<java.io.OutputStream: void write(byte[],int,int)>(v0, v3, v4);
v2 = v2 - v4;
v3 = v3 + v4;
goto label1;
label2:
return;
}
public static void writeChunked(char[], java.io.Writer) throws java.io.IOException
{
int v2, v3, v4;
java.io.Writer v1;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: java.io.Writer;
if v0 == null goto label2;
v2 = lengthof v0;
v3 = 0;
label1:
if v2 <= 0 goto label2;
v4 = staticinvoke <java.lang.Math: int min(int,int)>(v2, 8192);
virtualinvoke v1.<java.io.Writer: void write(char[],int,int)>(v0, v3, v4);
v2 = v2 - v4;
v3 = v3 + v4;
goto label1;
label2:
return;
}
public static void writeLines(java.util.Collection, java.lang.String, java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v2;
java.nio.charset.Charset v3;
java.util.Collection v0;
java.lang.String v1;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.io.OutputStream;
v3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
staticinvoke <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)>(v0, v1, v2, v3);
return;
}
public static void writeLines(java.util.Collection, java.lang.String, java.io.OutputStream, java.nio.charset.Charset) throws java.io.IOException
{
java.io.OutputStream v2;
byte[] v10, v9;
java.util.Iterator v5;
java.util.Collection v0;
java.nio.charset.Charset v3, v4;
java.lang.Object v7;
java.lang.String v1, v8;
boolean v6;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.io.OutputStream;
v3 := @parameter3: java.nio.charset.Charset;
if v0 != null goto label1;
return;
label1:
if v1 != null goto label2;
v1 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();
label2:
v4 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(v3);
v5 = interfaceinvoke v0.<java.util.Collection: java.util.Iterator iterator()>();
label3:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label5;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
if v7 == null goto label4;
v8 = virtualinvoke v7.<java.lang.Object: java.lang.String toString()>();
v9 = virtualinvoke v8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v4);
virtualinvoke v2.<java.io.OutputStream: void write(byte[])>(v9);
label4:
v10 = virtualinvoke v1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v4);
virtualinvoke v2.<java.io.OutputStream: void write(byte[])>(v10);
goto label3;
label5:
return;
}
public static void writeLines(java.util.Collection, java.lang.String, java.io.OutputStream, java.lang.String) throws java.io.IOException
{
java.io.OutputStream v2;
java.nio.charset.Charset v4;
java.util.Collection v0;
java.lang.String v1, v3;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.io.OutputStream;
v3 := @parameter3: java.lang.String;
v4 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v3);
staticinvoke <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)>(v0, v1, v2, v4);
return;
}
public static void writeLines(java.util.Collection, java.lang.String, java.io.Writer) throws java.io.IOException
{
java.util.Iterator v3;
java.util.Collection v0;
java.io.Writer v2;
java.lang.Object v5;
java.lang.String v1, v6;
boolean v4;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.io.Writer;
if v0 != null goto label1;
return;
label1:
if v1 != null goto label2;
v1 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();
label2:
v3 = interfaceinvoke v0.<java.util.Collection: java.util.Iterator iterator()>();
label3:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label5;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
if v5 == null goto label4;
v6 = virtualinvoke v5.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v2.<java.io.Writer: void write(java.lang.String)>(v6);
label4:
virtualinvoke v2.<java.io.Writer: void write(java.lang.String)>(v1);
goto label3;
label5:
return;
}
public static java.io.Writer writer(java.lang.Appendable)
{
org.apache.commons.io.output.AppendableWriter v4;
java.lang.Appendable v0;
org.apache.commons.io.output.StringBuilderWriter v3;
boolean v1, v2;
v0 := @parameter0: java.lang.Appendable;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "appendable");
v1 = v0 instanceof java.io.Writer;
if v1 == 0 goto label1;
return v0;
label1:
v2 = v0 instanceof java.lang.StringBuilder;
if v2 == 0 goto label2;
v3 = new org.apache.commons.io.output.StringBuilderWriter;
specialinvoke v3.<org.apache.commons.io.output.StringBuilderWriter: void <init>(java.lang.StringBuilder)>(v0);
return v3;
label2:
v4 = new org.apache.commons.io.output.AppendableWriter;
specialinvoke v4.<org.apache.commons.io.output.AppendableWriter: void <init>(java.lang.Appendable)>(v0);
return v4;
}
public void <init>()
{
org.apache.commons.io.IOUtils v0;
v0 := @this: org.apache.commons.io.IOUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
byte[] v1;
java.lang.ThreadLocal v10, v8;
char v0;
java.util.function.Supplier v7, v9;
org.apache.commons.io.StandardLineSeparator v3, v5;
java.lang.String v2, v4, v6;
v0 = <java.io.File: char separatorChar>;
<org.apache.commons.io.IOUtils: char DIR_SEPARATOR> = v0;
v1 = newarray (byte)[0];
<org.apache.commons.io.IOUtils: byte[] EMPTY_BYTE_ARRAY> = v1;
v2 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();
<org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR> = v2;
v3 = <org.apache.commons.io.StandardLineSeparator: org.apache.commons.io.StandardLineSeparator LF>;
v4 = virtualinvoke v3.<org.apache.commons.io.StandardLineSeparator: java.lang.String getString()>();
<org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR_UNIX> = v4;
v5 = <org.apache.commons.io.StandardLineSeparator: org.apache.commons.io.StandardLineSeparator CRLF>;
v6 = virtualinvoke v5.<org.apache.commons.io.StandardLineSeparator: java.lang.String getString()>();
<org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR_WINDOWS> = v6;
v7 = staticinvoke <org.apache.commons.io.IOUtils$byteArray__256: java.util.function.Supplier bootstrap$()>();
v8 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>(v7);
<org.apache.commons.io.IOUtils: java.lang.ThreadLocal SKIP_BYTE_BUFFER> = v8;
v9 = staticinvoke <org.apache.commons.io.IOUtils$charArray__257: java.util.function.Supplier bootstrap$()>();
v10 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>(v9);
<org.apache.commons.io.IOUtils: java.lang.ThreadLocal SKIP_CHAR_BUFFER> = v10;
return;
}
}