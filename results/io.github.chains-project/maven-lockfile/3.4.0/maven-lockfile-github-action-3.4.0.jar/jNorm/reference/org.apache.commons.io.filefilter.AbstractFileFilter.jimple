public abstract class org.apache.commons.io.filefilter.AbstractFileFilter extends java.lang.Object implements org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.file.PathVisitor
{
public void <init>()
{
org.apache.commons.io.filefilter.AbstractFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.AbstractFileFilter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static java.nio.file.FileVisitResult toFileVisitResult(boolean, java.nio.file.Path)
{
java.nio.file.FileVisitResult v2;
java.nio.file.Path v1;
boolean v0;
v0 := @parameter0: boolean;
v1 := @parameter1: java.nio.file.Path;
if v0 == 0 goto label1;
v2 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
goto label2;
label1:
v2 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult TERMINATE>;
label2:
return v2;
}
public boolean accept(java.io.File)
{
org.apache.commons.io.filefilter.AbstractFileFilter v0;
java.lang.String v3;
java.io.File v1, v2;
boolean v4;
v0 := @this: org.apache.commons.io.filefilter.AbstractFileFilter;
v1 := @parameter0: java.io.File;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "file");
v2 = virtualinvoke v1.<java.io.File: java.io.File getParentFile()>();
v3 = virtualinvoke v1.<java.io.File: java.lang.String getName()>();
v4 = virtualinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>(v2, v3);
return v4;
}
public boolean accept(java.io.File, java.lang.String)
{
org.apache.commons.io.filefilter.AbstractFileFilter v0;
java.lang.String v2;
java.io.File v1, v3;
boolean v4;
v0 := @this: org.apache.commons.io.filefilter.AbstractFileFilter;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "name");
v3 = new java.io.File;
specialinvoke v3.<java.io.File: void <init>(java.io.File,java.lang.String)>(v1, v2);
v4 = virtualinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>(v3);
return v4;
}
protected java.nio.file.FileVisitResult handle(java.lang.Throwable)
{
java.lang.Throwable v1;
org.apache.commons.io.filefilter.AbstractFileFilter v0;
java.nio.file.FileVisitResult v2;
v0 := @this: org.apache.commons.io.filefilter.AbstractFileFilter;
v1 := @parameter0: java.lang.Throwable;
v2 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult TERMINATE>;
return v2;
}
public java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path, java.io.IOException) throws java.io.IOException
{
java.nio.file.FileVisitResult v3;
org.apache.commons.io.filefilter.AbstractFileFilter v0;
java.io.IOException v2;
java.nio.file.Path v1;
v0 := @this: org.apache.commons.io.filefilter.AbstractFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.io.IOException;
v3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v3;
}
public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.FileVisitResult v3;
org.apache.commons.io.filefilter.AbstractFileFilter v0;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v1;
v0 := @this: org.apache.commons.io.filefilter.AbstractFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = virtualinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: java.nio.file.FileVisitResult accept(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
return v3;
}
public java.lang.String toString()
{
org.apache.commons.io.filefilter.AbstractFileFilter v0;
java.lang.Class v1;
java.lang.String v2;
v0 := @this: org.apache.commons.io.filefilter.AbstractFileFilter;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getSimpleName()>();
return v2;
}
public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.FileVisitResult v3;
org.apache.commons.io.filefilter.AbstractFileFilter v0;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v1;
v0 := @this: org.apache.commons.io.filefilter.AbstractFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = virtualinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: java.nio.file.FileVisitResult accept(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
return v3;
}
public java.nio.file.FileVisitResult visitFileFailed(java.nio.file.Path, java.io.IOException) throws java.io.IOException
{
java.nio.file.FileVisitResult v3;
org.apache.commons.io.filefilter.AbstractFileFilter v0;
java.io.IOException v2;
java.nio.file.Path v1;
v0 := @this: org.apache.commons.io.filefilter.AbstractFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.io.IOException;
v3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v3;
}
}