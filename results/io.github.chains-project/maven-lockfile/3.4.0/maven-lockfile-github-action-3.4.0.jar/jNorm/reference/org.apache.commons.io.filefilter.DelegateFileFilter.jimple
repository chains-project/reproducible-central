public class org.apache.commons.io.filefilter.DelegateFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
private static final long serialVersionUID;
private final java.io.FileFilter fileFilter;
private final java.io.FilenameFilter filenameFilter;
public void <init>(java.io.FileFilter)
{
org.apache.commons.io.filefilter.DelegateFileFilter v0;
java.io.FileFilter v1;
java.lang.IllegalArgumentException v2;
v0 := @this: org.apache.commons.io.filefilter.DelegateFileFilter;
v1 := @parameter0: java.io.FileFilter;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The FileFilter must not be null");
throw v2;
label1:
v0.<org.apache.commons.io.filefilter.DelegateFileFilter: java.io.FileFilter fileFilter> = v1;
v0.<org.apache.commons.io.filefilter.DelegateFileFilter: java.io.FilenameFilter filenameFilter> = null;
return;
}
public void <init>(java.io.FilenameFilter)
{
java.io.FilenameFilter v1;
org.apache.commons.io.filefilter.DelegateFileFilter v0;
java.lang.IllegalArgumentException v2;
v0 := @this: org.apache.commons.io.filefilter.DelegateFileFilter;
v1 := @parameter0: java.io.FilenameFilter;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The FilenameFilter must not be null");
throw v2;
label1:
v0.<org.apache.commons.io.filefilter.DelegateFileFilter: java.io.FilenameFilter filenameFilter> = v1;
v0.<org.apache.commons.io.filefilter.DelegateFileFilter: java.io.FileFilter fileFilter> = null;
return;
}
public boolean accept(java.io.File)
{
org.apache.commons.io.filefilter.DelegateFileFilter v0;
java.io.FileFilter v2, v3;
java.io.File v1;
boolean v4, v5;
v0 := @this: org.apache.commons.io.filefilter.DelegateFileFilter;
v1 := @parameter0: java.io.File;
v2 = v0.<org.apache.commons.io.filefilter.DelegateFileFilter: java.io.FileFilter fileFilter>;
if v2 == null goto label1;
v3 = v0.<org.apache.commons.io.filefilter.DelegateFileFilter: java.io.FileFilter fileFilter>;
v4 = interfaceinvoke v3.<java.io.FileFilter: boolean accept(java.io.File)>(v1);
return v4;
label1:
v5 = specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>(v1);
return v5;
}
public boolean accept(java.io.File, java.lang.String)
{
java.io.FilenameFilter v3, v4;
org.apache.commons.io.filefilter.DelegateFileFilter v0;
java.lang.String v2;
java.io.File v1;
boolean v5, v6;
v0 := @this: org.apache.commons.io.filefilter.DelegateFileFilter;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.lang.String;
v3 = v0.<org.apache.commons.io.filefilter.DelegateFileFilter: java.io.FilenameFilter filenameFilter>;
if v3 == null goto label1;
v4 = v0.<org.apache.commons.io.filefilter.DelegateFileFilter: java.io.FilenameFilter filenameFilter>;
v5 = interfaceinvoke v4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(v1, v2);
return v5;
label1:
v6 = specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>(v1, v2);
return v6;
}
public java.lang.String toString()
{
java.io.FilenameFilter v4;
org.apache.commons.io.filefilter.DelegateFileFilter v0;
java.io.FileFilter v1, v2;
java.lang.String v3, v5, v6;
v0 := @this: org.apache.commons.io.filefilter.DelegateFileFilter;
v1 = v0.<org.apache.commons.io.filefilter.DelegateFileFilter: java.io.FileFilter fileFilter>;
if v1 == null goto label1;
v2 = v0.<org.apache.commons.io.filefilter.DelegateFileFilter: java.io.FileFilter fileFilter>;
v3 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
goto label2;
label1:
v4 = v0.<org.apache.commons.io.filefilter.DelegateFileFilter: java.io.FilenameFilter filenameFilter>;
v3 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
label2:
v5 = specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: java.lang.String toString()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(\u0001)");
return v6;
}
}