public class org.apache.commons.io.filefilter.EmptyFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
public static final org.apache.commons.io.filefilter.IOFileFilter EMPTY;
public static final org.apache.commons.io.filefilter.IOFileFilter NOT_EMPTY;
private static final long serialVersionUID;
protected void <init>()
{
org.apache.commons.io.filefilter.EmptyFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.EmptyFileFilter;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
return;
}
public boolean accept(java.io.File)
{
long v6;
java.io.File v1;
byte v7;
org.apache.commons.io.filefilter.EmptyFileFilter v0;
int v4;
java.io.File[] v3;
boolean v2, v5, v8;
v0 := @this: org.apache.commons.io.filefilter.EmptyFileFilter;
v1 := @parameter0: java.io.File;
v2 = virtualinvoke v1.<java.io.File: boolean isDirectory()>();
if v2 == 0 goto label3;
v3 = virtualinvoke v1.<java.io.File: java.io.File[] listFiles()>();
v4 = staticinvoke <org.apache.commons.io.IOUtils: int length(java.lang.Object[])>(v3);
if v4 != 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
label3:
v6 = virtualinvoke v1.<java.io.File: long length()>();
v7 = v6 cmp 0L;
if v7 != 0 goto label4;
v8 = 1;
goto label5;
label4:
v8 = 0;
label5:
return v8;
}
public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
java.lang.Throwable v10;
long v11;
byte v12;
org.apache.commons.io.filefilter.EmptyFileFilter v0;
java.nio.file.Path v1;
boolean v13, v4, v7, v8;
java.nio.file.LinkOption[] v3;
java.io.IOException v15;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.FileVisitResult v14, v16, v9;
java.util.stream.Stream v5;
java.util.Optional v6;
v0 := @this: org.apache.commons.io.filefilter.EmptyFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
label01:
v3 = newarray (java.nio.file.LinkOption)[0];
v4 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v1, v3);
if v4 == 0 goto label08;
v5 = staticinvoke <java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)>(v1);
label02:
v6 = interfaceinvoke v5.<java.util.stream.Stream: java.util.Optional findFirst()>();
v7 = virtualinvoke v6.<java.util.Optional: boolean isPresent()>();
if v7 != 0 goto label03;
v8 = 1;
goto label04;
label03:
v8 = 0;
label04:
v9 = staticinvoke <org.apache.commons.io.filefilter.EmptyFileFilter: java.nio.file.FileVisitResult toFileVisitResult(boolean,java.nio.file.Path)>(v8, v1);
label05:
interfaceinvoke v5.<java.util.stream.Stream: void close()>();
label06:
return v9;
label07:
v10 := @caughtexception;
throw v10;
label08:
v11 = staticinvoke <java.nio.file.Files: long size(java.nio.file.Path)>(v1);
v12 = v11 cmp 0L;
if v12 != 0 goto label09;
v13 = 1;
goto label10;
label09:
v13 = 0;
label10:
v14 = staticinvoke <org.apache.commons.io.filefilter.EmptyFileFilter: java.nio.file.FileVisitResult toFileVisitResult(boolean,java.nio.file.Path)>(v13, v1);
label11:
return v14;
label12:
v15 := @caughtexception;
v16 = virtualinvoke v0.<org.apache.commons.io.filefilter.EmptyFileFilter: java.nio.file.FileVisitResult handle(java.lang.Throwable)>(v15);
return v16;
catch java.lang.Throwable from label02 to label05 with label07;
catch java.io.IOException from label01 to label06 with label12;
catch java.io.IOException from label07 to label11 with label12;
}
static void <clinit>()
{
org.apache.commons.io.filefilter.IOFileFilter v1, v2;
org.apache.commons.io.filefilter.EmptyFileFilter v0;
v0 = new org.apache.commons.io.filefilter.EmptyFileFilter;
specialinvoke v0.<org.apache.commons.io.filefilter.EmptyFileFilter: void <init>()>();
<org.apache.commons.io.filefilter.EmptyFileFilter: org.apache.commons.io.filefilter.IOFileFilter EMPTY> = v0;
v1 = <org.apache.commons.io.filefilter.EmptyFileFilter: org.apache.commons.io.filefilter.IOFileFilter EMPTY>;
v2 = interfaceinvoke v1.<org.apache.commons.io.filefilter.IOFileFilter: org.apache.commons.io.filefilter.IOFileFilter negate()>();
<org.apache.commons.io.filefilter.EmptyFileFilter: org.apache.commons.io.filefilter.IOFileFilter NOT_EMPTY> = v2;
return;
}
}