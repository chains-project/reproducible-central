public class org.apache.commons.io.filefilter.WildcardFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
private static final long serialVersionUID;
private final java.lang.String[] wildcards;
public void <init>(java.util.List)
{
java.util.List v1;
java.lang.Object[] v4;
org.apache.commons.io.filefilter.WildcardFilter v0;
java.lang.String[] v3;
java.lang.IllegalArgumentException v2;
v0 := @this: org.apache.commons.io.filefilter.WildcardFilter;
v1 := @parameter0: java.util.List;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard list must not be null");
throw v2;
label1:
v3 = <org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] EMPTY_STRING_ARRAY>;
v4 = interfaceinvoke v1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v3);
v0.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards> = v4;
return;
}
public void <init>(java.lang.String)
{
org.apache.commons.io.filefilter.WildcardFilter v0;
java.lang.String[] v3;
java.lang.String v1;
java.lang.IllegalArgumentException v2;
v0 := @this: org.apache.commons.io.filefilter.WildcardFilter;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard must not be null");
throw v2;
label1:
v3 = newarray (java.lang.String)[1];
v3[0] = v1;
v0.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards> = v3;
return;
}
public transient void <init>(java.lang.String[])
{
org.apache.commons.io.filefilter.WildcardFilter v0;
int v3, v6;
java.lang.String[] v1, v4, v5;
java.lang.IllegalArgumentException v2;
v0 := @this: org.apache.commons.io.filefilter.WildcardFilter;
v1 := @parameter0: java.lang.String[];
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard array must not be null");
throw v2;
label1:
v3 = lengthof v1;
v4 = newarray (java.lang.String)[v3];
v0.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards> = v4;
v5 = v0.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards>;
v6 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v5, 0, v6);
return;
}
public boolean accept(java.io.File)
{
java.lang.String[] v3;
java.io.File v1;
org.apache.commons.io.filefilter.WildcardFilter v0;
int v4, v5;
java.lang.String v6, v7;
boolean v2, v8;
v0 := @this: org.apache.commons.io.filefilter.WildcardFilter;
v1 := @parameter0: java.io.File;
v2 = virtualinvoke v1.<java.io.File: boolean isDirectory()>();
if v2 == 0 goto label1;
return 0;
label1:
v3 = v0.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards>;
v4 = lengthof v3;
v5 = 0;
label2:
if v5 >= v4 goto label4;
v6 = v3[v5];
v7 = virtualinvoke v1.<java.io.File: java.lang.String getName()>();
v8 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>(v7, v6);
if v8 == 0 goto label3;
return 1;
label3:
v5 = v5 + 1;
goto label2;
label4:
return 0;
}
public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
java.nio.file.LinkOption[] v3;
java.lang.String[] v6;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.FileVisitResult v13, v14, v5;
org.apache.commons.io.filefilter.WildcardFilter v0;
int v7, v8;
java.lang.String v11, v9;
java.nio.file.Path v1, v10;
boolean v12, v4;
v0 := @this: org.apache.commons.io.filefilter.WildcardFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = newarray (java.nio.file.LinkOption)[0];
v4 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v1, v3);
if v4 == 0 goto label1;
v5 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult TERMINATE>;
return v5;
label1:
v6 = v0.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards>;
v7 = lengthof v6;
v8 = 0;
label2:
if v8 >= v7 goto label4;
v9 = v6[v8];
v10 = interfaceinvoke v1.<java.nio.file.Path: java.nio.file.Path getFileName()>();
v11 = staticinvoke <java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>(v10, null);
v12 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>(v11, v9);
if v12 == 0 goto label3;
v13 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v13;
label3:
v8 = v8 + 1;
goto label2;
label4:
v14 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult TERMINATE>;
return v14;
}
public boolean accept(java.io.File, java.lang.String)
{
java.lang.String[] v5;
java.io.File v1, v3;
org.apache.commons.io.filefilter.WildcardFilter v0;
int v6, v7;
java.lang.String v2, v8;
boolean v4, v9;
v0 := @this: org.apache.commons.io.filefilter.WildcardFilter;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.lang.String;
if v1 == null goto label1;
v3 = new java.io.File;
specialinvoke v3.<java.io.File: void <init>(java.io.File,java.lang.String)>(v1, v2);
v4 = virtualinvoke v3.<java.io.File: boolean isDirectory()>();
if v4 == 0 goto label1;
return 0;
label1:
v5 = v0.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards>;
v6 = lengthof v5;
v7 = 0;
label2:
if v7 >= v6 goto label4;
v8 = v5[v7];
v9 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>(v2, v8);
if v9 == 0 goto label3;
return 1;
label3:
v7 = v7 + 1;
goto label2;
label4:
return 0;
}
}