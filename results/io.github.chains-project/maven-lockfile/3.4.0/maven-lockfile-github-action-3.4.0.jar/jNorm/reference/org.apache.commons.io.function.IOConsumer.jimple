public interface  org.apache.commons.io.function.IOConsumer extends java.lang.Object
{
public static final org.apache.commons.io.function.IOConsumer NOOP_IO_CONSUMER;
public static org.apache.commons.io.function.IOConsumer noop()
{
org.apache.commons.io.function.IOConsumer v0;
v0 = <org.apache.commons.io.function.IOConsumer: org.apache.commons.io.function.IOConsumer NOOP_IO_CONSUMER>;
return v0;
}
public abstract void accept(java.lang.Object) throws java.io.IOException;
public org.apache.commons.io.function.IOConsumer andThen(org.apache.commons.io.function.IOConsumer)
{
org.apache.commons.io.function.IOConsumer v0, v1, v2;
v0 := @this: org.apache.commons.io.function.IOConsumer;
v1 := @parameter0: org.apache.commons.io.function.IOConsumer;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "after");
v2 = staticinvoke <org.apache.commons.io.function.IOConsumer$lambda_andThen_1__284: org.apache.commons.io.function.IOConsumer bootstrap$(org.apache.commons.io.function.IOConsumer,org.apache.commons.io.function.IOConsumer)>(v0, v1);
return v2;
}
static void <clinit>()
{
org.apache.commons.io.function.IOConsumer v0;
v0 = staticinvoke <org.apache.commons.io.function.IOConsumer$lambda_static_0__285: org.apache.commons.io.function.IOConsumer bootstrap$()>();
<org.apache.commons.io.function.IOConsumer: org.apache.commons.io.function.IOConsumer NOOP_IO_CONSUMER> = v0;
return;
}
}