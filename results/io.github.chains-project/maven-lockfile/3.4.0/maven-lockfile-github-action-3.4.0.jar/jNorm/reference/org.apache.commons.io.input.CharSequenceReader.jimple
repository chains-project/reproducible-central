public class org.apache.commons.io.input.CharSequenceReader extends java.io.Reader implements java.io.Serializable
{
private static final long serialVersionUID;
private final java.lang.CharSequence charSequence;
private int idx;
private int mark;
private final int start;
private final java.lang.Integer end;
public void <init>(java.lang.CharSequence)
{
java.lang.CharSequence v1;
org.apache.commons.io.input.CharSequenceReader v0;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 := @parameter0: java.lang.CharSequence;
specialinvoke v0.<org.apache.commons.io.input.CharSequenceReader: void <init>(java.lang.CharSequence,int)>(v1, 0);
return;
}
public void <init>(java.lang.CharSequence, int)
{
int v2;
java.lang.CharSequence v1;
org.apache.commons.io.input.CharSequenceReader v0;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
specialinvoke v0.<org.apache.commons.io.input.CharSequenceReader: void <init>(java.lang.CharSequence,int,int)>(v1, v2, 2147483647);
return;
}
public void <init>(java.lang.CharSequence, int, int)
{
java.lang.CharSequence v1, v8;
java.lang.IllegalArgumentException v4, v6;
java.lang.Integer v9;
org.apache.commons.io.input.CharSequenceReader v0;
int v2, v3;
java.lang.String v5, v7;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<java.io.Reader: void <init>()>();
if v2 >= 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Start index is less than zero: \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
if v3 >= v2 goto label2;
v6 = new java.lang.IllegalArgumentException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("End index is less than start \u0001: \u0001");
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v6;
label2:
if v1 == null goto label3;
v8 = v1;
goto label4;
label3:
v8 = "";
label4:
v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence> = v8;
v0.<org.apache.commons.io.input.CharSequenceReader: int start> = v2;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.Integer end> = v9;
v0.<org.apache.commons.io.input.CharSequenceReader: int idx> = v2;
v0.<org.apache.commons.io.input.CharSequenceReader: int mark> = v2;
return;
}
private int start()
{
java.lang.CharSequence v1;
int v2, v3, v4;
org.apache.commons.io.input.CharSequenceReader v0;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 = v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v3 = v0.<org.apache.commons.io.input.CharSequenceReader: int start>;
v4 = staticinvoke <java.lang.Math: int min(int,int)>(v2, v3);
return v4;
}
private int end()
{
java.lang.CharSequence v1;
int v2, v4, v6;
java.lang.Integer v3, v5;
org.apache.commons.io.input.CharSequenceReader v0;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 = v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v3 = v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.Integer end>;
if v3 != null goto label1;
v4 = 2147483647;
goto label2;
label1:
v5 = v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.Integer end>;
v4 = virtualinvoke v5.<java.lang.Integer: int intValue()>();
label2:
v6 = staticinvoke <java.lang.Math: int min(int,int)>(v2, v4);
return v6;
}
public void close()
{
int v1, v2;
org.apache.commons.io.input.CharSequenceReader v0;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 = v0.<org.apache.commons.io.input.CharSequenceReader: int start>;
v0.<org.apache.commons.io.input.CharSequenceReader: int idx> = v1;
v2 = v0.<org.apache.commons.io.input.CharSequenceReader: int start>;
v0.<org.apache.commons.io.input.CharSequenceReader: int mark> = v2;
return;
}
public boolean ready()
{
int v1, v2;
org.apache.commons.io.input.CharSequenceReader v0;
boolean v3;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v2 = specialinvoke v0.<org.apache.commons.io.input.CharSequenceReader: int end()>();
if v1 >= v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public void mark(int)
{
int v1, v2;
org.apache.commons.io.input.CharSequenceReader v0;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 := @parameter0: int;
v2 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v0.<org.apache.commons.io.input.CharSequenceReader: int mark> = v2;
return;
}
public boolean markSupported()
{
org.apache.commons.io.input.CharSequenceReader v0;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
return 1;
}
public int read()
{
java.lang.CharSequence v4;
char v7;
org.apache.commons.io.input.CharSequenceReader v0;
int v1, v2, v3, v5, v6;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v2 = specialinvoke v0.<org.apache.commons.io.input.CharSequenceReader: int end()>();
if v1 < v2 goto label1;
v3 = (int) -1;
return v3;
label1:
v4 = v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;
v5 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v6 = v5 + 1;
v0.<org.apache.commons.io.input.CharSequenceReader: int idx> = v6;
v7 = interfaceinvoke v4.<java.lang.CharSequence: char charAt(int)>(v5);
return v7;
}
public int read(char[], int, int)
{
java.lang.IndexOutOfBoundsException v9;
boolean v13, v25, v37;
java.lang.CharSequence v12, v18, v24, v30, v36, v42;
org.apache.commons.io.input.CharSequenceReader v0;
int v10, v14, v15, v16, v17, v19, v2, v20, v21, v22, v23, v26, v27, v28, v29, v3, v31, v32, v33, v34, v35, v38, v39, v4, v40, v41, v43, v44, v45, v46, v47, v48, v49, v5, v50, v51, v52, v6, v7, v8;
java.lang.String v11;
char[] v1;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v5 = specialinvoke v0.<org.apache.commons.io.input.CharSequenceReader: int end()>();
if v4 < v5 goto label1;
v6 = (int) -1;
return v6;
label1:
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "array");
if v3 < 0 goto label2;
if v2 < 0 goto label2;
v7 = v2 + v3;
v8 = lengthof v1;
if v7 <= v8 goto label3;
label2:
v9 = new java.lang.IndexOutOfBoundsException;
v10 = lengthof v1;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v10, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Array Size=\u0001, offset=\u0001, length=\u0001");
specialinvoke v9.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v11);
throw v9;
label3:
v12 = v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;
v13 = v12 instanceof java.lang.String;
if v13 == 0 goto label4;
v14 = specialinvoke v0.<org.apache.commons.io.input.CharSequenceReader: int end()>();
v15 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v16 = v14 - v15;
v17 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v16);
v18 = v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;
v19 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v20 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v21 = v20 + v17;
virtualinvoke v18.<java.lang.String: void getChars(int,int,char[],int)>(v19, v21, v1, v2);
v22 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v23 = v22 + v17;
v0.<org.apache.commons.io.input.CharSequenceReader: int idx> = v23;
return v17;
label4:
v24 = v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;
v25 = v24 instanceof java.lang.StringBuilder;
if v25 == 0 goto label5;
v26 = specialinvoke v0.<org.apache.commons.io.input.CharSequenceReader: int end()>();
v27 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v28 = v26 - v27;
v29 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v28);
v30 = v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;
v31 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v32 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v33 = v32 + v29;
virtualinvoke v30.<java.lang.StringBuilder: void getChars(int,int,char[],int)>(v31, v33, v1, v2);
v34 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v35 = v34 + v29;
v0.<org.apache.commons.io.input.CharSequenceReader: int idx> = v35;
return v29;
label5:
v36 = v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;
v37 = v36 instanceof java.lang.StringBuffer;
if v37 == 0 goto label6;
v38 = specialinvoke v0.<org.apache.commons.io.input.CharSequenceReader: int end()>();
v39 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v40 = v38 - v39;
v41 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v40);
v42 = v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;
v43 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v44 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v45 = v44 + v41;
virtualinvoke v42.<java.lang.StringBuffer: void getChars(int,int,char[],int)>(v43, v45, v1, v2);
v46 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v47 = v46 + v41;
v0.<org.apache.commons.io.input.CharSequenceReader: int idx> = v47;
return v41;
label6:
v48 = 0;
v49 = 0;
label7:
if v49 >= v3 goto label9;
v50 = virtualinvoke v0.<org.apache.commons.io.input.CharSequenceReader: int read()>();
v51 = (int) -1;
if v50 != v51 goto label8;
return v48;
label8:
v52 = v2 + v49;
v1[v52] = v50;
v48 = v48 + 1;
v49 = v49 + 1;
goto label7;
label9:
return v48;
}
public void reset()
{
int v1;
org.apache.commons.io.input.CharSequenceReader v0;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 = v0.<org.apache.commons.io.input.CharSequenceReader: int mark>;
v0.<org.apache.commons.io.input.CharSequenceReader: int idx> = v1;
return;
}
public long skip(long)
{
long v1, v10, v9;
java.lang.IllegalArgumentException v3;
org.apache.commons.io.input.CharSequenceReader v0;
byte v2;
int v11, v12, v5, v6, v7, v8;
java.lang.String v4;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Number of characters to skip is less than zero: \u0001");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v5 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v6 = specialinvoke v0.<org.apache.commons.io.input.CharSequenceReader: int end()>();
if v5 < v6 goto label2;
return 0L;
label2:
v7 = specialinvoke v0.<org.apache.commons.io.input.CharSequenceReader: int end()>();
v8 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v9 = v8 + v1;
v10 = staticinvoke <java.lang.Math: long min(long,long)>(v7, v9);
v11 = v0.<org.apache.commons.io.input.CharSequenceReader: int idx>;
v12 = v10 - v11;
v0.<org.apache.commons.io.input.CharSequenceReader: int idx> = v10;
return v12;
}
public java.lang.String toString()
{
java.lang.CharSequence v1, v4;
int v2, v3;
java.lang.String v5;
org.apache.commons.io.input.CharSequenceReader v0;
v0 := @this: org.apache.commons.io.input.CharSequenceReader;
v1 = v0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;
v2 = specialinvoke v0.<org.apache.commons.io.input.CharSequenceReader: int start()>();
v3 = specialinvoke v0.<org.apache.commons.io.input.CharSequenceReader: int end()>();
v4 = interfaceinvoke v1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(v2, v3);
v5 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
return v5;
}
}