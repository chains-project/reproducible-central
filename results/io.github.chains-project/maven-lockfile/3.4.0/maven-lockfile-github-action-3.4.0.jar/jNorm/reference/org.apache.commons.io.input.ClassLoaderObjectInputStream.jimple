public class org.apache.commons.io.input.ClassLoaderObjectInputStream extends java.io.ObjectInputStream
{
private final java.lang.ClassLoader classLoader;
public void <init>(java.lang.ClassLoader, java.io.InputStream) throws java.io.IOException, java.io.StreamCorruptedException
{
java.lang.ClassLoader v1;
org.apache.commons.io.input.ClassLoaderObjectInputStream v0;
java.io.InputStream v2;
v0 := @this: org.apache.commons.io.input.ClassLoaderObjectInputStream;
v1 := @parameter0: java.lang.ClassLoader;
v2 := @parameter1: java.io.InputStream;
specialinvoke v0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(v2);
v0.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader> = v1;
return;
}
protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException
{
java.io.ObjectStreamClass v1;
java.lang.Class v4, v6;
java.lang.ClassNotFoundException v5;
java.lang.ClassLoader v3;
java.lang.String v2;
org.apache.commons.io.input.ClassLoaderObjectInputStream v0;
v0 := @this: org.apache.commons.io.input.ClassLoaderObjectInputStream;
v1 := @parameter0: java.io.ObjectStreamClass;
label1:
v2 = virtualinvoke v1.<java.io.ObjectStreamClass: java.lang.String getName()>();
v3 = v0.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;
v4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(v2, 0, v3);
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = specialinvoke v0.<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>(v1);
return v6;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
}
protected java.lang.Class resolveProxyClass(java.lang.String[]) throws java.io.IOException, java.lang.ClassNotFoundException
{
java.lang.Class[] v3;
java.lang.String[] v1;
java.lang.IllegalArgumentException v11;
int v2, v4, v5;
java.lang.Class v10, v12, v8;
java.lang.ClassLoader v7, v9;
java.lang.String v6;
org.apache.commons.io.input.ClassLoaderObjectInputStream v0;
v0 := @this: org.apache.commons.io.input.ClassLoaderObjectInputStream;
v1 := @parameter0: java.lang.String[];
v2 = lengthof v1;
v3 = newarray (java.lang.Class)[v2];
v4 = 0;
label1:
v5 = lengthof v1;
if v4 >= v5 goto label2;
v6 = v1[v4];
v7 = v0.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;
v8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(v6, 0, v7);
v3[v4] = v8;
v4 = v4 + 1;
goto label1;
label2:
v9 = v0.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;
v10 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>(v9, v3);
label3:
return v10;
label4:
v11 := @caughtexception;
v12 = specialinvoke v0.<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>(v1);
return v12;
catch java.lang.IllegalArgumentException from label2 to label3 with label4;
}
}