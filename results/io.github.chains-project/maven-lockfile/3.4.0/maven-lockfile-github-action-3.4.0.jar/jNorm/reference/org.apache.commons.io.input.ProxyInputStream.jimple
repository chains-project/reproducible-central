public abstract class org.apache.commons.io.input.ProxyInputStream extends java.io.FilterInputStream
{
public void <init>(java.io.InputStream)
{
org.apache.commons.io.input.ProxyInputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
v1 := @parameter0: java.io.InputStream;
specialinvoke v0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(v1);
return;
}
public int read() throws java.io.IOException
{
byte v4;
int v2, v3, v6;
java.io.IOException v5;
org.apache.commons.io.input.ProxyInputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
label1:
virtualinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void beforeRead(int)>(1);
v1 = v0.<org.apache.commons.io.input.ProxyInputStream: java.io.InputStream in>;
v2 = virtualinvoke v1.<java.io.InputStream: int read()>();
v3 = (int) -1;
if v2 == v3 goto label2;
v4 = 1;
goto label3;
label2:
v4 = -1;
label3:
virtualinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void afterRead(int)>(v4);
label4:
return v2;
label5:
v5 := @caughtexception;
virtualinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void handleIOException(java.io.IOException)>(v5);
v6 = (int) -1;
return v6;
catch java.io.IOException from label1 to label4 with label5;
}
public int read(byte[]) throws java.io.IOException
{
byte[] v1;
int v2, v4, v6;
java.io.IOException v5;
org.apache.commons.io.input.ProxyInputStream v0;
java.io.InputStream v3;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
v1 := @parameter0: byte[];
label1:
v2 = staticinvoke <org.apache.commons.io.IOUtils: int length(byte[])>(v1);
virtualinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void beforeRead(int)>(v2);
v3 = v0.<org.apache.commons.io.input.ProxyInputStream: java.io.InputStream in>;
v4 = virtualinvoke v3.<java.io.InputStream: int read(byte[])>(v1);
virtualinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void afterRead(int)>(v4);
label2:
return v4;
label3:
v5 := @caughtexception;
virtualinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void handleIOException(java.io.IOException)>(v5);
v6 = (int) -1;
return v6;
catch java.io.IOException from label1 to label2 with label3;
}
public int read(byte[], int, int) throws java.io.IOException
{
byte[] v1;
java.io.IOException v6;
int v2, v3, v5, v7;
org.apache.commons.io.input.ProxyInputStream v0;
java.io.InputStream v4;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
label1:
virtualinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void beforeRead(int)>(v3);
v4 = v0.<org.apache.commons.io.input.ProxyInputStream: java.io.InputStream in>;
v5 = virtualinvoke v4.<java.io.InputStream: int read(byte[],int,int)>(v1, v2, v3);
virtualinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void afterRead(int)>(v5);
label2:
return v5;
label3:
v6 := @caughtexception;
virtualinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void handleIOException(java.io.IOException)>(v6);
v7 = (int) -1;
return v7;
catch java.io.IOException from label1 to label2 with label3;
}
public long skip(long) throws java.io.IOException
{
java.io.IOException v4;
long v1, v3;
org.apache.commons.io.input.ProxyInputStream v0;
java.io.InputStream v2;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
v1 := @parameter0: long;
label1:
v2 = v0.<org.apache.commons.io.input.ProxyInputStream: java.io.InputStream in>;
v3 = virtualinvoke v2.<java.io.InputStream: long skip(long)>(v1);
label2:
return v3;
label3:
v4 := @caughtexception;
virtualinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void handleIOException(java.io.IOException)>(v4);
return 0L;
catch java.io.IOException from label1 to label2 with label3;
}
public int available() throws java.io.IOException
{
int v1;
java.io.IOException v2;
org.apache.commons.io.input.ProxyInputStream v0;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
label1:
v1 = specialinvoke v0.<java.io.FilterInputStream: int available()>();
label2:
return v1;
label3:
v2 := @caughtexception;
virtualinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void handleIOException(java.io.IOException)>(v2);
return 0;
catch java.io.IOException from label1 to label2 with label3;
}
public void close() throws java.io.IOException
{
org.apache.commons.io.function.IOConsumer v2;
org.apache.commons.io.input.ProxyInputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
v1 = v0.<org.apache.commons.io.input.ProxyInputStream: java.io.InputStream in>;
v2 = staticinvoke <org.apache.commons.io.input.ProxyInputStream$handleIOException__270: org.apache.commons.io.function.IOConsumer bootstrap$(org.apache.commons.io.input.ProxyInputStream)>(v0);
staticinvoke <org.apache.commons.io.IOUtils: void close(java.io.Closeable,org.apache.commons.io.function.IOConsumer)>(v1, v2);
return;
}
public synchronized void mark(int)
{
int v1;
org.apache.commons.io.input.ProxyInputStream v0;
java.io.InputStream v2;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
v1 := @parameter0: int;
v2 = v0.<org.apache.commons.io.input.ProxyInputStream: java.io.InputStream in>;
virtualinvoke v2.<java.io.InputStream: void mark(int)>(v1);
return;
}
public synchronized void reset() throws java.io.IOException
{
java.io.IOException v2;
org.apache.commons.io.input.ProxyInputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
label1:
v1 = v0.<org.apache.commons.io.input.ProxyInputStream: java.io.InputStream in>;
virtualinvoke v1.<java.io.InputStream: void reset()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
virtualinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void handleIOException(java.io.IOException)>(v2);
label4:
return;
catch java.io.IOException from label1 to label2 with label3;
}
public boolean markSupported()
{
org.apache.commons.io.input.ProxyInputStream v0;
boolean v2;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
v1 = v0.<org.apache.commons.io.input.ProxyInputStream: java.io.InputStream in>;
v2 = virtualinvoke v1.<java.io.InputStream: boolean markSupported()>();
return v2;
}
protected void beforeRead(int) throws java.io.IOException
{
int v1;
org.apache.commons.io.input.ProxyInputStream v0;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
v1 := @parameter0: int;
return;
}
protected void afterRead(int) throws java.io.IOException
{
int v1;
org.apache.commons.io.input.ProxyInputStream v0;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
v1 := @parameter0: int;
return;
}
protected void handleIOException(java.io.IOException) throws java.io.IOException
{
java.io.IOException v1;
org.apache.commons.io.input.ProxyInputStream v0;
v0 := @this: org.apache.commons.io.input.ProxyInputStream;
v1 := @parameter0: java.io.IOException;
throw v1;
}
}