public class org.apache.commons.io.input.QueueInputStream extends java.io.InputStream
{
private final java.util.concurrent.BlockingQueue blockingQueue;
public void <init>()
{
org.apache.commons.io.input.QueueInputStream v0;
java.util.concurrent.LinkedBlockingQueue v1;
v0 := @this: org.apache.commons.io.input.QueueInputStream;
v1 = new java.util.concurrent.LinkedBlockingQueue;
specialinvoke v1.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();
specialinvoke v0.<org.apache.commons.io.input.QueueInputStream: void <init>(java.util.concurrent.BlockingQueue)>(v1);
return;
}
public void <init>(java.util.concurrent.BlockingQueue)
{
org.apache.commons.io.input.QueueInputStream v0;
java.lang.Object v2;
java.util.concurrent.BlockingQueue v1;
v0 := @this: org.apache.commons.io.input.QueueInputStream;
v1 := @parameter0: java.util.concurrent.BlockingQueue;
specialinvoke v0.<java.io.InputStream: void <init>()>();
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "blockingQueue");
v0.<org.apache.commons.io.input.QueueInputStream: java.util.concurrent.BlockingQueue blockingQueue> = v2;
return;
}
public org.apache.commons.io.output.QueueOutputStream newQueueOutputStream()
{
org.apache.commons.io.input.QueueInputStream v0;
java.util.concurrent.BlockingQueue v2;
org.apache.commons.io.output.QueueOutputStream v1;
v0 := @this: org.apache.commons.io.input.QueueInputStream;
v1 = new org.apache.commons.io.output.QueueOutputStream;
v2 = v0.<org.apache.commons.io.input.QueueInputStream: java.util.concurrent.BlockingQueue blockingQueue>;
specialinvoke v1.<org.apache.commons.io.output.QueueOutputStream: void <init>(java.util.concurrent.BlockingQueue)>(v2);
return v1;
}
public int read()
{
org.apache.commons.io.input.QueueInputStream v0;
int v3, v4, v5;
java.lang.Object v2;
java.util.concurrent.BlockingQueue v1;
v0 := @this: org.apache.commons.io.input.QueueInputStream;
v1 = v0.<org.apache.commons.io.input.QueueInputStream: java.util.concurrent.BlockingQueue blockingQueue>;
v2 = interfaceinvoke v1.<java.util.concurrent.BlockingQueue: java.lang.Object poll()>();
if v2 != null goto label1;
v3 = (int) -1;
v4 = v3;
goto label2;
label1:
v5 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
v4 = 255 & v5;
label2:
return v4;
}
}