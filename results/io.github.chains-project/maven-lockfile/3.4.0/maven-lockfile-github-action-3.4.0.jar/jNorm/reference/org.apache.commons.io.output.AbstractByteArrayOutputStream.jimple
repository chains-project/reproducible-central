public abstract class org.apache.commons.io.output.AbstractByteArrayOutputStream extends java.io.OutputStream
{
static final int DEFAULT_SIZE;
private final java.util.List buffers;
private int currentBufferIndex;
private int filledBufferSum;
private byte[] currentBuffer;
protected int count;
private boolean reuseBuffers;
public void <init>()
{
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
java.util.ArrayList v1;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
specialinvoke v0.<java.io.OutputStream: void <init>()>();
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: java.util.List buffers> = v1;
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: boolean reuseBuffers> = 1;
return;
}
protected void needNewBuffer(int)
{
byte[] v15, v17, v23, v28, v30, v7;
int v1, v10, v11, v13, v16, v18, v19, v2, v20, v21, v22, v24, v25, v26, v27, v4, v5, v6, v8, v9;
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
java.util.List v12, v29, v3;
java.lang.Object v14;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
v1 := @parameter0: int;
v2 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int currentBufferIndex>;
v3 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: java.util.List buffers>;
v4 = interfaceinvoke v3.<java.util.List: int size()>();
v5 = v4 - 1;
if v2 >= v5 goto label1;
v6 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int filledBufferSum>;
v7 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
v8 = lengthof v7;
v9 = v6 + v8;
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int filledBufferSum> = v9;
v10 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int currentBufferIndex>;
v11 = v10 + 1;
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int currentBufferIndex> = v11;
v12 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: java.util.List buffers>;
v13 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int currentBufferIndex>;
v14 = interfaceinvoke v12.<java.util.List: java.lang.Object get(int)>(v13);
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer> = v14;
goto label4;
label1:
v15 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
if v15 != null goto label2;
v16 = v1;
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int filledBufferSum> = 0;
goto label3;
label2:
v17 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
v18 = lengthof v17;
v19 = v18 << 1;
v20 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int filledBufferSum>;
v21 = v1 - v20;
v16 = staticinvoke <java.lang.Math: int max(int,int)>(v19, v21);
v22 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int filledBufferSum>;
v23 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
v24 = lengthof v23;
v25 = v22 + v24;
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int filledBufferSum> = v25;
label3:
v26 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int currentBufferIndex>;
v27 = v26 + 1;
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int currentBufferIndex> = v27;
v28 = staticinvoke <org.apache.commons.io.IOUtils: byte[] byteArray(int)>(v16);
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer> = v28;
v29 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: java.util.List buffers>;
v30 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
interfaceinvoke v29.<java.util.List: boolean add(java.lang.Object)>(v30);
label4:
return;
}
public abstract void write(byte[], int, int);
protected void writeImpl(byte[], int, int)
{
byte[] v1, v10, v16;
int v11, v12, v13, v14, v15, v2, v3, v4, v5, v6, v7, v8, v9;
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count>;
v5 = v4 + v3;
v6 = v3;
v7 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count>;
v8 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int filledBufferSum>;
v9 = v7 - v8;
label1:
if v6 <= 0 goto label2;
v10 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
v11 = lengthof v10;
v12 = v11 - v9;
v13 = staticinvoke <java.lang.Math: int min(int,int)>(v6, v12);
v14 = v2 + v3;
v15 = v14 - v6;
v16 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v15, v16, v9, v13);
v6 = v6 - v13;
if v6 <= 0 goto label2;
virtualinvoke v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: void needNewBuffer(int)>(v5);
v9 = 0;
goto label1;
label2:
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count> = v5;
return;
}
public abstract void write(int);
protected void writeImpl(int)
{
byte[] v5, v9;
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
int v1, v10, v11, v2, v3, v4, v6, v7, v8;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
v1 := @parameter0: int;
v2 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count>;
v3 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int filledBufferSum>;
v4 = v2 - v3;
v5 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
v6 = lengthof v5;
if v4 != v6 goto label1;
v7 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count>;
v8 = v7 + 1;
virtualinvoke v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: void needNewBuffer(int)>(v8);
v4 = 0;
label1:
v9 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
v9[v4] = v1;
v10 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count>;
v11 = v10 + 1;
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count> = v11;
return;
}
public abstract int write(java.io.InputStream) throws java.io.IOException;
protected int writeImpl(java.io.InputStream) throws java.io.IOException
{
byte[] v14, v16, v18, v19, v6, v7;
int v10, v11, v12, v13, v15, v17, v2, v20, v21, v3, v4, v5, v8, v9;
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
v1 := @parameter0: java.io.InputStream;
v2 = 0;
v3 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count>;
v4 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int filledBufferSum>;
v5 = v3 - v4;
v6 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
v7 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
v8 = lengthof v7;
v9 = v8 - v5;
v10 = virtualinvoke v1.<java.io.InputStream: int read(byte[],int,int)>(v6, v5, v9);
label1:
v11 = (int) -1;
if v10 == v11 goto label3;
v2 = v2 + v10;
v5 = v5 + v10;
v12 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count>;
v13 = v12 + v10;
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count> = v13;
v14 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
v15 = lengthof v14;
if v5 != v15 goto label2;
v16 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
v17 = lengthof v16;
virtualinvoke v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: void needNewBuffer(int)>(v17);
v5 = 0;
label2:
v18 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
v19 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer>;
v20 = lengthof v19;
v21 = v20 - v5;
v10 = virtualinvoke v1.<java.io.InputStream: int read(byte[],int,int)>(v18, v5, v21);
goto label1;
label3:
return v2;
}
public abstract int size();
public void close() throws java.io.IOException
{
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
return;
}
public abstract void reset();
protected void resetImpl()
{
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
java.util.List v2, v5, v8;
int v3, v7;
java.lang.Object v4, v6;
boolean v1;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count> = 0;
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int filledBufferSum> = 0;
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int currentBufferIndex> = 0;
v1 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: boolean reuseBuffers>;
if v1 == 0 goto label1;
v2 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: java.util.List buffers>;
v3 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int currentBufferIndex>;
v4 = interfaceinvoke v2.<java.util.List: java.lang.Object get(int)>(v3);
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer> = v4;
goto label2;
label1:
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] currentBuffer> = null;
v5 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: java.util.List buffers>;
v6 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(0);
v7 = lengthof v6;
v8 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: java.util.List buffers>;
interfaceinvoke v8.<java.util.List: void clear()>();
virtualinvoke v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: void needNewBuffer(int)>(v7);
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: boolean reuseBuffers> = 1;
label2:
return;
}
public abstract void writeTo(java.io.OutputStream) throws java.io.IOException;
protected void writeToImpl(java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
java.util.Iterator v4;
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
java.util.List v3;
int v2, v7, v8;
java.lang.Object v6;
boolean v5;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
v1 := @parameter0: java.io.OutputStream;
v2 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count>;
v3 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: java.util.List buffers>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = lengthof v6;
v8 = staticinvoke <java.lang.Math: int min(int,int)>(v7, v2);
virtualinvoke v1.<java.io.OutputStream: void write(byte[],int,int)>(v6, 0, v8);
v2 = v2 - v8;
if v2 != 0 goto label1;
label2:
return;
}
public abstract java.io.InputStream toInputStream();
protected java.io.InputStream toInputStream(org.apache.commons.io.output.AbstractByteArrayOutputStream$InputStreamConstructor)
{
java.util.Enumeration v15;
java.util.ArrayList v4;
org.apache.commons.io.output.AbstractByteArrayOutputStream$InputStreamConstructor v1;
int v11, v12, v2, v6;
boolean v9;
org.apache.commons.io.input.ClosedInputStream v3;
java.util.Iterator v8;
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
java.io.SequenceInputStream v14;
java.util.List v5, v7;
java.lang.Object v10;
java.io.InputStream v13;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
v1 := @parameter0: org.apache.commons.io.output.AbstractByteArrayOutputStream$InputStreamConstructor;
v2 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count>;
if v2 != 0 goto label1;
v3 = <org.apache.commons.io.input.ClosedInputStream: org.apache.commons.io.input.ClosedInputStream CLOSED_INPUT_STREAM>;
return v3;
label1:
v4 = new java.util.ArrayList;
v5 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: java.util.List buffers>;
v6 = interfaceinvoke v5.<java.util.List: int size()>();
specialinvoke v4.<java.util.ArrayList: void <init>(int)>(v6);
v7 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: java.util.List buffers>;
v8 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
label2:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label3;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = lengthof v10;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v11, v2);
v13 = interfaceinvoke v1.<org.apache.commons.io.output.AbstractByteArrayOutputStream$InputStreamConstructor: java.io.InputStream construct(byte[],int,int)>(v10, 0, v12);
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v13);
v2 = v2 - v12;
if v2 != 0 goto label2;
label3:
v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: boolean reuseBuffers> = 0;
v14 = new java.io.SequenceInputStream;
v15 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>(v4);
specialinvoke v14.<java.io.SequenceInputStream: void <init>(java.util.Enumeration)>(v15);
return v14;
}
public abstract byte[] toByteArray();
protected byte[] toByteArrayImpl()
{
byte[] v2, v3;
java.util.Iterator v6;
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
java.util.List v5;
int v1, v10, v4, v9;
java.lang.Object v8;
boolean v7;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
v1 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: int count>;
if v1 != 0 goto label1;
v2 = <org.apache.commons.io.IOUtils: byte[] EMPTY_BYTE_ARRAY>;
return v2;
label1:
v3 = staticinvoke <org.apache.commons.io.IOUtils: byte[] byteArray(int)>(v1);
v4 = 0;
v5 = v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: java.util.List buffers>;
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label2:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label3;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = lengthof v8;
v10 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v1);
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v8, 0, v3, v4, v10);
v4 = v4 + v10;
v1 = v1 - v10;
if v1 != 0 goto label2;
label3:
return v3;
}
public java.lang.String toString()
{
byte[] v2;
java.nio.charset.Charset v3;
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
java.lang.String v1;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
v1 = new java.lang.String;
v2 = virtualinvoke v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] toByteArray()>();
v3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
specialinvoke v1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(v2, v3);
return v1;
}
public java.lang.String toString(java.lang.String) throws java.io.UnsupportedEncodingException
{
byte[] v3;
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
java.lang.String v1, v2;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.String;
v3 = virtualinvoke v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] toByteArray()>();
specialinvoke v2.<java.lang.String: void <init>(byte[],java.lang.String)>(v3, v1);
return v2;
}
public java.lang.String toString(java.nio.charset.Charset)
{
byte[] v3;
java.nio.charset.Charset v1;
org.apache.commons.io.output.AbstractByteArrayOutputStream v0;
java.lang.String v2;
v0 := @this: org.apache.commons.io.output.AbstractByteArrayOutputStream;
v1 := @parameter0: java.nio.charset.Charset;
v2 = new java.lang.String;
v3 = virtualinvoke v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: byte[] toByteArray()>();
specialinvoke v2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(v3, v1);
return v2;
}
}