public class org.apache.commons.lang3.ArrayUtils extends java.lang.Object
{
public static final boolean[] EMPTY_BOOLEAN_ARRAY;
public static final java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY;
public static final byte[] EMPTY_BYTE_ARRAY;
public static final java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY;
public static final char[] EMPTY_CHAR_ARRAY;
public static final java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY;
public static final java.lang.Class[] EMPTY_CLASS_ARRAY;
public static final double[] EMPTY_DOUBLE_ARRAY;
public static final java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY;
public static final java.lang.reflect.Field[] EMPTY_FIELD_ARRAY;
public static final float[] EMPTY_FLOAT_ARRAY;
public static final java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY;
public static final int[] EMPTY_INT_ARRAY;
public static final java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY;
public static final long[] EMPTY_LONG_ARRAY;
public static final java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY;
public static final java.lang.reflect.Method[] EMPTY_METHOD_ARRAY;
public static final java.lang.Object[] EMPTY_OBJECT_ARRAY;
public static final short[] EMPTY_SHORT_ARRAY;
public static final java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY;
public static final java.lang.String[] EMPTY_STRING_ARRAY;
public static final java.lang.Throwable[] EMPTY_THROWABLE_ARRAY;
public static final java.lang.reflect.Type[] EMPTY_TYPE_ARRAY;
public static final int INDEX_NOT_FOUND;
public static boolean[] add(boolean[], boolean)
{
boolean[] v0;
int v4, v5;
java.lang.Class v2;
java.lang.Object v3;
boolean v1;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean;
v2 = <java.lang.Boolean: java.lang.Class TYPE>;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(v0, v2);
v4 = lengthof v3;
v5 = v4 - 1;
v3[v5] = v1;
return v3;
}
public static boolean[] add(boolean[], int, boolean)
{
boolean[] v0;
int v1;
java.lang.Boolean v3;
java.lang.Class v4;
java.lang.Object v5;
boolean v2;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 := @parameter2: boolean;
v3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v2);
v4 = <java.lang.Boolean: java.lang.Class TYPE>;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(v0, v1, v3, v4);
return v5;
}
public static byte[] add(byte[], byte)
{
byte[] v0;
byte v1;
int v4, v5;
java.lang.Class v2;
java.lang.Object v3;
v0 := @parameter0: byte[];
v1 := @parameter1: byte;
v2 = <java.lang.Byte: java.lang.Class TYPE>;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(v0, v2);
v4 = lengthof v3;
v5 = v4 - 1;
v3[v5] = v1;
return v3;
}
public static byte[] add(byte[], int, byte)
{
byte[] v0;
byte v2;
int v1;
java.lang.Class v4;
java.lang.Object v5;
java.lang.Byte v3;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: byte;
v3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v2);
v4 = <java.lang.Byte: java.lang.Class TYPE>;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(v0, v1, v3, v4);
return v5;
}
public static char[] add(char[], char)
{
int v4, v5;
char[] v0;
char v1;
java.lang.Class v2;
java.lang.Object v3;
v0 := @parameter0: char[];
v1 := @parameter1: char;
v2 = <java.lang.Character: java.lang.Class TYPE>;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(v0, v2);
v4 = lengthof v3;
v5 = v4 - 1;
v3[v5] = v1;
return v3;
}
public static char[] add(char[], int, char)
{
java.lang.Character v3;
int v1;
char[] v0;
char v2;
java.lang.Class v4;
java.lang.Object v5;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: char;
v3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v2);
v4 = <java.lang.Character: java.lang.Class TYPE>;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(v0, v1, v3, v4);
return v5;
}
public static double[] add(double[], double)
{
double[] v0;
int v4, v5;
java.lang.Class v2;
java.lang.Object v3;
double v1;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 = <java.lang.Double: java.lang.Class TYPE>;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(v0, v2);
v4 = lengthof v3;
v5 = v4 - 1;
v3[v5] = v1;
return v3;
}
public static double[] add(double[], int, double)
{
java.lang.Double v3;
double[] v0;
int v1;
java.lang.Class v4;
java.lang.Object v5;
double v2;
v0 := @parameter0: double[];
v1 := @parameter1: int;
v2 := @parameter2: double;
v3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v2);
v4 = <java.lang.Double: java.lang.Class TYPE>;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(v0, v1, v3, v4);
return v5;
}
public static float[] add(float[], float)
{
int v4, v5;
float v1;
float[] v0;
java.lang.Class v2;
java.lang.Object v3;
v0 := @parameter0: float[];
v1 := @parameter1: float;
v2 = <java.lang.Float: java.lang.Class TYPE>;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(v0, v2);
v4 = lengthof v3;
v5 = v4 - 1;
v3[v5] = v1;
return v3;
}
public static float[] add(float[], int, float)
{
java.lang.Float v3;
int v1;
float v2;
float[] v0;
java.lang.Class v4;
java.lang.Object v5;
v0 := @parameter0: float[];
v1 := @parameter1: int;
v2 := @parameter2: float;
v3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(v2);
v4 = <java.lang.Float: java.lang.Class TYPE>;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(v0, v1, v3, v4);
return v5;
}
public static int[] add(int[], int)
{
int[] v0;
int v1, v4, v5;
java.lang.Class v2;
java.lang.Object v3;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 = <java.lang.Integer: java.lang.Class TYPE>;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(v0, v2);
v4 = lengthof v3;
v5 = v4 - 1;
v3[v5] = v1;
return v3;
}
public static int[] add(int[], int, int)
{
int[] v0;
int v1, v2;
java.lang.Class v4;
java.lang.Object v5;
java.lang.Integer v3;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v4 = <java.lang.Integer: java.lang.Class TYPE>;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(v0, v1, v3, v4);
return v5;
}
public static long[] add(long[], int, long)
{
long[] v0;
java.lang.Long v3;
int v1;
java.lang.Class v4;
java.lang.Object v5;
long v2;
v0 := @parameter0: long[];
v1 := @parameter1: int;
v2 := @parameter2: long;
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v4 = <java.lang.Long: java.lang.Class TYPE>;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(v0, v1, v3, v4);
return v5;
}
public static long[] add(long[], long)
{
long[] v0;
int v4, v5;
java.lang.Class v2;
java.lang.Object v3;
long v1;
v0 := @parameter0: long[];
v1 := @parameter1: long;
v2 = <java.lang.Long: java.lang.Class TYPE>;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(v0, v2);
v4 = lengthof v3;
v5 = v4 - 1;
v3[v5] = v1;
return v3;
}
private static java.lang.Object add(java.lang.Object, int, java.lang.Object, java.lang.Class)
{
java.lang.IndexOutOfBoundsException v4, v8;
int v1, v10, v12, v13, v7;
java.lang.Class v3;
java.lang.Object v0, v11, v2, v6;
java.lang.String v5, v9;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: java.lang.Class;
if v0 != null goto label2;
if v1 == 0 goto label1;
v4 = new java.lang.IndexOutOfBoundsException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: 0");
specialinvoke v4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
v6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v3, 1);
staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(v6, 0, v2);
return v6;
label2:
v7 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(v0);
if v1 > v7 goto label3;
if v1 >= 0 goto label4;
label3:
v8 = new java.lang.IndexOutOfBoundsException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: \u0001");
specialinvoke v8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v9);
throw v8;
label4:
v10 = v7 + 1;
v11 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v3, v10);
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v11, 0, v1);
staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(v11, v1, v2);
if v1 >= v7 goto label5;
v12 = v1 + 1;
v13 = v7 - v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v1, v11, v12, v13);
label5:
return v11;
}
public static short[] add(short[], int, short)
{
short v2;
java.lang.Short v3;
int v1;
java.lang.Class v4;
java.lang.Object v5;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: int;
v2 := @parameter2: short;
v3 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(v2);
v4 = <java.lang.Short: java.lang.Class TYPE>;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(v0, v1, v3, v4);
return v5;
}
public static short[] add(short[], short)
{
short v1;
int v4, v5;
java.lang.Class v2;
java.lang.Object v3;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: short;
v2 = <java.lang.Short: java.lang.Class TYPE>;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(v0, v2);
v4 = lengthof v3;
v5 = v4 - 1;
v3[v5] = v1;
return v3;
}
public static java.lang.Object[] add(java.lang.Object[], int, java.lang.Object)
{
java.lang.Object[] v0;
int v1;
java.lang.Class v3, v4;
java.lang.Object v2, v6;
java.lang.IllegalArgumentException v5;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 := @parameter2: java.lang.Object;
if v0 == null goto label1;
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.Class getComponentType()>();
goto label3;
label1:
if v2 == null goto label2;
v4 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
goto label3;
label2:
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array and element cannot both be null");
throw v5;
label3:
v6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(v0, v1, v2, v4);
return v6;
}
public static java.lang.Object[] add(java.lang.Object[], java.lang.Object)
{
java.lang.Object[] v0;
java.lang.IllegalArgumentException v4;
int v6, v7;
java.lang.Class v2, v3;
java.lang.Object v1, v5;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object;
if v0 == null goto label1;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.Class getComponentType()>();
goto label3;
label1:
if v1 == null goto label2;
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
goto label3;
label2:
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Arguments cannot both be null");
throw v4;
label3:
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(v0, v3);
v6 = lengthof v5;
v7 = v6 - 1;
v5[v7] = v1;
return v5;
}
public static transient boolean[] addAll(boolean[], boolean[])
{
boolean[] v0, v1, v2, v3, v7;
int v10, v4, v5, v6, v8, v9;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean[];
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] clone(boolean[])>(v1);
return v2;
label1:
if v1 != null goto label2;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] clone(boolean[])>(v0);
return v3;
label2:
v4 = lengthof v0;
v5 = lengthof v1;
v6 = v4 + v5;
v7 = newarray (boolean)[v6];
v8 = lengthof v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v7, 0, v8);
v9 = lengthof v0;
v10 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v7, v9, v10);
return v7;
}
public static transient byte[] addAll(byte[], byte[])
{
byte[] v0, v1, v2, v3, v7;
int v10, v4, v5, v6, v8, v9;
v0 := @parameter0: byte[];
v1 := @parameter1: byte[];
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] clone(byte[])>(v1);
return v2;
label1:
if v1 != null goto label2;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] clone(byte[])>(v0);
return v3;
label2:
v4 = lengthof v0;
v5 = lengthof v1;
v6 = v4 + v5;
v7 = newarray (byte)[v6];
v8 = lengthof v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v7, 0, v8);
v9 = lengthof v0;
v10 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v7, v9, v10);
return v7;
}
public static transient char[] addAll(char[], char[])
{
int v10, v4, v5, v6, v8, v9;
char[] v0, v1, v2, v3, v7;
v0 := @parameter0: char[];
v1 := @parameter1: char[];
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>(v1);
return v2;
label1:
if v1 != null goto label2;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>(v0);
return v3;
label2:
v4 = lengthof v0;
v5 = lengthof v1;
v6 = v4 + v5;
v7 = newarray (char)[v6];
v8 = lengthof v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v7, 0, v8);
v9 = lengthof v0;
v10 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v7, v9, v10);
return v7;
}
public static transient double[] addAll(double[], double[])
{
double[] v0, v1, v2, v3, v7;
int v10, v4, v5, v6, v8, v9;
v0 := @parameter0: double[];
v1 := @parameter1: double[];
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] clone(double[])>(v1);
return v2;
label1:
if v1 != null goto label2;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] clone(double[])>(v0);
return v3;
label2:
v4 = lengthof v0;
v5 = lengthof v1;
v6 = v4 + v5;
v7 = newarray (double)[v6];
v8 = lengthof v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v7, 0, v8);
v9 = lengthof v0;
v10 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v7, v9, v10);
return v7;
}
public static transient float[] addAll(float[], float[])
{
float[] v0, v1, v2, v3, v7;
int v10, v4, v5, v6, v8, v9;
v0 := @parameter0: float[];
v1 := @parameter1: float[];
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] clone(float[])>(v1);
return v2;
label1:
if v1 != null goto label2;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] clone(float[])>(v0);
return v3;
label2:
v4 = lengthof v0;
v5 = lengthof v1;
v6 = v4 + v5;
v7 = newarray (float)[v6];
v8 = lengthof v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v7, 0, v8);
v9 = lengthof v0;
v10 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v7, v9, v10);
return v7;
}
public static transient int[] addAll(int[], int[])
{
int[] v0, v1, v2, v3, v7;
int v10, v4, v5, v6, v8, v9;
v0 := @parameter0: int[];
v1 := @parameter1: int[];
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(v1);
return v2;
label1:
if v1 != null goto label2;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(v0);
return v3;
label2:
v4 = lengthof v0;
v5 = lengthof v1;
v6 = v4 + v5;
v7 = newarray (int)[v6];
v8 = lengthof v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v7, 0, v8);
v9 = lengthof v0;
v10 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v7, v9, v10);
return v7;
}
public static transient long[] addAll(long[], long[])
{
long[] v0, v1, v2, v3, v7;
int v10, v4, v5, v6, v8, v9;
v0 := @parameter0: long[];
v1 := @parameter1: long[];
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] clone(long[])>(v1);
return v2;
label1:
if v1 != null goto label2;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] clone(long[])>(v0);
return v3;
label2:
v4 = lengthof v0;
v5 = lengthof v1;
v6 = v4 + v5;
v7 = newarray (long)[v6];
v8 = lengthof v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v7, 0, v8);
v9 = lengthof v0;
v10 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v7, v9, v10);
return v7;
}
public static transient short[] addAll(short[], short[])
{
int v10, v4, v5, v6, v8, v9;
short[] v0, v1, v2, v3, v7;
v0 := @parameter0: short[];
v1 := @parameter1: short[];
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] clone(short[])>(v1);
return v2;
label1:
if v1 != null goto label2;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] clone(short[])>(v0);
return v3;
label2:
v4 = lengthof v0;
v5 = lengthof v1;
v6 = v4 + v5;
v7 = newarray (short)[v6];
v8 = lengthof v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v7, 0, v8);
v9 = lengthof v0;
v10 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v7, v9, v10);
return v7;
}
public static transient java.lang.Object[] addAll(java.lang.Object[], java.lang.Object[])
{
java.lang.Object[] v0, v1, v2, v3;
int v10, v11, v12, v6, v7, v8;
java.lang.String v18, v19, v20;
boolean v16;
java.lang.IllegalArgumentException v17;
java.lang.Class v14, v15, v4, v5;
java.lang.Object v9;
java.lang.ArrayStoreException v13;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object[];
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(v1);
return v2;
label1:
if v1 != null goto label2;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(v0);
return v3;
label2:
v4 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.Class getComponentType()>();
v6 = lengthof v0;
v7 = lengthof v1;
v8 = v6 + v7;
v9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v5, v8);
v10 = lengthof v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v9, 0, v10);
label3:
v11 = lengthof v0;
v12 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v9, v11, v12);
label4:
goto label7;
label5:
v13 := @caughtexception;
v14 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v15 = virtualinvoke v14.<java.lang.Class: java.lang.Class getComponentType()>();
v16 = virtualinvoke v5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v15);
if v16 != 0 goto label6;
v17 = new java.lang.IllegalArgumentException;
v18 = virtualinvoke v15.<java.lang.Class: java.lang.String getName()>();
v19 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v18, v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot store \u0001 in an array of \u0001");
specialinvoke v17.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v20, v13);
throw v17;
label6:
throw v13;
label7:
return v9;
catch java.lang.ArrayStoreException from label3 to label4 with label5;
}
public static boolean[] addFirst(boolean[], boolean)
{
boolean[] v0, v2, v3;
boolean v1;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] add(boolean[],boolean)>(v0, v1);
goto label2;
label1:
v3 = newarray (boolean)[1];
v3[0] = v1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] insert(int,boolean[],boolean[])>(0, v0, v3);
label2:
return v2;
}
public static byte[] addFirst(byte[], byte)
{
byte[] v0, v2, v3;
byte v1;
v0 := @parameter0: byte[];
v1 := @parameter1: byte;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] add(byte[],byte)>(v0, v1);
goto label2;
label1:
v3 = newarray (byte)[1];
v3[0] = v1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] insert(int,byte[],byte[])>(0, v0, v3);
label2:
return v2;
}
public static char[] addFirst(char[], char)
{
char[] v0, v2, v3;
char v1;
v0 := @parameter0: char[];
v1 := @parameter1: char;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] add(char[],char)>(v0, v1);
goto label2;
label1:
v3 = newarray (char)[1];
v3[0] = v1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] insert(int,char[],char[])>(0, v0, v3);
label2:
return v2;
}
public static double[] addFirst(double[], double)
{
double[] v0, v2, v3;
double v1;
v0 := @parameter0: double[];
v1 := @parameter1: double;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] add(double[],double)>(v0, v1);
goto label2;
label1:
v3 = newarray (double)[1];
v3[0] = v1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] insert(int,double[],double[])>(0, v0, v3);
label2:
return v2;
}
public static float[] addFirst(float[], float)
{
float v1;
float[] v0, v2, v3;
v0 := @parameter0: float[];
v1 := @parameter1: float;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] add(float[],float)>(v0, v1);
goto label2;
label1:
v3 = newarray (float)[1];
v3[0] = v1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] insert(int,float[],float[])>(0, v0, v3);
label2:
return v2;
}
public static int[] addFirst(int[], int)
{
int[] v0, v2, v3;
int v1;
v0 := @parameter0: int[];
v1 := @parameter1: int;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] add(int[],int)>(v0, v1);
goto label2;
label1:
v3 = newarray (int)[1];
v3[0] = v1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] insert(int,int[],int[])>(0, v0, v3);
label2:
return v2;
}
public static long[] addFirst(long[], long)
{
long[] v0, v2, v3;
long v1;
v0 := @parameter0: long[];
v1 := @parameter1: long;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] add(long[],long)>(v0, v1);
goto label2;
label1:
v3 = newarray (long)[1];
v3[0] = v1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] insert(int,long[],long[])>(0, v0, v3);
label2:
return v2;
}
public static short[] addFirst(short[], short)
{
short v1;
short[] v0, v2, v3;
v0 := @parameter0: short[];
v1 := @parameter1: short;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] add(short[],short)>(v0, v1);
goto label2;
label1:
v3 = newarray (short)[1];
v3[0] = v1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] insert(int,short[],short[])>(0, v0, v3);
label2:
return v2;
}
public static java.lang.Object[] addFirst(java.lang.Object[], java.lang.Object)
{
java.lang.Object[] v0, v2, v3;
java.lang.Object v1;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] add(java.lang.Object[],java.lang.Object)>(v0, v1);
goto label2;
label1:
v3 = newarray (java.lang.Object)[1];
v3[0] = v1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] insert(int,java.lang.Object[],java.lang.Object[])>(0, v0, v3);
label2:
return v2;
}
public static boolean[] clone(boolean[])
{
boolean[] v0;
java.lang.Object v1;
v0 := @parameter0: boolean[];
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static byte[] clone(byte[])
{
byte[] v0;
java.lang.Object v1;
v0 := @parameter0: byte[];
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static char[] clone(char[])
{
char[] v0;
java.lang.Object v1;
v0 := @parameter0: char[];
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static double[] clone(double[])
{
double[] v0;
java.lang.Object v1;
v0 := @parameter0: double[];
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static float[] clone(float[])
{
float[] v0;
java.lang.Object v1;
v0 := @parameter0: float[];
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static int[] clone(int[])
{
java.lang.Object v1;
int[] v0;
v0 := @parameter0: int[];
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static long[] clone(long[])
{
java.lang.Object v1;
long[] v0;
v0 := @parameter0: long[];
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static short[] clone(short[])
{
java.lang.Object v1;
short[] v0;
v0 := @parameter0: short[];
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static java.lang.Object[] clone(java.lang.Object[])
{
java.lang.Object v1;
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static boolean contains(boolean[], boolean)
{
boolean[] v0;
int v2, v3;
boolean v1, v4;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean)>(v0, v1);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean contains(byte[], byte)
{
byte[] v0;
byte v1;
int v2, v3;
boolean v4;
v0 := @parameter0: byte[];
v1 := @parameter1: byte;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte)>(v0, v1);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean contains(char[], char)
{
int v2, v3;
char[] v0;
char v1;
boolean v4;
v0 := @parameter0: char[];
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char)>(v0, v1);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean contains(double[], double)
{
double[] v0;
int v2, v3;
boolean v4;
double v1;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double)>(v0, v1);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean contains(double[], double, double)
{
double[] v0;
int v3, v4;
boolean v5;
double v1, v2;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 := @parameter2: double;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>(v0, v1, 0, v2);
v4 = (int) -1;
if v3 == v4 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public static boolean contains(float[], float)
{
int v2, v3;
float v1;
float[] v0;
boolean v4;
v0 := @parameter0: float[];
v1 := @parameter1: float;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float)>(v0, v1);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean contains(int[], int)
{
int[] v0;
int v1, v2, v3;
boolean v4;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int)>(v0, v1);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean contains(long[], long)
{
long[] v0;
int v2, v3;
long v1;
boolean v4;
v0 := @parameter0: long[];
v1 := @parameter1: long;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long)>(v0, v1);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean contains(java.lang.Object[], java.lang.Object)
{
java.lang.Object[] v0;
int v2, v3;
java.lang.Object v1;
boolean v4;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(v0, v1);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean contains(short[], short)
{
short v1;
int v2, v3;
short[] v0;
boolean v4;
v0 := @parameter0: short[];
v1 := @parameter1: short;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short)>(v0, v1);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
private static java.lang.Object copyArrayGrow1(java.lang.Object, java.lang.Class)
{
int v2, v5;
java.lang.Class v1, v3, v4;
java.lang.Object v0, v6, v7;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Class;
if v0 == null goto label1;
v2 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(v0);
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.Class getComponentType()>();
v5 = v2 + 1;
v6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v4, v5);
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v6, 0, v2);
return v6;
label1:
v7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v1, 1);
return v7;
}
public static java.lang.Object get(java.lang.Object[], int)
{
int v1;
java.lang.Object v2;
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object get(java.lang.Object[],int,java.lang.Object)>(v0, v1, null);
return v2;
}
public static java.lang.Object get(java.lang.Object[], int, java.lang.Object)
{
java.lang.Object[] v0;
int v1;
java.lang.Object v2, v4;
boolean v3;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 := @parameter2: java.lang.Object;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isArrayIndexValid(java.lang.Object[],int)>(v0, v1);
if v3 == 0 goto label1;
v4 = v0[v1];
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public static int getLength(java.lang.Object)
{
int v1;
java.lang.Object v0;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
return 0;
label1:
v1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(v0);
return v1;
}
public static int hashCode(java.lang.Object)
{
int v3;
org.apache.commons.lang3.builder.HashCodeBuilder v1, v2;
java.lang.Object v0;
v0 := @parameter0: java.lang.Object;
v1 = new org.apache.commons.lang3.builder.HashCodeBuilder;
specialinvoke v1.<org.apache.commons.lang3.builder.HashCodeBuilder: void <init>()>();
v2 = virtualinvoke v1.<org.apache.commons.lang3.builder.HashCodeBuilder: org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)>(v0);
v3 = virtualinvoke v2.<org.apache.commons.lang3.builder.HashCodeBuilder: int toHashCode()>();
return v3;
}
public static java.util.BitSet indexesOf(boolean[], boolean)
{
boolean[] v0;
java.util.BitSet v2;
boolean v1;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(boolean[],boolean,int)>(v0, v1, 0);
return v2;
}
public static java.util.BitSet indexesOf(boolean[], boolean, int)
{
boolean[] v0;
int v2, v4, v5, v6;
java.util.BitSet v3;
boolean v1;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean;
v2 := @parameter2: int;
v3 = new java.util.BitSet;
specialinvoke v3.<java.util.BitSet: void <init>()>();
if v0 != null goto label1;
return v3;
label1:
v4 = lengthof v0;
if v2 >= v4 goto label2;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>(v0, v1, v2);
v6 = (int) -1;
if v5 == v6 goto label2;
virtualinvoke v3.<java.util.BitSet: void set(int)>(v5);
v2 = v5 + 1;
goto label1;
label2:
return v3;
}
public static java.util.BitSet indexesOf(byte[], byte)
{
byte[] v0;
java.util.BitSet v2;
byte v1;
v0 := @parameter0: byte[];
v1 := @parameter1: byte;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(byte[],byte,int)>(v0, v1, 0);
return v2;
}
public static java.util.BitSet indexesOf(byte[], byte, int)
{
byte[] v0;
byte v1;
int v2, v4, v5, v6;
java.util.BitSet v3;
v0 := @parameter0: byte[];
v1 := @parameter1: byte;
v2 := @parameter2: int;
v3 = new java.util.BitSet;
specialinvoke v3.<java.util.BitSet: void <init>()>();
if v0 != null goto label1;
return v3;
label1:
v4 = lengthof v0;
if v2 >= v4 goto label2;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte,int)>(v0, v1, v2);
v6 = (int) -1;
if v5 == v6 goto label2;
virtualinvoke v3.<java.util.BitSet: void set(int)>(v5);
v2 = v5 + 1;
goto label1;
label2:
return v3;
}
public static java.util.BitSet indexesOf(char[], char)
{
char[] v0;
char v1;
java.util.BitSet v2;
v0 := @parameter0: char[];
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(char[],char,int)>(v0, v1, 0);
return v2;
}
public static java.util.BitSet indexesOf(char[], char, int)
{
int v2, v4, v5, v6;
char[] v0;
char v1;
java.util.BitSet v3;
v0 := @parameter0: char[];
v1 := @parameter1: char;
v2 := @parameter2: int;
v3 = new java.util.BitSet;
specialinvoke v3.<java.util.BitSet: void <init>()>();
if v0 != null goto label1;
return v3;
label1:
v4 = lengthof v0;
if v2 >= v4 goto label2;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char,int)>(v0, v1, v2);
v6 = (int) -1;
if v5 == v6 goto label2;
virtualinvoke v3.<java.util.BitSet: void set(int)>(v5);
v2 = v5 + 1;
goto label1;
label2:
return v3;
}
public static java.util.BitSet indexesOf(double[], double)
{
double[] v0;
java.util.BitSet v2;
double v1;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(double[],double,int)>(v0, v1, 0);
return v2;
}
public static java.util.BitSet indexesOf(double[], double, double)
{
double[] v0;
java.util.BitSet v3;
double v1, v2;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 := @parameter2: double;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(double[],double,int,double)>(v0, v1, 0, v2);
return v3;
}
public static java.util.BitSet indexesOf(double[], double, int)
{
double[] v0;
int v2, v4, v5, v6;
java.util.BitSet v3;
double v1;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 := @parameter2: int;
v3 = new java.util.BitSet;
specialinvoke v3.<java.util.BitSet: void <init>()>();
if v0 != null goto label1;
return v3;
label1:
v4 = lengthof v0;
if v2 >= v4 goto label2;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>(v0, v1, v2);
v6 = (int) -1;
if v5 == v6 goto label2;
virtualinvoke v3.<java.util.BitSet: void set(int)>(v5);
v2 = v5 + 1;
goto label1;
label2:
return v3;
}
public static java.util.BitSet indexesOf(double[], double, int, double)
{
double[] v0;
int v2, v5, v6, v7;
java.util.BitSet v4;
double v1, v3;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 := @parameter2: int;
v3 := @parameter3: double;
v4 = new java.util.BitSet;
specialinvoke v4.<java.util.BitSet: void <init>()>();
if v0 != null goto label1;
return v4;
label1:
v5 = lengthof v0;
if v2 >= v5 goto label2;
v6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>(v0, v1, v2, v3);
v7 = (int) -1;
if v6 == v7 goto label2;
virtualinvoke v4.<java.util.BitSet: void set(int)>(v6);
v2 = v6 + 1;
goto label1;
label2:
return v4;
}
public static java.util.BitSet indexesOf(float[], float)
{
float v1;
float[] v0;
java.util.BitSet v2;
v0 := @parameter0: float[];
v1 := @parameter1: float;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(float[],float,int)>(v0, v1, 0);
return v2;
}
public static java.util.BitSet indexesOf(float[], float, int)
{
int v2, v4, v5, v6;
float v1;
float[] v0;
java.util.BitSet v3;
v0 := @parameter0: float[];
v1 := @parameter1: float;
v2 := @parameter2: int;
v3 = new java.util.BitSet;
specialinvoke v3.<java.util.BitSet: void <init>()>();
if v0 != null goto label1;
return v3;
label1:
v4 = lengthof v0;
if v2 >= v4 goto label2;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>(v0, v1, v2);
v6 = (int) -1;
if v5 == v6 goto label2;
virtualinvoke v3.<java.util.BitSet: void set(int)>(v5);
v2 = v5 + 1;
goto label1;
label2:
return v3;
}
public static java.util.BitSet indexesOf(int[], int)
{
int v1;
java.util.BitSet v2;
int[] v0;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(int[],int,int)>(v0, v1, 0);
return v2;
}
public static java.util.BitSet indexesOf(int[], int, int)
{
int[] v0;
int v1, v2, v4, v5, v6;
java.util.BitSet v3;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = new java.util.BitSet;
specialinvoke v3.<java.util.BitSet: void <init>()>();
if v0 != null goto label1;
return v3;
label1:
v4 = lengthof v0;
if v2 >= v4 goto label2;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int,int)>(v0, v1, v2);
v6 = (int) -1;
if v5 == v6 goto label2;
virtualinvoke v3.<java.util.BitSet: void set(int)>(v5);
v2 = v5 + 1;
goto label1;
label2:
return v3;
}
public static java.util.BitSet indexesOf(long[], long)
{
long v1;
java.util.BitSet v2;
long[] v0;
v0 := @parameter0: long[];
v1 := @parameter1: long;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(long[],long,int)>(v0, v1, 0);
return v2;
}
public static java.util.BitSet indexesOf(long[], long, int)
{
long[] v0;
int v2, v4, v5, v6;
long v1;
java.util.BitSet v3;
v0 := @parameter0: long[];
v1 := @parameter1: long;
v2 := @parameter2: int;
v3 = new java.util.BitSet;
specialinvoke v3.<java.util.BitSet: void <init>()>();
if v0 != null goto label1;
return v3;
label1:
v4 = lengthof v0;
if v2 >= v4 goto label2;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long,int)>(v0, v1, v2);
v6 = (int) -1;
if v5 == v6 goto label2;
virtualinvoke v3.<java.util.BitSet: void set(int)>(v5);
v2 = v5 + 1;
goto label1;
label2:
return v3;
}
public static java.util.BitSet indexesOf(java.lang.Object[], java.lang.Object)
{
java.lang.Object v1;
java.lang.Object[] v0;
java.util.BitSet v2;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(java.lang.Object[],java.lang.Object,int)>(v0, v1, 0);
return v2;
}
public static java.util.BitSet indexesOf(java.lang.Object[], java.lang.Object, int)
{
java.lang.Object[] v0;
int v2, v4, v5, v6;
java.lang.Object v1;
java.util.BitSet v3;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: int;
v3 = new java.util.BitSet;
specialinvoke v3.<java.util.BitSet: void <init>()>();
if v0 != null goto label1;
return v3;
label1:
v4 = lengthof v0;
if v2 >= v4 goto label2;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>(v0, v1, v2);
v6 = (int) -1;
if v5 == v6 goto label2;
virtualinvoke v3.<java.util.BitSet: void set(int)>(v5);
v2 = v5 + 1;
goto label1;
label2:
return v3;
}
public static java.util.BitSet indexesOf(short[], short)
{
short v1;
java.util.BitSet v2;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: short;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(short[],short,int)>(v0, v1, 0);
return v2;
}
public static java.util.BitSet indexesOf(short[], short, int)
{
short v1;
int v2, v4, v5, v6;
java.util.BitSet v3;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: short;
v2 := @parameter2: int;
v3 = new java.util.BitSet;
specialinvoke v3.<java.util.BitSet: void <init>()>();
if v0 != null goto label1;
return v3;
label1:
v4 = lengthof v0;
if v2 >= v4 goto label2;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short,int)>(v0, v1, v2);
v6 = (int) -1;
if v5 == v6 goto label2;
virtualinvoke v3.<java.util.BitSet: void set(int)>(v5);
v2 = v5 + 1;
goto label1;
label2:
return v3;
}
public static int indexOf(boolean[], boolean)
{
boolean[] v0;
int v2;
boolean v1;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>(v0, v1, 0);
return v2;
}
public static int indexOf(boolean[], boolean, int)
{
boolean[] v0;
int v2, v4, v5, v6, v8;
boolean v1, v3, v7;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(v0);
if v3 == 0 goto label1;
v4 = (int) -1;
return v4;
label1:
if v2 >= 0 goto label2;
v2 = 0;
label2:
v5 = v2;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label5;
v7 = v0[v5];
if v1 != v7 goto label4;
return v5;
label4:
v5 = v5 + 1;
goto label3;
label5:
v8 = (int) -1;
return v8;
}
public static int indexOf(byte[], byte)
{
int v2;
byte[] v0;
byte v1;
v0 := @parameter0: byte[];
v1 := @parameter1: byte;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte,int)>(v0, v1, 0);
return v2;
}
public static int indexOf(byte[], byte, int)
{
byte[] v0;
byte v1, v6;
int v2, v3, v4, v5, v7;
v0 := @parameter0: byte[];
v1 := @parameter1: byte;
v2 := @parameter2: int;
if v0 != null goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v2 = 0;
label2:
v4 = v2;
label3:
v5 = lengthof v0;
if v4 >= v5 goto label5;
v6 = v0[v4];
if v1 != v6 goto label4;
return v4;
label4:
v4 = v4 + 1;
goto label3;
label5:
v7 = (int) -1;
return v7;
}
public static int indexOf(char[], char)
{
int v2;
char[] v0;
char v1;
v0 := @parameter0: char[];
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char,int)>(v0, v1, 0);
return v2;
}
public static int indexOf(char[], char, int)
{
char v1, v6;
int v2, v3, v4, v5, v7;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: char;
v2 := @parameter2: int;
if v0 != null goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v2 = 0;
label2:
v4 = v2;
label3:
v5 = lengthof v0;
if v4 >= v5 goto label5;
v6 = v0[v4];
if v1 != v6 goto label4;
return v4;
label4:
v4 = v4 + 1;
goto label3;
label5:
v7 = (int) -1;
return v7;
}
public static int indexOf(double[], double)
{
double[] v0;
int v2;
double v1;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>(v0, v1, 0);
return v2;
}
public static int indexOf(double[], double, double)
{
double[] v0;
int v3;
double v1, v2;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 := @parameter2: double;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>(v0, v1, 0, v2);
return v3;
}
public static int indexOf(double[], double, int)
{
double[] v0;
byte v9;
int v11, v2, v4, v6, v7;
boolean v10, v3, v5;
double v1, v8;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(v0);
if v3 == 0 goto label1;
v4 = (int) -1;
return v4;
label1:
if v2 >= 0 goto label2;
v2 = 0;
label2:
v5 = staticinvoke <java.lang.Double: boolean isNaN(double)>(v1);
v6 = v2;
label3:
v7 = lengthof v0;
if v6 >= v7 goto label6;
v8 = v0[v6];
v9 = v1 cmpl v8;
if v9 == 0 goto label4;
if v5 == 0 goto label5;
v10 = staticinvoke <java.lang.Double: boolean isNaN(double)>(v8);
if v10 == 0 goto label5;
label4:
return v6;
label5:
v6 = v6 + 1;
goto label3;
label6:
v11 = (int) -1;
return v11;
}
public static int indexOf(double[], double, int, double)
{
double[] v0;
byte v11, v13;
int v14, v2, v5, v8, v9;
boolean v4;
double v1, v10, v12, v3, v6, v7;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 := @parameter2: int;
v3 := @parameter3: double;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(v0);
if v4 == 0 goto label1;
v5 = (int) -1;
return v5;
label1:
if v2 >= 0 goto label2;
v2 = 0;
label2:
v6 = v1 - v3;
v7 = v1 + v3;
v8 = v2;
label3:
v9 = lengthof v0;
if v8 >= v9 goto label5;
v10 = v0[v8];
v11 = v10 cmpl v6;
if v11 < 0 goto label4;
v12 = v0[v8];
v13 = v12 cmpg v7;
if v13 > 0 goto label4;
return v8;
label4:
v8 = v8 + 1;
goto label3;
label5:
v14 = (int) -1;
return v14;
}
public static int indexOf(float[], float)
{
int v2;
float v1;
float[] v0;
v0 := @parameter0: float[];
v1 := @parameter1: float;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>(v0, v1, 0);
return v2;
}
public static int indexOf(float[], float, int)
{
float[] v0;
byte v9;
int v11, v2, v4, v6, v7;
float v1, v8;
boolean v10, v3, v5;
v0 := @parameter0: float[];
v1 := @parameter1: float;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(v0);
if v3 == 0 goto label1;
v4 = (int) -1;
return v4;
label1:
if v2 >= 0 goto label2;
v2 = 0;
label2:
v5 = staticinvoke <java.lang.Float: boolean isNaN(float)>(v1);
v6 = v2;
label3:
v7 = lengthof v0;
if v6 >= v7 goto label6;
v8 = v0[v6];
v9 = v1 cmpl v8;
if v9 == 0 goto label4;
if v5 == 0 goto label5;
v10 = staticinvoke <java.lang.Float: boolean isNaN(float)>(v8);
if v10 == 0 goto label5;
label4:
return v6;
label5:
v6 = v6 + 1;
goto label3;
label6:
v11 = (int) -1;
return v11;
}
public static int indexOf(int[], int)
{
int v1, v2;
int[] v0;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int,int)>(v0, v1, 0);
return v2;
}
public static int indexOf(int[], int, int)
{
int[] v0;
int v1, v2, v3, v4, v5, v6, v7;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v2 = 0;
label2:
v4 = v2;
label3:
v5 = lengthof v0;
if v4 >= v5 goto label5;
v6 = v0[v4];
if v1 != v6 goto label4;
return v4;
label4:
v4 = v4 + 1;
goto label3;
label5:
v7 = (int) -1;
return v7;
}
public static int indexOf(long[], long)
{
int v2;
long v1;
long[] v0;
v0 := @parameter0: long[];
v1 := @parameter1: long;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long,int)>(v0, v1, 0);
return v2;
}
public static int indexOf(long[], long, int)
{
long v1, v6;
long[] v0;
byte v7;
int v2, v3, v4, v5, v8;
v0 := @parameter0: long[];
v1 := @parameter1: long;
v2 := @parameter2: int;
if v0 != null goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v2 = 0;
label2:
v4 = v2;
label3:
v5 = lengthof v0;
if v4 >= v5 goto label5;
v6 = v0[v4];
v7 = v1 cmp v6;
if v7 != 0 goto label4;
return v4;
label4:
v4 = v4 + 1;
goto label3;
label5:
v8 = (int) -1;
return v8;
}
public static int indexOf(java.lang.Object[], java.lang.Object)
{
int v2;
java.lang.Object v1;
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>(v0, v1, 0);
return v2;
}
public static int indexOf(java.lang.Object[], java.lang.Object, int)
{
java.lang.Object[] v0;
int v11, v2, v3, v4, v5, v7, v8;
java.lang.Object v1, v6, v9;
boolean v10;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: int;
if v0 != null goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v2 = 0;
label2:
if v1 != null goto label5;
v4 = v2;
label3:
v5 = lengthof v0;
if v4 >= v5 goto label8;
v6 = v0[v4];
if v6 != null goto label4;
return v4;
label4:
v4 = v4 + 1;
goto label3;
label5:
v7 = v2;
label6:
v8 = lengthof v0;
if v7 >= v8 goto label8;
v9 = v0[v7];
v10 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v9);
if v10 == 0 goto label7;
return v7;
label7:
v7 = v7 + 1;
goto label6;
label8:
v11 = (int) -1;
return v11;
}
public static int indexOf(short[], short)
{
int v2;
short v1;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: short;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short,int)>(v0, v1, 0);
return v2;
}
public static int indexOf(short[], short, int)
{
short v1, v6;
int v2, v3, v4, v5, v7;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: short;
v2 := @parameter2: int;
if v0 != null goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v2 = 0;
label2:
v4 = v2;
label3:
v5 = lengthof v0;
if v4 >= v5 goto label5;
v6 = v0[v4];
if v1 != v6 goto label4;
return v4;
label4:
v4 = v4 + 1;
goto label3;
label5:
v7 = (int) -1;
return v7;
}
public static transient boolean[] insert(int, boolean[], boolean[])
{
java.lang.IndexOutOfBoundsException v6;
int v0, v10, v11, v13, v14, v15, v16, v17, v18, v5, v7, v9;
java.lang.String v8;
boolean v3;
boolean[] v1, v12, v2, v4;
v0 := @parameter0: int;
v1 := @parameter1: boolean[];
v2 := @parameter2: boolean[];
if v1 != null goto label1;
return null;
label1:
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(v2);
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] clone(boolean[])>(v1);
return v4;
label2:
if v0 < 0 goto label3;
v5 = lengthof v1;
if v0 <= v5 goto label4;
label3:
v6 = new java.lang.IndexOutOfBoundsException;
v7 = lengthof v1;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v0, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: \u0001");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label4:
v9 = lengthof v1;
v10 = lengthof v2;
v11 = v9 + v10;
v12 = newarray (boolean)[v11];
v13 = lengthof v2;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v2, 0, v12, v0, v13);
if v0 <= 0 goto label5;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v12, 0, v0);
label5:
v14 = lengthof v1;
if v0 >= v14 goto label6;
v15 = lengthof v2;
v16 = v0 + v15;
v17 = lengthof v1;
v18 = v17 - v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v0, v12, v16, v18);
label6:
return v12;
}
public static transient byte[] insert(int, byte[], byte[])
{
byte[] v1, v12, v2, v4;
java.lang.IndexOutOfBoundsException v6;
int v0, v10, v11, v13, v14, v15, v16, v17, v18, v5, v7, v9;
java.lang.String v8;
boolean v3;
v0 := @parameter0: int;
v1 := @parameter1: byte[];
v2 := @parameter2: byte[];
if v1 != null goto label1;
return null;
label1:
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(byte[])>(v2);
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] clone(byte[])>(v1);
return v4;
label2:
if v0 < 0 goto label3;
v5 = lengthof v1;
if v0 <= v5 goto label4;
label3:
v6 = new java.lang.IndexOutOfBoundsException;
v7 = lengthof v1;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v0, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: \u0001");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label4:
v9 = lengthof v1;
v10 = lengthof v2;
v11 = v9 + v10;
v12 = newarray (byte)[v11];
v13 = lengthof v2;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v2, 0, v12, v0, v13);
if v0 <= 0 goto label5;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v12, 0, v0);
label5:
v14 = lengthof v1;
if v0 >= v14 goto label6;
v15 = lengthof v2;
v16 = v0 + v15;
v17 = lengthof v1;
v18 = v17 - v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v0, v12, v16, v18);
label6:
return v12;
}
public static transient char[] insert(int, char[], char[])
{
java.lang.IndexOutOfBoundsException v6;
int v0, v10, v11, v13, v14, v15, v16, v17, v18, v5, v7, v9;
java.lang.String v8;
boolean v3;
char[] v1, v12, v2, v4;
v0 := @parameter0: int;
v1 := @parameter1: char[];
v2 := @parameter2: char[];
if v1 != null goto label1;
return null;
label1:
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(v2);
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>(v1);
return v4;
label2:
if v0 < 0 goto label3;
v5 = lengthof v1;
if v0 <= v5 goto label4;
label3:
v6 = new java.lang.IndexOutOfBoundsException;
v7 = lengthof v1;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v0, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: \u0001");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label4:
v9 = lengthof v1;
v10 = lengthof v2;
v11 = v9 + v10;
v12 = newarray (char)[v11];
v13 = lengthof v2;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v2, 0, v12, v0, v13);
if v0 <= 0 goto label5;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v12, 0, v0);
label5:
v14 = lengthof v1;
if v0 >= v14 goto label6;
v15 = lengthof v2;
v16 = v0 + v15;
v17 = lengthof v1;
v18 = v17 - v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v0, v12, v16, v18);
label6:
return v12;
}
public static transient double[] insert(int, double[], double[])
{
java.lang.IndexOutOfBoundsException v6;
double[] v1, v12, v2, v4;
int v0, v10, v11, v13, v14, v15, v16, v17, v18, v5, v7, v9;
java.lang.String v8;
boolean v3;
v0 := @parameter0: int;
v1 := @parameter1: double[];
v2 := @parameter2: double[];
if v1 != null goto label1;
return null;
label1:
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(v2);
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] clone(double[])>(v1);
return v4;
label2:
if v0 < 0 goto label3;
v5 = lengthof v1;
if v0 <= v5 goto label4;
label3:
v6 = new java.lang.IndexOutOfBoundsException;
v7 = lengthof v1;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v0, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: \u0001");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label4:
v9 = lengthof v1;
v10 = lengthof v2;
v11 = v9 + v10;
v12 = newarray (double)[v11];
v13 = lengthof v2;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v2, 0, v12, v0, v13);
if v0 <= 0 goto label5;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v12, 0, v0);
label5:
v14 = lengthof v1;
if v0 >= v14 goto label6;
v15 = lengthof v2;
v16 = v0 + v15;
v17 = lengthof v1;
v18 = v17 - v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v0, v12, v16, v18);
label6:
return v12;
}
public static transient float[] insert(int, float[], float[])
{
java.lang.IndexOutOfBoundsException v6;
float[] v1, v12, v2, v4;
int v0, v10, v11, v13, v14, v15, v16, v17, v18, v5, v7, v9;
java.lang.String v8;
boolean v3;
v0 := @parameter0: int;
v1 := @parameter1: float[];
v2 := @parameter2: float[];
if v1 != null goto label1;
return null;
label1:
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(v2);
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] clone(float[])>(v1);
return v4;
label2:
if v0 < 0 goto label3;
v5 = lengthof v1;
if v0 <= v5 goto label4;
label3:
v6 = new java.lang.IndexOutOfBoundsException;
v7 = lengthof v1;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v0, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: \u0001");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label4:
v9 = lengthof v1;
v10 = lengthof v2;
v11 = v9 + v10;
v12 = newarray (float)[v11];
v13 = lengthof v2;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v2, 0, v12, v0, v13);
if v0 <= 0 goto label5;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v12, 0, v0);
label5:
v14 = lengthof v1;
if v0 >= v14 goto label6;
v15 = lengthof v2;
v16 = v0 + v15;
v17 = lengthof v1;
v18 = v17 - v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v0, v12, v16, v18);
label6:
return v12;
}
public static transient int[] insert(int, int[], int[])
{
java.lang.IndexOutOfBoundsException v6;
int[] v1, v12, v2, v4;
int v0, v10, v11, v13, v14, v15, v16, v17, v18, v5, v7, v9;
java.lang.String v8;
boolean v3;
v0 := @parameter0: int;
v1 := @parameter1: int[];
v2 := @parameter2: int[];
if v1 != null goto label1;
return null;
label1:
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(int[])>(v2);
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(v1);
return v4;
label2:
if v0 < 0 goto label3;
v5 = lengthof v1;
if v0 <= v5 goto label4;
label3:
v6 = new java.lang.IndexOutOfBoundsException;
v7 = lengthof v1;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v0, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: \u0001");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label4:
v9 = lengthof v1;
v10 = lengthof v2;
v11 = v9 + v10;
v12 = newarray (int)[v11];
v13 = lengthof v2;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v2, 0, v12, v0, v13);
if v0 <= 0 goto label5;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v12, 0, v0);
label5:
v14 = lengthof v1;
if v0 >= v14 goto label6;
v15 = lengthof v2;
v16 = v0 + v15;
v17 = lengthof v1;
v18 = v17 - v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v0, v12, v16, v18);
label6:
return v12;
}
public static transient long[] insert(int, long[], long[])
{
java.lang.IndexOutOfBoundsException v6;
long[] v1, v12, v2, v4;
int v0, v10, v11, v13, v14, v15, v16, v17, v18, v5, v7, v9;
java.lang.String v8;
boolean v3;
v0 := @parameter0: int;
v1 := @parameter1: long[];
v2 := @parameter2: long[];
if v1 != null goto label1;
return null;
label1:
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(long[])>(v2);
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] clone(long[])>(v1);
return v4;
label2:
if v0 < 0 goto label3;
v5 = lengthof v1;
if v0 <= v5 goto label4;
label3:
v6 = new java.lang.IndexOutOfBoundsException;
v7 = lengthof v1;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v0, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: \u0001");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label4:
v9 = lengthof v1;
v10 = lengthof v2;
v11 = v9 + v10;
v12 = newarray (long)[v11];
v13 = lengthof v2;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v2, 0, v12, v0, v13);
if v0 <= 0 goto label5;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v12, 0, v0);
label5:
v14 = lengthof v1;
if v0 >= v14 goto label6;
v15 = lengthof v2;
v16 = v0 + v15;
v17 = lengthof v1;
v18 = v17 - v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v0, v12, v16, v18);
label6:
return v12;
}
public static transient short[] insert(int, short[], short[])
{
java.lang.IndexOutOfBoundsException v6;
int v0, v10, v11, v13, v14, v15, v16, v17, v18, v5, v7, v9;
java.lang.String v8;
boolean v3;
short[] v1, v12, v2, v4;
v0 := @parameter0: int;
v1 := @parameter1: short[];
v2 := @parameter2: short[];
if v1 != null goto label1;
return null;
label1:
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(short[])>(v2);
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] clone(short[])>(v1);
return v4;
label2:
if v0 < 0 goto label3;
v5 = lengthof v1;
if v0 <= v5 goto label4;
label3:
v6 = new java.lang.IndexOutOfBoundsException;
v7 = lengthof v1;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v0, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: \u0001");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label4:
v9 = lengthof v1;
v10 = lengthof v2;
v11 = v9 + v10;
v12 = newarray (short)[v11];
v13 = lengthof v2;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v2, 0, v12, v0, v13);
if v0 <= 0 goto label5;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v12, 0, v0);
label5:
v14 = lengthof v1;
if v0 >= v14 goto label6;
v15 = lengthof v2;
v16 = v0 + v15;
v17 = lengthof v1;
v18 = v17 - v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v0, v12, v16, v18);
label6:
return v12;
}
public static transient java.lang.Object[] insert(int, java.lang.Object[], java.lang.Object[])
{
java.lang.IndexOutOfBoundsException v6;
java.lang.Object[] v1, v2, v4;
int v0, v11, v12, v13, v15, v16, v17, v18, v19, v20, v5, v7;
java.lang.String v8;
boolean v3;
java.lang.Class v10, v9;
java.lang.Object v14;
v0 := @parameter0: int;
v1 := @parameter1: java.lang.Object[];
v2 := @parameter2: java.lang.Object[];
if v1 != null goto label1;
return null;
label1:
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v2);
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(v1);
return v4;
label2:
if v0 < 0 goto label3;
v5 = lengthof v1;
if v0 <= v5 goto label4;
label3:
v6 = new java.lang.IndexOutOfBoundsException;
v7 = lengthof v1;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v0, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: \u0001");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label4:
v9 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v10 = virtualinvoke v9.<java.lang.Class: java.lang.Class getComponentType()>();
v11 = lengthof v1;
v12 = lengthof v2;
v13 = v11 + v12;
v14 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v10, v13);
v15 = lengthof v2;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v2, 0, v14, v0, v15);
if v0 <= 0 goto label5;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v14, 0, v0);
label5:
v16 = lengthof v1;
if v0 >= v16 goto label6;
v17 = lengthof v2;
v18 = v0 + v17;
v19 = lengthof v1;
v20 = v19 - v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v0, v14, v18, v20);
label6:
return v14;
}
public static boolean isArrayIndexValid(java.lang.Object[], int)
{
java.lang.Object[] v0;
int v1, v2;
boolean v3;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
if v1 < 0 goto label1;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v2 <= v1 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public static boolean isEmpty(boolean[])
{
boolean[] v0;
int v1;
boolean v2;
v0 := @parameter0: boolean[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isEmpty(byte[])
{
int v1;
byte[] v0;
boolean v2;
v0 := @parameter0: byte[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isEmpty(char[])
{
int v1;
char[] v0;
boolean v2;
v0 := @parameter0: char[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isEmpty(double[])
{
double[] v0;
int v1;
boolean v2;
v0 := @parameter0: double[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isEmpty(float[])
{
int v1;
float[] v0;
boolean v2;
v0 := @parameter0: float[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isEmpty(int[])
{
int v1;
int[] v0;
boolean v2;
v0 := @parameter0: int[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isEmpty(long[])
{
int v1;
long[] v0;
boolean v2;
v0 := @parameter0: long[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isEmpty(java.lang.Object[])
{
int v1;
java.lang.Object[] v0;
boolean v2;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isEmpty(short[])
{
int v1;
short[] v0;
boolean v2;
v0 := @parameter0: short[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isEquals(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
boolean v4;
org.apache.commons.lang3.builder.EqualsBuilder v2, v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = new org.apache.commons.lang3.builder.EqualsBuilder;
specialinvoke v2.<org.apache.commons.lang3.builder.EqualsBuilder: void <init>()>();
v3 = virtualinvoke v2.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)>(v0, v1);
v4 = virtualinvoke v3.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals()>();
return v4;
}
public static boolean isNotEmpty(boolean[])
{
boolean[] v0;
boolean v1, v2;
v0 := @parameter0: boolean[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isNotEmpty(byte[])
{
byte[] v0;
boolean v1, v2;
v0 := @parameter0: byte[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(byte[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isNotEmpty(char[])
{
char[] v0;
boolean v1, v2;
v0 := @parameter0: char[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isNotEmpty(double[])
{
double[] v0;
boolean v1, v2;
v0 := @parameter0: double[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isNotEmpty(float[])
{
float[] v0;
boolean v1, v2;
v0 := @parameter0: float[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isNotEmpty(int[])
{
int[] v0;
boolean v1, v2;
v0 := @parameter0: int[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(int[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isNotEmpty(long[])
{
long[] v0;
boolean v1, v2;
v0 := @parameter0: long[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(long[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isNotEmpty(short[])
{
short[] v0;
boolean v1, v2;
v0 := @parameter0: short[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(short[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isNotEmpty(java.lang.Object[])
{
java.lang.Object[] v0;
boolean v1, v2;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isSameLength(boolean[], boolean[])
{
boolean[] v0, v1;
int v2, v3;
boolean v4;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v1);
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean isSameLength(byte[], byte[])
{
byte[] v0, v1;
int v2, v3;
boolean v4;
v0 := @parameter0: byte[];
v1 := @parameter1: byte[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v1);
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean isSameLength(char[], char[])
{
int v2, v3;
char[] v0, v1;
boolean v4;
v0 := @parameter0: char[];
v1 := @parameter1: char[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v1);
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean isSameLength(double[], double[])
{
double[] v0, v1;
int v2, v3;
boolean v4;
v0 := @parameter0: double[];
v1 := @parameter1: double[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v1);
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean isSameLength(float[], float[])
{
int v2, v3;
float[] v0, v1;
boolean v4;
v0 := @parameter0: float[];
v1 := @parameter1: float[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v1);
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean isSameLength(int[], int[])
{
int[] v0, v1;
int v2, v3;
boolean v4;
v0 := @parameter0: int[];
v1 := @parameter1: int[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v1);
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean isSameLength(long[], long[])
{
long[] v0, v1;
int v2, v3;
boolean v4;
v0 := @parameter0: long[];
v1 := @parameter1: long[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v1);
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean isSameLength(java.lang.Object, java.lang.Object)
{
int v2, v3;
java.lang.Object v0, v1;
boolean v4;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v1);
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean isSameLength(java.lang.Object[], java.lang.Object[])
{
java.lang.Object[] v0, v1;
int v2, v3;
boolean v4;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v1);
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean isSameLength(short[], short[])
{
int v2, v3;
short[] v0, v1;
boolean v4;
v0 := @parameter0: short[];
v1 := @parameter1: short[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v1);
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean isSameType(java.lang.Object, java.lang.Object)
{
java.lang.IllegalArgumentException v2;
java.lang.Class v3, v5;
java.lang.Object v0, v1;
java.lang.String v4, v6;
boolean v7;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");
throw v2;
label2:
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>(v6);
return v7;
}
public static boolean isSorted(boolean[])
{
boolean[] v0;
int v1, v3, v4, v6;
boolean v2, v5;
v0 := @parameter0: boolean[];
if v0 == null goto label1;
v1 = lengthof v0;
if v1 >= 2 goto label2;
label1:
return 1;
label2:
v2 = v0[0];
v3 = lengthof v0;
v4 = 1;
label3:
if v4 >= v3 goto label5;
v5 = v0[v4];
v6 = staticinvoke <org.apache.commons.lang3.BooleanUtils: int compare(boolean,boolean)>(v2, v5);
if v6 <= 0 goto label4;
return 0;
label4:
v2 = v5;
v4 = v4 + 1;
goto label3;
label5:
return 1;
}
public static boolean isSorted(byte[])
{
byte[] v0;
byte v2, v5;
int v1, v3, v4, v6;
v0 := @parameter0: byte[];
if v0 == null goto label1;
v1 = lengthof v0;
if v1 >= 2 goto label2;
label1:
return 1;
label2:
v2 = v0[0];
v3 = lengthof v0;
v4 = 1;
label3:
if v4 >= v3 goto label5;
v5 = v0[v4];
v6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int compare(byte,byte)>(v2, v5);
if v6 <= 0 goto label4;
return 0;
label4:
v2 = v5;
v4 = v4 + 1;
goto label3;
label5:
return 1;
}
public static boolean isSorted(char[])
{
int v1, v3, v4, v6;
char[] v0;
char v2, v5;
v0 := @parameter0: char[];
if v0 == null goto label1;
v1 = lengthof v0;
if v1 >= 2 goto label2;
label1:
return 1;
label2:
v2 = v0[0];
v3 = lengthof v0;
v4 = 1;
label3:
if v4 >= v3 goto label5;
v5 = v0[v4];
v6 = staticinvoke <org.apache.commons.lang3.CharUtils: int compare(char,char)>(v2, v5);
if v6 <= 0 goto label4;
return 0;
label4:
v2 = v5;
v4 = v4 + 1;
goto label3;
label5:
return 1;
}
public static boolean isSorted(double[])
{
double[] v0;
int v1, v3, v4, v6;
double v2, v5;
v0 := @parameter0: double[];
if v0 == null goto label1;
v1 = lengthof v0;
if v1 >= 2 goto label2;
label1:
return 1;
label2:
v2 = v0[0];
v3 = lengthof v0;
v4 = 1;
label3:
if v4 >= v3 goto label5;
v5 = v0[v4];
v6 = staticinvoke <java.lang.Double: int compare(double,double)>(v2, v5);
if v6 <= 0 goto label4;
return 0;
label4:
v2 = v5;
v4 = v4 + 1;
goto label3;
label5:
return 1;
}
public static boolean isSorted(float[])
{
int v1, v3, v4, v6;
float v2, v5;
float[] v0;
v0 := @parameter0: float[];
if v0 == null goto label1;
v1 = lengthof v0;
if v1 >= 2 goto label2;
label1:
return 1;
label2:
v2 = v0[0];
v3 = lengthof v0;
v4 = 1;
label3:
if v4 >= v3 goto label5;
v5 = v0[v4];
v6 = staticinvoke <java.lang.Float: int compare(float,float)>(v2, v5);
if v6 <= 0 goto label4;
return 0;
label4:
v2 = v5;
v4 = v4 + 1;
goto label3;
label5:
return 1;
}
public static boolean isSorted(int[])
{
int[] v0;
int v1, v2, v3, v4, v5, v6;
v0 := @parameter0: int[];
if v0 == null goto label1;
v1 = lengthof v0;
if v1 >= 2 goto label2;
label1:
return 1;
label2:
v2 = v0[0];
v3 = lengthof v0;
v4 = 1;
label3:
if v4 >= v3 goto label5;
v5 = v0[v4];
v6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int compare(int,int)>(v2, v5);
if v6 <= 0 goto label4;
return 0;
label4:
v2 = v5;
v4 = v4 + 1;
goto label3;
label5:
return 1;
}
public static boolean isSorted(long[])
{
long[] v0;
int v1, v3, v4, v6;
long v2, v5;
v0 := @parameter0: long[];
if v0 == null goto label1;
v1 = lengthof v0;
if v1 >= 2 goto label2;
label1:
return 1;
label2:
v2 = v0[0];
v3 = lengthof v0;
v4 = 1;
label3:
if v4 >= v3 goto label5;
v5 = v0[v4];
v6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int compare(long,long)>(v2, v5);
if v6 <= 0 goto label4;
return 0;
label4:
v2 = v5;
v4 = v4 + 1;
goto label3;
label5:
return 1;
}
public static boolean isSorted(short[])
{
short v2, v5;
int v1, v3, v4, v6;
short[] v0;
v0 := @parameter0: short[];
if v0 == null goto label1;
v1 = lengthof v0;
if v1 >= 2 goto label2;
label1:
return 1;
label2:
v2 = v0[0];
v3 = lengthof v0;
v4 = 1;
label3:
if v4 >= v3 goto label5;
v5 = v0[v4];
v6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int compare(short,short)>(v2, v5);
if v6 <= 0 goto label4;
return 0;
label4:
v2 = v5;
v4 = v4 + 1;
goto label3;
label5:
return 1;
}
public static boolean isSorted(java.lang.Comparable[])
{
java.util.Comparator v1;
java.lang.Comparable[] v0;
boolean v2;
v0 := @parameter0: java.lang.Comparable[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils$compareTo__127: java.util.Comparator bootstrap$()>();
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSorted(java.lang.Object[],java.util.Comparator)>(v0, v1);
return v2;
}
public static boolean isSorted(java.lang.Object[], java.util.Comparator)
{
java.lang.Object[] v0;
java.lang.IllegalArgumentException v2;
int v3, v5, v6, v8;
java.lang.Object v4, v7;
java.util.Comparator v1;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.util.Comparator;
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Comparator should not be null.");
throw v2;
label1:
if v0 == null goto label2;
v3 = lengthof v0;
if v3 >= 2 goto label3;
label2:
return 1;
label3:
v4 = v0[0];
v5 = lengthof v0;
v6 = 1;
label4:
if v6 >= v5 goto label6;
v7 = v0[v6];
v8 = interfaceinvoke v1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v4, v7);
if v8 <= 0 goto label5;
return 0;
label5:
v4 = v7;
v6 = v6 + 1;
goto label4;
label6:
return 1;
}
public static int lastIndexOf(boolean[], boolean)
{
boolean[] v0;
int v2;
boolean v1;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean,int)>(v0, v1, 2147483647);
return v2;
}
public static int lastIndexOf(boolean[], boolean, int)
{
boolean[] v0;
int v10, v2, v4, v5, v6, v7, v8;
boolean v1, v3, v9;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(v0);
if v3 == 0 goto label1;
v4 = (int) -1;
return v4;
label1:
if v2 >= 0 goto label2;
v5 = (int) -1;
return v5;
label2:
v6 = lengthof v0;
if v2 < v6 goto label3;
v7 = lengthof v0;
v2 = v7 - 1;
label3:
v8 = v2;
label4:
if v8 < 0 goto label6;
v9 = v0[v8];
if v1 != v9 goto label5;
return v8;
label5:
v8 = v8 - 1;
goto label4;
label6:
v10 = (int) -1;
return v10;
}
public static int lastIndexOf(byte[], byte)
{
int v2;
byte[] v0;
byte v1;
v0 := @parameter0: byte[];
v1 := @parameter1: byte;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte,int)>(v0, v1, 2147483647);
return v2;
}
public static int lastIndexOf(byte[], byte, int)
{
byte[] v0;
byte v1, v8;
int v2, v3, v4, v5, v6, v7, v9;
v0 := @parameter0: byte[];
v1 := @parameter1: byte;
v2 := @parameter2: int;
if v0 != null goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v4 = (int) -1;
return v4;
label2:
v5 = lengthof v0;
if v2 < v5 goto label3;
v6 = lengthof v0;
v2 = v6 - 1;
label3:
v7 = v2;
label4:
if v7 < 0 goto label6;
v8 = v0[v7];
if v1 != v8 goto label5;
return v7;
label5:
v7 = v7 - 1;
goto label4;
label6:
v9 = (int) -1;
return v9;
}
public static int lastIndexOf(char[], char)
{
int v2;
char[] v0;
char v1;
v0 := @parameter0: char[];
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char,int)>(v0, v1, 2147483647);
return v2;
}
public static int lastIndexOf(char[], char, int)
{
char v1, v8;
int v2, v3, v4, v5, v6, v7, v9;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: char;
v2 := @parameter2: int;
if v0 != null goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v4 = (int) -1;
return v4;
label2:
v5 = lengthof v0;
if v2 < v5 goto label3;
v6 = lengthof v0;
v2 = v6 - 1;
label3:
v7 = v2;
label4:
if v7 < 0 goto label6;
v8 = v0[v7];
if v1 != v8 goto label5;
return v7;
label5:
v7 = v7 - 1;
goto label4;
label6:
v9 = (int) -1;
return v9;
}
public static int lastIndexOf(double[], double)
{
double[] v0;
int v2;
double v1;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int)>(v0, v1, 2147483647);
return v2;
}
public static int lastIndexOf(double[], double, double)
{
double[] v0;
int v3;
double v1, v2;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 := @parameter2: double;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int,double)>(v0, v1, 2147483647, v2);
return v3;
}
public static int lastIndexOf(double[], double, int)
{
double[] v0;
byte v10;
int v11, v2, v4, v5, v6, v7, v8;
boolean v3;
double v1, v9;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(v0);
if v3 == 0 goto label1;
v4 = (int) -1;
return v4;
label1:
if v2 >= 0 goto label2;
v5 = (int) -1;
return v5;
label2:
v6 = lengthof v0;
if v2 < v6 goto label3;
v7 = lengthof v0;
v2 = v7 - 1;
label3:
v8 = v2;
label4:
if v8 < 0 goto label6;
v9 = v0[v8];
v10 = v1 cmpl v9;
if v10 != 0 goto label5;
return v8;
label5:
v8 = v8 - 1;
goto label4;
label6:
v11 = (int) -1;
return v11;
}
public static int lastIndexOf(double[], double, int, double)
{
double[] v0;
byte v13, v15;
int v11, v16, v2, v5, v6, v7, v8;
boolean v4;
double v1, v10, v12, v14, v3, v9;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 := @parameter2: int;
v3 := @parameter3: double;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(v0);
if v4 == 0 goto label1;
v5 = (int) -1;
return v5;
label1:
if v2 >= 0 goto label2;
v6 = (int) -1;
return v6;
label2:
v7 = lengthof v0;
if v2 < v7 goto label3;
v8 = lengthof v0;
v2 = v8 - 1;
label3:
v9 = v1 - v3;
v10 = v1 + v3;
v11 = v2;
label4:
if v11 < 0 goto label6;
v12 = v0[v11];
v13 = v12 cmpl v9;
if v13 < 0 goto label5;
v14 = v0[v11];
v15 = v14 cmpg v10;
if v15 > 0 goto label5;
return v11;
label5:
v11 = v11 - 1;
goto label4;
label6:
v16 = (int) -1;
return v16;
}
public static int lastIndexOf(float[], float)
{
int v2;
float v1;
float[] v0;
v0 := @parameter0: float[];
v1 := @parameter1: float;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float,int)>(v0, v1, 2147483647);
return v2;
}
public static int lastIndexOf(float[], float, int)
{
float[] v0;
byte v10;
int v11, v2, v4, v5, v6, v7, v8;
float v1, v9;
boolean v3;
v0 := @parameter0: float[];
v1 := @parameter1: float;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(v0);
if v3 == 0 goto label1;
v4 = (int) -1;
return v4;
label1:
if v2 >= 0 goto label2;
v5 = (int) -1;
return v5;
label2:
v6 = lengthof v0;
if v2 < v6 goto label3;
v7 = lengthof v0;
v2 = v7 - 1;
label3:
v8 = v2;
label4:
if v8 < 0 goto label6;
v9 = v0[v8];
v10 = v1 cmpl v9;
if v10 != 0 goto label5;
return v8;
label5:
v8 = v8 - 1;
goto label4;
label6:
v11 = (int) -1;
return v11;
}
public static int lastIndexOf(int[], int)
{
int v1, v2;
int[] v0;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int,int)>(v0, v1, 2147483647);
return v2;
}
public static int lastIndexOf(int[], int, int)
{
int[] v0;
int v1, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v4 = (int) -1;
return v4;
label2:
v5 = lengthof v0;
if v2 < v5 goto label3;
v6 = lengthof v0;
v2 = v6 - 1;
label3:
v7 = v2;
label4:
if v7 < 0 goto label6;
v8 = v0[v7];
if v1 != v8 goto label5;
return v7;
label5:
v7 = v7 - 1;
goto label4;
label6:
v9 = (int) -1;
return v9;
}
public static int lastIndexOf(long[], long)
{
int v2;
long v1;
long[] v0;
v0 := @parameter0: long[];
v1 := @parameter1: long;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long,int)>(v0, v1, 2147483647);
return v2;
}
public static int lastIndexOf(long[], long, int)
{
long v1, v8;
long[] v0;
byte v9;
int v10, v2, v3, v4, v5, v6, v7;
v0 := @parameter0: long[];
v1 := @parameter1: long;
v2 := @parameter2: int;
if v0 != null goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v4 = (int) -1;
return v4;
label2:
v5 = lengthof v0;
if v2 < v5 goto label3;
v6 = lengthof v0;
v2 = v6 - 1;
label3:
v7 = v2;
label4:
if v7 < 0 goto label6;
v8 = v0[v7];
v9 = v1 cmp v8;
if v9 != 0 goto label5;
return v7;
label5:
v7 = v7 - 1;
goto label4;
label6:
v10 = (int) -1;
return v10;
}
public static int lastIndexOf(java.lang.Object[], java.lang.Object)
{
int v2;
java.lang.Object v1;
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>(v0, v1, 2147483647);
return v2;
}
public static int lastIndexOf(java.lang.Object[], java.lang.Object, int)
{
java.lang.Object[] v0;
int v12, v15, v2, v3, v4, v5, v6, v7;
boolean v11, v14;
java.lang.Class v10, v9;
java.lang.Object v1, v13, v8;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: int;
if v0 != null goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v4 = (int) -1;
return v4;
label2:
v5 = lengthof v0;
if v2 < v5 goto label3;
v6 = lengthof v0;
v2 = v6 - 1;
label3:
if v1 != null goto label6;
v7 = v2;
label4:
if v7 < 0 goto label9;
v8 = v0[v7];
if v8 != null goto label5;
return v7;
label5:
v7 = v7 - 1;
goto label4;
label6:
v9 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v10 = virtualinvoke v9.<java.lang.Class: java.lang.Class getComponentType()>();
v11 = virtualinvoke v10.<java.lang.Class: boolean isInstance(java.lang.Object)>(v1);
if v11 == 0 goto label9;
v12 = v2;
label7:
if v12 < 0 goto label9;
v13 = v0[v12];
v14 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v13);
if v14 == 0 goto label8;
return v12;
label8:
v12 = v12 - 1;
goto label7;
label9:
v15 = (int) -1;
return v15;
}
public static int lastIndexOf(short[], short)
{
int v2;
short v1;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: short;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short,int)>(v0, v1, 2147483647);
return v2;
}
public static int lastIndexOf(short[], short, int)
{
short v1, v8;
int v2, v3, v4, v5, v6, v7, v9;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: short;
v2 := @parameter2: int;
if v0 != null goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v4 = (int) -1;
return v4;
label2:
v5 = lengthof v0;
if v2 < v5 goto label3;
v6 = lengthof v0;
v2 = v6 - 1;
label3:
v7 = v2;
label4:
if v7 < 0 goto label6;
v8 = v0[v7];
if v1 != v8 goto label5;
return v7;
label5:
v7 = v7 - 1;
goto label4;
label6:
v9 = (int) -1;
return v9;
}
public static boolean[] nullToEmpty(boolean[])
{
boolean[] v0, v2;
boolean v1;
v0 := @parameter0: boolean[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;
return v2;
label1:
return v0;
}
public static java.lang.Boolean[] nullToEmpty(java.lang.Boolean[])
{
java.lang.Boolean[] v0, v2;
boolean v1;
v0 := @parameter0: java.lang.Boolean[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY>;
return v2;
label1:
return v0;
}
public static byte[] nullToEmpty(byte[])
{
byte[] v0, v2;
boolean v1;
v0 := @parameter0: byte[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(byte[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;
return v2;
label1:
return v0;
}
public static java.lang.Byte[] nullToEmpty(java.lang.Byte[])
{
java.lang.Byte[] v0, v2;
boolean v1;
v0 := @parameter0: java.lang.Byte[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY>;
return v2;
label1:
return v0;
}
public static char[] nullToEmpty(char[])
{
char[] v0, v2;
boolean v1;
v0 := @parameter0: char[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;
return v2;
label1:
return v0;
}
public static java.lang.Character[] nullToEmpty(java.lang.Character[])
{
java.lang.Character[] v0, v2;
boolean v1;
v0 := @parameter0: java.lang.Character[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY>;
return v2;
label1:
return v0;
}
public static java.lang.Class[] nullToEmpty(java.lang.Class[])
{
java.lang.Class[] v0, v2;
boolean v1;
v0 := @parameter0: java.lang.Class[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;
return v2;
label1:
return v0;
}
public static double[] nullToEmpty(double[])
{
double[] v0, v2;
boolean v1;
v0 := @parameter0: double[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;
return v2;
label1:
return v0;
}
public static java.lang.Double[] nullToEmpty(java.lang.Double[])
{
java.lang.Double[] v0, v2;
boolean v1;
v0 := @parameter0: java.lang.Double[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY>;
return v2;
label1:
return v0;
}
public static float[] nullToEmpty(float[])
{
float[] v0, v2;
boolean v1;
v0 := @parameter0: float[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;
return v2;
label1:
return v0;
}
public static java.lang.Float[] nullToEmpty(java.lang.Float[])
{
java.lang.Float[] v0, v2;
boolean v1;
v0 := @parameter0: java.lang.Float[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY>;
return v2;
label1:
return v0;
}
public static int[] nullToEmpty(int[])
{
int[] v0, v2;
boolean v1;
v0 := @parameter0: int[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(int[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;
return v2;
label1:
return v0;
}
public static java.lang.Integer[] nullToEmpty(java.lang.Integer[])
{
java.lang.Integer[] v0, v2;
boolean v1;
v0 := @parameter0: java.lang.Integer[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY>;
return v2;
label1:
return v0;
}
public static long[] nullToEmpty(long[])
{
long[] v0, v2;
boolean v1;
v0 := @parameter0: long[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(long[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;
return v2;
label1:
return v0;
}
public static java.lang.Long[] nullToEmpty(java.lang.Long[])
{
java.lang.Long[] v0, v2;
boolean v1;
v0 := @parameter0: java.lang.Long[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY>;
return v2;
label1:
return v0;
}
public static java.lang.Object[] nullToEmpty(java.lang.Object[])
{
java.lang.Object[] v0, v2;
boolean v1;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;
return v2;
label1:
return v0;
}
public static short[] nullToEmpty(short[])
{
short[] v0, v2;
boolean v1;
v0 := @parameter0: short[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(short[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;
return v2;
label1:
return v0;
}
public static java.lang.Short[] nullToEmpty(java.lang.Short[])
{
java.lang.Short[] v0, v2;
boolean v1;
v0 := @parameter0: java.lang.Short[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY>;
return v2;
label1:
return v0;
}
public static java.lang.String[] nullToEmpty(java.lang.String[])
{
java.lang.String[] v0, v2;
boolean v1;
v0 := @parameter0: java.lang.String[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
return v2;
label1:
return v0;
}
public static java.lang.Object[] nullToEmpty(java.lang.Object[], java.lang.Class)
{
java.lang.Object[] v0;
java.lang.Class v1, v3;
java.lang.Object v4, v5;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Class;
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The type must not be null");
throw v2;
label1:
if v0 != null goto label2;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.Class getComponentType()>();
v4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v3, 0);
v5 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v4);
return v5;
label2:
return v0;
}
public static boolean[] remove(boolean[], int)
{
boolean[] v0;
int v1;
java.lang.Object v2;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(v0, v1);
return v2;
}
public static byte[] remove(byte[], int)
{
int v1;
byte[] v0;
java.lang.Object v2;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(v0, v1);
return v2;
}
public static char[] remove(char[], int)
{
int v1;
char[] v0;
java.lang.Object v2;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(v0, v1);
return v2;
}
public static double[] remove(double[], int)
{
double[] v0;
int v1;
java.lang.Object v2;
v0 := @parameter0: double[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(v0, v1);
return v2;
}
public static float[] remove(float[], int)
{
int v1;
float[] v0;
java.lang.Object v2;
v0 := @parameter0: float[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(v0, v1);
return v2;
}
public static int[] remove(int[], int)
{
int v1;
java.lang.Object v2;
int[] v0;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(v0, v1);
return v2;
}
public static long[] remove(long[], int)
{
int v1;
java.lang.Object v2;
long[] v0;
v0 := @parameter0: long[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(v0, v1);
return v2;
}
private static java.lang.Object remove(java.lang.Object, int)
{
java.lang.IndexOutOfBoundsException v3;
int v1, v10, v11, v12, v2, v7, v9;
java.lang.Class v5, v6;
java.lang.Object v0, v8;
java.lang.String v4;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v1 < 0 goto label1;
if v1 < v2 goto label2;
label1:
v3 = new java.lang.IndexOutOfBoundsException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: \u0001");
specialinvoke v3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v4);
throw v3;
label2:
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.Class getComponentType()>();
v7 = v2 - 1;
v8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v6, v7);
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v8, 0, v1);
v9 = v2 - 1;
if v1 >= v9 goto label3;
v10 = v1 + 1;
v11 = v2 - v1;
v12 = v11 - 1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v10, v8, v1, v12);
label3:
return v8;
}
public static short[] remove(short[], int)
{
int v1;
java.lang.Object v2;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(v0, v1);
return v2;
}
public static java.lang.Object[] remove(java.lang.Object[], int)
{
int v1;
java.lang.Object v2;
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(v0, v1);
return v2;
}
public static transient boolean[] removeAll(boolean[], int[])
{
boolean[] v0;
java.lang.Object v2;
int[] v1;
v0 := @parameter0: boolean[];
v1 := @parameter1: int[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(v0, v1);
return v2;
}
public static transient byte[] removeAll(byte[], int[])
{
byte[] v0;
java.lang.Object v2;
int[] v1;
v0 := @parameter0: byte[];
v1 := @parameter1: int[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(v0, v1);
return v2;
}
public static transient char[] removeAll(char[], int[])
{
char[] v0;
java.lang.Object v2;
int[] v1;
v0 := @parameter0: char[];
v1 := @parameter1: int[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(v0, v1);
return v2;
}
public static transient double[] removeAll(double[], int[])
{
double[] v0;
java.lang.Object v2;
int[] v1;
v0 := @parameter0: double[];
v1 := @parameter1: int[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(v0, v1);
return v2;
}
public static transient float[] removeAll(float[], int[])
{
float[] v0;
java.lang.Object v2;
int[] v1;
v0 := @parameter0: float[];
v1 := @parameter1: int[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(v0, v1);
return v2;
}
public static transient int[] removeAll(int[], int[])
{
java.lang.Object v2;
int[] v0, v1;
v0 := @parameter0: int[];
v1 := @parameter1: int[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(v0, v1);
return v2;
}
public static transient long[] removeAll(long[], int[])
{
java.lang.Object v2;
long[] v0;
int[] v1;
v0 := @parameter0: long[];
v1 := @parameter1: int[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(v0, v1);
return v2;
}
static java.lang.Object removeAll(java.lang.Object, java.util.BitSet)
{
int v10, v11, v12, v13, v2, v3, v6, v8, v9;
java.lang.Class v4, v5;
java.lang.Object v0, v7;
java.util.BitSet v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.util.BitSet;
if v0 != null goto label1;
return null;
label1:
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
v3 = virtualinvoke v1.<java.util.BitSet: int cardinality()>();
v4 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.Class getComponentType()>();
v6 = v2 - v3;
v7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v5, v6);
v8 = 0;
v9 = 0;
label2:
v10 = virtualinvoke v1.<java.util.BitSet: int nextSetBit(int)>(v8);
v11 = (int) -1;
if v10 == v11 goto label4;
v12 = v10 - v8;
if v12 <= 0 goto label3;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v8, v7, v9, v12);
v9 = v9 + v12;
label3:
v8 = virtualinvoke v1.<java.util.BitSet: int nextClearBit(int)>(v10);
goto label2;
label4:
v13 = v2 - v8;
if v13 <= 0 goto label5;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v8, v7, v9, v13);
label5:
return v7;
}
static transient java.lang.Object removeAll(java.lang.Object, int[])
{
java.lang.IndexOutOfBoundsException v10;
int[] v1, v4, v5;
int v14, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v3, v7, v8, v9;
java.lang.String v11;
boolean v6;
java.lang.Class v12, v13;
java.lang.Object v0, v15;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
v3 = 0;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(v1);
v5 = staticinvoke <org.apache.commons.lang3.ArraySorter: int[] sort(int[])>(v4);
v6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(int[])>(v5);
if v6 == 0 goto label4;
v7 = lengthof v5;
v8 = v2;
label1:
v7 = v7 - 1;
if v7 < 0 goto label4;
v9 = v5[v7];
if v9 < 0 goto label2;
if v9 < v2 goto label3;
label2:
v10 = new java.lang.IndexOutOfBoundsException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v9, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001, Length: \u0001");
specialinvoke v10.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v11);
throw v10;
label3:
if v9 >= v8 goto label1;
v3 = v3 + 1;
v8 = v9;
goto label1;
label4:
v12 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v13 = virtualinvoke v12.<java.lang.Class: java.lang.Class getComponentType()>();
v14 = v2 - v3;
v15 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v13, v14);
if v3 >= v2 goto label8;
v16 = v2;
v17 = v2 - v3;
v18 = lengthof v5;
v19 = v18 - 1;
label5:
if v19 < 0 goto label7;
v20 = v5[v19];
v21 = v16 - v20;
if v21 <= 1 goto label6;
v22 = v16 - v20;
v23 = v22 - 1;
v17 = v17 - v23;
v24 = v20 + 1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v24, v15, v17, v23);
label6:
v16 = v20;
v19 = v19 - 1;
goto label5;
label7:
if v16 <= 0 goto label8;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v15, 0, v16);
label8:
return v15;
}
public static transient short[] removeAll(short[], int[])
{
java.lang.Object v2;
short[] v0;
int[] v1;
v0 := @parameter0: short[];
v1 := @parameter1: int[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(v0, v1);
return v2;
}
public static transient java.lang.Object[] removeAll(java.lang.Object[], int[])
{
java.lang.Object v2;
java.lang.Object[] v0;
int[] v1;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(v0, v1);
return v2;
}
public static boolean[] removeAllOccurences(boolean[], boolean)
{
boolean[] v0;
java.lang.Object v3;
java.util.BitSet v2;
boolean v1;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(boolean[],boolean)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static byte[] removeAllOccurences(byte[], byte)
{
byte[] v0;
byte v1;
java.lang.Object v3;
java.util.BitSet v2;
v0 := @parameter0: byte[];
v1 := @parameter1: byte;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(byte[],byte)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static char[] removeAllOccurences(char[], char)
{
char[] v0;
char v1;
java.lang.Object v3;
java.util.BitSet v2;
v0 := @parameter0: char[];
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(char[],char)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static double[] removeAllOccurences(double[], double)
{
double[] v0;
java.lang.Object v3;
java.util.BitSet v2;
double v1;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(double[],double)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static float[] removeAllOccurences(float[], float)
{
float v1;
float[] v0;
java.lang.Object v3;
java.util.BitSet v2;
v0 := @parameter0: float[];
v1 := @parameter1: float;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(float[],float)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static int[] removeAllOccurences(int[], int)
{
int[] v0;
int v1;
java.lang.Object v3;
java.util.BitSet v2;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(int[],int)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static long[] removeAllOccurences(long[], long)
{
long[] v0;
java.lang.Object v3;
long v1;
java.util.BitSet v2;
v0 := @parameter0: long[];
v1 := @parameter1: long;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(long[],long)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static short[] removeAllOccurences(short[], short)
{
short v1;
java.lang.Object v3;
java.util.BitSet v2;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: short;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(short[],short)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static java.lang.Object[] removeAllOccurences(java.lang.Object[], java.lang.Object)
{
java.lang.Object[] v0;
java.lang.Object v1, v3;
java.util.BitSet v2;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(java.lang.Object[],java.lang.Object)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static boolean[] removeAllOccurrences(boolean[], boolean)
{
boolean[] v0;
java.lang.Object v3;
java.util.BitSet v2;
boolean v1;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(boolean[],boolean)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static byte[] removeAllOccurrences(byte[], byte)
{
byte[] v0;
byte v1;
java.lang.Object v3;
java.util.BitSet v2;
v0 := @parameter0: byte[];
v1 := @parameter1: byte;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(byte[],byte)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static char[] removeAllOccurrences(char[], char)
{
char[] v0;
char v1;
java.lang.Object v3;
java.util.BitSet v2;
v0 := @parameter0: char[];
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(char[],char)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static double[] removeAllOccurrences(double[], double)
{
double[] v0;
java.lang.Object v3;
java.util.BitSet v2;
double v1;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(double[],double)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static float[] removeAllOccurrences(float[], float)
{
float v1;
float[] v0;
java.lang.Object v3;
java.util.BitSet v2;
v0 := @parameter0: float[];
v1 := @parameter1: float;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(float[],float)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static int[] removeAllOccurrences(int[], int)
{
int[] v0;
int v1;
java.lang.Object v3;
java.util.BitSet v2;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(int[],int)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static long[] removeAllOccurrences(long[], long)
{
long[] v0;
java.lang.Object v3;
long v1;
java.util.BitSet v2;
v0 := @parameter0: long[];
v1 := @parameter1: long;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(long[],long)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static short[] removeAllOccurrences(short[], short)
{
short v1;
java.lang.Object v3;
java.util.BitSet v2;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: short;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(short[],short)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static java.lang.Object[] removeAllOccurrences(java.lang.Object[], java.lang.Object)
{
java.lang.Object[] v0;
java.lang.Object v1, v3;
java.util.BitSet v2;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.BitSet indexesOf(java.lang.Object[],java.lang.Object)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v2);
return v3;
}
public static boolean[] removeElement(boolean[], boolean)
{
boolean[] v0, v4, v5;
int v2, v3;
boolean v1;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean)>(v0, v1);
v3 = (int) -1;
if v2 != v3 goto label1;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] clone(boolean[])>(v0);
return v4;
label1:
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] remove(boolean[],int)>(v0, v2);
return v5;
}
public static byte[] removeElement(byte[], byte)
{
byte[] v0, v4, v5;
byte v1;
int v2, v3;
v0 := @parameter0: byte[];
v1 := @parameter1: byte;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte)>(v0, v1);
v3 = (int) -1;
if v2 != v3 goto label1;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] clone(byte[])>(v0);
return v4;
label1:
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] remove(byte[],int)>(v0, v2);
return v5;
}
public static char[] removeElement(char[], char)
{
int v2, v3;
char[] v0, v4, v5;
char v1;
v0 := @parameter0: char[];
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char)>(v0, v1);
v3 = (int) -1;
if v2 != v3 goto label1;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>(v0);
return v4;
label1:
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] remove(char[],int)>(v0, v2);
return v5;
}
public static double[] removeElement(double[], double)
{
double[] v0, v4, v5;
int v2, v3;
double v1;
v0 := @parameter0: double[];
v1 := @parameter1: double;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double)>(v0, v1);
v3 = (int) -1;
if v2 != v3 goto label1;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] clone(double[])>(v0);
return v4;
label1:
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] remove(double[],int)>(v0, v2);
return v5;
}
public static float[] removeElement(float[], float)
{
int v2, v3;
float v1;
float[] v0, v4, v5;
v0 := @parameter0: float[];
v1 := @parameter1: float;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float)>(v0, v1);
v3 = (int) -1;
if v2 != v3 goto label1;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] clone(float[])>(v0);
return v4;
label1:
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] remove(float[],int)>(v0, v2);
return v5;
}
public static int[] removeElement(int[], int)
{
int[] v0, v4, v5;
int v1, v2, v3;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int)>(v0, v1);
v3 = (int) -1;
if v2 != v3 goto label1;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(v0);
return v4;
label1:
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] remove(int[],int)>(v0, v2);
return v5;
}
public static long[] removeElement(long[], long)
{
long[] v0, v4, v5;
int v2, v3;
long v1;
v0 := @parameter0: long[];
v1 := @parameter1: long;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long)>(v0, v1);
v3 = (int) -1;
if v2 != v3 goto label1;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] clone(long[])>(v0);
return v4;
label1:
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] remove(long[],int)>(v0, v2);
return v5;
}
public static short[] removeElement(short[], short)
{
short v1;
int v2, v3;
short[] v0, v4, v5;
v0 := @parameter0: short[];
v1 := @parameter1: short;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short)>(v0, v1);
v3 = (int) -1;
if v2 != v3 goto label1;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] clone(short[])>(v0);
return v4;
label1:
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] remove(short[],int)>(v0, v2);
return v5;
}
public static java.lang.Object[] removeElement(java.lang.Object[], java.lang.Object)
{
java.lang.Object[] v0, v4, v5;
int v2, v3;
java.lang.Object v1;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(v0, v1);
v3 = (int) -1;
if v2 != v3 goto label1;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(v0);
return v4;
label1:
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] remove(java.lang.Object[],int)>(v0, v2);
return v5;
}
public static transient boolean[] removeElements(boolean[], boolean[])
{
org.apache.commons.lang3.mutable.MutableInt v11;
java.util.HashMap v5;
int v13, v14, v18, v6, v7;
java.lang.Boolean v16, v19, v9;
boolean v15, v2, v3, v8;
boolean[] v0, v1, v4;
java.lang.Object v10, v17, v20;
java.util.BitSet v12;
v0 := @parameter0: boolean[];
v1 := @parameter1: boolean[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(v0);
if v2 != 0 goto label01;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(v1);
if v3 == 0 goto label02;
label01:
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] clone(boolean[])>(v0);
return v4;
label02:
v5 = new java.util.HashMap;
specialinvoke v5.<java.util.HashMap: void <init>(int)>(2);
v6 = lengthof v1;
v7 = 0;
label03:
if v7 >= v6 goto label06;
v8 = v1[v7];
v9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v8);
v10 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v9);
if v10 != null goto label04;
v11 = new org.apache.commons.lang3.mutable.MutableInt;
specialinvoke v11.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);
virtualinvoke v5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v11);
goto label05;
label04:
virtualinvoke v10.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();
label05:
v7 = v7 + 1;
goto label03;
label06:
v12 = new java.util.BitSet;
specialinvoke v12.<java.util.BitSet: void <init>()>();
v13 = 0;
label07:
v14 = lengthof v0;
if v13 >= v14 goto label10;
v15 = v0[v13];
v16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v15);
v17 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v16);
if v17 == null goto label09;
v18 = virtualinvoke v17.<org.apache.commons.lang3.mutable.MutableInt: int decrementAndGet()>();
if v18 != 0 goto label08;
v19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v15);
virtualinvoke v5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(v19);
label08:
virtualinvoke v12.<java.util.BitSet: void set(int)>(v13);
label09:
v13 = v13 + 1;
goto label07;
label10:
v20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v12);
return v20;
}
public static transient byte[] removeElements(byte[], byte[])
{
byte[] v0, v1, v4;
org.apache.commons.lang3.mutable.MutableInt v12;
java.util.HashMap v5;
byte v16, v9;
int v14, v15, v19, v6, v7, v8;
java.lang.Byte v10, v17, v20;
boolean v2, v3;
java.lang.Object v11, v18, v21;
java.util.BitSet v13;
v0 := @parameter0: byte[];
v1 := @parameter1: byte[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(byte[])>(v0);
if v2 != 0 goto label01;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(byte[])>(v1);
if v3 == 0 goto label02;
label01:
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] clone(byte[])>(v0);
return v4;
label02:
v5 = new java.util.HashMap;
v6 = lengthof v1;
specialinvoke v5.<java.util.HashMap: void <init>(int)>(v6);
v7 = lengthof v1;
v8 = 0;
label03:
if v8 >= v7 goto label06;
v9 = v1[v8];
v10 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v9);
v11 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v10);
if v11 != null goto label04;
v12 = new org.apache.commons.lang3.mutable.MutableInt;
specialinvoke v12.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v12);
goto label05;
label04:
virtualinvoke v11.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();
label05:
v8 = v8 + 1;
goto label03;
label06:
v13 = new java.util.BitSet;
specialinvoke v13.<java.util.BitSet: void <init>()>();
v14 = 0;
label07:
v15 = lengthof v0;
if v14 >= v15 goto label10;
v16 = v0[v14];
v17 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v16);
v18 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v17);
if v18 == null goto label09;
v19 = virtualinvoke v18.<org.apache.commons.lang3.mutable.MutableInt: int decrementAndGet()>();
if v19 != 0 goto label08;
v20 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v16);
interfaceinvoke v5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v20);
label08:
virtualinvoke v13.<java.util.BitSet: void set(int)>(v14);
label09:
v14 = v14 + 1;
goto label07;
label10:
v21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v13);
return v21;
}
public static transient char[] removeElements(char[], char[])
{
org.apache.commons.lang3.mutable.MutableInt v12;
java.util.HashMap v5;
java.lang.Character v10, v17, v20;
int v14, v15, v19, v6, v7, v8;
boolean v2, v3;
char v16, v9;
char[] v0, v1, v4;
java.lang.Object v11, v18, v21;
java.util.BitSet v13;
v0 := @parameter0: char[];
v1 := @parameter1: char[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(v0);
if v2 != 0 goto label01;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(v1);
if v3 == 0 goto label02;
label01:
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>(v0);
return v4;
label02:
v5 = new java.util.HashMap;
v6 = lengthof v1;
specialinvoke v5.<java.util.HashMap: void <init>(int)>(v6);
v7 = lengthof v1;
v8 = 0;
label03:
if v8 >= v7 goto label06;
v9 = v1[v8];
v10 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v9);
v11 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v10);
if v11 != null goto label04;
v12 = new org.apache.commons.lang3.mutable.MutableInt;
specialinvoke v12.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);
virtualinvoke v5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v12);
goto label05;
label04:
virtualinvoke v11.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();
label05:
v8 = v8 + 1;
goto label03;
label06:
v13 = new java.util.BitSet;
specialinvoke v13.<java.util.BitSet: void <init>()>();
v14 = 0;
label07:
v15 = lengthof v0;
if v14 >= v15 goto label10;
v16 = v0[v14];
v17 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v16);
v18 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v17);
if v18 == null goto label09;
v19 = virtualinvoke v18.<org.apache.commons.lang3.mutable.MutableInt: int decrementAndGet()>();
if v19 != 0 goto label08;
v20 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v16);
virtualinvoke v5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(v20);
label08:
virtualinvoke v13.<java.util.BitSet: void set(int)>(v14);
label09:
v14 = v14 + 1;
goto label07;
label10:
v21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v13);
return v21;
}
public static transient double[] removeElements(double[], double[])
{
org.apache.commons.lang3.mutable.MutableInt v12;
java.lang.Double v10, v17, v20;
double[] v0, v1, v4;
java.util.HashMap v5;
int v14, v15, v19, v6, v7, v8;
boolean v2, v3;
double v16, v9;
java.lang.Object v11, v18, v21;
java.util.BitSet v13;
v0 := @parameter0: double[];
v1 := @parameter1: double[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(v0);
if v2 != 0 goto label01;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(v1);
if v3 == 0 goto label02;
label01:
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] clone(double[])>(v0);
return v4;
label02:
v5 = new java.util.HashMap;
v6 = lengthof v1;
specialinvoke v5.<java.util.HashMap: void <init>(int)>(v6);
v7 = lengthof v1;
v8 = 0;
label03:
if v8 >= v7 goto label06;
v9 = v1[v8];
v10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v9);
v11 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v10);
if v11 != null goto label04;
v12 = new org.apache.commons.lang3.mutable.MutableInt;
specialinvoke v12.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);
virtualinvoke v5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v12);
goto label05;
label04:
virtualinvoke v11.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();
label05:
v8 = v8 + 1;
goto label03;
label06:
v13 = new java.util.BitSet;
specialinvoke v13.<java.util.BitSet: void <init>()>();
v14 = 0;
label07:
v15 = lengthof v0;
if v14 >= v15 goto label10;
v16 = v0[v14];
v17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v16);
v18 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v17);
if v18 == null goto label09;
v19 = virtualinvoke v18.<org.apache.commons.lang3.mutable.MutableInt: int decrementAndGet()>();
if v19 != 0 goto label08;
v20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v16);
virtualinvoke v5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(v20);
label08:
virtualinvoke v13.<java.util.BitSet: void set(int)>(v14);
label09:
v14 = v14 + 1;
goto label07;
label10:
v21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v13);
return v21;
}
public static transient float[] removeElements(float[], float[])
{
java.lang.Float v10, v17, v20;
org.apache.commons.lang3.mutable.MutableInt v12;
float[] v0, v1, v4;
java.util.HashMap v5;
int v14, v15, v19, v6, v7, v8;
boolean v2, v3;
float v16, v9;
java.lang.Object v11, v18, v21;
java.util.BitSet v13;
v0 := @parameter0: float[];
v1 := @parameter1: float[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(v0);
if v2 != 0 goto label01;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(v1);
if v3 == 0 goto label02;
label01:
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] clone(float[])>(v0);
return v4;
label02:
v5 = new java.util.HashMap;
v6 = lengthof v1;
specialinvoke v5.<java.util.HashMap: void <init>(int)>(v6);
v7 = lengthof v1;
v8 = 0;
label03:
if v8 >= v7 goto label06;
v9 = v1[v8];
v10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(v9);
v11 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v10);
if v11 != null goto label04;
v12 = new org.apache.commons.lang3.mutable.MutableInt;
specialinvoke v12.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);
virtualinvoke v5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v12);
goto label05;
label04:
virtualinvoke v11.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();
label05:
v8 = v8 + 1;
goto label03;
label06:
v13 = new java.util.BitSet;
specialinvoke v13.<java.util.BitSet: void <init>()>();
v14 = 0;
label07:
v15 = lengthof v0;
if v14 >= v15 goto label10;
v16 = v0[v14];
v17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(v16);
v18 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v17);
if v18 == null goto label09;
v19 = virtualinvoke v18.<org.apache.commons.lang3.mutable.MutableInt: int decrementAndGet()>();
if v19 != 0 goto label08;
v20 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(v16);
virtualinvoke v5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(v20);
label08:
virtualinvoke v13.<java.util.BitSet: void set(int)>(v14);
label09:
v14 = v14 + 1;
goto label07;
label10:
v21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v13);
return v21;
}
public static transient int[] removeElements(int[], int[])
{
org.apache.commons.lang3.mutable.MutableInt v12;
java.util.HashMap v5;
java.lang.Integer v10, v17, v20;
int[] v0, v1, v4;
int v14, v15, v16, v19, v6, v7, v8, v9;
boolean v2, v3;
java.lang.Object v11, v18, v21;
java.util.BitSet v13;
v0 := @parameter0: int[];
v1 := @parameter1: int[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(int[])>(v0);
if v2 != 0 goto label01;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(int[])>(v1);
if v3 == 0 goto label02;
label01:
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(v0);
return v4;
label02:
v5 = new java.util.HashMap;
v6 = lengthof v1;
specialinvoke v5.<java.util.HashMap: void <init>(int)>(v6);
v7 = lengthof v1;
v8 = 0;
label03:
if v8 >= v7 goto label06;
v9 = v1[v8];
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v9);
v11 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v10);
if v11 != null goto label04;
v12 = new org.apache.commons.lang3.mutable.MutableInt;
specialinvoke v12.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);
virtualinvoke v5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v12);
goto label05;
label04:
virtualinvoke v11.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();
label05:
v8 = v8 + 1;
goto label03;
label06:
v13 = new java.util.BitSet;
specialinvoke v13.<java.util.BitSet: void <init>()>();
v14 = 0;
label07:
v15 = lengthof v0;
if v14 >= v15 goto label10;
v16 = v0[v14];
v17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v16);
v18 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v17);
if v18 == null goto label09;
v19 = virtualinvoke v18.<org.apache.commons.lang3.mutable.MutableInt: int decrementAndGet()>();
if v19 != 0 goto label08;
v20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v16);
virtualinvoke v5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(v20);
label08:
virtualinvoke v13.<java.util.BitSet: void set(int)>(v14);
label09:
v14 = v14 + 1;
goto label07;
label10:
v21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v13);
return v21;
}
public static transient long[] removeElements(long[], long[])
{
org.apache.commons.lang3.mutable.MutableInt v12;
java.util.HashMap v5;
long v16, v9;
long[] v0, v1, v4;
java.lang.Long v10, v17, v20;
int v14, v15, v19, v6, v7, v8;
boolean v2, v3;
java.lang.Object v11, v18, v21;
java.util.BitSet v13;
v0 := @parameter0: long[];
v1 := @parameter1: long[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(long[])>(v0);
if v2 != 0 goto label01;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(long[])>(v1);
if v3 == 0 goto label02;
label01:
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] clone(long[])>(v0);
return v4;
label02:
v5 = new java.util.HashMap;
v6 = lengthof v1;
specialinvoke v5.<java.util.HashMap: void <init>(int)>(v6);
v7 = lengthof v1;
v8 = 0;
label03:
if v8 >= v7 goto label06;
v9 = v1[v8];
v10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v9);
v11 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v10);
if v11 != null goto label04;
v12 = new org.apache.commons.lang3.mutable.MutableInt;
specialinvoke v12.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);
virtualinvoke v5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v12);
goto label05;
label04:
virtualinvoke v11.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();
label05:
v8 = v8 + 1;
goto label03;
label06:
v13 = new java.util.BitSet;
specialinvoke v13.<java.util.BitSet: void <init>()>();
v14 = 0;
label07:
v15 = lengthof v0;
if v14 >= v15 goto label10;
v16 = v0[v14];
v17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v16);
v18 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v17);
if v18 == null goto label09;
v19 = virtualinvoke v18.<org.apache.commons.lang3.mutable.MutableInt: int decrementAndGet()>();
if v19 != 0 goto label08;
v20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v16);
virtualinvoke v5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(v20);
label08:
virtualinvoke v13.<java.util.BitSet: void set(int)>(v14);
label09:
v14 = v14 + 1;
goto label07;
label10:
v21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v13);
return v21;
}
public static transient short[] removeElements(short[], short[])
{
org.apache.commons.lang3.mutable.MutableInt v12;
java.util.HashMap v5;
short v16, v9;
java.lang.Short v10, v17, v20;
int v14, v15, v19, v6, v7, v8;
boolean v2, v3;
java.lang.Object v11, v18, v21;
java.util.BitSet v13;
short[] v0, v1, v4;
v0 := @parameter0: short[];
v1 := @parameter1: short[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(short[])>(v0);
if v2 != 0 goto label01;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(short[])>(v1);
if v3 == 0 goto label02;
label01:
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] clone(short[])>(v0);
return v4;
label02:
v5 = new java.util.HashMap;
v6 = lengthof v1;
specialinvoke v5.<java.util.HashMap: void <init>(int)>(v6);
v7 = lengthof v1;
v8 = 0;
label03:
if v8 >= v7 goto label06;
v9 = v1[v8];
v10 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(v9);
v11 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v10);
if v11 != null goto label04;
v12 = new org.apache.commons.lang3.mutable.MutableInt;
specialinvoke v12.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);
virtualinvoke v5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v12);
goto label05;
label04:
virtualinvoke v11.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();
label05:
v8 = v8 + 1;
goto label03;
label06:
v13 = new java.util.BitSet;
specialinvoke v13.<java.util.BitSet: void <init>()>();
v14 = 0;
label07:
v15 = lengthof v0;
if v14 >= v15 goto label10;
v16 = v0[v14];
v17 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(v16);
v18 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v17);
if v18 == null goto label09;
v19 = virtualinvoke v18.<org.apache.commons.lang3.mutable.MutableInt: int decrementAndGet()>();
if v19 != 0 goto label08;
v20 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(v16);
virtualinvoke v5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(v20);
label08:
virtualinvoke v13.<java.util.BitSet: void set(int)>(v14);
label09:
v14 = v14 + 1;
goto label07;
label10:
v21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v13);
return v21;
}
public static transient java.lang.Object[] removeElements(java.lang.Object[], java.lang.Object[])
{
java.lang.Object[] v0, v1, v4;
org.apache.commons.lang3.mutable.MutableInt v11;
java.util.HashMap v5;
int v13, v14, v17, v6, v7, v8;
boolean v2, v3;
java.lang.Object v10, v15, v16, v18, v9;
java.util.BitSet v12;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.Object[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v2 != 0 goto label01;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v1);
if v3 == 0 goto label02;
label01:
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(v0);
return v4;
label02:
v5 = new java.util.HashMap;
v6 = lengthof v1;
specialinvoke v5.<java.util.HashMap: void <init>(int)>(v6);
v7 = lengthof v1;
v8 = 0;
label03:
if v8 >= v7 goto label06;
v9 = v1[v8];
v10 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v9);
if v10 != null goto label04;
v11 = new org.apache.commons.lang3.mutable.MutableInt;
specialinvoke v11.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);
virtualinvoke v5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v11);
goto label05;
label04:
virtualinvoke v10.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();
label05:
v8 = v8 + 1;
goto label03;
label06:
v12 = new java.util.BitSet;
specialinvoke v12.<java.util.BitSet: void <init>()>();
v13 = 0;
label07:
v14 = lengthof v0;
if v13 >= v14 goto label10;
v15 = v0[v13];
v16 = virtualinvoke v5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v15);
if v16 == null goto label09;
v17 = virtualinvoke v16.<org.apache.commons.lang3.mutable.MutableInt: int decrementAndGet()>();
if v17 != 0 goto label08;
virtualinvoke v5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(v15);
label08:
virtualinvoke v12.<java.util.BitSet: void set(int)>(v13);
label09:
v13 = v13 + 1;
goto label07;
label10:
v18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(v0, v12);
return v18;
}
public static void reverse(boolean[])
{
boolean[] v0;
int v1;
v0 := @parameter0: boolean[];
if v0 != null goto label1;
return;
label1:
v1 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(boolean[],int,int)>(v0, 0, v1);
return;
}
public static void reverse(boolean[], int, int)
{
boolean[] v0;
int v1, v2, v3, v4, v5, v6;
boolean v7, v8;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return;
label1:
v3 = staticinvoke <java.lang.Math: int max(int,int)>(v1, 0);
v4 = lengthof v0;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v2);
v6 = v5 - 1;
label2:
if v6 <= v3 goto label3;
v7 = v0[v6];
v8 = v0[v3];
v0[v6] = v8;
v0[v3] = v7;
v6 = v6 - 1;
v3 = v3 + 1;
goto label2;
label3:
return;
}
public static void reverse(byte[])
{
int v1;
byte[] v0;
v0 := @parameter0: byte[];
if v0 != null goto label1;
return;
label1:
v1 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(byte[],int,int)>(v0, 0, v1);
return;
}
public static void reverse(byte[], int, int)
{
byte[] v0;
byte v7, v8;
int v1, v2, v3, v4, v5, v6;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return;
label1:
v3 = staticinvoke <java.lang.Math: int max(int,int)>(v1, 0);
v4 = lengthof v0;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v2);
v6 = v5 - 1;
label2:
if v6 <= v3 goto label3;
v7 = v0[v6];
v8 = v0[v3];
v0[v6] = v8;
v0[v3] = v7;
v6 = v6 - 1;
v3 = v3 + 1;
goto label2;
label3:
return;
}
public static void reverse(char[])
{
int v1;
char[] v0;
v0 := @parameter0: char[];
if v0 != null goto label1;
return;
label1:
v1 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(char[],int,int)>(v0, 0, v1);
return;
}
public static void reverse(char[], int, int)
{
char v7, v8;
int v1, v2, v3, v4, v5, v6;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return;
label1:
v3 = staticinvoke <java.lang.Math: int max(int,int)>(v1, 0);
v4 = lengthof v0;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v2);
v6 = v5 - 1;
label2:
if v6 <= v3 goto label3;
v7 = v0[v6];
v8 = v0[v3];
v0[v6] = v8;
v0[v3] = v7;
v6 = v6 - 1;
v3 = v3 + 1;
goto label2;
label3:
return;
}
public static void reverse(double[])
{
double[] v0;
int v1;
v0 := @parameter0: double[];
if v0 != null goto label1;
return;
label1:
v1 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(double[],int,int)>(v0, 0, v1);
return;
}
public static void reverse(double[], int, int)
{
double[] v0;
int v1, v2, v3, v4, v5, v6;
double v7, v8;
v0 := @parameter0: double[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return;
label1:
v3 = staticinvoke <java.lang.Math: int max(int,int)>(v1, 0);
v4 = lengthof v0;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v2);
v6 = v5 - 1;
label2:
if v6 <= v3 goto label3;
v7 = v0[v6];
v8 = v0[v3];
v0[v6] = v8;
v0[v3] = v7;
v6 = v6 - 1;
v3 = v3 + 1;
goto label2;
label3:
return;
}
public static void reverse(float[])
{
int v1;
float[] v0;
v0 := @parameter0: float[];
if v0 != null goto label1;
return;
label1:
v1 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(float[],int,int)>(v0, 0, v1);
return;
}
public static void reverse(float[], int, int)
{
float[] v0;
int v1, v2, v3, v4, v5, v6;
float v7, v8;
v0 := @parameter0: float[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return;
label1:
v3 = staticinvoke <java.lang.Math: int max(int,int)>(v1, 0);
v4 = lengthof v0;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v2);
v6 = v5 - 1;
label2:
if v6 <= v3 goto label3;
v7 = v0[v6];
v8 = v0[v3];
v0[v6] = v8;
v0[v3] = v7;
v6 = v6 - 1;
v3 = v3 + 1;
goto label2;
label3:
return;
}
public static void reverse(int[])
{
int v1;
int[] v0;
v0 := @parameter0: int[];
if v0 != null goto label1;
return;
label1:
v1 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(int[],int,int)>(v0, 0, v1);
return;
}
public static void reverse(int[], int, int)
{
int[] v0;
int v1, v2, v3, v4, v5, v6, v7, v8;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return;
label1:
v3 = staticinvoke <java.lang.Math: int max(int,int)>(v1, 0);
v4 = lengthof v0;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v2);
v6 = v5 - 1;
label2:
if v6 <= v3 goto label3;
v7 = v0[v6];
v8 = v0[v3];
v0[v6] = v8;
v0[v3] = v7;
v6 = v6 - 1;
v3 = v3 + 1;
goto label2;
label3:
return;
}
public static void reverse(long[])
{
int v1;
long[] v0;
v0 := @parameter0: long[];
if v0 != null goto label1;
return;
label1:
v1 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(long[],int,int)>(v0, 0, v1);
return;
}
public static void reverse(long[], int, int)
{
long v7, v8;
long[] v0;
int v1, v2, v3, v4, v5, v6;
v0 := @parameter0: long[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return;
label1:
v3 = staticinvoke <java.lang.Math: int max(int,int)>(v1, 0);
v4 = lengthof v0;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v2);
v6 = v5 - 1;
label2:
if v6 <= v3 goto label3;
v7 = v0[v6];
v8 = v0[v3];
v0[v6] = v8;
v0[v3] = v7;
v6 = v6 - 1;
v3 = v3 + 1;
goto label2;
label3:
return;
}
public static void reverse(java.lang.Object[])
{
int v1;
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
if v0 != null goto label1;
return;
label1:
v1 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(java.lang.Object[],int,int)>(v0, 0, v1);
return;
}
public static void reverse(java.lang.Object[], int, int)
{
java.lang.Object[] v0;
int v1, v2, v3, v4, v5, v6;
java.lang.Object v7, v8;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return;
label1:
v3 = staticinvoke <java.lang.Math: int max(int,int)>(v1, 0);
v4 = lengthof v0;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v2);
v6 = v5 - 1;
label2:
if v6 <= v3 goto label3;
v7 = v0[v6];
v8 = v0[v3];
v0[v6] = v8;
v0[v3] = v7;
v6 = v6 - 1;
v3 = v3 + 1;
goto label2;
label3:
return;
}
public static void reverse(short[])
{
int v1;
short[] v0;
v0 := @parameter0: short[];
if v0 != null goto label1;
return;
label1:
v1 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(short[],int,int)>(v0, 0, v1);
return;
}
public static void reverse(short[], int, int)
{
short v7, v8;
int v1, v2, v3, v4, v5, v6;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return;
label1:
v3 = staticinvoke <java.lang.Math: int max(int,int)>(v1, 0);
v4 = lengthof v0;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v2);
v6 = v5 - 1;
label2:
if v6 <= v3 goto label3;
v7 = v0[v6];
v8 = v0[v3];
v0[v6] = v8;
v0[v3] = v7;
v6 = v6 - 1;
v3 = v3 + 1;
goto label2;
label3:
return;
}
public static void shift(boolean[], int)
{
boolean[] v0;
int v1, v2;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
if v0 != null goto label1;
return;
label1:
v2 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shift(boolean[],int,int,int)>(v0, 0, v2, v1);
return;
}
public static void shift(boolean[], int, int, int)
{
boolean[] v0;
int v1, v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label01;
return;
label01:
v4 = lengthof v0;
v5 = v4 - 1;
if v1 >= v5 goto label02;
if v2 > 0 goto label03;
label02:
return;
label03:
if v1 >= 0 goto label04;
v1 = 0;
label04:
v6 = lengthof v0;
if v2 < v6 goto label05;
v2 = lengthof v0;
label05:
v7 = v2 - v1;
if v7 > 1 goto label06;
return;
label06:
v8 = v3 % v7;
if v8 >= 0 goto label07;
v8 = v8 + v7;
label07:
if v7 <= 1 goto label10;
if v8 <= 0 goto label10;
v9 = v7 - v8;
if v8 <= v9 goto label08;
v10 = v1 + v7;
v11 = v10 - v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(boolean[],int,int,int)>(v0, v1, v11, v9);
v7 = v8;
v8 = v8 - v9;
goto label07;
label08:
if v8 >= v9 goto label09;
v12 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(boolean[],int,int,int)>(v0, v1, v12, v8);
v1 = v1 + v8;
v7 = v9;
goto label07;
label09:
v13 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(boolean[],int,int,int)>(v0, v1, v13, v8);
label10:
return;
}
public static void shift(byte[], int)
{
int v1, v2;
byte[] v0;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
if v0 != null goto label1;
return;
label1:
v2 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shift(byte[],int,int,int)>(v0, 0, v2, v1);
return;
}
public static void shift(byte[], int, int, int)
{
byte[] v0;
int v1, v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label01;
return;
label01:
v4 = lengthof v0;
v5 = v4 - 1;
if v1 >= v5 goto label02;
if v2 > 0 goto label03;
label02:
return;
label03:
if v1 >= 0 goto label04;
v1 = 0;
label04:
v6 = lengthof v0;
if v2 < v6 goto label05;
v2 = lengthof v0;
label05:
v7 = v2 - v1;
if v7 > 1 goto label06;
return;
label06:
v8 = v3 % v7;
if v8 >= 0 goto label07;
v8 = v8 + v7;
label07:
if v7 <= 1 goto label10;
if v8 <= 0 goto label10;
v9 = v7 - v8;
if v8 <= v9 goto label08;
v10 = v1 + v7;
v11 = v10 - v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(byte[],int,int,int)>(v0, v1, v11, v9);
v7 = v8;
v8 = v8 - v9;
goto label07;
label08:
if v8 >= v9 goto label09;
v12 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(byte[],int,int,int)>(v0, v1, v12, v8);
v1 = v1 + v8;
v7 = v9;
goto label07;
label09:
v13 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(byte[],int,int,int)>(v0, v1, v13, v8);
label10:
return;
}
public static void shift(char[], int)
{
int v1, v2;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
if v0 != null goto label1;
return;
label1:
v2 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shift(char[],int,int,int)>(v0, 0, v2, v1);
return;
}
public static void shift(char[], int, int, int)
{
int v1, v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label01;
return;
label01:
v4 = lengthof v0;
v5 = v4 - 1;
if v1 >= v5 goto label02;
if v2 > 0 goto label03;
label02:
return;
label03:
if v1 >= 0 goto label04;
v1 = 0;
label04:
v6 = lengthof v0;
if v2 < v6 goto label05;
v2 = lengthof v0;
label05:
v7 = v2 - v1;
if v7 > 1 goto label06;
return;
label06:
v8 = v3 % v7;
if v8 >= 0 goto label07;
v8 = v8 + v7;
label07:
if v7 <= 1 goto label10;
if v8 <= 0 goto label10;
v9 = v7 - v8;
if v8 <= v9 goto label08;
v10 = v1 + v7;
v11 = v10 - v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(char[],int,int,int)>(v0, v1, v11, v9);
v7 = v8;
v8 = v8 - v9;
goto label07;
label08:
if v8 >= v9 goto label09;
v12 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(char[],int,int,int)>(v0, v1, v12, v8);
v1 = v1 + v8;
v7 = v9;
goto label07;
label09:
v13 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(char[],int,int,int)>(v0, v1, v13, v8);
label10:
return;
}
public static void shift(double[], int)
{
double[] v0;
int v1, v2;
v0 := @parameter0: double[];
v1 := @parameter1: int;
if v0 != null goto label1;
return;
label1:
v2 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shift(double[],int,int,int)>(v0, 0, v2, v1);
return;
}
public static void shift(double[], int, int, int)
{
double[] v0;
int v1, v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: double[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label01;
return;
label01:
v4 = lengthof v0;
v5 = v4 - 1;
if v1 >= v5 goto label02;
if v2 > 0 goto label03;
label02:
return;
label03:
if v1 >= 0 goto label04;
v1 = 0;
label04:
v6 = lengthof v0;
if v2 < v6 goto label05;
v2 = lengthof v0;
label05:
v7 = v2 - v1;
if v7 > 1 goto label06;
return;
label06:
v8 = v3 % v7;
if v8 >= 0 goto label07;
v8 = v8 + v7;
label07:
if v7 <= 1 goto label10;
if v8 <= 0 goto label10;
v9 = v7 - v8;
if v8 <= v9 goto label08;
v10 = v1 + v7;
v11 = v10 - v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(double[],int,int,int)>(v0, v1, v11, v9);
v7 = v8;
v8 = v8 - v9;
goto label07;
label08:
if v8 >= v9 goto label09;
v12 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(double[],int,int,int)>(v0, v1, v12, v8);
v1 = v1 + v8;
v7 = v9;
goto label07;
label09:
v13 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(double[],int,int,int)>(v0, v1, v13, v8);
label10:
return;
}
public static void shift(float[], int)
{
int v1, v2;
float[] v0;
v0 := @parameter0: float[];
v1 := @parameter1: int;
if v0 != null goto label1;
return;
label1:
v2 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shift(float[],int,int,int)>(v0, 0, v2, v1);
return;
}
public static void shift(float[], int, int, int)
{
float[] v0;
int v1, v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: float[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label01;
return;
label01:
v4 = lengthof v0;
v5 = v4 - 1;
if v1 >= v5 goto label02;
if v2 > 0 goto label03;
label02:
return;
label03:
if v1 >= 0 goto label04;
v1 = 0;
label04:
v6 = lengthof v0;
if v2 < v6 goto label05;
v2 = lengthof v0;
label05:
v7 = v2 - v1;
if v7 > 1 goto label06;
return;
label06:
v8 = v3 % v7;
if v8 >= 0 goto label07;
v8 = v8 + v7;
label07:
if v7 <= 1 goto label10;
if v8 <= 0 goto label10;
v9 = v7 - v8;
if v8 <= v9 goto label08;
v10 = v1 + v7;
v11 = v10 - v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(float[],int,int,int)>(v0, v1, v11, v9);
v7 = v8;
v8 = v8 - v9;
goto label07;
label08:
if v8 >= v9 goto label09;
v12 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(float[],int,int,int)>(v0, v1, v12, v8);
v1 = v1 + v8;
v7 = v9;
goto label07;
label09:
v13 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(float[],int,int,int)>(v0, v1, v13, v8);
label10:
return;
}
public static void shift(int[], int)
{
int v1, v2;
int[] v0;
v0 := @parameter0: int[];
v1 := @parameter1: int;
if v0 != null goto label1;
return;
label1:
v2 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shift(int[],int,int,int)>(v0, 0, v2, v1);
return;
}
public static void shift(int[], int, int, int)
{
int[] v0;
int v1, v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label01;
return;
label01:
v4 = lengthof v0;
v5 = v4 - 1;
if v1 >= v5 goto label02;
if v2 > 0 goto label03;
label02:
return;
label03:
if v1 >= 0 goto label04;
v1 = 0;
label04:
v6 = lengthof v0;
if v2 < v6 goto label05;
v2 = lengthof v0;
label05:
v7 = v2 - v1;
if v7 > 1 goto label06;
return;
label06:
v8 = v3 % v7;
if v8 >= 0 goto label07;
v8 = v8 + v7;
label07:
if v7 <= 1 goto label10;
if v8 <= 0 goto label10;
v9 = v7 - v8;
if v8 <= v9 goto label08;
v10 = v1 + v7;
v11 = v10 - v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(int[],int,int,int)>(v0, v1, v11, v9);
v7 = v8;
v8 = v8 - v9;
goto label07;
label08:
if v8 >= v9 goto label09;
v12 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(int[],int,int,int)>(v0, v1, v12, v8);
v1 = v1 + v8;
v7 = v9;
goto label07;
label09:
v13 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(int[],int,int,int)>(v0, v1, v13, v8);
label10:
return;
}
public static void shift(long[], int)
{
int v1, v2;
long[] v0;
v0 := @parameter0: long[];
v1 := @parameter1: int;
if v0 != null goto label1;
return;
label1:
v2 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shift(long[],int,int,int)>(v0, 0, v2, v1);
return;
}
public static void shift(long[], int, int, int)
{
long[] v0;
int v1, v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: long[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label01;
return;
label01:
v4 = lengthof v0;
v5 = v4 - 1;
if v1 >= v5 goto label02;
if v2 > 0 goto label03;
label02:
return;
label03:
if v1 >= 0 goto label04;
v1 = 0;
label04:
v6 = lengthof v0;
if v2 < v6 goto label05;
v2 = lengthof v0;
label05:
v7 = v2 - v1;
if v7 > 1 goto label06;
return;
label06:
v8 = v3 % v7;
if v8 >= 0 goto label07;
v8 = v8 + v7;
label07:
if v7 <= 1 goto label10;
if v8 <= 0 goto label10;
v9 = v7 - v8;
if v8 <= v9 goto label08;
v10 = v1 + v7;
v11 = v10 - v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(long[],int,int,int)>(v0, v1, v11, v9);
v7 = v8;
v8 = v8 - v9;
goto label07;
label08:
if v8 >= v9 goto label09;
v12 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(long[],int,int,int)>(v0, v1, v12, v8);
v1 = v1 + v8;
v7 = v9;
goto label07;
label09:
v13 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(long[],int,int,int)>(v0, v1, v13, v8);
label10:
return;
}
public static void shift(java.lang.Object[], int)
{
int v1, v2;
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
if v0 != null goto label1;
return;
label1:
v2 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shift(java.lang.Object[],int,int,int)>(v0, 0, v2, v1);
return;
}
public static void shift(java.lang.Object[], int, int, int)
{
java.lang.Object[] v0;
int v1, v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label01;
return;
label01:
v4 = lengthof v0;
v5 = v4 - 1;
if v1 >= v5 goto label02;
if v2 > 0 goto label03;
label02:
return;
label03:
if v1 >= 0 goto label04;
v1 = 0;
label04:
v6 = lengthof v0;
if v2 < v6 goto label05;
v2 = lengthof v0;
label05:
v7 = v2 - v1;
if v7 > 1 goto label06;
return;
label06:
v8 = v3 % v7;
if v8 >= 0 goto label07;
v8 = v8 + v7;
label07:
if v7 <= 1 goto label10;
if v8 <= 0 goto label10;
v9 = v7 - v8;
if v8 <= v9 goto label08;
v10 = v1 + v7;
v11 = v10 - v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(java.lang.Object[],int,int,int)>(v0, v1, v11, v9);
v7 = v8;
v8 = v8 - v9;
goto label07;
label08:
if v8 >= v9 goto label09;
v12 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(java.lang.Object[],int,int,int)>(v0, v1, v12, v8);
v1 = v1 + v8;
v7 = v9;
goto label07;
label09:
v13 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(java.lang.Object[],int,int,int)>(v0, v1, v13, v8);
label10:
return;
}
public static void shift(short[], int)
{
int v1, v2;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: int;
if v0 != null goto label1;
return;
label1:
v2 = lengthof v0;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shift(short[],int,int,int)>(v0, 0, v2, v1);
return;
}
public static void shift(short[], int, int, int)
{
int v1, v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label01;
return;
label01:
v4 = lengthof v0;
v5 = v4 - 1;
if v1 >= v5 goto label02;
if v2 > 0 goto label03;
label02:
return;
label03:
if v1 >= 0 goto label04;
v1 = 0;
label04:
v6 = lengthof v0;
if v2 < v6 goto label05;
v2 = lengthof v0;
label05:
v7 = v2 - v1;
if v7 > 1 goto label06;
return;
label06:
v8 = v3 % v7;
if v8 >= 0 goto label07;
v8 = v8 + v7;
label07:
if v7 <= 1 goto label10;
if v8 <= 0 goto label10;
v9 = v7 - v8;
if v8 <= v9 goto label08;
v10 = v1 + v7;
v11 = v10 - v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(short[],int,int,int)>(v0, v1, v11, v9);
v7 = v8;
v8 = v8 - v9;
goto label07;
label08:
if v8 >= v9 goto label09;
v12 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(short[],int,int,int)>(v0, v1, v12, v8);
v1 = v1 + v8;
v7 = v9;
goto label07;
label09:
v13 = v1 + v9;
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(short[],int,int,int)>(v0, v1, v13, v8);
label10:
return;
}
public static void shuffle(boolean[])
{
boolean[] v0;
java.util.Random v1;
v0 := @parameter0: boolean[];
v1 = new java.util.Random;
specialinvoke v1.<java.util.Random: void <init>()>();
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shuffle(boolean[],java.util.Random)>(v0, v1);
return;
}
public static void shuffle(boolean[], java.util.Random)
{
boolean[] v0;
int v2, v3, v4;
java.util.Random v1;
v0 := @parameter0: boolean[];
v1 := @parameter1: java.util.Random;
v2 = lengthof v0;
label1:
if v2 <= 1 goto label2;
v3 = v2 - 1;
v4 = virtualinvoke v1.<java.util.Random: int nextInt(int)>(v2);
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(boolean[],int,int,int)>(v0, v3, v4, 1);
v2 = v2 - 1;
goto label1;
label2:
return;
}
public static void shuffle(byte[])
{
byte[] v0;
java.util.Random v1;
v0 := @parameter0: byte[];
v1 = new java.util.Random;
specialinvoke v1.<java.util.Random: void <init>()>();
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shuffle(byte[],java.util.Random)>(v0, v1);
return;
}
public static void shuffle(byte[], java.util.Random)
{
byte[] v0;
int v2, v3, v4;
java.util.Random v1;
v0 := @parameter0: byte[];
v1 := @parameter1: java.util.Random;
v2 = lengthof v0;
label1:
if v2 <= 1 goto label2;
v3 = v2 - 1;
v4 = virtualinvoke v1.<java.util.Random: int nextInt(int)>(v2);
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(byte[],int,int,int)>(v0, v3, v4, 1);
v2 = v2 - 1;
goto label1;
label2:
return;
}
public static void shuffle(char[])
{
char[] v0;
java.util.Random v1;
v0 := @parameter0: char[];
v1 = new java.util.Random;
specialinvoke v1.<java.util.Random: void <init>()>();
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shuffle(char[],java.util.Random)>(v0, v1);
return;
}
public static void shuffle(char[], java.util.Random)
{
int v2, v3, v4;
char[] v0;
java.util.Random v1;
v0 := @parameter0: char[];
v1 := @parameter1: java.util.Random;
v2 = lengthof v0;
label1:
if v2 <= 1 goto label2;
v3 = v2 - 1;
v4 = virtualinvoke v1.<java.util.Random: int nextInt(int)>(v2);
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(char[],int,int,int)>(v0, v3, v4, 1);
v2 = v2 - 1;
goto label1;
label2:
return;
}
public static void shuffle(double[])
{
double[] v0;
java.util.Random v1;
v0 := @parameter0: double[];
v1 = new java.util.Random;
specialinvoke v1.<java.util.Random: void <init>()>();
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shuffle(double[],java.util.Random)>(v0, v1);
return;
}
public static void shuffle(double[], java.util.Random)
{
double[] v0;
int v2, v3, v4;
java.util.Random v1;
v0 := @parameter0: double[];
v1 := @parameter1: java.util.Random;
v2 = lengthof v0;
label1:
if v2 <= 1 goto label2;
v3 = v2 - 1;
v4 = virtualinvoke v1.<java.util.Random: int nextInt(int)>(v2);
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(double[],int,int,int)>(v0, v3, v4, 1);
v2 = v2 - 1;
goto label1;
label2:
return;
}
public static void shuffle(float[])
{
float[] v0;
java.util.Random v1;
v0 := @parameter0: float[];
v1 = new java.util.Random;
specialinvoke v1.<java.util.Random: void <init>()>();
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shuffle(float[],java.util.Random)>(v0, v1);
return;
}
public static void shuffle(float[], java.util.Random)
{
int v2, v3, v4;
float[] v0;
java.util.Random v1;
v0 := @parameter0: float[];
v1 := @parameter1: java.util.Random;
v2 = lengthof v0;
label1:
if v2 <= 1 goto label2;
v3 = v2 - 1;
v4 = virtualinvoke v1.<java.util.Random: int nextInt(int)>(v2);
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(float[],int,int,int)>(v0, v3, v4, 1);
v2 = v2 - 1;
goto label1;
label2:
return;
}
public static void shuffle(int[])
{
java.util.Random v1;
int[] v0;
v0 := @parameter0: int[];
v1 = new java.util.Random;
specialinvoke v1.<java.util.Random: void <init>()>();
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shuffle(int[],java.util.Random)>(v0, v1);
return;
}
public static void shuffle(int[], java.util.Random)
{
int[] v0;
int v2, v3, v4;
java.util.Random v1;
v0 := @parameter0: int[];
v1 := @parameter1: java.util.Random;
v2 = lengthof v0;
label1:
if v2 <= 1 goto label2;
v3 = v2 - 1;
v4 = virtualinvoke v1.<java.util.Random: int nextInt(int)>(v2);
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(int[],int,int,int)>(v0, v3, v4, 1);
v2 = v2 - 1;
goto label1;
label2:
return;
}
public static void shuffle(long[])
{
java.util.Random v1;
long[] v0;
v0 := @parameter0: long[];
v1 = new java.util.Random;
specialinvoke v1.<java.util.Random: void <init>()>();
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shuffle(long[],java.util.Random)>(v0, v1);
return;
}
public static void shuffle(long[], java.util.Random)
{
long[] v0;
int v2, v3, v4;
java.util.Random v1;
v0 := @parameter0: long[];
v1 := @parameter1: java.util.Random;
v2 = lengthof v0;
label1:
if v2 <= 1 goto label2;
v3 = v2 - 1;
v4 = virtualinvoke v1.<java.util.Random: int nextInt(int)>(v2);
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(long[],int,int,int)>(v0, v3, v4, 1);
v2 = v2 - 1;
goto label1;
label2:
return;
}
public static void shuffle(java.lang.Object[])
{
java.util.Random v1;
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
v1 = new java.util.Random;
specialinvoke v1.<java.util.Random: void <init>()>();
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shuffle(java.lang.Object[],java.util.Random)>(v0, v1);
return;
}
public static void shuffle(java.lang.Object[], java.util.Random)
{
java.lang.Object[] v0;
int v2, v3, v4;
java.util.Random v1;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.util.Random;
v2 = lengthof v0;
label1:
if v2 <= 1 goto label2;
v3 = v2 - 1;
v4 = virtualinvoke v1.<java.util.Random: int nextInt(int)>(v2);
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(java.lang.Object[],int,int,int)>(v0, v3, v4, 1);
v2 = v2 - 1;
goto label1;
label2:
return;
}
public static void shuffle(short[])
{
java.util.Random v1;
short[] v0;
v0 := @parameter0: short[];
v1 = new java.util.Random;
specialinvoke v1.<java.util.Random: void <init>()>();
staticinvoke <org.apache.commons.lang3.ArrayUtils: void shuffle(short[],java.util.Random)>(v0, v1);
return;
}
public static void shuffle(short[], java.util.Random)
{
int v2, v3, v4;
java.util.Random v1;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: java.util.Random;
v2 = lengthof v0;
label1:
if v2 <= 1 goto label2;
v3 = v2 - 1;
v4 = virtualinvoke v1.<java.util.Random: int nextInt(int)>(v2);
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(short[],int,int,int)>(v0, v3, v4, 1);
v2 = v2 - 1;
goto label1;
label2:
return;
}
public static boolean[] subarray(boolean[], int, int)
{
boolean[] v0, v5, v6;
int v1, v2, v3, v4;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return null;
label1:
if v1 >= 0 goto label2;
v1 = 0;
label2:
v3 = lengthof v0;
if v2 <= v3 goto label3;
v2 = lengthof v0;
label3:
v4 = v2 - v1;
if v4 > 0 goto label4;
v5 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;
return v5;
label4:
v6 = newarray (boolean)[v4];
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v1, v6, 0, v4);
return v6;
}
public static byte[] subarray(byte[], int, int)
{
byte[] v0, v5, v6;
int v1, v2, v3, v4;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return null;
label1:
if v1 >= 0 goto label2;
v1 = 0;
label2:
v3 = lengthof v0;
if v2 <= v3 goto label3;
v2 = lengthof v0;
label3:
v4 = v2 - v1;
if v4 > 0 goto label4;
v5 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;
return v5;
label4:
v6 = newarray (byte)[v4];
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v1, v6, 0, v4);
return v6;
}
public static char[] subarray(char[], int, int)
{
int v1, v2, v3, v4;
char[] v0, v5, v6;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return null;
label1:
if v1 >= 0 goto label2;
v1 = 0;
label2:
v3 = lengthof v0;
if v2 <= v3 goto label3;
v2 = lengthof v0;
label3:
v4 = v2 - v1;
if v4 > 0 goto label4;
v5 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;
return v5;
label4:
v6 = newarray (char)[v4];
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v1, v6, 0, v4);
return v6;
}
public static double[] subarray(double[], int, int)
{
double[] v0, v5, v6;
int v1, v2, v3, v4;
v0 := @parameter0: double[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return null;
label1:
if v1 >= 0 goto label2;
v1 = 0;
label2:
v3 = lengthof v0;
if v2 <= v3 goto label3;
v2 = lengthof v0;
label3:
v4 = v2 - v1;
if v4 > 0 goto label4;
v5 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;
return v5;
label4:
v6 = newarray (double)[v4];
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v1, v6, 0, v4);
return v6;
}
public static float[] subarray(float[], int, int)
{
int v1, v2, v3, v4;
float[] v0, v5, v6;
v0 := @parameter0: float[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return null;
label1:
if v1 >= 0 goto label2;
v1 = 0;
label2:
v3 = lengthof v0;
if v2 <= v3 goto label3;
v2 = lengthof v0;
label3:
v4 = v2 - v1;
if v4 > 0 goto label4;
v5 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;
return v5;
label4:
v6 = newarray (float)[v4];
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v1, v6, 0, v4);
return v6;
}
public static int[] subarray(int[], int, int)
{
int[] v0, v5, v6;
int v1, v2, v3, v4;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return null;
label1:
if v1 >= 0 goto label2;
v1 = 0;
label2:
v3 = lengthof v0;
if v2 <= v3 goto label3;
v2 = lengthof v0;
label3:
v4 = v2 - v1;
if v4 > 0 goto label4;
v5 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;
return v5;
label4:
v6 = newarray (int)[v4];
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v1, v6, 0, v4);
return v6;
}
public static long[] subarray(long[], int, int)
{
long[] v0, v5, v6;
int v1, v2, v3, v4;
v0 := @parameter0: long[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return null;
label1:
if v1 >= 0 goto label2;
v1 = 0;
label2:
v3 = lengthof v0;
if v2 <= v3 goto label3;
v2 = lengthof v0;
label3:
v4 = v2 - v1;
if v4 > 0 goto label4;
v5 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;
return v5;
label4:
v6 = newarray (long)[v4];
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v1, v6, 0, v4);
return v6;
}
public static short[] subarray(short[], int, int)
{
int v1, v2, v3, v4;
short[] v0, v5, v6;
v0 := @parameter0: short[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return null;
label1:
if v1 >= 0 goto label2;
v1 = 0;
label2:
v3 = lengthof v0;
if v2 <= v3 goto label3;
v2 = lengthof v0;
label3:
v4 = v2 - v1;
if v4 > 0 goto label4;
v5 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;
return v5;
label4:
v6 = newarray (short)[v4];
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v1, v6, 0, v4);
return v6;
}
public static java.lang.Object[] subarray(java.lang.Object[], int, int)
{
java.lang.Object[] v0;
int v1, v2, v3, v4;
java.lang.Class v5, v6;
java.lang.Object v7, v8;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return null;
label1:
if v1 >= 0 goto label2;
v1 = 0;
label2:
v3 = lengthof v0;
if v2 <= v3 goto label3;
v2 = lengthof v0;
label3:
v4 = v2 - v1;
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.Class getComponentType()>();
if v4 > 0 goto label4;
v7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v6, 0);
return v7;
label4:
v8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v6, v4);
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v1, v8, 0, v4);
return v8;
}
public static void swap(boolean[], int, int)
{
boolean[] v0;
int v1, v2;
boolean v3;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(v0);
if v3 == 0 goto label1;
return;
label1:
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(boolean[],int,int,int)>(v0, v1, v2, 1);
return;
}
public static void swap(boolean[], int, int, int)
{
int v1, v10, v11, v12, v13, v2, v3, v5, v6, v7, v8, v9;
boolean v14, v15, v4;
boolean[] v0;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(v0);
if v4 != 0 goto label1;
v5 = lengthof v0;
if v1 >= v5 goto label1;
v6 = lengthof v0;
if v2 < v6 goto label2;
label1:
return;
label2:
if v1 >= 0 goto label3;
v1 = 0;
label3:
if v2 >= 0 goto label4;
v2 = 0;
label4:
v7 = lengthof v0;
v8 = v7 - v1;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v8);
v10 = lengthof v0;
v11 = v10 - v2;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v11);
v13 = 0;
label5:
if v13 >= v12 goto label6;
v14 = v0[v1];
v15 = v0[v2];
v0[v1] = v15;
v0[v2] = v14;
v13 = v13 + 1;
v1 = v1 + 1;
v2 = v2 + 1;
goto label5;
label6:
return;
}
public static void swap(byte[], int, int)
{
byte[] v0;
int v1, v2;
boolean v3;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(byte[])>(v0);
if v3 == 0 goto label1;
return;
label1:
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(byte[],int,int,int)>(v0, v1, v2, 1);
return;
}
public static void swap(byte[], int, int, int)
{
byte[] v0;
byte v14, v15;
int v1, v10, v11, v12, v13, v2, v3, v5, v6, v7, v8, v9;
boolean v4;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(byte[])>(v0);
if v4 != 0 goto label1;
v5 = lengthof v0;
if v1 >= v5 goto label1;
v6 = lengthof v0;
if v2 < v6 goto label2;
label1:
return;
label2:
if v1 >= 0 goto label3;
v1 = 0;
label3:
if v2 >= 0 goto label4;
v2 = 0;
label4:
v7 = lengthof v0;
v8 = v7 - v1;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v8);
v10 = lengthof v0;
v11 = v10 - v2;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v11);
v13 = 0;
label5:
if v13 >= v12 goto label6;
v14 = v0[v1];
v15 = v0[v2];
v0[v1] = v15;
v0[v2] = v14;
v13 = v13 + 1;
v1 = v1 + 1;
v2 = v2 + 1;
goto label5;
label6:
return;
}
public static void swap(char[], int, int)
{
int v1, v2;
char[] v0;
boolean v3;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(v0);
if v3 == 0 goto label1;
return;
label1:
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(char[],int,int,int)>(v0, v1, v2, 1);
return;
}
public static void swap(char[], int, int, int)
{
int v1, v10, v11, v12, v13, v2, v3, v5, v6, v7, v8, v9;
boolean v4;
char v14, v15;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(v0);
if v4 != 0 goto label1;
v5 = lengthof v0;
if v1 >= v5 goto label1;
v6 = lengthof v0;
if v2 < v6 goto label2;
label1:
return;
label2:
if v1 >= 0 goto label3;
v1 = 0;
label3:
if v2 >= 0 goto label4;
v2 = 0;
label4:
v7 = lengthof v0;
v8 = v7 - v1;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v8);
v10 = lengthof v0;
v11 = v10 - v2;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v11);
v13 = 0;
label5:
if v13 >= v12 goto label6;
v14 = v0[v1];
v15 = v0[v2];
v0[v1] = v15;
v0[v2] = v14;
v13 = v13 + 1;
v1 = v1 + 1;
v2 = v2 + 1;
goto label5;
label6:
return;
}
public static void swap(double[], int, int)
{
double[] v0;
int v1, v2;
boolean v3;
v0 := @parameter0: double[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(v0);
if v3 == 0 goto label1;
return;
label1:
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(double[],int,int,int)>(v0, v1, v2, 1);
return;
}
public static void swap(double[], int, int, int)
{
double[] v0;
int v1, v10, v11, v12, v13, v2, v3, v5, v6, v7, v8, v9;
boolean v4;
double v14, v15;
v0 := @parameter0: double[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(v0);
if v4 != 0 goto label1;
v5 = lengthof v0;
if v1 >= v5 goto label1;
v6 = lengthof v0;
if v2 < v6 goto label2;
label1:
return;
label2:
if v1 >= 0 goto label3;
v1 = 0;
label3:
if v2 >= 0 goto label4;
v2 = 0;
label4:
v7 = lengthof v0;
v8 = v7 - v1;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v8);
v10 = lengthof v0;
v11 = v10 - v2;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v11);
v13 = 0;
label5:
if v13 >= v12 goto label6;
v14 = v0[v1];
v15 = v0[v2];
v0[v1] = v15;
v0[v2] = v14;
v13 = v13 + 1;
v1 = v1 + 1;
v2 = v2 + 1;
goto label5;
label6:
return;
}
public static void swap(float[], int, int)
{
int v1, v2;
float[] v0;
boolean v3;
v0 := @parameter0: float[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(v0);
if v3 == 0 goto label1;
return;
label1:
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(float[],int,int,int)>(v0, v1, v2, 1);
return;
}
public static void swap(float[], int, int, int)
{
float[] v0;
int v1, v10, v11, v12, v13, v2, v3, v5, v6, v7, v8, v9;
boolean v4;
float v14, v15;
v0 := @parameter0: float[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(v0);
if v4 != 0 goto label1;
v5 = lengthof v0;
if v1 >= v5 goto label1;
v6 = lengthof v0;
if v2 < v6 goto label2;
label1:
return;
label2:
if v1 >= 0 goto label3;
v1 = 0;
label3:
if v2 >= 0 goto label4;
v2 = 0;
label4:
v7 = lengthof v0;
v8 = v7 - v1;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v8);
v10 = lengthof v0;
v11 = v10 - v2;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v11);
v13 = 0;
label5:
if v13 >= v12 goto label6;
v14 = v0[v1];
v15 = v0[v2];
v0[v1] = v15;
v0[v2] = v14;
v13 = v13 + 1;
v1 = v1 + 1;
v2 = v2 + 1;
goto label5;
label6:
return;
}
public static void swap(int[], int, int)
{
int[] v0;
int v1, v2;
boolean v3;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(int[])>(v0);
if v3 == 0 goto label1;
return;
label1:
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(int[],int,int,int)>(v0, v1, v2, 1);
return;
}
public static void swap(int[], int, int, int)
{
int[] v0;
int v1, v10, v11, v12, v13, v14, v15, v2, v3, v5, v6, v7, v8, v9;
boolean v4;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(int[])>(v0);
if v4 != 0 goto label1;
v5 = lengthof v0;
if v1 >= v5 goto label1;
v6 = lengthof v0;
if v2 < v6 goto label2;
label1:
return;
label2:
if v1 >= 0 goto label3;
v1 = 0;
label3:
if v2 >= 0 goto label4;
v2 = 0;
label4:
v7 = lengthof v0;
v8 = v7 - v1;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v8);
v10 = lengthof v0;
v11 = v10 - v2;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v11);
v13 = 0;
label5:
if v13 >= v12 goto label6;
v14 = v0[v1];
v15 = v0[v2];
v0[v1] = v15;
v0[v2] = v14;
v13 = v13 + 1;
v1 = v1 + 1;
v2 = v2 + 1;
goto label5;
label6:
return;
}
public static void swap(long[], int, int)
{
long[] v0;
int v1, v2;
boolean v3;
v0 := @parameter0: long[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(long[])>(v0);
if v3 == 0 goto label1;
return;
label1:
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(long[],int,int,int)>(v0, v1, v2, 1);
return;
}
public static void swap(long[], int, int, int)
{
long v14, v15;
long[] v0;
int v1, v10, v11, v12, v13, v2, v3, v5, v6, v7, v8, v9;
boolean v4;
v0 := @parameter0: long[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(long[])>(v0);
if v4 != 0 goto label1;
v5 = lengthof v0;
if v1 >= v5 goto label1;
v6 = lengthof v0;
if v2 < v6 goto label2;
label1:
return;
label2:
if v1 >= 0 goto label3;
v1 = 0;
label3:
if v2 >= 0 goto label4;
v2 = 0;
label4:
v7 = lengthof v0;
v8 = v7 - v1;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v8);
v10 = lengthof v0;
v11 = v10 - v2;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v11);
v13 = 0;
label5:
if v13 >= v12 goto label6;
v14 = v0[v1];
v15 = v0[v2];
v0[v1] = v15;
v0[v2] = v14;
v13 = v13 + 1;
v1 = v1 + 1;
v2 = v2 + 1;
goto label5;
label6:
return;
}
public static void swap(java.lang.Object[], int, int)
{
java.lang.Object[] v0;
int v1, v2;
boolean v3;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v3 == 0 goto label1;
return;
label1:
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(java.lang.Object[],int,int,int)>(v0, v1, v2, 1);
return;
}
public static void swap(java.lang.Object[], int, int, int)
{
java.lang.Object[] v0;
int v1, v10, v11, v12, v13, v2, v3, v5, v6, v7, v8, v9;
boolean v4;
java.lang.Object v14, v15;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v4 != 0 goto label1;
v5 = lengthof v0;
if v1 >= v5 goto label1;
v6 = lengthof v0;
if v2 < v6 goto label2;
label1:
return;
label2:
if v1 >= 0 goto label3;
v1 = 0;
label3:
if v2 >= 0 goto label4;
v2 = 0;
label4:
v7 = lengthof v0;
v8 = v7 - v1;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v8);
v10 = lengthof v0;
v11 = v10 - v2;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v11);
v13 = 0;
label5:
if v13 >= v12 goto label6;
v14 = v0[v1];
v15 = v0[v2];
v0[v1] = v15;
v0[v2] = v14;
v13 = v13 + 1;
v1 = v1 + 1;
v2 = v2 + 1;
goto label5;
label6:
return;
}
public static void swap(short[], int, int)
{
int v1, v2;
short[] v0;
boolean v3;
v0 := @parameter0: short[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(short[])>(v0);
if v3 == 0 goto label1;
return;
label1:
staticinvoke <org.apache.commons.lang3.ArrayUtils: void swap(short[],int,int,int)>(v0, v1, v2, 1);
return;
}
public static void swap(short[], int, int, int)
{
short v14, v15;
int v1, v10, v11, v12, v13, v2, v3, v5, v6, v7, v8, v9;
boolean v4;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(short[])>(v0);
if v4 != 0 goto label1;
v5 = lengthof v0;
if v1 >= v5 goto label1;
v6 = lengthof v0;
if v2 < v6 goto label2;
label1:
return;
label2:
if v1 >= 0 goto label3;
v1 = 0;
label3:
if v2 >= 0 goto label4;
v2 = 0;
label4:
if v1 != v2 goto label5;
return;
label5:
v7 = lengthof v0;
v8 = v7 - v1;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v8);
v10 = lengthof v0;
v11 = v10 - v2;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v11);
v13 = 0;
label6:
if v13 >= v12 goto label7;
v14 = v0[v1];
v15 = v0[v2];
v0[v1] = v15;
v0[v2] = v14;
v13 = v13 + 1;
v1 = v1 + 1;
v2 = v2 + 1;
goto label6;
label7:
return;
}
public static transient java.lang.Object[] toArray(java.lang.Object[])
{
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
return v0;
}
public static java.util.Map toMap(java.lang.Object[])
{
java.lang.Object[] v0;
java.util.HashMap v1;
int v11, v2, v4, v5;
java.lang.String v13, v17;
boolean v10, v7;
double v3;
java.lang.IllegalArgumentException v12, v16;
java.lang.Object v14, v15, v6, v8, v9;
v0 := @parameter0: java.lang.Object[];
if v0 != null goto label1;
return null;
label1:
v1 = new java.util.HashMap;
v2 = lengthof v0;
v3 = v2 * 1.5;
specialinvoke v1.<java.util.HashMap: void <init>(int)>(v3);
v4 = 0;
label2:
v5 = lengthof v0;
if v4 >= v5 goto label7;
v6 = v0[v4];
v7 = v6 instanceof java.util.Map$Entry;
if v7 == 0 goto label3;
v8 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v9);
goto label6;
label3:
v10 = v6 instanceof java.lang.Object[];
if v10 == 0 goto label5;
v11 = lengthof v6;
if v11 >= 2 goto label4;
v12 = new java.lang.IllegalArgumentException;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.lang.Object)>(v4, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Array element \u0001, \'\u0001\', has a length less than 2");
specialinvoke v12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v13);
throw v12;
label4:
v14 = v6[0];
v15 = v6[1];
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v14, v15);
goto label6;
label5:
v16 = new java.lang.IllegalArgumentException;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.lang.Object)>(v4, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Array element \u0001, \'\u0001\', is neither of type Map.Entry nor an Array");
specialinvoke v16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v17);
throw v16;
label6:
v4 = v4 + 1;
goto label2;
label7:
return v1;
}
public static java.lang.Boolean[] toObject(boolean[])
{
boolean[] v0;
java.lang.Boolean[] v2, v4;
int v1, v3, v5, v6, v7;
java.lang.Boolean v9;
boolean v8;
v0 := @parameter0: boolean[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (java.lang.Boolean)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label6;
v7 = v5;
v8 = v0[v5];
if v8 == 0 goto label4;
v9 = <java.lang.Boolean: java.lang.Boolean TRUE>;
goto label5;
label4:
v9 = <java.lang.Boolean: java.lang.Boolean FALSE>;
label5:
v4[v7] = v9;
v5 = v5 + 1;
goto label3;
label6:
return v4;
}
public static java.lang.Byte[] toObject(byte[])
{
byte[] v0;
java.lang.Byte[] v2, v4;
byte v7;
int v1, v3, v5, v6;
java.lang.Byte v8;
v0 := @parameter0: byte[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (java.lang.Byte)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v7);
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static java.lang.Character[] toObject(char[])
{
char v7;
java.lang.Character v8;
int v1, v3, v5, v6;
char[] v0;
java.lang.Character[] v2, v4;
v0 := @parameter0: char[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (java.lang.Character)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v7);
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static java.lang.Double[] toObject(double[])
{
java.lang.Double v8;
double[] v0;
java.lang.Double[] v2, v4;
int v1, v3, v5, v6;
double v7;
v0 := @parameter0: double[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (java.lang.Double)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v7);
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static java.lang.Float[] toObject(float[])
{
java.lang.Float v8;
float[] v0;
int v1, v3, v5, v6;
float v7;
java.lang.Float[] v2, v4;
v0 := @parameter0: float[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (java.lang.Float)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(v7);
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static java.lang.Integer[] toObject(int[])
{
java.lang.Integer v8;
int[] v0;
int v1, v3, v5, v6, v7;
java.lang.Integer[] v2, v4;
v0 := @parameter0: int[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (java.lang.Integer)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v7);
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static java.lang.Long[] toObject(long[])
{
java.lang.Long[] v2, v4;
long v7;
long[] v0;
java.lang.Long v8;
int v1, v3, v5, v6;
v0 := @parameter0: long[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (java.lang.Long)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v7);
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static java.lang.Short[] toObject(short[])
{
java.lang.Short[] v2, v4;
short v7;
java.lang.Short v8;
int v1, v3, v5, v6;
short[] v0;
v0 := @parameter0: short[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (java.lang.Short)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(v7);
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static boolean[] toPrimitive(java.lang.Boolean[])
{
boolean[] v2, v4;
java.lang.Boolean[] v0;
int v1, v3, v5, v6;
java.lang.Boolean v7;
boolean v8;
v0 := @parameter0: java.lang.Boolean[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (boolean)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = virtualinvoke v7.<java.lang.Boolean: boolean booleanValue()>();
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static boolean[] toPrimitive(java.lang.Boolean[], boolean)
{
boolean[] v3, v5;
java.lang.Boolean[] v0;
int v2, v4, v6, v7, v9;
java.lang.Boolean v8;
boolean v1, v10;
v0 := @parameter0: java.lang.Boolean[];
v1 := @parameter1: boolean;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
if v2 != 0 goto label2;
v3 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;
return v3;
label2:
v4 = lengthof v0;
v5 = newarray (boolean)[v4];
v6 = 0;
label3:
v7 = lengthof v0;
if v6 >= v7 goto label6;
v8 = v0[v6];
v9 = v6;
if v8 != null goto label4;
v10 = v1;
goto label5;
label4:
v10 = virtualinvoke v8.<java.lang.Boolean: boolean booleanValue()>();
label5:
v5[v9] = v10;
v6 = v6 + 1;
goto label3;
label6:
return v5;
}
public static byte[] toPrimitive(java.lang.Byte[])
{
byte[] v2, v4;
java.lang.Byte[] v0;
byte v8;
int v1, v3, v5, v6;
java.lang.Byte v7;
v0 := @parameter0: java.lang.Byte[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (byte)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = virtualinvoke v7.<java.lang.Byte: byte byteValue()>();
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static byte[] toPrimitive(java.lang.Byte[], byte)
{
byte[] v3, v5;
java.lang.Byte[] v0;
byte v1, v10;
int v2, v4, v6, v7, v9;
java.lang.Byte v8;
v0 := @parameter0: java.lang.Byte[];
v1 := @parameter1: byte;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
if v2 != 0 goto label2;
v3 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;
return v3;
label2:
v4 = lengthof v0;
v5 = newarray (byte)[v4];
v6 = 0;
label3:
v7 = lengthof v0;
if v6 >= v7 goto label6;
v8 = v0[v6];
v9 = v6;
if v8 != null goto label4;
v10 = v1;
goto label5;
label4:
v10 = virtualinvoke v8.<java.lang.Byte: byte byteValue()>();
label5:
v5[v9] = v10;
v6 = v6 + 1;
goto label3;
label6:
return v5;
}
public static char[] toPrimitive(java.lang.Character[])
{
char v8;
java.lang.Character v7;
int v1, v3, v5, v6;
char[] v2, v4;
java.lang.Character[] v0;
v0 := @parameter0: java.lang.Character[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (char)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = virtualinvoke v7.<java.lang.Character: char charValue()>();
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static char[] toPrimitive(java.lang.Character[], char)
{
char v1, v10;
java.lang.Character v8;
int v2, v4, v6, v7, v9;
char[] v3, v5;
java.lang.Character[] v0;
v0 := @parameter0: java.lang.Character[];
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
if v2 != 0 goto label2;
v3 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;
return v3;
label2:
v4 = lengthof v0;
v5 = newarray (char)[v4];
v6 = 0;
label3:
v7 = lengthof v0;
if v6 >= v7 goto label6;
v8 = v0[v6];
v9 = v6;
if v8 != null goto label4;
v10 = v1;
goto label5;
label4:
v10 = virtualinvoke v8.<java.lang.Character: char charValue()>();
label5:
v5[v9] = v10;
v6 = v6 + 1;
goto label3;
label6:
return v5;
}
public static double[] toPrimitive(java.lang.Double[])
{
java.lang.Double v7;
double[] v2, v4;
java.lang.Double[] v0;
int v1, v3, v5, v6;
double v8;
v0 := @parameter0: java.lang.Double[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (double)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = virtualinvoke v7.<java.lang.Double: double doubleValue()>();
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static double[] toPrimitive(java.lang.Double[], double)
{
java.lang.Double v8;
double[] v3, v5;
java.lang.Double[] v0;
int v2, v4, v6, v7, v9;
double v1, v10;
v0 := @parameter0: java.lang.Double[];
v1 := @parameter1: double;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
if v2 != 0 goto label2;
v3 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;
return v3;
label2:
v4 = lengthof v0;
v5 = newarray (double)[v4];
v6 = 0;
label3:
v7 = lengthof v0;
if v6 >= v7 goto label6;
v8 = v0[v6];
v9 = v6;
if v8 != null goto label4;
v10 = v1;
goto label5;
label4:
v10 = virtualinvoke v8.<java.lang.Double: double doubleValue()>();
label5:
v5[v9] = v10;
v6 = v6 + 1;
goto label3;
label6:
return v5;
}
public static float[] toPrimitive(java.lang.Float[])
{
java.lang.Float v7;
float[] v2, v4;
int v1, v3, v5, v6;
float v8;
java.lang.Float[] v0;
v0 := @parameter0: java.lang.Float[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (float)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = virtualinvoke v7.<java.lang.Float: float floatValue()>();
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static float[] toPrimitive(java.lang.Float[], float)
{
java.lang.Float v8;
float[] v3, v5;
int v2, v4, v6, v7, v9;
float v1, v10;
java.lang.Float[] v0;
v0 := @parameter0: java.lang.Float[];
v1 := @parameter1: float;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
if v2 != 0 goto label2;
v3 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;
return v3;
label2:
v4 = lengthof v0;
v5 = newarray (float)[v4];
v6 = 0;
label3:
v7 = lengthof v0;
if v6 >= v7 goto label6;
v8 = v0[v6];
v9 = v6;
if v8 != null goto label4;
v10 = v1;
goto label5;
label4:
v10 = virtualinvoke v8.<java.lang.Float: float floatValue()>();
label5:
v5[v9] = v10;
v6 = v6 + 1;
goto label3;
label6:
return v5;
}
public static int[] toPrimitive(java.lang.Integer[])
{
java.lang.Integer v7;
int[] v2, v4;
int v1, v3, v5, v6, v8;
java.lang.Integer[] v0;
v0 := @parameter0: java.lang.Integer[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (int)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = virtualinvoke v7.<java.lang.Integer: int intValue()>();
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static int[] toPrimitive(java.lang.Integer[], int)
{
java.lang.Integer v8;
int[] v3, v5;
int v1, v10, v2, v4, v6, v7, v9;
java.lang.Integer[] v0;
v0 := @parameter0: java.lang.Integer[];
v1 := @parameter1: int;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
if v2 != 0 goto label2;
v3 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;
return v3;
label2:
v4 = lengthof v0;
v5 = newarray (int)[v4];
v6 = 0;
label3:
v7 = lengthof v0;
if v6 >= v7 goto label6;
v8 = v0[v6];
v9 = v6;
if v8 != null goto label4;
v10 = v1;
goto label5;
label4:
v10 = virtualinvoke v8.<java.lang.Integer: int intValue()>();
label5:
v5[v9] = v10;
v6 = v6 + 1;
goto label3;
label6:
return v5;
}
public static long[] toPrimitive(java.lang.Long[])
{
java.lang.Long[] v0;
long v8;
long[] v2, v4;
java.lang.Long v7;
int v1, v3, v5, v6;
v0 := @parameter0: java.lang.Long[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (long)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = virtualinvoke v7.<java.lang.Long: long longValue()>();
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static long[] toPrimitive(java.lang.Long[], long)
{
java.lang.Long[] v0;
long v1, v10;
long[] v3, v5;
java.lang.Long v8;
int v2, v4, v6, v7, v9;
v0 := @parameter0: java.lang.Long[];
v1 := @parameter1: long;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
if v2 != 0 goto label2;
v3 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;
return v3;
label2:
v4 = lengthof v0;
v5 = newarray (long)[v4];
v6 = 0;
label3:
v7 = lengthof v0;
if v6 >= v7 goto label6;
v8 = v0[v6];
v9 = v6;
if v8 != null goto label4;
v10 = v1;
goto label5;
label4:
v10 = virtualinvoke v8.<java.lang.Long: long longValue()>();
label5:
v5[v9] = v10;
v6 = v6 + 1;
goto label3;
label6:
return v5;
}
public static java.lang.Object toPrimitive(java.lang.Object)
{
byte[] v12;
double[] v24;
float[] v27;
long[] v18;
int[] v15;
boolean v11, v14, v17, v20, v23, v26, v5, v8;
boolean[] v6;
char[] v9;
java.lang.Class v1, v10, v13, v16, v19, v2, v22, v25, v3, v4, v7;
java.lang.Object v0;
short[] v21;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.Class getComponentType()>();
v3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class wrapperToPrimitive(java.lang.Class)>(v2);
v4 = <java.lang.Boolean: java.lang.Class TYPE>;
v5 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v5 == 0 goto label2;
v6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] toPrimitive(java.lang.Boolean[])>(v0);
return v6;
label2:
v7 = <java.lang.Character: java.lang.Class TYPE>;
v8 = virtualinvoke v7.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v8 == 0 goto label3;
v9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] toPrimitive(java.lang.Character[])>(v0);
return v9;
label3:
v10 = <java.lang.Byte: java.lang.Class TYPE>;
v11 = virtualinvoke v10.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v11 == 0 goto label4;
v12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] toPrimitive(java.lang.Byte[])>(v0);
return v12;
label4:
v13 = <java.lang.Integer: java.lang.Class TYPE>;
v14 = virtualinvoke v13.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v14 == 0 goto label5;
v15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] toPrimitive(java.lang.Integer[])>(v0);
return v15;
label5:
v16 = <java.lang.Long: java.lang.Class TYPE>;
v17 = virtualinvoke v16.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v17 == 0 goto label6;
v18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] toPrimitive(java.lang.Long[])>(v0);
return v18;
label6:
v19 = <java.lang.Short: java.lang.Class TYPE>;
v20 = virtualinvoke v19.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v20 == 0 goto label7;
v21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] toPrimitive(java.lang.Short[])>(v0);
return v21;
label7:
v22 = <java.lang.Double: java.lang.Class TYPE>;
v23 = virtualinvoke v22.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v23 == 0 goto label8;
v24 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] toPrimitive(java.lang.Double[])>(v0);
return v24;
label8:
v25 = <java.lang.Float: java.lang.Class TYPE>;
v26 = virtualinvoke v25.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v26 == 0 goto label9;
v27 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] toPrimitive(java.lang.Float[])>(v0);
return v27;
label9:
return v0;
}
public static short[] toPrimitive(java.lang.Short[])
{
java.lang.Short[] v0;
short v8;
java.lang.Short v7;
int v1, v3, v5, v6;
short[] v2, v4;
v0 := @parameter0: java.lang.Short[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (short)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = virtualinvoke v7.<java.lang.Short: short shortValue()>();
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static short[] toPrimitive(java.lang.Short[], short)
{
java.lang.Short[] v0;
short v1, v10;
java.lang.Short v8;
int v2, v4, v6, v7, v9;
short[] v3, v5;
v0 := @parameter0: java.lang.Short[];
v1 := @parameter1: short;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
if v2 != 0 goto label2;
v3 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;
return v3;
label2:
v4 = lengthof v0;
v5 = newarray (short)[v4];
v6 = 0;
label3:
v7 = lengthof v0;
if v6 >= v7 goto label6;
v8 = v0[v6];
v9 = v6;
if v8 != null goto label4;
v10 = v1;
goto label5;
label4:
v10 = virtualinvoke v8.<java.lang.Short: short shortValue()>();
label5:
v5[v9] = v10;
v6 = v6 + 1;
goto label3;
label6:
return v5;
}
public static java.lang.String toString(java.lang.Object)
{
java.lang.Object v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object,java.lang.String)>(v0, "{}");
return v1;
}
public static java.lang.String toString(java.lang.Object, java.lang.String)
{
org.apache.commons.lang3.builder.ToStringBuilder v2, v4;
org.apache.commons.lang3.builder.ToStringStyle v3;
java.lang.Object v0;
java.lang.String v1, v5;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return v1;
label1:
v2 = new org.apache.commons.lang3.builder.ToStringBuilder;
v3 = <org.apache.commons.lang3.builder.ToStringStyle: org.apache.commons.lang3.builder.ToStringStyle SIMPLE_STYLE>;
specialinvoke v2.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)>(v0, v3);
v4 = virtualinvoke v2.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(v0);
v5 = virtualinvoke v4.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();
return v5;
}
public static java.lang.String[] toStringArray(java.lang.Object[])
{
java.lang.Object[] v0;
java.lang.String[] v2, v4;
int v1, v3, v5, v6;
java.lang.Object v7;
java.lang.String v8;
v0 := @parameter0: java.lang.Object[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (java.lang.String)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label4;
v7 = v0[v5];
v8 = virtualinvoke v7.<java.lang.Object: java.lang.String toString()>();
v4[v5] = v8;
v5 = v5 + 1;
goto label3;
label4:
return v4;
}
public static java.lang.String[] toStringArray(java.lang.Object[], java.lang.String)
{
java.lang.Object[] v0;
java.lang.String[] v3, v5;
int v2, v4, v6, v7, v9;
java.lang.Object v8;
java.lang.String v1, v10;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.String;
if null != v0 goto label1;
return null;
label1:
v2 = lengthof v0;
if v2 != 0 goto label2;
v3 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
return v3;
label2:
v4 = lengthof v0;
v5 = newarray (java.lang.String)[v4];
v6 = 0;
label3:
v7 = lengthof v0;
if v6 >= v7 goto label6;
v8 = v0[v6];
v9 = v6;
if v8 != null goto label4;
v10 = v1;
goto label5;
label4:
v10 = virtualinvoke v8.<java.lang.Object: java.lang.String toString()>();
label5:
v5[v9] = v10;
v6 = v6 + 1;
goto label3;
label6:
return v5;
}
public void <init>()
{
org.apache.commons.lang3.ArrayUtils v0;
v0 := @this: org.apache.commons.lang3.ArrayUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
byte[] v2;
java.lang.Object[] v17;
java.lang.Short[] v19;
double[] v7;
float[] v10;
java.lang.String[] v20;
java.lang.reflect.Method[] v16;
long[] v14;
int[] v12;
java.lang.Long[] v15;
boolean[] v0;
java.lang.Double[] v8;
java.lang.Class[] v6;
java.lang.Boolean[] v1;
java.lang.reflect.Field[] v9;
java.lang.Byte[] v3;
java.lang.Throwable[] v21;
java.lang.reflect.Type[] v22;
char[] v4;
java.lang.Character[] v5;
short[] v18;
java.lang.Float[] v11;
java.lang.Integer[] v13;
v0 = newarray (boolean)[0];
<org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY> = v0;
v1 = newarray (java.lang.Boolean)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY> = v1;
v2 = newarray (byte)[0];
<org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY> = v2;
v3 = newarray (java.lang.Byte)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY> = v3;
v4 = newarray (char)[0];
<org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY> = v4;
v5 = newarray (java.lang.Character)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY> = v5;
v6 = newarray (java.lang.Class)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY> = v6;
v7 = newarray (double)[0];
<org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY> = v7;
v8 = newarray (java.lang.Double)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY> = v8;
v9 = newarray (java.lang.reflect.Field)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.reflect.Field[] EMPTY_FIELD_ARRAY> = v9;
v10 = newarray (float)[0];
<org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY> = v10;
v11 = newarray (java.lang.Float)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY> = v11;
v12 = newarray (int)[0];
<org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY> = v12;
v13 = newarray (java.lang.Integer)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY> = v13;
v14 = newarray (long)[0];
<org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY> = v14;
v15 = newarray (java.lang.Long)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY> = v15;
v16 = newarray (java.lang.reflect.Method)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.reflect.Method[] EMPTY_METHOD_ARRAY> = v16;
v17 = newarray (java.lang.Object)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY> = v17;
v18 = newarray (short)[0];
<org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY> = v18;
v19 = newarray (java.lang.Short)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY> = v19;
v20 = newarray (java.lang.String)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY> = v20;
v21 = newarray (java.lang.Throwable)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.Throwable[] EMPTY_THROWABLE_ARRAY> = v21;
v22 = newarray (java.lang.reflect.Type)[0];
<org.apache.commons.lang3.ArrayUtils: java.lang.reflect.Type[] EMPTY_TYPE_ARRAY> = v22;
return;
}
}