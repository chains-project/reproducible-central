public final class org.apache.commons.lang3.Range extends java.lang.Object implements java.io.Serializable
{
private static final long serialVersionUID;
private final java.util.Comparator comparator;
private transient int hashCode;
private final java.lang.Object maximum;
private final java.lang.Object minimum;
private transient java.lang.String toString;
public static org.apache.commons.lang3.Range between(java.lang.Comparable, java.lang.Comparable)
{
java.lang.Comparable v0, v1;
org.apache.commons.lang3.Range v2;
v0 := @parameter0: java.lang.Comparable;
v1 := @parameter1: java.lang.Comparable;
v2 = staticinvoke <org.apache.commons.lang3.Range: org.apache.commons.lang3.Range between(java.lang.Object,java.lang.Object,java.util.Comparator)>(v0, v1, null);
return v2;
}
public static org.apache.commons.lang3.Range between(java.lang.Object, java.lang.Object, java.util.Comparator)
{
java.lang.Object v0, v1;
java.util.Comparator v2;
org.apache.commons.lang3.Range v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.util.Comparator;
v3 = new org.apache.commons.lang3.Range;
specialinvoke v3.<org.apache.commons.lang3.Range: void <init>(java.lang.Object,java.lang.Object,java.util.Comparator)>(v0, v1, v2);
return v3;
}
public static org.apache.commons.lang3.Range is(java.lang.Comparable)
{
java.lang.Comparable v0;
org.apache.commons.lang3.Range v1;
v0 := @parameter0: java.lang.Comparable;
v1 = staticinvoke <org.apache.commons.lang3.Range: org.apache.commons.lang3.Range between(java.lang.Object,java.lang.Object,java.util.Comparator)>(v0, v0, null);
return v1;
}
public static org.apache.commons.lang3.Range is(java.lang.Object, java.util.Comparator)
{
java.lang.Object v0;
java.util.Comparator v1;
org.apache.commons.lang3.Range v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.util.Comparator;
v2 = staticinvoke <org.apache.commons.lang3.Range: org.apache.commons.lang3.Range between(java.lang.Object,java.lang.Object,java.util.Comparator)>(v0, v0, v1);
return v2;
}
private void <init>(java.lang.Object, java.lang.Object, java.util.Comparator)
{
org.apache.commons.lang3.Range$ComparableComparator v6;
java.lang.IllegalArgumentException v4;
int v8;
java.lang.Object v1, v2;
java.lang.String v5;
java.util.Comparator v3, v7;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.util.Comparator;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 == null goto label1;
if v2 != null goto label2;
label1:
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,java.lang.Object)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Elements in a range must not be null: element1=\u0001, element2=\u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label2:
if v3 != null goto label3;
v6 = <org.apache.commons.lang3.Range$ComparableComparator: org.apache.commons.lang3.Range$ComparableComparator INSTANCE>;
v0.<org.apache.commons.lang3.Range: java.util.Comparator comparator> = v6;
goto label4;
label3:
v0.<org.apache.commons.lang3.Range: java.util.Comparator comparator> = v3;
label4:
v7 = v0.<org.apache.commons.lang3.Range: java.util.Comparator comparator>;
v8 = interfaceinvoke v7.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v1, v2);
if v8 >= 1 goto label5;
v0.<org.apache.commons.lang3.Range: java.lang.Object minimum> = v1;
v0.<org.apache.commons.lang3.Range: java.lang.Object maximum> = v2;
goto label6;
label5:
v0.<org.apache.commons.lang3.Range: java.lang.Object minimum> = v2;
v0.<org.apache.commons.lang3.Range: java.lang.Object maximum> = v1;
label6:
return;
}
public boolean contains(java.lang.Object)
{
int v4, v5, v8;
java.lang.Object v1, v3, v7;
java.util.Comparator v2, v6;
boolean v9;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: java.lang.Object;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<org.apache.commons.lang3.Range: java.util.Comparator comparator>;
v3 = v0.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v4 = interfaceinvoke v2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v1, v3);
v5 = (int) -1;
if v4 <= v5 goto label2;
v6 = v0.<org.apache.commons.lang3.Range: java.util.Comparator comparator>;
v7 = v0.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v8 = interfaceinvoke v6.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v1, v7);
if v8 >= 1 goto label2;
v9 = 1;
goto label3;
label2:
v9 = 0;
label3:
return v9;
}
public boolean containsRange(org.apache.commons.lang3.Range)
{
java.lang.Object v2, v4;
boolean v3, v5, v6;
org.apache.commons.lang3.Range v0, v1;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: org.apache.commons.lang3.Range;
if v1 != null goto label1;
return 0;
label1:
v2 = v1.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v3 = virtualinvoke v0.<org.apache.commons.lang3.Range: boolean contains(java.lang.Object)>(v2);
if v3 == 0 goto label2;
v4 = v1.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v5 = virtualinvoke v0.<org.apache.commons.lang3.Range: boolean contains(java.lang.Object)>(v4);
if v5 == 0 goto label2;
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
public int elementCompareTo(java.lang.Object)
{
java.lang.Object[] v2;
int v4;
java.lang.Object v1;
boolean v3, v5;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: java.lang.Object;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "element", v2);
v3 = virtualinvoke v0.<org.apache.commons.lang3.Range: boolean isAfter(java.lang.Object)>(v1);
if v3 == 0 goto label1;
v4 = (int) -1;
return v4;
label1:
v5 = virtualinvoke v0.<org.apache.commons.lang3.Range: boolean isBefore(java.lang.Object)>(v1);
if v5 == 0 goto label2;
return 1;
label2:
return 0;
}
public boolean equals(java.lang.Object)
{
java.lang.Class v2, v3;
java.lang.Object v1, v4, v5, v7, v8;
boolean v10, v6, v9;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: java.lang.Object;
if v1 != v0 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v5 = v1.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
if v6 == 0 goto label4;
v7 = v0.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v8 = v1.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v9 = virtualinvoke v7.<java.lang.Object: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label4;
v10 = 1;
goto label5;
label4:
v10 = 0;
label5:
return v10;
}
public java.util.Comparator getComparator()
{
java.util.Comparator v1;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 = v0.<org.apache.commons.lang3.Range: java.util.Comparator comparator>;
return v1;
}
public java.lang.Object getMaximum()
{
java.lang.Object v1;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 = v0.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
return v1;
}
public java.lang.Object getMinimum()
{
java.lang.Object v1;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 = v0.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
return v1;
}
public int hashCode()
{
int v1, v10, v12, v2, v4, v5, v6, v8, v9;
java.lang.Class v3;
java.lang.Object v11, v7;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 = v0.<org.apache.commons.lang3.Range: int hashCode>;
v2 = v0.<org.apache.commons.lang3.Range: int hashCode>;
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Object: int hashCode()>();
v5 = 629 + v4;
v6 = 37 * v5;
v7 = v0.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v8 = virtualinvoke v7.<java.lang.Object: int hashCode()>();
v9 = v6 + v8;
v10 = 37 * v9;
v11 = v0.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v12 = virtualinvoke v11.<java.lang.Object: int hashCode()>();
v1 = v10 + v12;
v0.<org.apache.commons.lang3.Range: int hashCode> = v1;
label1:
return v1;
}
public org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)
{
java.lang.Object[] v4;
int v10, v16;
java.lang.String v5;
boolean v2, v6;
org.apache.commons.lang3.Range v0, v1, v19;
java.lang.IllegalArgumentException v3;
java.lang.Object v11, v12, v14, v15, v17, v8, v9;
java.util.Comparator v13, v18, v7;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: org.apache.commons.lang3.Range;
v2 = virtualinvoke v0.<org.apache.commons.lang3.Range: boolean isOverlappedBy(org.apache.commons.lang3.Range)>(v1);
if v2 != 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = newarray (java.lang.Object)[1];
v4[0] = v1;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot calculate intersection with non-overlapping range %s", v4);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = virtualinvoke v0.<org.apache.commons.lang3.Range: boolean equals(java.lang.Object)>(v1);
if v6 == 0 goto label2;
return v0;
label2:
v7 = virtualinvoke v0.<org.apache.commons.lang3.Range: java.util.Comparator getComparator()>();
v8 = v0.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v9 = v1.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v10 = interfaceinvoke v7.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v8, v9);
if v10 >= 0 goto label3;
v11 = v1.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
goto label4;
label3:
v11 = v0.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
label4:
v12 = v11;
v13 = virtualinvoke v0.<org.apache.commons.lang3.Range: java.util.Comparator getComparator()>();
v14 = v0.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v15 = v1.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v16 = interfaceinvoke v13.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v14, v15);
if v16 >= 0 goto label5;
v17 = v0.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
goto label6;
label5:
v17 = v1.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
label6:
v18 = virtualinvoke v0.<org.apache.commons.lang3.Range: java.util.Comparator getComparator()>();
v19 = staticinvoke <org.apache.commons.lang3.Range: org.apache.commons.lang3.Range between(java.lang.Object,java.lang.Object,java.util.Comparator)>(v12, v17, v18);
return v19;
}
public boolean isAfter(java.lang.Object)
{
int v4;
java.lang.Object v1, v3;
java.util.Comparator v2;
boolean v5;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: java.lang.Object;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<org.apache.commons.lang3.Range: java.util.Comparator comparator>;
v3 = v0.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v4 = interfaceinvoke v2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v1, v3);
if v4 >= 0 goto label2;
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
public boolean isAfterRange(org.apache.commons.lang3.Range)
{
java.lang.Object v2;
boolean v3;
org.apache.commons.lang3.Range v0, v1;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: org.apache.commons.lang3.Range;
if v1 != null goto label1;
return 0;
label1:
v2 = v1.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v3 = virtualinvoke v0.<org.apache.commons.lang3.Range: boolean isAfter(java.lang.Object)>(v2);
return v3;
}
public boolean isBefore(java.lang.Object)
{
int v4;
java.lang.Object v1, v3;
java.util.Comparator v2;
boolean v5;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: java.lang.Object;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<org.apache.commons.lang3.Range: java.util.Comparator comparator>;
v3 = v0.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v4 = interfaceinvoke v2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v1, v3);
if v4 <= 0 goto label2;
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
public boolean isBeforeRange(org.apache.commons.lang3.Range)
{
java.lang.Object v2;
boolean v3;
org.apache.commons.lang3.Range v0, v1;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: org.apache.commons.lang3.Range;
if v1 != null goto label1;
return 0;
label1:
v2 = v1.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v3 = virtualinvoke v0.<org.apache.commons.lang3.Range: boolean isBefore(java.lang.Object)>(v2);
return v3;
}
public boolean isEndedBy(java.lang.Object)
{
int v4;
java.lang.Object v1, v3;
java.util.Comparator v2;
boolean v5;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: java.lang.Object;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<org.apache.commons.lang3.Range: java.util.Comparator comparator>;
v3 = v0.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v4 = interfaceinvoke v2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v1, v3);
if v4 != 0 goto label2;
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
public boolean isNaturalOrdering()
{
org.apache.commons.lang3.Range$ComparableComparator v2;
java.util.Comparator v1;
boolean v3;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 = v0.<org.apache.commons.lang3.Range: java.util.Comparator comparator>;
v2 = <org.apache.commons.lang3.Range$ComparableComparator: org.apache.commons.lang3.Range$ComparableComparator INSTANCE>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isOverlappedBy(org.apache.commons.lang3.Range)
{
java.lang.Object v2, v4, v6;
boolean v3, v5, v7, v8;
org.apache.commons.lang3.Range v0, v1;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: org.apache.commons.lang3.Range;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v3 = virtualinvoke v1.<org.apache.commons.lang3.Range: boolean contains(java.lang.Object)>(v2);
if v3 != 0 goto label2;
v4 = v0.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v5 = virtualinvoke v1.<org.apache.commons.lang3.Range: boolean contains(java.lang.Object)>(v4);
if v5 != 0 goto label2;
v6 = v1.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v7 = virtualinvoke v0.<org.apache.commons.lang3.Range: boolean contains(java.lang.Object)>(v6);
if v7 == 0 goto label3;
label2:
v8 = 1;
goto label4;
label3:
v8 = 0;
label4:
return v8;
}
public boolean isStartedBy(java.lang.Object)
{
int v4;
java.lang.Object v1, v3;
java.util.Comparator v2;
boolean v5;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: java.lang.Object;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<org.apache.commons.lang3.Range: java.util.Comparator comparator>;
v3 = v0.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v4 = interfaceinvoke v2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v1, v3);
if v4 != 0 goto label2;
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
public java.lang.Object fit(java.lang.Object)
{
java.lang.Object[] v2;
java.lang.Object v1, v4, v6;
boolean v3, v5;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: java.lang.Object;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "element", v2);
v3 = virtualinvoke v0.<org.apache.commons.lang3.Range: boolean isAfter(java.lang.Object)>(v1);
if v3 == 0 goto label1;
v4 = v0.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
return v4;
label1:
v5 = virtualinvoke v0.<org.apache.commons.lang3.Range: boolean isBefore(java.lang.Object)>(v1);
if v5 == 0 goto label2;
v6 = v0.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
return v6;
label2:
return v1;
}
public java.lang.String toString()
{
java.lang.Object v2, v3;
java.lang.String v1, v4, v5;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 = v0.<org.apache.commons.lang3.Range: java.lang.String toString>;
if v1 != null goto label1;
v2 = v0.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v3 = v0.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,java.lang.Object)>(v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[\u0001..\u0001]");
v0.<org.apache.commons.lang3.Range: java.lang.String toString> = v4;
label1:
v5 = v0.<org.apache.commons.lang3.Range: java.lang.String toString>;
return v5;
}
public java.lang.String toString(java.lang.String)
{
java.lang.Object[] v2;
java.lang.Object v3, v4;
java.lang.String v1, v6;
java.util.Comparator v5;
org.apache.commons.lang3.Range v0;
v0 := @this: org.apache.commons.lang3.Range;
v1 := @parameter0: java.lang.String;
v2 = newarray (java.lang.Object)[3];
v3 = v0.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
v2[0] = v3;
v4 = v0.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
v2[1] = v4;
v5 = v0.<org.apache.commons.lang3.Range: java.util.Comparator comparator>;
v2[2] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
return v6;
}
}