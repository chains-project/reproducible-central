public class org.apache.commons.lang3.Streams$FailableStream extends java.lang.Object
{
private java.util.stream.Stream stream;
private boolean terminated;
public void <init>(java.util.stream.Stream)
{
java.util.stream.Stream v1;
org.apache.commons.lang3.Streams$FailableStream v0;
v0 := @this: org.apache.commons.lang3.Streams$FailableStream;
v1 := @parameter0: java.util.stream.Stream;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.apache.commons.lang3.Streams$FailableStream: java.util.stream.Stream stream> = v1;
return;
}
protected void assertNotTerminated()
{
java.lang.IllegalStateException v2;
org.apache.commons.lang3.Streams$FailableStream v0;
boolean v1;
v0 := @this: org.apache.commons.lang3.Streams$FailableStream;
v1 = v0.<org.apache.commons.lang3.Streams$FailableStream: boolean terminated>;
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This stream is already terminated.");
throw v2;
label1:
return;
}
protected void makeTerminated()
{
org.apache.commons.lang3.Streams$FailableStream v0;
v0 := @this: org.apache.commons.lang3.Streams$FailableStream;
virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: void assertNotTerminated()>();
v0.<org.apache.commons.lang3.Streams$FailableStream: boolean terminated> = 1;
return;
}
public org.apache.commons.lang3.Streams$FailableStream filter(org.apache.commons.lang3.Functions$FailablePredicate)
{
java.util.stream.Stream v2, v4;
org.apache.commons.lang3.Streams$FailableStream v0;
java.util.function.Predicate v3;
org.apache.commons.lang3.Functions$FailablePredicate v1;
v0 := @this: org.apache.commons.lang3.Streams$FailableStream;
v1 := @parameter0: org.apache.commons.lang3.Functions$FailablePredicate;
virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: void assertNotTerminated()>();
v2 = v0.<org.apache.commons.lang3.Streams$FailableStream: java.util.stream.Stream stream>;
v3 = staticinvoke <org.apache.commons.lang3.Functions: java.util.function.Predicate asPredicate(org.apache.commons.lang3.Functions$FailablePredicate)>(v1);
v4 = interfaceinvoke v2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v3);
v0.<org.apache.commons.lang3.Streams$FailableStream: java.util.stream.Stream stream> = v4;
return v0;
}
public void forEach(org.apache.commons.lang3.Functions$FailableConsumer)
{
java.util.function.Consumer v3;
java.util.stream.Stream v2;
org.apache.commons.lang3.Streams$FailableStream v0;
org.apache.commons.lang3.Functions$FailableConsumer v1;
v0 := @this: org.apache.commons.lang3.Streams$FailableStream;
v1 := @parameter0: org.apache.commons.lang3.Functions$FailableConsumer;
virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: void makeTerminated()>();
v2 = virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: java.util.stream.Stream stream()>();
v3 = staticinvoke <org.apache.commons.lang3.Functions: java.util.function.Consumer asConsumer(org.apache.commons.lang3.Functions$FailableConsumer)>(v1);
interfaceinvoke v2.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>(v3);
return;
}
public java.lang.Object collect(java.util.stream.Collector)
{
java.util.stream.Stream v2;
org.apache.commons.lang3.Streams$FailableStream v0;
java.lang.Object v3;
java.util.stream.Collector v1;
v0 := @this: org.apache.commons.lang3.Streams$FailableStream;
v1 := @parameter0: java.util.stream.Collector;
virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: void makeTerminated()>();
v2 = virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: java.util.stream.Stream stream()>();
v3 = interfaceinvoke v2.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v1);
return v3;
}
public java.lang.Object collect(java.util.function.Supplier, java.util.function.BiConsumer, java.util.function.BiConsumer)
{
java.util.stream.Stream v4;
org.apache.commons.lang3.Streams$FailableStream v0;
java.util.function.BiConsumer v2, v3;
java.lang.Object v5;
java.util.function.Supplier v1;
v0 := @this: org.apache.commons.lang3.Streams$FailableStream;
v1 := @parameter0: java.util.function.Supplier;
v2 := @parameter1: java.util.function.BiConsumer;
v3 := @parameter2: java.util.function.BiConsumer;
virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: void makeTerminated()>();
v4 = virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: java.util.stream.Stream stream()>();
v5 = interfaceinvoke v4.<java.util.stream.Stream: java.lang.Object collect(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)>(v1, v2, v3);
return v5;
}
public java.lang.Object reduce(java.lang.Object, java.util.function.BinaryOperator)
{
java.util.stream.Stream v3;
org.apache.commons.lang3.Streams$FailableStream v0;
java.lang.Object v1, v4;
java.util.function.BinaryOperator v2;
v0 := @this: org.apache.commons.lang3.Streams$FailableStream;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.function.BinaryOperator;
virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: void makeTerminated()>();
v3 = virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: java.util.stream.Stream stream()>();
v4 = interfaceinvoke v3.<java.util.stream.Stream: java.lang.Object reduce(java.lang.Object,java.util.function.BinaryOperator)>(v1, v2);
return v4;
}
public org.apache.commons.lang3.Streams$FailableStream map(org.apache.commons.lang3.Functions$FailableFunction)
{
org.apache.commons.lang3.Functions$FailableFunction v1;
java.util.stream.Stream v3, v5;
org.apache.commons.lang3.Streams$FailableStream v0, v2;
java.util.function.Function v4;
v0 := @this: org.apache.commons.lang3.Streams$FailableStream;
v1 := @parameter0: org.apache.commons.lang3.Functions$FailableFunction;
virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: void assertNotTerminated()>();
v2 = new org.apache.commons.lang3.Streams$FailableStream;
v3 = v0.<org.apache.commons.lang3.Streams$FailableStream: java.util.stream.Stream stream>;
v4 = staticinvoke <org.apache.commons.lang3.Functions: java.util.function.Function asFunction(org.apache.commons.lang3.Functions$FailableFunction)>(v1);
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v4);
specialinvoke v2.<org.apache.commons.lang3.Streams$FailableStream: void <init>(java.util.stream.Stream)>(v5);
return v2;
}
public java.util.stream.Stream stream()
{
java.util.stream.Stream v1;
org.apache.commons.lang3.Streams$FailableStream v0;
v0 := @this: org.apache.commons.lang3.Streams$FailableStream;
v1 = v0.<org.apache.commons.lang3.Streams$FailableStream: java.util.stream.Stream stream>;
return v1;
}
public boolean allMatch(org.apache.commons.lang3.Functions$FailablePredicate)
{
java.util.stream.Stream v2;
org.apache.commons.lang3.Streams$FailableStream v0;
java.util.function.Predicate v3;
org.apache.commons.lang3.Functions$FailablePredicate v1;
boolean v4;
v0 := @this: org.apache.commons.lang3.Streams$FailableStream;
v1 := @parameter0: org.apache.commons.lang3.Functions$FailablePredicate;
virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: void assertNotTerminated()>();
v2 = virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: java.util.stream.Stream stream()>();
v3 = staticinvoke <org.apache.commons.lang3.Functions: java.util.function.Predicate asPredicate(org.apache.commons.lang3.Functions$FailablePredicate)>(v1);
v4 = interfaceinvoke v2.<java.util.stream.Stream: boolean allMatch(java.util.function.Predicate)>(v3);
return v4;
}
public boolean anyMatch(org.apache.commons.lang3.Functions$FailablePredicate)
{
java.util.stream.Stream v2;
org.apache.commons.lang3.Streams$FailableStream v0;
java.util.function.Predicate v3;
org.apache.commons.lang3.Functions$FailablePredicate v1;
boolean v4;
v0 := @this: org.apache.commons.lang3.Streams$FailableStream;
v1 := @parameter0: org.apache.commons.lang3.Functions$FailablePredicate;
virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: void assertNotTerminated()>();
v2 = virtualinvoke v0.<org.apache.commons.lang3.Streams$FailableStream: java.util.stream.Stream stream()>();
v3 = staticinvoke <org.apache.commons.lang3.Functions: java.util.function.Predicate asPredicate(org.apache.commons.lang3.Functions$FailablePredicate)>(v1);
v4 = interfaceinvoke v2.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>(v3);
return v4;
}
}