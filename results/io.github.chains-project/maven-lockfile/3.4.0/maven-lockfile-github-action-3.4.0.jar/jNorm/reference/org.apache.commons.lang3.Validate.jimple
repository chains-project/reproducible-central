public class org.apache.commons.lang3.Validate extends java.lang.Object
{
private static final java.lang.String DEFAULT_NOT_NAN_EX_MESSAGE;
private static final java.lang.String DEFAULT_FINITE_EX_MESSAGE;
private static final java.lang.String DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE;
private static final java.lang.String DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE;
private static final java.lang.String DEFAULT_MATCHES_PATTERN_EX;
private static final java.lang.String DEFAULT_IS_NULL_EX_MESSAGE;
private static final java.lang.String DEFAULT_IS_TRUE_EX_MESSAGE;
private static final java.lang.String DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE;
private static final java.lang.String DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE;
private static final java.lang.String DEFAULT_NOT_BLANK_EX_MESSAGE;
private static final java.lang.String DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE;
private static final java.lang.String DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE;
private static final java.lang.String DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE;
private static final java.lang.String DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE;
private static final java.lang.String DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE;
private static final java.lang.String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE;
private static final java.lang.String DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE;
private static final java.lang.String DEFAULT_VALID_STATE_EX_MESSAGE;
private static final java.lang.String DEFAULT_IS_ASSIGNABLE_EX_MESSAGE;
private static final java.lang.String DEFAULT_IS_INSTANCE_OF_EX_MESSAGE;
public void <init>()
{
org.apache.commons.lang3.Validate v0;
v0 := @this: org.apache.commons.lang3.Validate;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void isTrue(boolean, java.lang.String, long)
{
java.lang.Object[] v4;
java.lang.Long v5;
long v2;
java.lang.String v1, v6;
java.lang.IllegalArgumentException v3;
boolean v0;
v0 := @parameter0: boolean;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: long;
if v0 != 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = newarray (java.lang.Object)[1];
v5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v4[0] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v4);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v3;
label1:
return;
}
public static void isTrue(boolean, java.lang.String, double)
{
java.lang.Object[] v4;
java.lang.Double v5;
java.lang.String v1, v6;
java.lang.IllegalArgumentException v3;
boolean v0;
double v2;
v0 := @parameter0: boolean;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: double;
if v0 != 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = newarray (java.lang.Object)[1];
v5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v2);
v4[0] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v4);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v3;
label1:
return;
}
public static transient void isTrue(boolean, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v2;
java.lang.String v1, v4;
java.lang.IllegalArgumentException v3;
boolean v0;
v0 := @parameter0: boolean;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
if v0 != 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return;
}
public static void isTrue(boolean)
{
java.lang.IllegalArgumentException v1;
boolean v0;
v0 := @parameter0: boolean;
if v0 != 0 goto label1;
v1 = new java.lang.IllegalArgumentException;
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The validated expression is false");
throw v1;
label1:
return;
}
public static java.lang.Object notNull(java.lang.Object)
{
java.lang.Object v0, v2;
java.lang.Object[] v1;
v0 := @parameter0: java.lang.Object;
v1 = newarray (java.lang.Object)[0];
v2 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "The validated object is null", v1);
return v2;
}
public static transient java.lang.Object notNull(java.lang.Object, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v2;
java.lang.Object v0, v4;
java.lang.String v1;
java.util.function.Supplier v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
v3 = staticinvoke <org.apache.commons.lang3.Validate$lambda_notNull_0__93: java.util.function.Supplier bootstrap$(java.lang.String,java.lang.Object[])>(v1, v2);
v4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.util.function.Supplier)>(v0, v3);
return v4;
}
public static transient java.lang.Object[] notEmpty(java.lang.Object[], java.lang.String, java.lang.Object[])
{
java.lang.Object[] v0, v2;
int v4;
java.lang.String v1, v6;
java.lang.IllegalArgumentException v5;
java.util.function.Supplier v3;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
v3 = staticinvoke <org.apache.commons.lang3.Validate$lambda_notEmpty_1__94: java.util.function.Supplier bootstrap$(java.lang.String,java.lang.Object[])>(v1, v2);
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.util.function.Supplier)>(v0, v3);
v4 = lengthof v0;
if v4 != 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return v0;
}
public static java.lang.Object[] notEmpty(java.lang.Object[])
{
java.lang.Object[] v0, v1, v2;
v0 := @parameter0: java.lang.Object[];
v1 = newarray (java.lang.Object)[0];
v2 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])>(v0, "The validated array is empty", v1);
return v2;
}
public static transient java.util.Collection notEmpty(java.util.Collection, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v2;
java.util.Collection v0;
java.lang.String v1, v6;
java.lang.IllegalArgumentException v5;
java.util.function.Supplier v3;
boolean v4;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
v3 = staticinvoke <org.apache.commons.lang3.Validate$lambda_notEmpty_2__95: java.util.function.Supplier bootstrap$(java.lang.String,java.lang.Object[])>(v1, v2);
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.util.function.Supplier)>(v0, v3);
v4 = interfaceinvoke v0.<java.util.Collection: boolean isEmpty()>();
if v4 == 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return v0;
}
public static java.util.Collection notEmpty(java.util.Collection)
{
java.lang.Object[] v1;
java.util.Collection v0, v2;
v0 := @parameter0: java.util.Collection;
v1 = newarray (java.lang.Object)[0];
v2 = staticinvoke <org.apache.commons.lang3.Validate: java.util.Collection notEmpty(java.util.Collection,java.lang.String,java.lang.Object[])>(v0, "The validated collection is empty", v1);
return v2;
}
public static transient java.util.Map notEmpty(java.util.Map, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v2;
java.util.Map v0;
java.lang.String v1, v6;
java.lang.IllegalArgumentException v5;
java.util.function.Supplier v3;
boolean v4;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
v3 = staticinvoke <org.apache.commons.lang3.Validate$lambda_notEmpty_3__96: java.util.function.Supplier bootstrap$(java.lang.String,java.lang.Object[])>(v1, v2);
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.util.function.Supplier)>(v0, v3);
v4 = interfaceinvoke v0.<java.util.Map: boolean isEmpty()>();
if v4 == 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return v0;
}
public static java.util.Map notEmpty(java.util.Map)
{
java.lang.Object[] v1;
java.util.Map v0, v2;
v0 := @parameter0: java.util.Map;
v1 = newarray (java.lang.Object)[0];
v2 = staticinvoke <org.apache.commons.lang3.Validate: java.util.Map notEmpty(java.util.Map,java.lang.String,java.lang.Object[])>(v0, "The validated map is empty", v1);
return v2;
}
public static transient java.lang.CharSequence notEmpty(java.lang.CharSequence, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v2;
java.lang.CharSequence v0;
int v4;
java.lang.String v1, v6;
java.lang.IllegalArgumentException v5;
java.util.function.Supplier v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
v3 = staticinvoke <org.apache.commons.lang3.Validate$lambda_notEmpty_4__97: java.util.function.Supplier bootstrap$(java.lang.String,java.lang.Object[])>(v1, v2);
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.util.function.Supplier)>(v0, v3);
v4 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v4 != 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return v0;
}
public static java.lang.CharSequence notEmpty(java.lang.CharSequence)
{
java.lang.Object[] v1;
java.lang.CharSequence v0, v2;
v0 := @parameter0: java.lang.CharSequence;
v1 = newarray (java.lang.Object)[0];
v2 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.CharSequence notEmpty(java.lang.CharSequence,java.lang.String,java.lang.Object[])>(v0, "The validated character sequence is empty", v1);
return v2;
}
public static transient java.lang.CharSequence notBlank(java.lang.CharSequence, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v2;
java.lang.CharSequence v0;
java.lang.String v1, v6;
java.lang.IllegalArgumentException v5;
java.util.function.Supplier v3;
boolean v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
v3 = staticinvoke <org.apache.commons.lang3.Validate$lambda_notBlank_5__98: java.util.function.Supplier bootstrap$(java.lang.String,java.lang.Object[])>(v1, v2);
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.util.function.Supplier)>(v0, v3);
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(v0);
if v4 == 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return v0;
}
public static java.lang.CharSequence notBlank(java.lang.CharSequence)
{
java.lang.Object[] v1;
java.lang.CharSequence v0, v2;
v0 := @parameter0: java.lang.CharSequence;
v1 = newarray (java.lang.Object)[0];
v2 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.CharSequence notBlank(java.lang.CharSequence,java.lang.String,java.lang.Object[])>(v0, "The validated character sequence is blank", v1);
return v2;
}
public static transient java.lang.Object[] noNullElements(java.lang.Object[], java.lang.String, java.lang.Object[])
{
java.lang.Object[] v0, v2, v7;
java.lang.IllegalArgumentException v8;
java.lang.Integer v6;
int v3, v4;
java.lang.Object v5;
java.lang.String v1, v9;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object)>(v0);
v3 = 0;
label1:
v4 = lengthof v0;
if v3 >= v4 goto label3;
v5 = v0[v3];
if v5 != null goto label2;
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] add(java.lang.Object[],java.lang.Object)>(v2, v6);
v8 = new java.lang.IllegalArgumentException;
v9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v7);
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v8;
label2:
v3 = v3 + 1;
goto label1;
label3:
return v0;
}
public static java.lang.Object[] noNullElements(java.lang.Object[])
{
java.lang.Object[] v0, v1, v2;
v0 := @parameter0: java.lang.Object[];
v1 = newarray (java.lang.Object)[0];
v2 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] noNullElements(java.lang.Object[],java.lang.String,java.lang.Object[])>(v0, "The validated array contains null element at index: %d", v1);
return v2;
}
public static transient java.lang.Iterable noNullElements(java.lang.Iterable, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v2, v7, v9;
java.util.Iterator v4;
java.lang.IllegalArgumentException v10;
java.lang.Integer v8;
java.lang.Iterable v0;
int v3;
java.lang.Object v6;
java.lang.String v1, v11;
boolean v5;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object)>(v0);
v3 = 0;
v4 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label3;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
if v6 != null goto label2;
v7 = newarray (java.lang.Object)[1];
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v7[0] = v8;
v9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] addAll(java.lang.Object[],java.lang.Object[])>(v2, v7);
v10 = new java.lang.IllegalArgumentException;
v11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v9);
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
throw v10;
label2:
v3 = v3 + 1;
goto label1;
label3:
return v0;
}
public static java.lang.Iterable noNullElements(java.lang.Iterable)
{
java.lang.Object[] v1;
java.lang.Iterable v0, v2;
v0 := @parameter0: java.lang.Iterable;
v1 = newarray (java.lang.Object)[0];
v2 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Iterable noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[])>(v0, "The validated collection contains null element at index: %d", v1);
return v2;
}
public static transient java.lang.Object[] validIndex(java.lang.Object[], int, java.lang.String, java.lang.Object[])
{
java.lang.IndexOutOfBoundsException v5;
java.lang.Object[] v0, v3;
int v1, v4;
java.lang.String v2, v6;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: java.lang.Object[];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object)>(v0);
if v1 < 0 goto label1;
v4 = lengthof v0;
if v1 < v4 goto label2;
label1:
v5 = new java.lang.IndexOutOfBoundsException;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v2, v3);
specialinvoke v5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v6);
throw v5;
label2:
return v0;
}
public static java.lang.Object[] validIndex(java.lang.Object[], int)
{
java.lang.Object[] v0, v2, v4;
int v1;
java.lang.Integer v3;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 = newarray (java.lang.Object)[1];
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v2[0] = v3;
v4 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] validIndex(java.lang.Object[],int,java.lang.String,java.lang.Object[])>(v0, v1, "The validated array index is invalid: %d", v2);
return v4;
}
public static transient java.util.Collection validIndex(java.util.Collection, int, java.lang.String, java.lang.Object[])
{
java.lang.IndexOutOfBoundsException v5;
java.lang.Object[] v3;
java.util.Collection v0;
int v1, v4;
java.lang.String v2, v6;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: java.lang.Object[];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object)>(v0);
if v1 < 0 goto label1;
v4 = interfaceinvoke v0.<java.util.Collection: int size()>();
if v1 < v4 goto label2;
label1:
v5 = new java.lang.IndexOutOfBoundsException;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v2, v3);
specialinvoke v5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v6);
throw v5;
label2:
return v0;
}
public static java.util.Collection validIndex(java.util.Collection, int)
{
java.lang.Object[] v2;
java.util.Collection v0, v4;
int v1;
java.lang.Integer v3;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: int;
v2 = newarray (java.lang.Object)[1];
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v2[0] = v3;
v4 = staticinvoke <org.apache.commons.lang3.Validate: java.util.Collection validIndex(java.util.Collection,int,java.lang.String,java.lang.Object[])>(v0, v1, "The validated collection index is invalid: %d", v2);
return v4;
}
public static transient java.lang.CharSequence validIndex(java.lang.CharSequence, int, java.lang.String, java.lang.Object[])
{
java.lang.IndexOutOfBoundsException v5;
java.lang.Object[] v3;
java.lang.CharSequence v0;
int v1, v4;
java.lang.String v2, v6;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: java.lang.Object[];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object)>(v0);
if v1 < 0 goto label1;
v4 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v1 < v4 goto label2;
label1:
v5 = new java.lang.IndexOutOfBoundsException;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v2, v3);
specialinvoke v5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v6);
throw v5;
label2:
return v0;
}
public static java.lang.CharSequence validIndex(java.lang.CharSequence, int)
{
java.lang.Object[] v2;
java.lang.CharSequence v0, v4;
int v1;
java.lang.Integer v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = newarray (java.lang.Object)[1];
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v2[0] = v3;
v4 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.CharSequence validIndex(java.lang.CharSequence,int,java.lang.String,java.lang.Object[])>(v0, v1, "The validated character sequence index is invalid: %d", v2);
return v4;
}
public static void validState(boolean)
{
java.lang.IllegalStateException v1;
boolean v0;
v0 := @parameter0: boolean;
if v0 != 0 goto label1;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The validated state is false");
throw v1;
label1:
return;
}
public static transient void validState(boolean, java.lang.String, java.lang.Object[])
{
java.lang.IllegalStateException v3;
java.lang.Object[] v2;
java.lang.String v1, v4;
boolean v0;
v0 := @parameter0: boolean;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
if v0 != 0 goto label1;
v3 = new java.lang.IllegalStateException;
v4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return;
}
public static void matchesPattern(java.lang.CharSequence, java.lang.String)
{
java.lang.Object[] v4;
java.lang.CharSequence v0;
java.lang.String v1, v5;
java.lang.IllegalArgumentException v3;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>(v1, v0);
if v2 != 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = newarray (java.lang.Object)[2];
v4[0] = v0;
v4[1] = v1;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The string %s does not match the pattern %s", v4);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
return;
}
public static transient void matchesPattern(java.lang.CharSequence, java.lang.String, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v3;
java.lang.CharSequence v0;
java.lang.String v1, v2, v6;
java.lang.IllegalArgumentException v5;
boolean v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: java.lang.Object[];
v4 = staticinvoke <java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>(v1, v0);
if v4 != 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v2, v3);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return;
}
public static void notNaN(double)
{
java.lang.Object[] v1;
double v0;
v0 := @parameter0: double;
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void notNaN(double,java.lang.String,java.lang.Object[])>(v0, "The validated value is not a number", v1);
return;
}
public static transient void notNaN(double, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v2;
java.lang.String v1, v5;
java.lang.IllegalArgumentException v4;
boolean v3;
double v0;
v0 := @parameter0: double;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
v3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(v0);
if v3 == 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return;
}
public static void finite(double)
{
java.lang.Object[] v1;
java.lang.Double v2;
double v0;
v0 := @parameter0: double;
v1 = newarray (java.lang.Object)[1];
v2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v0);
v1[0] = v2;
staticinvoke <org.apache.commons.lang3.Validate: void finite(double,java.lang.String,java.lang.Object[])>(v0, "The value is invalid: %f", v1);
return;
}
public static transient void finite(double, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v2;
java.lang.String v1, v6;
java.lang.IllegalArgumentException v5;
boolean v3, v4;
double v0;
v0 := @parameter0: double;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
v3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(v0);
if v3 != 0 goto label1;
v4 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(v0);
if v4 == 0 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label2:
return;
}
public static void inclusiveBetween(java.lang.Object, java.lang.Object, java.lang.Comparable)
{
java.lang.Object[] v6;
java.lang.IllegalArgumentException v5;
int v3, v4;
java.lang.Comparable v2;
java.lang.Object v0, v1;
java.lang.String v7;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Comparable;
v3 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v0);
if v3 < 0 goto label1;
v4 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v1);
if v4 <= 0 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
v6 = newarray (java.lang.Object)[3];
v6[0] = v2;
v6[1] = v0;
v6[2] = v1;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The value %s is not in the specified inclusive range of %s to %s", v6);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v5;
label2:
return;
}
public static transient void inclusiveBetween(java.lang.Object, java.lang.Object, java.lang.Comparable, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v4;
java.lang.IllegalArgumentException v7;
int v5, v6;
java.lang.Comparable v2;
java.lang.Object v0, v1;
java.lang.String v3, v8;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Comparable;
v3 := @parameter3: java.lang.String;
v4 := @parameter4: java.lang.Object[];
v5 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v0);
if v5 < 0 goto label1;
v6 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v1);
if v6 <= 0 goto label2;
label1:
v7 = new java.lang.IllegalArgumentException;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v3, v4);
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
throw v7;
label2:
return;
}
public static void inclusiveBetween(long, long, long)
{
java.lang.Object[] v6;
long v0, v1, v2;
java.lang.IllegalArgumentException v5;
byte v3, v4;
java.lang.Long v7, v8, v9;
java.lang.String v10;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 := @parameter2: long;
v3 = v2 cmp v0;
if v3 < 0 goto label1;
v4 = v2 cmp v1;
if v4 <= 0 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
v6 = newarray (java.lang.Object)[3];
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v6[0] = v7;
v8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v0);
v6[1] = v8;
v9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
v6[2] = v9;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The value %s is not in the specified inclusive range of %s to %s", v6);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v5;
label2:
return;
}
public static void inclusiveBetween(long, long, long, java.lang.String)
{
byte v4, v5;
long v0, v1, v2;
java.lang.String v3;
java.lang.IllegalArgumentException v6;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 := @parameter2: long;
v3 := @parameter3: java.lang.String;
v4 = v2 cmp v0;
if v4 < 0 goto label1;
v5 = v2 cmp v1;
if v5 <= 0 goto label2;
label1:
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v6;
label2:
return;
}
public static void inclusiveBetween(double, double, double)
{
java.lang.Object[] v6;
java.lang.Double v7, v8, v9;
java.lang.IllegalArgumentException v5;
byte v3, v4;
java.lang.String v10;
double v0, v1, v2;
v0 := @parameter0: double;
v1 := @parameter1: double;
v2 := @parameter2: double;
v3 = v2 cmpg v0;
if v3 < 0 goto label1;
v4 = v2 cmpl v1;
if v4 <= 0 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
v6 = newarray (java.lang.Object)[3];
v7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v2);
v6[0] = v7;
v8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v0);
v6[1] = v8;
v9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v1);
v6[2] = v9;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The value %s is not in the specified inclusive range of %s to %s", v6);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v5;
label2:
return;
}
public static void inclusiveBetween(double, double, double, java.lang.String)
{
byte v4, v5;
java.lang.String v3;
java.lang.IllegalArgumentException v6;
double v0, v1, v2;
v0 := @parameter0: double;
v1 := @parameter1: double;
v2 := @parameter2: double;
v3 := @parameter3: java.lang.String;
v4 = v2 cmpg v0;
if v4 < 0 goto label1;
v5 = v2 cmpl v1;
if v5 <= 0 goto label2;
label1:
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v6;
label2:
return;
}
public static void exclusiveBetween(java.lang.Object, java.lang.Object, java.lang.Comparable)
{
java.lang.Object[] v6;
java.lang.IllegalArgumentException v5;
int v3, v4;
java.lang.Comparable v2;
java.lang.Object v0, v1;
java.lang.String v7;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Comparable;
v3 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v0);
if v3 <= 0 goto label1;
v4 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v1);
if v4 < 0 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
v6 = newarray (java.lang.Object)[3];
v6[0] = v2;
v6[1] = v0;
v6[2] = v1;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The value %s is not in the specified exclusive range of %s to %s", v6);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v5;
label2:
return;
}
public static transient void exclusiveBetween(java.lang.Object, java.lang.Object, java.lang.Comparable, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v4;
java.lang.IllegalArgumentException v7;
int v5, v6;
java.lang.Comparable v2;
java.lang.Object v0, v1;
java.lang.String v3, v8;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Comparable;
v3 := @parameter3: java.lang.String;
v4 := @parameter4: java.lang.Object[];
v5 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v0);
if v5 <= 0 goto label1;
v6 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v1);
if v6 < 0 goto label2;
label1:
v7 = new java.lang.IllegalArgumentException;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v3, v4);
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
throw v7;
label2:
return;
}
public static void exclusiveBetween(long, long, long)
{
java.lang.Object[] v6;
long v0, v1, v2;
java.lang.IllegalArgumentException v5;
byte v3, v4;
java.lang.Long v7, v8, v9;
java.lang.String v10;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 := @parameter2: long;
v3 = v2 cmp v0;
if v3 <= 0 goto label1;
v4 = v2 cmp v1;
if v4 < 0 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
v6 = newarray (java.lang.Object)[3];
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v6[0] = v7;
v8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v0);
v6[1] = v8;
v9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
v6[2] = v9;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The value %s is not in the specified exclusive range of %s to %s", v6);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v5;
label2:
return;
}
public static void exclusiveBetween(long, long, long, java.lang.String)
{
byte v4, v5;
long v0, v1, v2;
java.lang.String v3;
java.lang.IllegalArgumentException v6;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 := @parameter2: long;
v3 := @parameter3: java.lang.String;
v4 = v2 cmp v0;
if v4 <= 0 goto label1;
v5 = v2 cmp v1;
if v5 < 0 goto label2;
label1:
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v6;
label2:
return;
}
public static void exclusiveBetween(double, double, double)
{
java.lang.Object[] v6;
java.lang.Double v7, v8, v9;
java.lang.IllegalArgumentException v5;
byte v3, v4;
java.lang.String v10;
double v0, v1, v2;
v0 := @parameter0: double;
v1 := @parameter1: double;
v2 := @parameter2: double;
v3 = v2 cmpg v0;
if v3 <= 0 goto label1;
v4 = v2 cmpl v1;
if v4 < 0 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
v6 = newarray (java.lang.Object)[3];
v7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v2);
v6[0] = v7;
v8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v0);
v6[1] = v8;
v9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v1);
v6[2] = v9;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The value %s is not in the specified exclusive range of %s to %s", v6);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v5;
label2:
return;
}
public static void exclusiveBetween(double, double, double, java.lang.String)
{
byte v4, v5;
java.lang.String v3;
java.lang.IllegalArgumentException v6;
double v0, v1, v2;
v0 := @parameter0: double;
v1 := @parameter1: double;
v2 := @parameter2: double;
v3 := @parameter3: java.lang.String;
v4 = v2 cmpg v0;
if v4 <= 0 goto label1;
v5 = v2 cmpl v1;
if v5 < 0 goto label2;
label1:
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v6;
label2:
return;
}
public static void isInstanceOf(java.lang.Class, java.lang.Object)
{
java.lang.Object[] v4;
java.lang.IllegalArgumentException v3;
java.lang.Class v0, v7;
java.lang.Object v1;
java.lang.String v5, v6, v8;
boolean v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Object;
v2 = virtualinvoke v0.<java.lang.Class: boolean isInstance(java.lang.Object)>(v1);
if v2 != 0 goto label3;
v3 = new java.lang.IllegalArgumentException;
v4 = newarray (java.lang.Object)[2];
v5 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v4[0] = v5;
if v1 != null goto label1;
v6 = "null";
goto label2;
label1:
v7 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
label2:
v4[1] = v6;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Expected type: %s, actual: %s", v4);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
throw v3;
label3:
return;
}
public static transient void isInstanceOf(java.lang.Class, java.lang.Object, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v3;
java.lang.Class v0;
java.lang.Object v1;
java.lang.String v2, v6;
java.lang.IllegalArgumentException v5;
boolean v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: java.lang.Object[];
v4 = virtualinvoke v0.<java.lang.Class: boolean isInstance(java.lang.Object)>(v1);
if v4 != 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v2, v3);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return;
}
public static void isAssignableFrom(java.lang.Class, java.lang.Class)
{
java.lang.Object[] v4;
java.lang.IllegalArgumentException v3;
java.lang.Class v0, v1;
java.lang.String v5, v6, v7;
boolean v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 = virtualinvoke v0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v1);
if v2 != 0 goto label3;
v3 = new java.lang.IllegalArgumentException;
v4 = newarray (java.lang.Object)[2];
if v1 != null goto label1;
v5 = "null";
goto label2;
label1:
v5 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
label2:
v4[0] = v5;
v6 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v4[1] = v6;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot assign a %s to a %s", v4);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v3;
label3:
return;
}
public static transient void isAssignableFrom(java.lang.Class, java.lang.Class, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v3;
java.lang.Class v0, v1;
java.lang.String v2, v6;
java.lang.IllegalArgumentException v5;
boolean v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: java.lang.Object[];
v4 = virtualinvoke v0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v1);
if v4 != 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v2, v3);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return;
}
}