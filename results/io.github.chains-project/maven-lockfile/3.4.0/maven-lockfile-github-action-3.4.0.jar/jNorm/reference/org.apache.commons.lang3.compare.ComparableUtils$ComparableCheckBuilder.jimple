public class org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder extends java.lang.Object
{
private final java.lang.Comparable a;
private void <init>(java.lang.Comparable)
{
org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder v0;
java.lang.Comparable v1;
v0 := @this: org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder;
v1 := @parameter0: java.lang.Comparable;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: java.lang.Comparable a> = v1;
return;
}
public boolean between(java.lang.Comparable, java.lang.Comparable)
{
org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder v0;
java.lang.Comparable v1, v2;
boolean v3, v4, v5;
v0 := @this: org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder;
v1 := @parameter0: java.lang.Comparable;
v2 := @parameter1: java.lang.Comparable;
v3 = specialinvoke v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: boolean betweenOrdered(java.lang.Comparable,java.lang.Comparable)>(v1, v2);
if v3 != 0 goto label1;
v4 = specialinvoke v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: boolean betweenOrdered(java.lang.Comparable,java.lang.Comparable)>(v2, v1);
if v4 == 0 goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
public boolean betweenExclusive(java.lang.Comparable, java.lang.Comparable)
{
org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder v0;
java.lang.Comparable v1, v2;
boolean v3, v4, v5;
v0 := @this: org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder;
v1 := @parameter0: java.lang.Comparable;
v2 := @parameter1: java.lang.Comparable;
v3 = specialinvoke v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: boolean betweenOrderedExclusive(java.lang.Comparable,java.lang.Comparable)>(v1, v2);
if v3 != 0 goto label1;
v4 = specialinvoke v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: boolean betweenOrderedExclusive(java.lang.Comparable,java.lang.Comparable)>(v2, v1);
if v4 == 0 goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
private boolean betweenOrdered(java.lang.Comparable, java.lang.Comparable)
{
org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder v0;
java.lang.Comparable v1, v2;
boolean v3, v4, v5;
v0 := @this: org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder;
v1 := @parameter0: java.lang.Comparable;
v2 := @parameter1: java.lang.Comparable;
v3 = virtualinvoke v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: boolean greaterThanOrEqualTo(java.lang.Comparable)>(v1);
if v3 == 0 goto label1;
v4 = virtualinvoke v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: boolean lessThanOrEqualTo(java.lang.Comparable)>(v2);
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
private boolean betweenOrderedExclusive(java.lang.Comparable, java.lang.Comparable)
{
org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder v0;
java.lang.Comparable v1, v2;
boolean v3, v4, v5;
v0 := @this: org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder;
v1 := @parameter0: java.lang.Comparable;
v2 := @parameter1: java.lang.Comparable;
v3 = virtualinvoke v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: boolean greaterThan(java.lang.Comparable)>(v1);
if v3 == 0 goto label1;
v4 = virtualinvoke v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: boolean lessThan(java.lang.Comparable)>(v2);
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public boolean equalTo(java.lang.Comparable)
{
int v3;
org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder v0;
java.lang.Comparable v1, v2;
boolean v4;
v0 := @this: org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder;
v1 := @parameter0: java.lang.Comparable;
v2 = v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: java.lang.Comparable a>;
v3 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v1);
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean greaterThan(java.lang.Comparable)
{
int v3;
org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder v0;
java.lang.Comparable v1, v2;
boolean v4;
v0 := @this: org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder;
v1 := @parameter0: java.lang.Comparable;
v2 = v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: java.lang.Comparable a>;
v3 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v1);
if v3 <= 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean greaterThanOrEqualTo(java.lang.Comparable)
{
int v3;
org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder v0;
java.lang.Comparable v1, v2;
boolean v4;
v0 := @this: org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder;
v1 := @parameter0: java.lang.Comparable;
v2 = v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: java.lang.Comparable a>;
v3 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v1);
if v3 < 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean lessThan(java.lang.Comparable)
{
int v3;
org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder v0;
java.lang.Comparable v1, v2;
boolean v4;
v0 := @this: org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder;
v1 := @parameter0: java.lang.Comparable;
v2 = v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: java.lang.Comparable a>;
v3 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v1);
if v3 >= 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean lessThanOrEqualTo(java.lang.Comparable)
{
int v3;
org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder v0;
java.lang.Comparable v1, v2;
boolean v4;
v0 := @this: org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder;
v1 := @parameter0: java.lang.Comparable;
v2 = v0.<org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder: java.lang.Comparable a>;
v3 = interfaceinvoke v2.<java.lang.Comparable: int compareTo(java.lang.Object)>(v1);
if v3 > 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
}