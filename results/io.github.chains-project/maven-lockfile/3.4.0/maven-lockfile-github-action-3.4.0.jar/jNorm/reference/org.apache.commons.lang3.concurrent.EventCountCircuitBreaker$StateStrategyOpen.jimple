class org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen extends org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy
{
private void <init>()
{
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen v0;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen;
specialinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy: void <init>()>();
return;
}
public boolean isStateTransition(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData)
{
long v4, v5;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v2, v3;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v1;
byte v6;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen v0;
int v7, v8;
boolean v9;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen;
v1 := @parameter0: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v2 := @parameter1: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v3 := @parameter2: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v4 = virtualinvoke v3.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: long getCheckIntervalStart()>();
v5 = virtualinvoke v2.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: long getCheckIntervalStart()>();
v6 = v4 cmp v5;
if v6 == 0 goto label1;
v7 = virtualinvoke v2.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: int getEventCount()>();
v8 = virtualinvoke v1.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: int getClosingThreshold()>();
if v7 >= v8 goto label1;
v9 = 1;
goto label2;
label1:
v9 = 0;
label2:
return v9;
}
protected long fetchCheckInterval(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker)
{
long v2;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v1;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen v0;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen;
v1 := @parameter0: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v2 = virtualinvoke v1.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: long getClosingInterval()>();
return v2;
}
}