public class org.apache.commons.lang3.concurrent.EventCountCircuitBreaker extends org.apache.commons.lang3.concurrent.AbstractCircuitBreaker
{
private static final java.util.Map STRATEGY_MAP;
private final java.util.concurrent.atomic.AtomicReference checkIntervalData;
private final int openingThreshold;
private final long openingInterval;
private final int closingThreshold;
private final long closingInterval;
public void <init>(int, long, java.util.concurrent.TimeUnit, int, long, java.util.concurrent.TimeUnit)
{
long v10, v2, v5, v9;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v8;
java.util.concurrent.atomic.AtomicReference v7;
java.util.concurrent.TimeUnit v3, v6;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
int v1, v4;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 := @parameter3: int;
v5 := @parameter4: long;
v6 := @parameter5: java.util.concurrent.TimeUnit;
specialinvoke v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: void <init>()>();
v7 = new java.util.concurrent.atomic.AtomicReference;
v8 = new org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
specialinvoke v8.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: void <init>(int,long)>(0, 0L);
specialinvoke v7.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(v8);
v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: java.util.concurrent.atomic.AtomicReference checkIntervalData> = v7;
v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: int openingThreshold> = v1;
v9 = virtualinvoke v3.<java.util.concurrent.TimeUnit: long toNanos(long)>(v2);
v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: long openingInterval> = v9;
v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: int closingThreshold> = v4;
v10 = virtualinvoke v6.<java.util.concurrent.TimeUnit: long toNanos(long)>(v5);
v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: long closingInterval> = v10;
return;
}
public void <init>(int, long, java.util.concurrent.TimeUnit, int)
{
java.util.concurrent.TimeUnit v3;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
int v1, v4;
long v2;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 := @parameter3: int;
specialinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: void <init>(int,long,java.util.concurrent.TimeUnit,int,long,java.util.concurrent.TimeUnit)>(v1, v2, v3, v4, v2, v3);
return;
}
public void <init>(int, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
int v1;
long v2;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
specialinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: void <init>(int,long,java.util.concurrent.TimeUnit,int)>(v1, v2, v3, v1);
return;
}
public int getOpeningThreshold()
{
int v1;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 = v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: int openingThreshold>;
return v1;
}
public long getOpeningInterval()
{
long v1;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 = v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: long openingInterval>;
return v1;
}
public int getClosingThreshold()
{
int v1;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 = v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: int closingThreshold>;
return v1;
}
public long getClosingInterval()
{
long v1;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 = v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: long closingInterval>;
return v1;
}
public boolean checkState()
{
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
boolean v1;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 = specialinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: boolean performStateCheck(int)>(0);
return v1;
}
public boolean incrementAndCheckState(java.lang.Integer)
{
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
int v2;
java.lang.Integer v1;
boolean v3;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 := @parameter0: java.lang.Integer;
v2 = virtualinvoke v1.<java.lang.Integer: int intValue()>();
v3 = specialinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: boolean performStateCheck(int)>(v2);
return v3;
}
public boolean incrementAndCheckState()
{
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
java.lang.Integer v1;
boolean v2;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
v2 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: boolean incrementAndCheckState(java.lang.Integer)>(v1);
return v2;
}
public void open()
{
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
long v3;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v2;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
specialinvoke v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: void open()>();
v1 = v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: java.util.concurrent.atomic.AtomicReference checkIntervalData>;
v2 = new org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v3 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: long nanoTime()>();
specialinvoke v2.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: void <init>(int,long)>(0, v3);
virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v2);
return;
}
public void close()
{
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
long v3;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v2;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
specialinvoke v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: void close()>();
v1 = v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: java.util.concurrent.atomic.AtomicReference checkIntervalData>;
v2 = new org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v3 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: long nanoTime()>();
specialinvoke v2.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: void <init>(int,long)>(0, v3);
virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v2);
return;
}
private boolean performStateCheck(int)
{
long v2;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v7;
java.util.concurrent.atomic.AtomicReference v3, v5;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy v9;
int v1;
java.lang.Object v4, v6;
boolean v10, v11, v12, v8;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 := @parameter0: int;
label1:
v2 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: long nanoTime()>();
v3 = v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: java.util.concurrent.atomic.AtomicReference state>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v5 = v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: java.util.concurrent.atomic.AtomicReference checkIntervalData>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v7 = specialinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData nextCheckIntervalData(int,org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData,org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State,long)>(v1, v6, v4, v2);
v8 = specialinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: boolean updateCheckIntervalData(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData,org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData)>(v6, v7);
if v8 == 0 goto label1;
v9 = staticinvoke <org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy stateStrategy(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)>(v4);
v10 = virtualinvoke v9.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy: boolean isStateTransition(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker,org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData,org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData)>(v0, v6, v7);
if v10 == 0 goto label2;
v4 = virtualinvoke v4.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State oppositeState()>();
specialinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: void changeStateAndStartNewCheckInterval(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)>(v4);
label2:
v11 = staticinvoke <org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: boolean isOpen(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)>(v4);
if v11 != 0 goto label3;
v12 = 1;
goto label4;
label3:
v12 = 0;
label4:
return v12;
}
private boolean updateCheckIntervalData(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData)
{
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v1, v2;
java.util.concurrent.atomic.AtomicReference v3;
boolean v4, v5;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 := @parameter0: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v2 := @parameter1: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
if v1 == v2 goto label1;
v3 = v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: java.util.concurrent.atomic.AtomicReference checkIntervalData>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v1, v2);
if v4 == 0 goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
private void changeStateAndStartNewCheckInterval(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)
{
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State v1;
long v4;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v3;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 := @parameter0: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State;
virtualinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: void changeState(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)>(v1);
v2 = v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: java.util.concurrent.atomic.AtomicReference checkIntervalData>;
v3 = new org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v4 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: long nanoTime()>();
specialinvoke v3.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: void <init>(int,long)>(0, v4);
virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v3);
return;
}
private org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData nextCheckIntervalData(int, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData, org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State, long)
{
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State v3;
long v4;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v2, v7, v8;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy v5;
int v1;
boolean v6;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 := @parameter0: int;
v2 := @parameter1: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v3 := @parameter2: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State;
v4 := @parameter3: long;
v5 = staticinvoke <org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy stateStrategy(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)>(v3);
v6 = virtualinvoke v5.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy: boolean isCheckIntervalFinished(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker,org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData,long)>(v0, v2, v4);
if v6 == 0 goto label1;
v7 = new org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
specialinvoke v7.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: void <init>(int,long)>(v1, v4);
v8 = v7;
goto label2;
label1:
v8 = virtualinvoke v2.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData increment(int)>(v1);
label2:
return v8;
}
long nanoTime()
{
long v1;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v0;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v1 = staticinvoke <java.lang.System: long nanoTime()>();
return v1;
}
private static org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy stateStrategy(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)
{
java.lang.Object v2;
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State v0;
java.util.Map v1;
v0 := @parameter0: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State;
v1 = <org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: java.util.Map STRATEGY_MAP>;
v2 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
return v2;
}
private static java.util.Map createStrategyMap()
{
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen v4;
java.util.EnumMap v0;
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State v1, v3;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyClosed v2;
v0 = new java.util.EnumMap;
specialinvoke v0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;");
v1 = <org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State CLOSED>;
v2 = new org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyClosed;
specialinvoke v2.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyClosed: void <init>()>();
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
v3 = <org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State OPEN>;
v4 = new org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen;
specialinvoke v4.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen: void <init>()>();
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v4);
return v0;
}
static void <clinit>()
{
java.util.Map v0;
v0 = staticinvoke <org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: java.util.Map createStrategyMap()>();
<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker: java.util.Map STRATEGY_MAP> = v0;
return;
}
}