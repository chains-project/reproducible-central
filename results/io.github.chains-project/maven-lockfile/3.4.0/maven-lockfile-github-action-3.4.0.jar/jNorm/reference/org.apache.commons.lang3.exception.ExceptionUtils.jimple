public class org.apache.commons.lang3.exception.ExceptionUtils extends java.lang.Object
{
private static final int NOT_FOUND;
private static final java.lang.String[] CAUSE_METHOD_NAMES;
static final java.lang.String WRAPPED_MARKER;
public static java.lang.Throwable getCause(java.lang.Throwable)
{
java.lang.Throwable v0, v1;
v0 := @parameter0: java.lang.Throwable;
v1 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Throwable getCause(java.lang.Throwable,java.lang.String[])>(v0, null);
return v1;
}
public static java.lang.Throwable getCause(java.lang.Throwable, java.lang.String[])
{
java.lang.Throwable v0, v2, v7;
java.lang.String[] v1, v3;
int v4, v5;
java.lang.String v6;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.String[];
if v0 != null goto label1;
return null;
label1:
if v1 != null goto label3;
v2 = virtualinvoke v0.<java.lang.Throwable: java.lang.Throwable getCause()>();
if v2 == null goto label2;
return v2;
label2:
v1 = <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.String[] CAUSE_METHOD_NAMES>;
label3:
v3 = v1;
v4 = lengthof v1;
v5 = 0;
label4:
if v5 >= v4 goto label6;
v6 = v3[v5];
if v6 == null goto label5;
v7 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Throwable getCauseUsingMethodName(java.lang.Throwable,java.lang.String)>(v0, v6);
if v7 == null goto label5;
return v7;
label5:
v5 = v5 + 1;
goto label4;
label6:
return null;
}
private static java.lang.Throwable getCauseUsingMethodName(java.lang.Throwable, java.lang.String)
{
java.lang.Throwable v0;
java.lang.Object[] v9;
java.lang.Class[] v4;
java.lang.Exception v11, v5;
java.lang.Class v3, v6, v7;
java.lang.Object v10;
java.lang.String v1;
java.lang.reflect.Method v2;
boolean v8;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.String;
v2 = null;
label1:
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = newarray (java.lang.Class)[0];
v2 = virtualinvoke v3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v1, v4);
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
if v2 == null goto label8;
v6 = class "Ljava/lang/Throwable;";
v7 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
v8 = virtualinvoke v6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v7);
if v8 == 0 goto label8;
label5:
v9 = newarray (java.lang.Object)[0];
v10 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v9);
label6:
return v10;
label7:
v11 := @caughtexception;
label8:
return null;
catch java.lang.NoSuchMethodException from label1 to label2 with label3;
catch java.lang.SecurityException from label1 to label2 with label3;
catch java.lang.IllegalAccessException from label5 to label6 with label7;
catch java.lang.IllegalArgumentException from label5 to label6 with label7;
catch java.lang.reflect.InvocationTargetException from label5 to label6 with label7;
}
public static java.lang.String[] getDefaultCauseMethodNames()
{
java.lang.String[] v0;
java.lang.Object[] v1;
v0 = <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.String[] CAUSE_METHOD_NAMES>;
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(v0);
return v1;
}
public static java.lang.String getMessage(java.lang.Throwable)
{
java.lang.Throwable v0;
java.lang.String v1, v2, v3, v4;
v0 := @parameter0: java.lang.Throwable;
if v0 != null goto label1;
return "";
label1:
v1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Object,java.lang.String)>(v0, null);
v2 = virtualinvoke v0.<java.lang.Throwable: java.lang.String getMessage()>();
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String defaultString(java.lang.String)>(v2);
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001");
return v4;
}
public static java.lang.Throwable getRootCause(java.lang.Throwable)
{
java.lang.Throwable v0;
java.util.List v1;
int v3, v4;
java.lang.Object v5;
boolean v2;
v0 := @parameter0: java.lang.Throwable;
v1 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.util.List getThrowableList(java.lang.Throwable)>(v0);
v2 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
if v2 != 0 goto label1;
v3 = interfaceinvoke v1.<java.util.List: int size()>();
v4 = v3 - 1;
v5 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v4);
label1:
return v5;
}
public static java.lang.String getRootCauseMessage(java.lang.Throwable)
{
java.lang.Throwable v0, v1, v2;
java.lang.String v3;
v0 := @parameter0: java.lang.Throwable;
v1 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Throwable getRootCause(java.lang.Throwable)>(v0);
if v1 != null goto label1;
v2 = v0;
goto label2;
label1:
v2 = v1;
label2:
v3 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.String getMessage(java.lang.Throwable)>(v2);
return v3;
}
public static java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)
{
java.lang.Throwable v0, v11, v13, v15, v6;
java.lang.Object[] v19;
java.lang.String[] v1, v18;
java.util.ArrayList v4;
int v10, v12, v3, v5, v8;
java.lang.String v14, v16, v17;
java.util.List v7, v9;
java.lang.Throwable[] v2;
v0 := @parameter0: java.lang.Throwable;
if v0 != null goto label1;
v1 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
return v1;
label1:
v2 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Throwable[] getThrowables(java.lang.Throwable)>(v0);
v3 = lengthof v2;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v5 = v3 - 1;
v6 = v2[v5];
v7 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.util.List getStackFrameList(java.lang.Throwable)>(v6);
v8 = v3;
label2:
v8 = v8 - 1;
if v8 < 0 goto label6;
v9 = v7;
if v8 == 0 goto label3;
v10 = v8 - 1;
v11 = v2[v10];
v7 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.util.List getStackFrameList(java.lang.Throwable)>(v11);
staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: void removeCommonFrames(java.util.List,java.util.List)>(v9, v7);
label3:
v12 = v3 - 1;
if v8 != v12 goto label4;
v13 = v2[v8];
v14 = virtualinvoke v13.<java.lang.Throwable: java.lang.String toString()>();
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v14);
goto label5;
label4:
v15 = v2[v8];
v16 = virtualinvoke v15.<java.lang.Throwable: java.lang.String toString()>();
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" [wrapped] \u0001");
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v17);
label5:
interfaceinvoke v4.<java.util.List: boolean addAll(java.util.Collection)>(v9);
goto label2;
label6:
v18 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
v19 = interfaceinvoke v4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v18);
return v19;
}
static java.util.List getStackFrameList(java.lang.Throwable)
{
java.lang.Throwable v0;
java.util.ArrayList v4;
java.util.StringTokenizer v3;
int v8, v9;
java.lang.String v1, v10, v11, v2, v7;
boolean v12, v5, v6;
v0 := @parameter0: java.lang.Throwable;
v1 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.String getStackTrace(java.lang.Throwable)>(v0);
v2 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();
v3 = new java.util.StringTokenizer;
specialinvoke v3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(v1, v2);
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v5 = 0;
label1:
v6 = virtualinvoke v3.<java.util.StringTokenizer: boolean hasMoreTokens()>();
if v6 == 0 goto label3;
v7 = virtualinvoke v3.<java.util.StringTokenizer: java.lang.String nextToken()>();
v8 = virtualinvoke v7.<java.lang.String: int indexOf(java.lang.String)>("at");
v9 = (int) -1;
if v8 == v9 goto label2;
v10 = virtualinvoke v7.<java.lang.String: java.lang.String substring(int,int)>(0, v8);
v11 = virtualinvoke v10.<java.lang.String: java.lang.String trim()>();
v12 = virtualinvoke v11.<java.lang.String: boolean isEmpty()>();
if v12 == 0 goto label2;
v5 = 1;
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v7);
goto label1;
label2:
if v5 == 0 goto label1;
label3:
return v4;
}
static java.lang.String[] getStackFrames(java.lang.String)
{
java.lang.Object[] v7;
java.lang.String[] v6;
java.util.ArrayList v3;
java.util.StringTokenizer v2;
java.lang.String v0, v1, v5;
boolean v4;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();
v2 = new java.util.StringTokenizer;
specialinvoke v2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(v0, v1);
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
label1:
v4 = virtualinvoke v2.<java.util.StringTokenizer: boolean hasMoreTokens()>();
if v4 == 0 goto label2;
v5 = virtualinvoke v2.<java.util.StringTokenizer: java.lang.String nextToken()>();
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v5);
goto label1;
label2:
v6 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
v7 = interfaceinvoke v3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v6);
return v7;
}
public static java.lang.String[] getStackFrames(java.lang.Throwable)
{
java.lang.Throwable v0;
java.lang.String[] v1, v3;
java.lang.String v2;
v0 := @parameter0: java.lang.Throwable;
if v0 != null goto label1;
v1 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
return v1;
label1:
v2 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.String getStackTrace(java.lang.Throwable)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.String[] getStackFrames(java.lang.String)>(v2);
return v3;
}
public static java.lang.String getStackTrace(java.lang.Throwable)
{
java.io.PrintWriter v2;
java.lang.Throwable v0;
java.lang.StringBuffer v3;
java.io.StringWriter v1;
java.lang.String v4;
v0 := @parameter0: java.lang.Throwable;
v1 = new java.io.StringWriter;
specialinvoke v1.<java.io.StringWriter: void <init>()>();
v2 = new java.io.PrintWriter;
specialinvoke v2.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>(v1, 1);
virtualinvoke v0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(v2);
v3 = virtualinvoke v1.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();
v4 = virtualinvoke v3.<java.lang.StringBuffer: java.lang.String toString()>();
return v4;
}
public static int getThrowableCount(java.lang.Throwable)
{
int v2;
java.lang.Throwable v0;
java.util.List v1;
v0 := @parameter0: java.lang.Throwable;
v1 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.util.List getThrowableList(java.lang.Throwable)>(v0);
v2 = interfaceinvoke v1.<java.util.List: int size()>();
return v2;
}
public static java.util.List getThrowableList(java.lang.Throwable)
{
java.lang.Throwable v0;
boolean v2;
java.util.ArrayList v1;
v0 := @parameter0: java.lang.Throwable;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
label1:
if v0 == null goto label2;
v2 = interfaceinvoke v1.<java.util.List: boolean contains(java.lang.Object)>(v0);
if v2 != 0 goto label2;
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v0);
v0 = virtualinvoke v0.<java.lang.Throwable: java.lang.Throwable getCause()>();
goto label1;
label2:
return v1;
}
public static java.lang.Throwable[] getThrowables(java.lang.Throwable)
{
java.lang.Throwable v0;
java.util.List v1;
java.lang.Object[] v3;
java.lang.Throwable[] v2;
v0 := @parameter0: java.lang.Throwable;
v1 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.util.List getThrowableList(java.lang.Throwable)>(v0);
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Throwable[] EMPTY_THROWABLE_ARRAY>;
v3 = interfaceinvoke v1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v2);
return v3;
}
public static boolean hasCause(java.lang.Throwable, java.lang.Class)
{
java.lang.Throwable v0;
java.lang.Class v1;
boolean v2, v3;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.Class;
v2 = v0 instanceof java.lang.reflect.UndeclaredThrowableException;
if v2 == 0 goto label1;
v0 = virtualinvoke v0.<java.lang.Throwable: java.lang.Throwable getCause()>();
label1:
v3 = virtualinvoke v1.<java.lang.Class: boolean isInstance(java.lang.Object)>(v0);
return v3;
}
private static int indexOf(java.lang.Throwable, java.lang.Class, int, boolean)
{
java.lang.Throwable v0, v10, v15;
int v13, v14, v18, v2, v4, v6, v7, v8, v9;
boolean v12, v17, v3;
java.lang.Throwable[] v5;
java.lang.Class v1, v11, v16;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: int;
v3 := @parameter3: boolean;
if v0 == null goto label01;
if v1 != null goto label02;
label01:
v4 = (int) -1;
return v4;
label02:
if v2 >= 0 goto label03;
v2 = 0;
label03:
v5 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Throwable[] getThrowables(java.lang.Throwable)>(v0);
v6 = lengthof v5;
if v2 < v6 goto label04;
v7 = (int) -1;
return v7;
label04:
if v3 == 0 goto label07;
v8 = v2;
label05:
v9 = lengthof v5;
if v8 >= v9 goto label10;
v10 = v5[v8];
v11 = virtualinvoke v10.<java.lang.Object: java.lang.Class getClass()>();
v12 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v11);
if v12 == 0 goto label06;
return v8;
label06:
v8 = v8 + 1;
goto label05;
label07:
v13 = v2;
label08:
v14 = lengthof v5;
if v13 >= v14 goto label10;
v15 = v5[v13];
v16 = virtualinvoke v15.<java.lang.Object: java.lang.Class getClass()>();
v17 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v16);
if v17 == 0 goto label09;
return v13;
label09:
v13 = v13 + 1;
goto label08;
label10:
v18 = (int) -1;
return v18;
}
public static int indexOfThrowable(java.lang.Throwable, java.lang.Class)
{
int v2;
java.lang.Throwable v0;
java.lang.Class v1;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.Class;
v2 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: int indexOf(java.lang.Throwable,java.lang.Class,int,boolean)>(v0, v1, 0, 0);
return v2;
}
public static int indexOfThrowable(java.lang.Throwable, java.lang.Class, int)
{
java.lang.Throwable v0;
int v2, v3;
java.lang.Class v1;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: int indexOf(java.lang.Throwable,java.lang.Class,int,boolean)>(v0, v1, v2, 0);
return v3;
}
public static int indexOfType(java.lang.Throwable, java.lang.Class)
{
int v2;
java.lang.Throwable v0;
java.lang.Class v1;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.Class;
v2 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: int indexOf(java.lang.Throwable,java.lang.Class,int,boolean)>(v0, v1, 0, 1);
return v2;
}
public static int indexOfType(java.lang.Throwable, java.lang.Class, int)
{
java.lang.Throwable v0;
int v2, v3;
java.lang.Class v1;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: int indexOf(java.lang.Throwable,java.lang.Class,int,boolean)>(v0, v1, v2, 1);
return v3;
}
public static void printRootCauseStackTrace(java.lang.Throwable)
{
java.io.PrintStream v1;
java.lang.Throwable v0;
v0 := @parameter0: java.lang.Throwable;
v1 = <java.lang.System: java.io.PrintStream err>;
staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintStream)>(v0, v1);
return;
}
public static void printRootCauseStackTrace(java.lang.Throwable, java.io.PrintStream)
{
java.io.PrintStream v1;
java.lang.Throwable v0;
int v3, v4;
java.lang.String[] v2;
java.lang.String v5;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.io.PrintStream;
if v0 != null goto label1;
return;
label1:
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "printStream");
v2 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)>(v0);
v3 = lengthof v2;
v4 = 0;
label2:
if v4 >= v3 goto label3;
v5 = v2[v4];
virtualinvoke v1.<java.io.PrintStream: void println(java.lang.String)>(v5);
v4 = v4 + 1;
goto label2;
label3:
virtualinvoke v1.<java.io.PrintStream: void flush()>();
return;
}
public static void printRootCauseStackTrace(java.lang.Throwable, java.io.PrintWriter)
{
java.io.PrintWriter v1;
java.lang.Throwable v0;
int v3, v4;
java.lang.String[] v2;
java.lang.String v5;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.io.PrintWriter;
if v0 != null goto label1;
return;
label1:
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "printWriter");
v2 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)>(v0);
v3 = lengthof v2;
v4 = 0;
label2:
if v4 >= v3 goto label3;
v5 = v2[v4];
virtualinvoke v1.<java.io.PrintWriter: void println(java.lang.String)>(v5);
v4 = v4 + 1;
goto label2;
label3:
virtualinvoke v1.<java.io.PrintWriter: void flush()>();
return;
}
public static void removeCommonFrames(java.util.List, java.util.List)
{
java.lang.IllegalArgumentException v2;
java.util.List v0, v1;
int v3, v4, v5, v6;
java.lang.Object v7, v8;
boolean v9;
v0 := @parameter0: java.util.List;
v1 := @parameter1: java.util.List;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The List must not be null");
throw v2;
label2:
v3 = interfaceinvoke v0.<java.util.List: int size()>();
v4 = v3 - 1;
v5 = interfaceinvoke v1.<java.util.List: int size()>();
v6 = v5 - 1;
label3:
if v4 < 0 goto label5;
if v6 < 0 goto label5;
v7 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(v4);
v8 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v6);
v9 = virtualinvoke v7.<java.lang.String: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label4;
interfaceinvoke v0.<java.util.List: java.lang.Object remove(int)>(v4);
label4:
v4 = v4 - 1;
v6 = v6 - 1;
goto label3;
label5:
return;
}
public static java.lang.Object rethrow(java.lang.Throwable)
{
java.lang.Throwable v0;
java.lang.Object v1;
v0 := @parameter0: java.lang.Throwable;
v1 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Object typeErasure(java.lang.Throwable)>(v0);
return v1;
}
private static java.lang.Throwable throwableOf(java.lang.Throwable, java.lang.Class, int, boolean)
{
java.lang.Throwable v0, v11, v15, v18, v8;
int v13, v14, v2, v5, v6, v7;
boolean v10, v17, v3;
java.lang.Throwable[] v4;
java.lang.Class v1, v16, v9;
java.lang.Object v12, v19;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: int;
v3 := @parameter3: boolean;
if v0 == null goto label01;
if v1 != null goto label02;
label01:
return null;
label02:
if v2 >= 0 goto label03;
v2 = 0;
label03:
v4 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Throwable[] getThrowables(java.lang.Throwable)>(v0);
v5 = lengthof v4;
if v2 < v5 goto label04;
return null;
label04:
if v3 == 0 goto label07;
v6 = v2;
label05:
v7 = lengthof v4;
if v6 >= v7 goto label10;
v8 = v4[v6];
v9 = virtualinvoke v8.<java.lang.Object: java.lang.Class getClass()>();
v10 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v9);
if v10 == 0 goto label06;
v11 = v4[v6];
v12 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v11);
return v12;
label06:
v6 = v6 + 1;
goto label05;
label07:
v13 = v2;
label08:
v14 = lengthof v4;
if v13 >= v14 goto label10;
v15 = v4[v13];
v16 = virtualinvoke v15.<java.lang.Object: java.lang.Class getClass()>();
v17 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v16);
if v17 == 0 goto label09;
v18 = v4[v13];
v19 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v18);
return v19;
label09:
v13 = v13 + 1;
goto label08;
label10:
return null;
}
public static java.lang.Throwable throwableOfThrowable(java.lang.Throwable, java.lang.Class)
{
java.lang.Throwable v0, v2;
java.lang.Class v1;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.Class;
v2 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Throwable throwableOf(java.lang.Throwable,java.lang.Class,int,boolean)>(v0, v1, 0, 0);
return v2;
}
public static java.lang.Throwable throwableOfThrowable(java.lang.Throwable, java.lang.Class, int)
{
java.lang.Throwable v0, v3;
int v2;
java.lang.Class v1;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Throwable throwableOf(java.lang.Throwable,java.lang.Class,int,boolean)>(v0, v1, v2, 0);
return v3;
}
public static java.lang.Throwable throwableOfType(java.lang.Throwable, java.lang.Class)
{
java.lang.Throwable v0, v2;
java.lang.Class v1;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.Class;
v2 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Throwable throwableOf(java.lang.Throwable,java.lang.Class,int,boolean)>(v0, v1, 0, 1);
return v2;
}
public static java.lang.Throwable throwableOfType(java.lang.Throwable, java.lang.Class, int)
{
java.lang.Throwable v0, v3;
int v2;
java.lang.Class v1;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Throwable throwableOf(java.lang.Throwable,java.lang.Class,int,boolean)>(v0, v1, v2, 1);
return v3;
}
private static java.lang.Object typeErasure(java.lang.Throwable) throws java.lang.Throwable
{
java.lang.Throwable v0;
v0 := @parameter0: java.lang.Throwable;
throw v0;
}
public static java.lang.Object wrapAndThrow(java.lang.Throwable)
{
java.lang.Throwable v0;
java.lang.reflect.UndeclaredThrowableException v3;
boolean v1, v2;
v0 := @parameter0: java.lang.Throwable;
v1 = v0 instanceof java.lang.RuntimeException;
if v1 == 0 goto label1;
throw v0;
label1:
v2 = v0 instanceof java.lang.Error;
if v2 == 0 goto label2;
throw v0;
label2:
v3 = new java.lang.reflect.UndeclaredThrowableException;
specialinvoke v3.<java.lang.reflect.UndeclaredThrowableException: void <init>(java.lang.Throwable)>(v0);
throw v3;
}
public void <init>()
{
org.apache.commons.lang3.exception.ExceptionUtils v0;
v0 := @this: org.apache.commons.lang3.exception.ExceptionUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
java.lang.String[] v0;
v0 = newarray (java.lang.String)[12];
v0[0] = "getCause";
v0[1] = "getNextException";
v0[2] = "getTargetException";
v0[3] = "getException";
v0[4] = "getSourceException";
v0[5] = "getRootCause";
v0[6] = "getCausedByException";
v0[7] = "getNested";
v0[8] = "getLinkedException";
v0[9] = "getNestedException";
v0[10] = "getLinkedCause";
v0[11] = "getThrowable";
<org.apache.commons.lang3.exception.ExceptionUtils: java.lang.String[] CAUSE_METHOD_NAMES> = v0;
return;
}
}