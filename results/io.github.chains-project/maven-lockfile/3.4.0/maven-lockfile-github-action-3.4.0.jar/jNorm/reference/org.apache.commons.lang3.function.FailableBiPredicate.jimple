public interface  org.apache.commons.lang3.function.FailableBiPredicate extends java.lang.Object
{
public static final org.apache.commons.lang3.function.FailableBiPredicate FALSE;
public static final org.apache.commons.lang3.function.FailableBiPredicate TRUE;
public static org.apache.commons.lang3.function.FailableBiPredicate falsePredicate()
{
org.apache.commons.lang3.function.FailableBiPredicate v0;
v0 = <org.apache.commons.lang3.function.FailableBiPredicate: org.apache.commons.lang3.function.FailableBiPredicate FALSE>;
return v0;
}
public static org.apache.commons.lang3.function.FailableBiPredicate truePredicate()
{
org.apache.commons.lang3.function.FailableBiPredicate v0;
v0 = <org.apache.commons.lang3.function.FailableBiPredicate: org.apache.commons.lang3.function.FailableBiPredicate TRUE>;
return v0;
}
public org.apache.commons.lang3.function.FailableBiPredicate and(org.apache.commons.lang3.function.FailableBiPredicate)
{
org.apache.commons.lang3.function.FailableBiPredicate v0, v1, v2;
v0 := @this: org.apache.commons.lang3.function.FailableBiPredicate;
v1 := @parameter0: org.apache.commons.lang3.function.FailableBiPredicate;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.function.FailableBiPredicate$lambda_and_2__208: org.apache.commons.lang3.function.FailableBiPredicate bootstrap$(org.apache.commons.lang3.function.FailableBiPredicate,org.apache.commons.lang3.function.FailableBiPredicate)>(v0, v1);
return v2;
}
public org.apache.commons.lang3.function.FailableBiPredicate negate()
{
org.apache.commons.lang3.function.FailableBiPredicate v0, v1;
v0 := @this: org.apache.commons.lang3.function.FailableBiPredicate;
v1 = staticinvoke <org.apache.commons.lang3.function.FailableBiPredicate$lambda_negate_3__209: org.apache.commons.lang3.function.FailableBiPredicate bootstrap$(org.apache.commons.lang3.function.FailableBiPredicate)>(v0);
return v1;
}
public org.apache.commons.lang3.function.FailableBiPredicate or(org.apache.commons.lang3.function.FailableBiPredicate)
{
org.apache.commons.lang3.function.FailableBiPredicate v0, v1, v2;
v0 := @this: org.apache.commons.lang3.function.FailableBiPredicate;
v1 := @parameter0: org.apache.commons.lang3.function.FailableBiPredicate;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.function.FailableBiPredicate$lambda_or_4__210: org.apache.commons.lang3.function.FailableBiPredicate bootstrap$(org.apache.commons.lang3.function.FailableBiPredicate,org.apache.commons.lang3.function.FailableBiPredicate)>(v0, v1);
return v2;
}
public abstract boolean test(java.lang.Object, java.lang.Object) throws java.lang.Throwable;
static void <clinit>()
{
org.apache.commons.lang3.function.FailableBiPredicate v0, v1;
v0 = staticinvoke <org.apache.commons.lang3.function.FailableBiPredicate$lambda_static_0__211: org.apache.commons.lang3.function.FailableBiPredicate bootstrap$()>();
<org.apache.commons.lang3.function.FailableBiPredicate: org.apache.commons.lang3.function.FailableBiPredicate FALSE> = v0;
v1 = staticinvoke <org.apache.commons.lang3.function.FailableBiPredicate$lambda_static_1__212: org.apache.commons.lang3.function.FailableBiPredicate bootstrap$()>();
<org.apache.commons.lang3.function.FailableBiPredicate: org.apache.commons.lang3.function.FailableBiPredicate TRUE> = v1;
return;
}
}