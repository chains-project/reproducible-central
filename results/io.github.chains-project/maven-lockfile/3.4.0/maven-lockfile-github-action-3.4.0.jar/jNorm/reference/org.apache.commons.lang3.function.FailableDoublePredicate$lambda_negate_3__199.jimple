public final class org.apache.commons.lang3.function.FailableDoublePredicate$lambda_negate_3__199 extends java.lang.Object implements org.apache.commons.lang3.function.FailableDoublePredicate
{
org.apache.commons.lang3.function.FailableDoublePredicate cap0;
public static org.apache.commons.lang3.function.FailableDoublePredicate bootstrap$(org.apache.commons.lang3.function.FailableDoublePredicate)
{
org.apache.commons.lang3.function.FailableDoublePredicate v0;
org.apache.commons.lang3.function.FailableDoublePredicate$lambda_negate_3__199 v1;
v0 := @parameter0: org.apache.commons.lang3.function.FailableDoublePredicate;
v1 = new org.apache.commons.lang3.function.FailableDoublePredicate$lambda_negate_3__199;
specialinvoke v1.<org.apache.commons.lang3.function.FailableDoublePredicate$lambda_negate_3__199: void <init>(org.apache.commons.lang3.function.FailableDoublePredicate)>(v0);
return v1;
}
public void <init>(org.apache.commons.lang3.function.FailableDoublePredicate)
{
org.apache.commons.lang3.function.FailableDoublePredicate v1;
org.apache.commons.lang3.function.FailableDoublePredicate$lambda_negate_3__199 v0;
v0 := @this: org.apache.commons.lang3.function.FailableDoublePredicate$lambda_negate_3__199;
v1 := @parameter0: org.apache.commons.lang3.function.FailableDoublePredicate;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.apache.commons.lang3.function.FailableDoublePredicate$lambda_negate_3__199: org.apache.commons.lang3.function.FailableDoublePredicate cap0> = v1;
return;
}
public boolean test(double)
{
org.apache.commons.lang3.function.FailableDoublePredicate v2;
boolean v3;
double v1;
org.apache.commons.lang3.function.FailableDoublePredicate$lambda_negate_3__199 v0;
v0 := @this: org.apache.commons.lang3.function.FailableDoublePredicate$lambda_negate_3__199;
v1 := @parameter0: double;
v2 = v0.<org.apache.commons.lang3.function.FailableDoublePredicate$lambda_negate_3__199: org.apache.commons.lang3.function.FailableDoublePredicate cap0>;
v3 = interfaceinvoke v2.<org.apache.commons.lang3.function.FailableDoublePredicate: boolean lambda$negate$3(double)>(v1);
return v3;
}
}