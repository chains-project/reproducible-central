public final class org.apache.commons.lang3.math.Fraction extends java.lang.Number implements java.lang.Comparable
{
private static final long serialVersionUID;
public static final org.apache.commons.lang3.math.Fraction ZERO;
public static final org.apache.commons.lang3.math.Fraction ONE;
public static final org.apache.commons.lang3.math.Fraction ONE_HALF;
public static final org.apache.commons.lang3.math.Fraction ONE_THIRD;
public static final org.apache.commons.lang3.math.Fraction TWO_THIRDS;
public static final org.apache.commons.lang3.math.Fraction ONE_QUARTER;
public static final org.apache.commons.lang3.math.Fraction TWO_QUARTERS;
public static final org.apache.commons.lang3.math.Fraction THREE_QUARTERS;
public static final org.apache.commons.lang3.math.Fraction ONE_FIFTH;
public static final org.apache.commons.lang3.math.Fraction TWO_FIFTHS;
public static final org.apache.commons.lang3.math.Fraction THREE_FIFTHS;
public static final org.apache.commons.lang3.math.Fraction FOUR_FIFTHS;
private final int numerator;
private final int denominator;
private transient int hashCode;
private transient java.lang.String toString;
private transient java.lang.String toProperString;
private void <init>(int, int)
{
int v1, v2;
org.apache.commons.lang3.math.Fraction v0;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 := @parameter0: int;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Number: void <init>()>();
v0.<org.apache.commons.lang3.math.Fraction: int numerator> = v1;
v0.<org.apache.commons.lang3.math.Fraction: int denominator> = v2;
return;
}
public static org.apache.commons.lang3.math.Fraction getFraction(int, int)
{
int v0, v1;
java.lang.ArithmeticException v2, v3;
org.apache.commons.lang3.math.Fraction v4;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v1 != 0 goto label1;
v2 = new java.lang.ArithmeticException;
specialinvoke v2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The denominator must not be zero");
throw v2;
label1:
if v1 >= 0 goto label4;
if v0 == -2147483648 goto label2;
if v1 != -2147483648 goto label3;
label2:
v3 = new java.lang.ArithmeticException;
specialinvoke v3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: can\'t negate");
throw v3;
label3:
v0 = neg v0;
v1 = neg v1;
label4:
v4 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v4.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(v0, v1);
return v4;
}
public static org.apache.commons.lang3.math.Fraction getFraction(int, int, int)
{
long v6, v7, v8;
byte v10, v9;
int v0, v1, v2;
java.lang.ArithmeticException v11, v3, v4, v5;
org.apache.commons.lang3.math.Fraction v12;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
if v2 != 0 goto label1;
v3 = new java.lang.ArithmeticException;
specialinvoke v3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The denominator must not be zero");
throw v3;
label1:
if v2 >= 0 goto label2;
v4 = new java.lang.ArithmeticException;
specialinvoke v4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The denominator must not be negative");
throw v4;
label2:
if v1 >= 0 goto label3;
v5 = new java.lang.ArithmeticException;
specialinvoke v5.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The numerator must not be negative");
throw v5;
label3:
if v0 >= 0 goto label4;
v6 = v0 * v2;
v7 = v6 - v1;
goto label5;
label4:
v8 = v0 * v2;
v7 = v8 + v1;
label5:
v9 = v7 cmp -2147483648L;
if v9 < 0 goto label6;
v10 = v7 cmp 2147483647L;
if v10 <= 0 goto label7;
label6:
v11 = new java.lang.ArithmeticException;
specialinvoke v11.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Numerator too large to represent as an Integer.");
throw v11;
label7:
v12 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v12.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(v7, v2);
return v12;
}
public static org.apache.commons.lang3.math.Fraction getReducedFraction(int, int)
{
int v0, v1, v4, v6, v7, v8;
java.lang.ArithmeticException v2, v5;
org.apache.commons.lang3.math.Fraction v3, v9;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v1 != 0 goto label1;
v2 = new java.lang.ArithmeticException;
specialinvoke v2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The denominator must not be zero");
throw v2;
label1:
if v0 != 0 goto label2;
v3 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO>;
return v3;
label2:
if v1 != -2147483648 goto label3;
v4 = v0 & 1;
if v4 != 0 goto label3;
v0 = v0 / 2;
v1 = v1 / 2;
label3:
if v1 >= 0 goto label6;
if v0 == -2147483648 goto label4;
if v1 != -2147483648 goto label5;
label4:
v5 = new java.lang.ArithmeticException;
specialinvoke v5.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: can\'t negate");
throw v5;
label5:
v0 = neg v0;
v1 = neg v1;
label6:
v6 = staticinvoke <org.apache.commons.lang3.math.Fraction: int greatestCommonDivisor(int,int)>(v0, v1);
v7 = v0 / v6;
v8 = v1 / v6;
v9 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v9.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(v7, v8);
return v9;
}
public static org.apache.commons.lang3.math.Fraction getFraction(double)
{
byte v1, v2, v27, v3, v5;
java.lang.ArithmeticException v28, v7;
boolean v6;
org.apache.commons.lang3.math.Fraction v32;
int v10, v11, v12, v16, v21, v22, v23, v24, v29, v30, v31, v33, v34, v35, v9;
double v0, v13, v14, v15, v17, v18, v19, v20, v25, v26, v4, v8;
v0 := @parameter0: double;
v1 = v0 cmpg 0.0;
if v1 >= 0 goto label1;
v2 = -1;
goto label2;
label1:
v2 = 1;
label2:
v3 = v2;
v4 = staticinvoke <java.lang.Math: double abs(double)>(v0);
v5 = v4 cmpl 2.147483647E9;
if v5 > 0 goto label3;
v6 = staticinvoke <java.lang.Double: boolean isNaN(double)>(v4);
if v6 == 0 goto label4;
label3:
v7 = new java.lang.ArithmeticException;
specialinvoke v7.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The value must not be greater than Integer.MAX_VALUE or NaN");
throw v7;
label4:
v8 = v4 - v33;
v9 = 0;
v10 = 1;
v11 = 1;
v12 = 0;
v13 = 1.0;
v14 = v8 - v34;
v15 = 1.7976931348623157E308;
v16 = 1;
label5:
v17 = v15;
v18 = v13 / v14;
v19 = v35 * v14;
v20 = v13 - v19;
v21 = v8 * v11;
v22 = v21 + v9;
v23 = v8 * v12;
v24 = v23 + v10;
v25 = v22 / v24;
v26 = v8 - v25;
v15 = staticinvoke <java.lang.Math: double abs(double)>(v26);
v8 = v18;
v13 = v14;
v14 = v20;
v9 = v11;
v10 = v12;
v11 = v22;
v12 = v24;
v16 = v16 + 1;
v27 = v17 cmpl v15;
if v27 <= 0 goto label6;
if v24 > 10000 goto label6;
if v24 <= 0 goto label6;
if v16 < 25 goto label5;
label6:
if v16 != 25 goto label7;
v28 = new java.lang.ArithmeticException;
specialinvoke v28.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Unable to convert double to fraction");
throw v28;
label7:
v29 = v4 * v10;
v30 = v9 + v29;
v31 = v30 * v3;
v32 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(v31, v10);
return v32;
}
public static org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)
{
java.lang.Object[] v1;
int v10, v13, v14, v16, v18, v19, v2, v22, v23, v25, v5, v7, v8;
java.lang.String v0, v12, v15, v21, v24, v6, v9;
double v3;
java.lang.NumberFormatException v11;
org.apache.commons.lang3.math.Fraction v17, v20, v26, v4;
v0 := @parameter0: java.lang.String;
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "str", v1);
v2 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(46);
if v2 < 0 goto label1;
v3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(v0);
v4 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(v3);
return v4;
label1:
v5 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(32);
if v5 <= 0 goto label3;
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v5);
v7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v6);
v8 = v5 + 1;
v9 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v8);
v10 = virtualinvoke v9.<java.lang.String: int indexOf(int)>(47);
if v10 >= 0 goto label2;
v11 = new java.lang.NumberFormatException;
specialinvoke v11.<java.lang.NumberFormatException: void <init>(java.lang.String)>("The fraction could not be parsed as the format X Y/Z");
throw v11;
label2:
v12 = virtualinvoke v9.<java.lang.String: java.lang.String substring(int,int)>(0, v10);
v13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v12);
v14 = v10 + 1;
v15 = virtualinvoke v9.<java.lang.String: java.lang.String substring(int)>(v14);
v16 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v15);
v17 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(v7, v13, v16);
return v17;
label3:
v18 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(47);
if v18 >= 0 goto label4;
v19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v0);
v20 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(v19, 1);
return v20;
label4:
v21 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v18);
v22 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v21);
v23 = v18 + 1;
v24 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v23);
v25 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v24);
v26 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(v22, v25);
return v26;
}
public int getNumerator()
{
int v1;
org.apache.commons.lang3.math.Fraction v0;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
return v1;
}
public int getDenominator()
{
int v1;
org.apache.commons.lang3.math.Fraction v0;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
return v1;
}
public int getProperNumerator()
{
int v1, v2, v3, v4;
org.apache.commons.lang3.math.Fraction v0;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v2 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v3 = v1 % v2;
v4 = staticinvoke <java.lang.Math: int abs(int)>(v3);
return v4;
}
public int getProperWhole()
{
int v1, v2, v3;
org.apache.commons.lang3.math.Fraction v0;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v2 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v3 = v1 / v2;
return v3;
}
public int intValue()
{
int v1, v2, v3;
org.apache.commons.lang3.math.Fraction v0;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v2 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v3 = v1 / v2;
return v3;
}
public long longValue()
{
int v1, v2;
long v3;
org.apache.commons.lang3.math.Fraction v0;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v2 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v3 = v1 / v2;
return v3;
}
public float floatValue()
{
int v1, v2;
float v3;
org.apache.commons.lang3.math.Fraction v0;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v2 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v3 = v1 / v2;
return v3;
}
public double doubleValue()
{
int v1, v2;
org.apache.commons.lang3.math.Fraction v0;
double v3;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v2 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v3 = v1 / v2;
return v3;
}
public org.apache.commons.lang3.math.Fraction reduce()
{
int v1, v10, v11, v12, v5, v6, v7, v8, v9;
org.apache.commons.lang3.math.Fraction v0, v13, v2, v4;
boolean v3;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v1 != 0 goto label3;
v2 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO>;
v3 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: boolean equals(java.lang.Object)>(v2);
if v3 == 0 goto label1;
v4 = v0;
goto label2;
label1:
v4 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO>;
label2:
return v4;
label3:
v5 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v6 = staticinvoke <java.lang.Math: int abs(int)>(v5);
v7 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v8 = staticinvoke <org.apache.commons.lang3.math.Fraction: int greatestCommonDivisor(int,int)>(v6, v7);
if v8 != 1 goto label4;
return v0;
label4:
v9 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v10 = v9 / v8;
v11 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v12 = v11 / v8;
v13 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(v10, v12);
return v13;
}
public org.apache.commons.lang3.math.Fraction invert()
{
int v1, v10, v12, v13, v3, v5, v7, v8, v9;
java.lang.ArithmeticException v2, v4;
org.apache.commons.lang3.math.Fraction v0, v11, v6;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v1 != 0 goto label1;
v2 = new java.lang.ArithmeticException;
specialinvoke v2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Unable to invert zero.");
throw v2;
label1:
v3 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v3 != -2147483648 goto label2;
v4 = new java.lang.ArithmeticException;
specialinvoke v4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: can\'t negate numerator");
throw v4;
label2:
v5 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v5 >= 0 goto label3;
v6 = new org.apache.commons.lang3.math.Fraction;
v7 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v8 = neg v7;
v9 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v10 = neg v9;
specialinvoke v6.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(v8, v10);
return v6;
label3:
v11 = new org.apache.commons.lang3.math.Fraction;
v12 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v13 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
specialinvoke v11.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(v12, v13);
return v11;
}
public org.apache.commons.lang3.math.Fraction negate()
{
int v1, v4, v5, v6;
java.lang.ArithmeticException v2;
org.apache.commons.lang3.math.Fraction v0, v3;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v1 != -2147483648 goto label1;
v2 = new java.lang.ArithmeticException;
specialinvoke v2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: too large to negate");
throw v2;
label1:
v3 = new org.apache.commons.lang3.math.Fraction;
v4 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v5 = neg v4;
v6 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
specialinvoke v3.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(v5, v6);
return v3;
}
public org.apache.commons.lang3.math.Fraction abs()
{
int v1;
org.apache.commons.lang3.math.Fraction v0, v2;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v1 < 0 goto label1;
return v0;
label1:
v2 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction negate()>();
return v2;
}
public org.apache.commons.lang3.math.Fraction pow(int)
{
int v1, v12, v13, v15, v5, v6, v9;
org.apache.commons.lang3.math.Fraction v0, v10, v11, v14, v16, v17, v2, v3, v4, v7, v8;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 := @parameter0: int;
if v1 != 1 goto label1;
return v0;
label1:
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;
return v2;
label2:
if v1 >= 0 goto label4;
if v1 != -2147483648 goto label3;
v3 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction invert()>();
v4 = virtualinvoke v3.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(2);
v5 = v1 / 2;
v6 = neg v5;
v7 = virtualinvoke v4.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(v6);
return v7;
label3:
v8 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction invert()>();
v9 = neg v1;
v10 = virtualinvoke v8.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(v9);
return v10;
label4:
v11 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>(v0);
v12 = v1 % 2;
if v12 != 0 goto label5;
v13 = v1 / 2;
v14 = virtualinvoke v11.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(v13);
return v14;
label5:
v15 = v1 / 2;
v16 = virtualinvoke v11.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(v15);
v17 = virtualinvoke v16.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>(v0);
return v17;
}
private static int greatestCommonDivisor(int, int)
{
int v0, v1, v10, v12, v13, v14, v15, v16, v17, v18, v19, v20, v3, v4, v5, v6, v7, v8, v9;
java.lang.ArithmeticException v11, v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v0 == 0 goto label01;
if v1 != 0 goto label04;
label01:
if v0 == -2147483648 goto label02;
if v1 != -2147483648 goto label03;
label02:
v2 = new java.lang.ArithmeticException;
specialinvoke v2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: gcd is 2^31");
throw v2;
label03:
v3 = staticinvoke <java.lang.Math: int abs(int)>(v0);
v4 = staticinvoke <java.lang.Math: int abs(int)>(v1);
v5 = v3 + v4;
return v5;
label04:
v6 = staticinvoke <java.lang.Math: int abs(int)>(v0);
if v6 == 1 goto label05;
v7 = staticinvoke <java.lang.Math: int abs(int)>(v1);
if v7 != 1 goto label06;
label05:
return 1;
label06:
if v0 <= 0 goto label07;
v0 = neg v0;
label07:
if v1 <= 0 goto label08;
v1 = neg v1;
label08:
v8 = 0;
label09:
v9 = v0 & 1;
if v9 != 0 goto label10;
v10 = v1 & 1;
if v10 != 0 goto label10;
if v8 >= 31 goto label10;
v0 = v0 / 2;
v1 = v1 / 2;
v8 = v8 + 1;
goto label09;
label10:
if v8 != 31 goto label11;
v11 = new java.lang.ArithmeticException;
specialinvoke v11.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: gcd is 2^31");
throw v11;
label11:
v12 = v0 & 1;
if v12 != 1 goto label12;
v13 = v1;
goto label13;
label12:
v14 = v0 / 2;
v13 = neg v14;
label13:
v15 = v13;
label14:
v16 = v15 & 1;
if v16 != 0 goto label15;
v15 = v15 / 2;
goto label14;
label15:
if v15 <= 0 goto label16;
v0 = neg v15;
goto label17;
label16:
v1 = v15;
label17:
v17 = v1 - v0;
v15 = v17 / 2;
if v15 != 0 goto label14;
v18 = neg v0;
v19 = 1 << v8;
v20 = v18 * v19;
return v20;
}
private static int mulAndCheck(int, int)
{
byte v3, v4;
int v0, v1;
java.lang.ArithmeticException v5;
long v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = v0 * v1;
v3 = v2 cmp -2147483648L;
if v3 < 0 goto label1;
v4 = v2 cmp 2147483647L;
if v4 <= 0 goto label2;
label1:
v5 = new java.lang.ArithmeticException;
specialinvoke v5.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: mul");
throw v5;
label2:
return v2;
}
private static int mulPosAndCheck(int, int)
{
byte v3;
int v0, v1;
java.lang.ArithmeticException v4;
long v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = v0 * v1;
v3 = v2 cmp 2147483647L;
if v3 <= 0 goto label1;
v4 = new java.lang.ArithmeticException;
specialinvoke v4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: mulPos");
throw v4;
label1:
return v2;
}
private static int addAndCheck(int, int)
{
byte v3, v4;
int v0, v1;
java.lang.ArithmeticException v5;
long v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = v0 + v1;
v3 = v2 cmp -2147483648L;
if v3 < 0 goto label1;
v4 = v2 cmp 2147483647L;
if v4 <= 0 goto label2;
label1:
v5 = new java.lang.ArithmeticException;
specialinvoke v5.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: add");
throw v5;
label2:
return v2;
}
private static int subAndCheck(int, int)
{
byte v3, v4;
int v0, v1;
java.lang.ArithmeticException v5;
long v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = v0 - v1;
v3 = v2 cmp -2147483648L;
if v3 < 0 goto label1;
v4 = v2 cmp 2147483647L;
if v4 <= 0 goto label2;
label1:
v5 = new java.lang.ArithmeticException;
specialinvoke v5.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: add");
throw v5;
label2:
return v2;
}
public org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)
{
org.apache.commons.lang3.math.Fraction v0, v1, v2;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 := @parameter0: org.apache.commons.lang3.math.Fraction;
v2 = specialinvoke v0.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction addSub(org.apache.commons.lang3.math.Fraction,boolean)>(v1, 1);
return v2;
}
public org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)
{
org.apache.commons.lang3.math.Fraction v0, v1, v2;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 := @parameter0: org.apache.commons.lang3.math.Fraction;
v2 = specialinvoke v0.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction addSub(org.apache.commons.lang3.math.Fraction,boolean)>(v1, 0);
return v2;
}
private org.apache.commons.lang3.math.Fraction addSub(org.apache.commons.lang3.math.Fraction, boolean)
{
java.lang.ArithmeticException v42;
java.math.BigInteger v22, v25, v26, v28, v31, v32, v33, v34, v35, v36, v39, v40;
boolean v2;
org.apache.commons.lang3.math.Fraction v0, v1, v16, v43, v5;
java.lang.Object[] v3;
int v10, v11, v12, v13, v14, v15, v17, v18, v19, v20, v21, v23, v24, v27, v29, v30, v37, v38, v4, v41, v44, v45, v46, v47, v48, v49, v6, v7, v8, v9;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 := @parameter0: org.apache.commons.lang3.math.Fraction;
v2 := @parameter1: boolean;
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "fraction", v3);
v4 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v4 != 0 goto label03;
if v2 == 0 goto label01;
v5 = v1;
goto label02;
label01:
v5 = virtualinvoke v1.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction negate()>();
label02:
return v5;
label03:
v6 = v1.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v6 != 0 goto label04;
return v0;
label04:
v7 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v8 = v1.<org.apache.commons.lang3.math.Fraction: int denominator>;
v9 = staticinvoke <org.apache.commons.lang3.math.Fraction: int greatestCommonDivisor(int,int)>(v7, v8);
if v9 != 1 goto label07;
v10 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v11 = v1.<org.apache.commons.lang3.math.Fraction: int denominator>;
v12 = staticinvoke <org.apache.commons.lang3.math.Fraction: int mulAndCheck(int,int)>(v10, v11);
v13 = v1.<org.apache.commons.lang3.math.Fraction: int numerator>;
v14 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v15 = staticinvoke <org.apache.commons.lang3.math.Fraction: int mulAndCheck(int,int)>(v13, v14);
v16 = new org.apache.commons.lang3.math.Fraction;
if v2 == 0 goto label05;
v17 = staticinvoke <org.apache.commons.lang3.math.Fraction: int addAndCheck(int,int)>(v12, v15);
goto label06;
label05:
v17 = staticinvoke <org.apache.commons.lang3.math.Fraction: int subAndCheck(int,int)>(v12, v15);
label06:
v18 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v19 = v1.<org.apache.commons.lang3.math.Fraction: int denominator>;
v20 = staticinvoke <org.apache.commons.lang3.math.Fraction: int mulPosAndCheck(int,int)>(v18, v19);
specialinvoke v16.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(v17, v20);
return v16;
label07:
v21 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v22 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(v21);
v23 = v1.<org.apache.commons.lang3.math.Fraction: int denominator>;
v24 = v23 / v9;
v25 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(v24);
v26 = virtualinvoke v22.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(v25);
v27 = v1.<org.apache.commons.lang3.math.Fraction: int numerator>;
v28 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(v27);
v29 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v30 = v29 / v9;
v31 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(v30);
v32 = virtualinvoke v28.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(v31);
if v2 == 0 goto label08;
v33 = virtualinvoke v26.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(v32);
goto label09;
label08:
v33 = virtualinvoke v26.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(v32);
label09:
v34 = v33;
v35 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(v9);
v36 = virtualinvoke v33.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(v35);
v37 = virtualinvoke v36.<java.math.BigInteger: int intValue()>();
if v37 != 0 goto label10;
v38 = v9;
goto label11;
label10:
v38 = staticinvoke <org.apache.commons.lang3.math.Fraction: int greatestCommonDivisor(int,int)>(v37, v9);
label11:
v39 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(v38);
v40 = virtualinvoke v34.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(v39);
v41 = virtualinvoke v40.<java.math.BigInteger: int bitLength()>();
if v41 <= 31 goto label12;
v42 = new java.lang.ArithmeticException;
specialinvoke v42.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: numerator too large after multiply");
throw v42;
label12:
v43 = new org.apache.commons.lang3.math.Fraction;
v44 = virtualinvoke v40.<java.math.BigInteger: int intValue()>();
v45 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v46 = v45 / v9;
v47 = v1.<org.apache.commons.lang3.math.Fraction: int denominator>;
v48 = v47 / v38;
v49 = staticinvoke <org.apache.commons.lang3.math.Fraction: int mulPosAndCheck(int,int)>(v46, v48);
specialinvoke v43.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(v44, v49);
return v43;
}
public org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)
{
java.lang.Object[] v2;
int v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v3, v4, v6, v7, v8, v9;
org.apache.commons.lang3.math.Fraction v0, v1, v22, v5;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 := @parameter0: org.apache.commons.lang3.math.Fraction;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "fraction", v2);
v3 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v3 == 0 goto label1;
v4 = v1.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v4 != 0 goto label2;
label1:
v5 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO>;
return v5;
label2:
v6 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v7 = v1.<org.apache.commons.lang3.math.Fraction: int denominator>;
v8 = staticinvoke <org.apache.commons.lang3.math.Fraction: int greatestCommonDivisor(int,int)>(v6, v7);
v9 = v1.<org.apache.commons.lang3.math.Fraction: int numerator>;
v10 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v11 = staticinvoke <org.apache.commons.lang3.math.Fraction: int greatestCommonDivisor(int,int)>(v9, v10);
v12 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v13 = v12 / v8;
v14 = v1.<org.apache.commons.lang3.math.Fraction: int numerator>;
v15 = v14 / v11;
v16 = staticinvoke <org.apache.commons.lang3.math.Fraction: int mulAndCheck(int,int)>(v13, v15);
v17 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v18 = v17 / v11;
v19 = v1.<org.apache.commons.lang3.math.Fraction: int denominator>;
v20 = v19 / v8;
v21 = staticinvoke <org.apache.commons.lang3.math.Fraction: int mulPosAndCheck(int,int)>(v18, v20);
v22 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(v16, v21);
return v22;
}
public org.apache.commons.lang3.math.Fraction divideBy(org.apache.commons.lang3.math.Fraction)
{
java.lang.Object[] v2;
int v3;
java.lang.ArithmeticException v4;
org.apache.commons.lang3.math.Fraction v0, v1, v5, v6;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 := @parameter0: org.apache.commons.lang3.math.Fraction;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "fraction", v2);
v3 = v1.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v3 != 0 goto label1;
v4 = new java.lang.ArithmeticException;
specialinvoke v4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The fraction to divide by must not be zero");
throw v4;
label1:
v5 = virtualinvoke v1.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction invert()>();
v6 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>(v5);
return v6;
}
public boolean equals(java.lang.Object)
{
int v3, v4, v5, v6;
java.lang.Object v1;
org.apache.commons.lang3.math.Fraction v0;
boolean v2, v7;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 := @parameter0: java.lang.Object;
if v1 != v0 goto label1;
return 1;
label1:
v2 = v1 instanceof org.apache.commons.lang3.math.Fraction;
if v2 != 0 goto label2;
return 0;
label2:
v3 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();
v4 = virtualinvoke v1.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();
if v3 != v4 goto label3;
v5 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();
v6 = virtualinvoke v1.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();
if v5 != v6 goto label3;
v7 = 1;
goto label4;
label3:
v7 = 0;
label4:
return v7;
}
public int hashCode()
{
int v1, v2, v3, v4, v5, v6, v7;
org.apache.commons.lang3.math.Fraction v0;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: int hashCode>;
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();
v3 = 629 + v2;
v4 = 37 * v3;
v5 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();
v6 = v4 + v5;
v0.<org.apache.commons.lang3.math.Fraction: int hashCode> = v6;
label1:
v7 = v0.<org.apache.commons.lang3.math.Fraction: int hashCode>;
return v7;
}
public int compareTo(org.apache.commons.lang3.math.Fraction)
{
long v11, v8;
int v10, v12, v2, v3, v4, v5, v6, v7, v9;
org.apache.commons.lang3.math.Fraction v0, v1;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 := @parameter0: org.apache.commons.lang3.math.Fraction;
if v0 != v1 goto label1;
return 0;
label1:
v2 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v3 = v1.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v2 != v3 goto label2;
v4 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v5 = v1.<org.apache.commons.lang3.math.Fraction: int denominator>;
if v4 != v5 goto label2;
return 0;
label2:
v6 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v7 = v1.<org.apache.commons.lang3.math.Fraction: int denominator>;
v8 = v6 * v7;
v9 = v1.<org.apache.commons.lang3.math.Fraction: int numerator>;
v10 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v11 = v9 * v10;
v12 = staticinvoke <java.lang.Long: int compare(long,long)>(v8, v11);
return v12;
}
public java.lang.String toString()
{
int v2, v3;
java.lang.String v1, v4, v5;
org.apache.commons.lang3.math.Fraction v0;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: java.lang.String toString>;
if v1 != null goto label1;
v2 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();
v3 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
v0.<org.apache.commons.lang3.math.Fraction: java.lang.String toString> = v4;
label1:
v5 = v0.<org.apache.commons.lang3.math.Fraction: java.lang.String toString>;
return v5;
}
public java.lang.String toProperString()
{
int v10, v11, v12, v13, v14, v15, v17, v18, v2, v20, v21, v3, v4, v5, v6, v7, v8, v9;
java.lang.String v1, v16, v19, v22, v23;
org.apache.commons.lang3.math.Fraction v0;
v0 := @this: org.apache.commons.lang3.math.Fraction;
v1 = v0.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString>;
if v1 != null goto label8;
v2 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v2 != 0 goto label1;
v0.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString> = "0";
goto label8;
label1:
v3 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v4 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
if v3 != v4 goto label2;
v0.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString> = "1";
goto label8;
label2:
v5 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v6 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v7 = (int) -1;
v8 = v7 * v6;
if v5 != v8 goto label3;
v0.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString> = "-1";
goto label8;
label3:
v9 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
if v9 <= 0 goto label4;
v10 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
v11 = neg v10;
goto label5;
label4:
v11 = v0.<org.apache.commons.lang3.math.Fraction: int numerator>;
label5:
v12 = v0.<org.apache.commons.lang3.math.Fraction: int denominator>;
v13 = neg v12;
if v11 >= v13 goto label7;
v14 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: int getProperNumerator()>();
if v14 != 0 goto label6;
v15 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: int getProperWhole()>();
v16 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(v15);
v0.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString> = v16;
goto label8;
label6:
v17 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: int getProperWhole()>();
v18 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v17, v14, v18) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 \u0001/\u0001");
v0.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString> = v19;
goto label8;
label7:
v20 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();
v21 = virtualinvoke v0.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();
v22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v20, v21) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
v0.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString> = v22;
label8:
v23 = v0.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString>;
return v23;
}
static void <clinit>()
{
org.apache.commons.lang3.math.Fraction v0, v1, v10, v11, v2, v3, v4, v5, v6, v7, v8, v9;
v0 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v0.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(0, 1);
<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO> = v0;
v1 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v1.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(1, 1);
<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE> = v1;
v2 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v2.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(1, 2);
<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_HALF> = v2;
v3 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v3.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(1, 3);
<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_THIRD> = v3;
v4 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v4.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(2, 3);
<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction TWO_THIRDS> = v4;
v5 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v5.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(1, 4);
<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_QUARTER> = v5;
v6 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v6.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(2, 4);
<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction TWO_QUARTERS> = v6;
v7 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v7.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(3, 4);
<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction THREE_QUARTERS> = v7;
v8 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v8.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(1, 5);
<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_FIFTH> = v8;
v9 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v9.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(2, 5);
<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction TWO_FIFTHS> = v9;
v10 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v10.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(3, 5);
<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction THREE_FIFTHS> = v10;
v11 = new org.apache.commons.lang3.math.Fraction;
specialinvoke v11.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(4, 5);
<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction FOUR_FIFTHS> = v11;
return;
}
}