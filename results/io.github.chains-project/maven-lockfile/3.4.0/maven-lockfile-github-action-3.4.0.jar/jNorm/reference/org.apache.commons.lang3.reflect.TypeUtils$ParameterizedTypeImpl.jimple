final class org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl extends java.lang.Object implements java.lang.reflect.ParameterizedType
{
private final java.lang.Class raw;
private final java.lang.reflect.Type useOwner;
private final java.lang.reflect.Type[] typeArguments;
private void <init>(java.lang.Class, java.lang.reflect.Type, java.lang.reflect.Type[])
{
java.lang.Object[] v5;
java.lang.reflect.Type v2;
int v4;
java.lang.reflect.Type[] v3;
org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl v0;
java.lang.Class v1;
v0 := @this: org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.reflect.Type;
v3 := @parameter2: java.lang.reflect.Type[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl: java.lang.Class raw> = v1;
v0.<org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl: java.lang.reflect.Type useOwner> = v2;
v4 = lengthof v3;
v5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(v3, v4, class "[Ljava/lang/reflect/Type;");
v0.<org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl: java.lang.reflect.Type[] typeArguments> = v5;
return;
}
public boolean equals(java.lang.Object)
{
org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl v0;
java.lang.Object v1;
boolean v2, v3, v4;
v0 := @this: org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl;
v1 := @parameter0: java.lang.Object;
if v1 == v0 goto label1;
v2 = v1 instanceof java.lang.reflect.ParameterizedType;
if v2 == 0 goto label2;
v3 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)>(v0, v1);
if v3 == 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public java.lang.reflect.Type[] getActualTypeArguments()
{
java.lang.reflect.Type[] v1;
org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl v0;
java.lang.Object v2;
v0 := @this: org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl;
v1 = v0.<org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl: java.lang.reflect.Type[] typeArguments>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
return v2;
}
public java.lang.reflect.Type getOwnerType()
{
org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl v0;
java.lang.reflect.Type v1;
v0 := @this: org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl;
v1 = v0.<org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl: java.lang.reflect.Type useOwner>;
return v1;
}
public java.lang.reflect.Type getRawType()
{
org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl v0;
java.lang.Class v1;
v0 := @this: org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl;
v1 = v0.<org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl: java.lang.Class raw>;
return v1;
}
public int hashCode()
{
java.lang.reflect.Type v5;
int v10, v11, v2, v3, v4, v6, v7, v8;
java.lang.reflect.Type[] v9;
org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl v0;
java.lang.Class v1;
v0 := @this: org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl;
v1 = v0.<org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl: java.lang.Class raw>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
v3 = 1136 | v2;
v4 = v3 << 4;
v5 = v0.<org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl: java.lang.reflect.Type useOwner>;
v6 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v5);
v7 = v4 | v6;
v8 = v7 << 8;
v9 = v0.<org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl: java.lang.reflect.Type[] typeArguments>;
v10 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>(v9);
v11 = v8 | v10;
return v11;
}
public java.lang.String toString()
{
org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl v0;
java.lang.String v1;
v0 := @this: org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl;
v1 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String toString(java.lang.reflect.Type)>(v0);
return v1;
}
}