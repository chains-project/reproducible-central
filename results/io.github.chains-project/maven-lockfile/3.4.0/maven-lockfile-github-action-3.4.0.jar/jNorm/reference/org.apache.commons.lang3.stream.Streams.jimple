public class org.apache.commons.lang3.stream.Streams extends java.lang.Object
{
public void <init>()
{
org.apache.commons.lang3.stream.Streams v0;
v0 := @this: org.apache.commons.lang3.stream.Streams;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static org.apache.commons.lang3.stream.Streams$FailableStream stream(java.util.Collection)
{
java.util.stream.Stream v1;
org.apache.commons.lang3.stream.Streams$FailableStream v2;
java.util.Collection v0;
v0 := @parameter0: java.util.Collection;
v1 = interfaceinvoke v0.<java.util.Collection: java.util.stream.Stream stream()>();
v2 = staticinvoke <org.apache.commons.lang3.stream.Streams: org.apache.commons.lang3.stream.Streams$FailableStream stream(java.util.stream.Stream)>(v1);
return v2;
}
public static org.apache.commons.lang3.stream.Streams$FailableStream stream(java.util.stream.Stream)
{
java.util.stream.Stream v0;
org.apache.commons.lang3.stream.Streams$FailableStream v1;
v0 := @parameter0: java.util.stream.Stream;
v1 = new org.apache.commons.lang3.stream.Streams$FailableStream;
specialinvoke v1.<org.apache.commons.lang3.stream.Streams$FailableStream: void <init>(java.util.stream.Stream)>(v0);
return v1;
}
public static java.util.stream.Collector toArray(java.lang.Class)
{
java.lang.Class v0;
org.apache.commons.lang3.stream.Streams$ArrayCollector v1;
v0 := @parameter0: java.lang.Class;
v1 = new org.apache.commons.lang3.stream.Streams$ArrayCollector;
specialinvoke v1.<org.apache.commons.lang3.stream.Streams$ArrayCollector: void <init>(java.lang.Class)>(v0);
return v1;
}
}