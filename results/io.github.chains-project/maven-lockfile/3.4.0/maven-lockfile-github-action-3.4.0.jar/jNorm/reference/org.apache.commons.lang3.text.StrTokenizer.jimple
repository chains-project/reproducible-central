public class org.apache.commons.lang3.text.StrTokenizer extends java.lang.Object implements java.util.ListIterator, java.lang.Cloneable
{
private static final org.apache.commons.lang3.text.StrTokenizer CSV_TOKENIZER_PROTOTYPE;
private static final org.apache.commons.lang3.text.StrTokenizer TSV_TOKENIZER_PROTOTYPE;
private char[] chars;
private java.lang.String[] tokens;
private int tokenPos;
private org.apache.commons.lang3.text.StrMatcher delimMatcher;
private org.apache.commons.lang3.text.StrMatcher quoteMatcher;
private org.apache.commons.lang3.text.StrMatcher ignoredMatcher;
private org.apache.commons.lang3.text.StrMatcher trimmerMatcher;
private boolean emptyAsNull;
private boolean ignoreEmptyTokens;
private static org.apache.commons.lang3.text.StrTokenizer getCSVClone()
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.lang.Object v1;
v0 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer CSV_TOKENIZER_PROTOTYPE>;
v1 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.Object clone()>();
return v1;
}
public static org.apache.commons.lang3.text.StrTokenizer getCSVInstance()
{
org.apache.commons.lang3.text.StrTokenizer v0;
v0 = staticinvoke <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer getCSVClone()>();
return v0;
}
public static org.apache.commons.lang3.text.StrTokenizer getCSVInstance(java.lang.String)
{
org.apache.commons.lang3.text.StrTokenizer v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer getCSVClone()>();
virtualinvoke v1.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer reset(java.lang.String)>(v0);
return v1;
}
public static org.apache.commons.lang3.text.StrTokenizer getCSVInstance(char[])
{
org.apache.commons.lang3.text.StrTokenizer v1;
char[] v0;
v0 := @parameter0: char[];
v1 = staticinvoke <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer getCSVClone()>();
virtualinvoke v1.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer reset(char[])>(v0);
return v1;
}
private static org.apache.commons.lang3.text.StrTokenizer getTSVClone()
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.lang.Object v1;
v0 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer TSV_TOKENIZER_PROTOTYPE>;
v1 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.Object clone()>();
return v1;
}
public static org.apache.commons.lang3.text.StrTokenizer getTSVInstance()
{
org.apache.commons.lang3.text.StrTokenizer v0;
v0 = staticinvoke <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer getTSVClone()>();
return v0;
}
public static org.apache.commons.lang3.text.StrTokenizer getTSVInstance(java.lang.String)
{
org.apache.commons.lang3.text.StrTokenizer v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer getTSVClone()>();
virtualinvoke v1.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer reset(java.lang.String)>(v0);
return v1;
}
public static org.apache.commons.lang3.text.StrTokenizer getTSVInstance(char[])
{
org.apache.commons.lang3.text.StrTokenizer v1;
char[] v0;
v0 := @parameter0: char[];
v1 = staticinvoke <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer getTSVClone()>();
virtualinvoke v1.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer reset(char[])>(v0);
return v1;
}
public void <init>()
{
org.apache.commons.lang3.text.StrTokenizer v0;
org.apache.commons.lang3.text.StrMatcher v1, v2, v3, v4;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher splitMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher delimMatcher> = v1;
v2 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher quoteMatcher> = v2;
v3 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher ignoredMatcher> = v3;
v4 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher trimmerMatcher> = v4;
v0.<org.apache.commons.lang3.text.StrTokenizer: boolean ignoreEmptyTokens> = 1;
v0.<org.apache.commons.lang3.text.StrTokenizer: char[] chars> = null;
return;
}
public void <init>(java.lang.String)
{
org.apache.commons.lang3.text.StrTokenizer v0;
char[] v6;
java.lang.String v1;
org.apache.commons.lang3.text.StrMatcher v2, v3, v4, v5;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher splitMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher delimMatcher> = v2;
v3 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher quoteMatcher> = v3;
v4 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher ignoredMatcher> = v4;
v5 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher trimmerMatcher> = v5;
v0.<org.apache.commons.lang3.text.StrTokenizer: boolean ignoreEmptyTokens> = 1;
if v1 == null goto label1;
v6 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: char[] chars> = v6;
goto label2;
label1:
v0.<org.apache.commons.lang3.text.StrTokenizer: char[] chars> = null;
label2:
return;
}
public void <init>(java.lang.String, char)
{
org.apache.commons.lang3.text.StrTokenizer v0;
char v2;
java.lang.String v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: char;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void <init>(java.lang.String)>(v1);
virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setDelimiterChar(char)>(v2);
return;
}
public void <init>(java.lang.String, java.lang.String)
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.lang.String v1, v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void <init>(java.lang.String)>(v1);
virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setDelimiterString(java.lang.String)>(v2);
return;
}
public void <init>(java.lang.String, org.apache.commons.lang3.text.StrMatcher)
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.lang.String v1;
org.apache.commons.lang3.text.StrMatcher v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.apache.commons.lang3.text.StrMatcher;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void <init>(java.lang.String)>(v1);
virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)>(v2);
return;
}
public void <init>(java.lang.String, char, char)
{
org.apache.commons.lang3.text.StrTokenizer v0;
char v2, v3;
java.lang.String v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: char;
v3 := @parameter2: char;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void <init>(java.lang.String,char)>(v1, v2);
virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setQuoteChar(char)>(v3);
return;
}
public void <init>(java.lang.String, org.apache.commons.lang3.text.StrMatcher, org.apache.commons.lang3.text.StrMatcher)
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.lang.String v1;
org.apache.commons.lang3.text.StrMatcher v2, v3;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.apache.commons.lang3.text.StrMatcher;
v3 := @parameter2: org.apache.commons.lang3.text.StrMatcher;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void <init>(java.lang.String,org.apache.commons.lang3.text.StrMatcher)>(v1, v2);
virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setQuoteMatcher(org.apache.commons.lang3.text.StrMatcher)>(v3);
return;
}
public void <init>(char[])
{
org.apache.commons.lang3.text.StrTokenizer v0;
char[] v1, v6;
org.apache.commons.lang3.text.StrMatcher v2, v3, v4, v5;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher splitMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher delimMatcher> = v2;
v3 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher quoteMatcher> = v3;
v4 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher ignoredMatcher> = v4;
v5 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher trimmerMatcher> = v5;
v0.<org.apache.commons.lang3.text.StrTokenizer: boolean ignoreEmptyTokens> = 1;
v6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>(v1);
v0.<org.apache.commons.lang3.text.StrTokenizer: char[] chars> = v6;
return;
}
public void <init>(char[], char)
{
org.apache.commons.lang3.text.StrTokenizer v0;
char[] v1;
char v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char[];
v2 := @parameter1: char;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void <init>(char[])>(v1);
virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setDelimiterChar(char)>(v2);
return;
}
public void <init>(char[], java.lang.String)
{
org.apache.commons.lang3.text.StrTokenizer v0;
char[] v1;
java.lang.String v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char[];
v2 := @parameter1: java.lang.String;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void <init>(char[])>(v1);
virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setDelimiterString(java.lang.String)>(v2);
return;
}
public void <init>(char[], org.apache.commons.lang3.text.StrMatcher)
{
org.apache.commons.lang3.text.StrTokenizer v0;
char[] v1;
org.apache.commons.lang3.text.StrMatcher v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char[];
v2 := @parameter1: org.apache.commons.lang3.text.StrMatcher;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void <init>(char[])>(v1);
virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)>(v2);
return;
}
public void <init>(char[], char, char)
{
org.apache.commons.lang3.text.StrTokenizer v0;
char[] v1;
char v2, v3;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char[];
v2 := @parameter1: char;
v3 := @parameter2: char;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void <init>(char[],char)>(v1, v2);
virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setQuoteChar(char)>(v3);
return;
}
public void <init>(char[], org.apache.commons.lang3.text.StrMatcher, org.apache.commons.lang3.text.StrMatcher)
{
org.apache.commons.lang3.text.StrTokenizer v0;
char[] v1;
org.apache.commons.lang3.text.StrMatcher v2, v3;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char[];
v2 := @parameter1: org.apache.commons.lang3.text.StrMatcher;
v3 := @parameter2: org.apache.commons.lang3.text.StrMatcher;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void <init>(char[],org.apache.commons.lang3.text.StrMatcher)>(v1, v2);
virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setQuoteMatcher(org.apache.commons.lang3.text.StrMatcher)>(v3);
return;
}
public int size()
{
int v2;
org.apache.commons.lang3.text.StrTokenizer v0;
java.lang.String[] v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void checkTokenized()>();
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens>;
v2 = lengthof v1;
return v2;
}
public java.lang.String nextToken()
{
org.apache.commons.lang3.text.StrTokenizer v0;
int v3, v4;
java.lang.String[] v2;
java.lang.String v5;
boolean v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: boolean hasNext()>();
if v1 == 0 goto label1;
v2 = v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens>;
v3 = v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos>;
v4 = v3 + 1;
v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos> = v4;
v5 = v2[v3];
return v5;
label1:
return null;
}
public java.lang.String previousToken()
{
org.apache.commons.lang3.text.StrTokenizer v0;
int v3, v4;
java.lang.String[] v2;
java.lang.String v5;
boolean v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: boolean hasPrevious()>();
if v1 == 0 goto label1;
v2 = v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens>;
v3 = v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos>;
v4 = v3 - 1;
v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos> = v4;
v5 = v2[v4];
return v5;
label1:
return null;
}
public java.lang.String[] getTokenArray()
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.lang.Object v2;
java.lang.String[] v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void checkTokenized()>();
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
return v2;
}
public java.util.List getTokenList()
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.util.List v5;
int v3;
java.lang.String[] v2, v4;
java.util.ArrayList v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void checkTokenized()>();
v1 = new java.util.ArrayList;
v2 = v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens>;
v3 = lengthof v2;
specialinvoke v1.<java.util.ArrayList: void <init>(int)>(v3);
v4 = v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens>;
v5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v4);
interfaceinvoke v1.<java.util.List: boolean addAll(java.util.Collection)>(v5);
return v1;
}
public org.apache.commons.lang3.text.StrTokenizer reset()
{
org.apache.commons.lang3.text.StrTokenizer v0;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos> = 0;
v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens> = null;
return v0;
}
public org.apache.commons.lang3.text.StrTokenizer reset(java.lang.String)
{
org.apache.commons.lang3.text.StrTokenizer v0;
char[] v2;
java.lang.String v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: java.lang.String;
virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer reset()>();
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: char[] chars> = v2;
goto label2;
label1:
v0.<org.apache.commons.lang3.text.StrTokenizer: char[] chars> = null;
label2:
return v0;
}
public org.apache.commons.lang3.text.StrTokenizer reset(char[])
{
org.apache.commons.lang3.text.StrTokenizer v0;
char[] v1, v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char[];
virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer reset()>();
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>(v1);
v0.<org.apache.commons.lang3.text.StrTokenizer: char[] chars> = v2;
return v0;
}
public boolean hasNext()
{
org.apache.commons.lang3.text.StrTokenizer v0;
int v1, v3;
java.lang.String[] v2;
boolean v4;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void checkTokenized()>();
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos>;
v2 = v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens>;
v3 = lengthof v2;
if v1 >= v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public java.lang.String next()
{
org.apache.commons.lang3.text.StrTokenizer v0;
int v3, v4;
java.lang.String[] v2;
java.lang.String v5;
java.util.NoSuchElementException v6;
boolean v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: boolean hasNext()>();
if v1 == 0 goto label1;
v2 = v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens>;
v3 = v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos>;
v4 = v3 + 1;
v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos> = v4;
v5 = v2[v3];
return v5;
label1:
v6 = new java.util.NoSuchElementException;
specialinvoke v6.<java.util.NoSuchElementException: void <init>()>();
throw v6;
}
public int nextIndex()
{
int v1;
org.apache.commons.lang3.text.StrTokenizer v0;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos>;
return v1;
}
public boolean hasPrevious()
{
int v1;
org.apache.commons.lang3.text.StrTokenizer v0;
boolean v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void checkTokenized()>();
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos>;
if v1 <= 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public java.lang.String previous()
{
org.apache.commons.lang3.text.StrTokenizer v0;
int v3, v4;
java.lang.String[] v2;
java.lang.String v5;
java.util.NoSuchElementException v6;
boolean v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: boolean hasPrevious()>();
if v1 == 0 goto label1;
v2 = v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens>;
v3 = v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos>;
v4 = v3 - 1;
v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos> = v4;
v5 = v2[v4];
return v5;
label1:
v6 = new java.util.NoSuchElementException;
specialinvoke v6.<java.util.NoSuchElementException: void <init>()>();
throw v6;
}
public int previousIndex()
{
int v1, v2;
org.apache.commons.lang3.text.StrTokenizer v0;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: int tokenPos>;
v2 = v1 - 1;
return v2;
}
public void remove()
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("remove() is unsupported");
throw v1;
}
public void set(java.lang.String)
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.lang.UnsupportedOperationException v2;
java.lang.String v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("set() is unsupported");
throw v2;
}
public void add(java.lang.String)
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.lang.UnsupportedOperationException v2;
java.lang.String v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("add() is unsupported");
throw v2;
}
private void checkTokenized()
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.lang.Object[] v11, v5;
java.lang.String[] v1, v10, v4;
java.util.List v3, v9;
int v8;
char[] v2, v6, v7;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens>;
if v1 != null goto label2;
v2 = v0.<org.apache.commons.lang3.text.StrTokenizer: char[] chars>;
if v2 != null goto label1;
v3 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: java.util.List tokenize(char[],int,int)>(null, 0, 0);
v4 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
v5 = interfaceinvoke v3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v4);
v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens> = v5;
goto label2;
label1:
v6 = v0.<org.apache.commons.lang3.text.StrTokenizer: char[] chars>;
v7 = v0.<org.apache.commons.lang3.text.StrTokenizer: char[] chars>;
v8 = lengthof v7;
v9 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: java.util.List tokenize(char[],int,int)>(v6, 0, v8);
v10 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
v11 = interfaceinvoke v9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v10);
v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens> = v11;
label2:
return;
}
protected java.util.List tokenize(char[], int, int)
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.util.ArrayList v6;
java.util.List v4;
int v2, v3, v7;
char[] v1;
org.apache.commons.lang3.text.StrBuilder v5;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
if v1 == null goto label1;
if v3 != 0 goto label2;
label1:
v4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v4;
label2:
v5 = new org.apache.commons.lang3.text.StrBuilder;
specialinvoke v5.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>()>();
v7 = v2;
label3:
if v7 < 0 goto label4;
if v7 >= v3 goto label4;
v7 = specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: int readNextToken(char[],int,int,org.apache.commons.lang3.text.StrBuilder,java.util.List)>(v1, v7, v3, v5, v6);
if v7 < v3 goto label3;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void addToken(java.util.List,java.lang.String)>(v6, "");
goto label3;
label4:
return v6;
}
private void addToken(java.util.List, java.lang.String)
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.util.List v1;
java.lang.String v2;
boolean v3, v4, v5;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: java.util.List;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v2);
if v3 == 0 goto label2;
v4 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: boolean isIgnoreEmptyTokens()>();
if v4 == 0 goto label1;
return;
label1:
v5 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: boolean isEmptyTokenAsNull()>();
if v5 == 0 goto label2;
v2 = null;
label2:
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v2);
return;
}
private int readNextToken(char[], int, int, org.apache.commons.lang3.text.StrBuilder, java.util.List)
{
org.apache.commons.lang3.text.StrTokenizer v0;
org.apache.commons.lang3.text.StrMatcher v11, v13, v16, v19, v6, v8;
int v10, v12, v14, v15, v17, v18, v2, v20, v21, v22, v23, v3, v7, v9;
java.util.List v5;
char[] v1;
org.apache.commons.lang3.text.StrBuilder v4;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: org.apache.commons.lang3.text.StrBuilder;
v5 := @parameter4: java.util.List;
label1:
if v2 >= v3 goto label2;
v6 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher getIgnoredMatcher()>();
v7 = virtualinvoke v6.<org.apache.commons.lang3.text.StrMatcher: int isMatch(char[],int,int,int)>(v1, v2, v2, v3);
v8 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher getTrimmerMatcher()>();
v9 = virtualinvoke v8.<org.apache.commons.lang3.text.StrMatcher: int isMatch(char[],int,int,int)>(v1, v2, v2, v3);
v10 = staticinvoke <java.lang.Math: int max(int,int)>(v7, v9);
if v10 == 0 goto label2;
v11 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher getDelimiterMatcher()>();
v12 = virtualinvoke v11.<org.apache.commons.lang3.text.StrMatcher: int isMatch(char[],int,int,int)>(v1, v2, v2, v3);
if v12 > 0 goto label2;
v13 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher getQuoteMatcher()>();
v14 = virtualinvoke v13.<org.apache.commons.lang3.text.StrMatcher: int isMatch(char[],int,int,int)>(v1, v2, v2, v3);
if v14 > 0 goto label2;
v2 = v2 + v10;
goto label1;
label2:
if v2 < v3 goto label3;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void addToken(java.util.List,java.lang.String)>(v5, "");
v15 = (int) -1;
return v15;
label3:
v16 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher getDelimiterMatcher()>();
v17 = virtualinvoke v16.<org.apache.commons.lang3.text.StrMatcher: int isMatch(char[],int,int,int)>(v1, v2, v2, v3);
if v17 <= 0 goto label4;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void addToken(java.util.List,java.lang.String)>(v5, "");
v18 = v2 + v17;
return v18;
label4:
v19 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher getQuoteMatcher()>();
v20 = virtualinvoke v19.<org.apache.commons.lang3.text.StrMatcher: int isMatch(char[],int,int,int)>(v1, v2, v2, v3);
if v20 <= 0 goto label5;
v21 = v2 + v20;
v22 = specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: int readWithQuotes(char[],int,int,org.apache.commons.lang3.text.StrBuilder,java.util.List,int,int)>(v1, v21, v3, v4, v5, v2, v20);
return v22;
label5:
v23 = specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: int readWithQuotes(char[],int,int,org.apache.commons.lang3.text.StrBuilder,java.util.List,int,int)>(v1, v2, v3, v4, v5, 0, 0);
return v23;
}
private int readWithQuotes(char[], int, int, org.apache.commons.lang3.text.StrBuilder, java.util.List, int, int)
{
org.apache.commons.lang3.text.StrTokenizer v0;
org.apache.commons.lang3.text.StrMatcher v18, v23, v25;
int v11, v13, v15, v16, v19, v2, v21, v24, v26, v27, v3, v30, v6, v7, v8;
java.lang.String v20, v29;
boolean v10, v12, v14, v22, v9;
char v17, v28;
java.util.List v5;
char[] v1;
org.apache.commons.lang3.text.StrBuilder v4;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: org.apache.commons.lang3.text.StrBuilder;
v5 := @parameter4: java.util.List;
v6 := @parameter5: int;
v7 := @parameter6: int;
virtualinvoke v4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();
v8 = v2;
if v7 <= 0 goto label01;
v9 = 1;
goto label02;
label01:
v9 = 0;
label02:
v10 = v9;
v11 = 0;
label03:
if v8 >= v3 goto label11;
if v10 == 0 goto label06;
v12 = specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: boolean isQuote(char[],int,int,int,int)>(v1, v8, v3, v6, v7);
if v12 == 0 goto label05;
v13 = v8 + v7;
v14 = specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: boolean isQuote(char[],int,int,int,int)>(v1, v13, v3, v6, v7);
if v14 == 0 goto label04;
virtualinvoke v4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(char[],int,int)>(v1, v8, v7);
v15 = v7 * 2;
v8 = v8 + v15;
v11 = virtualinvoke v4.<org.apache.commons.lang3.text.StrBuilder: int size()>();
goto label03;
label04:
v10 = 0;
v8 = v8 + v7;
goto label03;
label05:
v16 = v8;
v8 = v8 + 1;
v17 = v1[v16];
virtualinvoke v4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(char)>(v17);
v11 = virtualinvoke v4.<org.apache.commons.lang3.text.StrBuilder: int size()>();
goto label03;
label06:
v18 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher getDelimiterMatcher()>();
v19 = virtualinvoke v18.<org.apache.commons.lang3.text.StrMatcher: int isMatch(char[],int,int,int)>(v1, v8, v2, v3);
if v19 <= 0 goto label07;
v20 = virtualinvoke v4.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int,int)>(0, v11);
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void addToken(java.util.List,java.lang.String)>(v5, v20);
v21 = v8 + v19;
return v21;
label07:
if v7 <= 0 goto label08;
v22 = specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: boolean isQuote(char[],int,int,int,int)>(v1, v8, v3, v6, v7);
if v22 == 0 goto label08;
v10 = 1;
v8 = v8 + v7;
goto label03;
label08:
v23 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher getIgnoredMatcher()>();
v24 = virtualinvoke v23.<org.apache.commons.lang3.text.StrMatcher: int isMatch(char[],int,int,int)>(v1, v8, v2, v3);
if v24 <= 0 goto label09;
v8 = v8 + v24;
goto label03;
label09:
v25 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher getTrimmerMatcher()>();
v26 = virtualinvoke v25.<org.apache.commons.lang3.text.StrMatcher: int isMatch(char[],int,int,int)>(v1, v8, v2, v3);
if v26 <= 0 goto label10;
virtualinvoke v4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(char[],int,int)>(v1, v8, v26);
v8 = v8 + v26;
goto label03;
label10:
v27 = v8;
v8 = v8 + 1;
v28 = v1[v27];
virtualinvoke v4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(char)>(v28);
v11 = virtualinvoke v4.<org.apache.commons.lang3.text.StrBuilder: int size()>();
goto label03;
label11:
v29 = virtualinvoke v4.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int,int)>(0, v11);
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void addToken(java.util.List,java.lang.String)>(v5, v29);
v30 = (int) -1;
return v30;
}
private boolean isQuote(char[], int, int, int, int)
{
org.apache.commons.lang3.text.StrTokenizer v0;
char v11, v9;
int v10, v2, v3, v4, v5, v6, v7, v8;
char[] v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = 0;
label1:
if v6 >= v5 goto label4;
v7 = v2 + v6;
if v7 >= v3 goto label2;
v8 = v2 + v6;
v9 = v1[v8];
v10 = v4 + v6;
v11 = v1[v10];
if v9 == v11 goto label3;
label2:
return 0;
label3:
v6 = v6 + 1;
goto label1;
label4:
return 1;
}
public org.apache.commons.lang3.text.StrMatcher getDelimiterMatcher()
{
org.apache.commons.lang3.text.StrTokenizer v0;
org.apache.commons.lang3.text.StrMatcher v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher delimMatcher>;
return v1;
}
public org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)
{
org.apache.commons.lang3.text.StrTokenizer v0;
org.apache.commons.lang3.text.StrMatcher v1, v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: org.apache.commons.lang3.text.StrMatcher;
if v1 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher delimMatcher> = v2;
goto label2;
label1:
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher delimMatcher> = v1;
label2:
return v0;
}
public org.apache.commons.lang3.text.StrTokenizer setDelimiterChar(char)
{
org.apache.commons.lang3.text.StrTokenizer v0, v3;
char v1;
org.apache.commons.lang3.text.StrMatcher v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char;
v2 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(v1);
v3 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)>(v2);
return v3;
}
public org.apache.commons.lang3.text.StrTokenizer setDelimiterString(java.lang.String)
{
org.apache.commons.lang3.text.StrTokenizer v0, v3;
java.lang.String v1;
org.apache.commons.lang3.text.StrMatcher v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>(v1);
v3 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)>(v2);
return v3;
}
public org.apache.commons.lang3.text.StrMatcher getQuoteMatcher()
{
org.apache.commons.lang3.text.StrTokenizer v0;
org.apache.commons.lang3.text.StrMatcher v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher quoteMatcher>;
return v1;
}
public org.apache.commons.lang3.text.StrTokenizer setQuoteMatcher(org.apache.commons.lang3.text.StrMatcher)
{
org.apache.commons.lang3.text.StrTokenizer v0;
org.apache.commons.lang3.text.StrMatcher v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: org.apache.commons.lang3.text.StrMatcher;
if v1 == null goto label1;
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher quoteMatcher> = v1;
label1:
return v0;
}
public org.apache.commons.lang3.text.StrTokenizer setQuoteChar(char)
{
org.apache.commons.lang3.text.StrTokenizer v0, v3;
char v1;
org.apache.commons.lang3.text.StrMatcher v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char;
v2 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(v1);
v3 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setQuoteMatcher(org.apache.commons.lang3.text.StrMatcher)>(v2);
return v3;
}
public org.apache.commons.lang3.text.StrMatcher getIgnoredMatcher()
{
org.apache.commons.lang3.text.StrTokenizer v0;
org.apache.commons.lang3.text.StrMatcher v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher ignoredMatcher>;
return v1;
}
public org.apache.commons.lang3.text.StrTokenizer setIgnoredMatcher(org.apache.commons.lang3.text.StrMatcher)
{
org.apache.commons.lang3.text.StrTokenizer v0;
org.apache.commons.lang3.text.StrMatcher v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: org.apache.commons.lang3.text.StrMatcher;
if v1 == null goto label1;
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher ignoredMatcher> = v1;
label1:
return v0;
}
public org.apache.commons.lang3.text.StrTokenizer setIgnoredChar(char)
{
org.apache.commons.lang3.text.StrTokenizer v0, v3;
char v1;
org.apache.commons.lang3.text.StrMatcher v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: char;
v2 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(v1);
v3 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setIgnoredMatcher(org.apache.commons.lang3.text.StrMatcher)>(v2);
return v3;
}
public org.apache.commons.lang3.text.StrMatcher getTrimmerMatcher()
{
org.apache.commons.lang3.text.StrTokenizer v0;
org.apache.commons.lang3.text.StrMatcher v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher trimmerMatcher>;
return v1;
}
public org.apache.commons.lang3.text.StrTokenizer setTrimmerMatcher(org.apache.commons.lang3.text.StrMatcher)
{
org.apache.commons.lang3.text.StrTokenizer v0;
org.apache.commons.lang3.text.StrMatcher v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: org.apache.commons.lang3.text.StrMatcher;
if v1 == null goto label1;
v0.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrMatcher trimmerMatcher> = v1;
label1:
return v0;
}
public boolean isEmptyTokenAsNull()
{
org.apache.commons.lang3.text.StrTokenizer v0;
boolean v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: boolean emptyAsNull>;
return v1;
}
public org.apache.commons.lang3.text.StrTokenizer setEmptyTokenAsNull(boolean)
{
org.apache.commons.lang3.text.StrTokenizer v0;
boolean v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: boolean;
v0.<org.apache.commons.lang3.text.StrTokenizer: boolean emptyAsNull> = v1;
return v0;
}
public boolean isIgnoreEmptyTokens()
{
org.apache.commons.lang3.text.StrTokenizer v0;
boolean v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: boolean ignoreEmptyTokens>;
return v1;
}
public org.apache.commons.lang3.text.StrTokenizer setIgnoreEmptyTokens(boolean)
{
org.apache.commons.lang3.text.StrTokenizer v0;
boolean v1;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 := @parameter0: boolean;
v0.<org.apache.commons.lang3.text.StrTokenizer: boolean ignoreEmptyTokens> = v1;
return v0;
}
public java.lang.String getContent()
{
org.apache.commons.lang3.text.StrTokenizer v0;
char[] v1, v3;
java.lang.String v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: char[] chars>;
if v1 != null goto label1;
return null;
label1:
v2 = new java.lang.String;
v3 = v0.<org.apache.commons.lang3.text.StrTokenizer: char[] chars>;
specialinvoke v2.<java.lang.String: void <init>(char[])>(v3);
return v2;
}
public java.lang.Object clone()
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.lang.Object v1;
java.lang.CloneNotSupportedException v2;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
label1:
v1 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.Object cloneReset()>();
label2:
return v1;
label3:
v2 := @caughtexception;
return null;
catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
}
java.lang.Object cloneReset() throws java.lang.CloneNotSupportedException
{
org.apache.commons.lang3.text.StrTokenizer v0;
char[] v2, v3;
java.lang.Object v1, v4;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = specialinvoke v0.<java.lang.Object: java.lang.Object clone()>();
v2 = v1.<org.apache.commons.lang3.text.StrTokenizer: char[] chars>;
if v2 == null goto label1;
v3 = v1.<org.apache.commons.lang3.text.StrTokenizer: char[] chars>;
v4 = virtualinvoke v3.<java.lang.Object: java.lang.Object clone()>();
v1.<org.apache.commons.lang3.text.StrTokenizer: char[] chars> = v4;
label1:
virtualinvoke v1.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer reset()>();
return v1;
}
public java.lang.String toString()
{
org.apache.commons.lang3.text.StrTokenizer v0;
java.util.List v2;
java.lang.String[] v1;
java.lang.String v3;
v0 := @this: org.apache.commons.lang3.text.StrTokenizer;
v1 = v0.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] tokens>;
if v1 != null goto label1;
return "StrTokenizer[not tokenized yet]";
label1:
v2 = virtualinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: java.util.List getTokenList()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("StrTokenizer\u0001");
return v3;
}
static void <clinit>()
{
org.apache.commons.lang3.text.StrTokenizer v0, v1, v10, v11, v12, v14, v16, v18, v20, v21, v3, v5, v7, v9;
org.apache.commons.lang3.text.StrMatcher v13, v15, v17, v19, v2, v4, v6, v8;
v0 = new org.apache.commons.lang3.text.StrTokenizer;
specialinvoke v0.<org.apache.commons.lang3.text.StrTokenizer: void <init>()>();
<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer CSV_TOKENIZER_PROTOTYPE> = v0;
v1 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer CSV_TOKENIZER_PROTOTYPE>;
v2 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher commaMatcher()>();
virtualinvoke v1.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)>(v2);
v3 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer CSV_TOKENIZER_PROTOTYPE>;
v4 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher doubleQuoteMatcher()>();
virtualinvoke v3.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setQuoteMatcher(org.apache.commons.lang3.text.StrMatcher)>(v4);
v5 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer CSV_TOKENIZER_PROTOTYPE>;
v6 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();
virtualinvoke v5.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setIgnoredMatcher(org.apache.commons.lang3.text.StrMatcher)>(v6);
v7 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer CSV_TOKENIZER_PROTOTYPE>;
v8 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher trimMatcher()>();
virtualinvoke v7.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setTrimmerMatcher(org.apache.commons.lang3.text.StrMatcher)>(v8);
v9 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer CSV_TOKENIZER_PROTOTYPE>;
virtualinvoke v9.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setEmptyTokenAsNull(boolean)>(0);
v10 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer CSV_TOKENIZER_PROTOTYPE>;
virtualinvoke v10.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setIgnoreEmptyTokens(boolean)>(0);
v11 = new org.apache.commons.lang3.text.StrTokenizer;
specialinvoke v11.<org.apache.commons.lang3.text.StrTokenizer: void <init>()>();
<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer TSV_TOKENIZER_PROTOTYPE> = v11;
v12 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer TSV_TOKENIZER_PROTOTYPE>;
v13 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher tabMatcher()>();
virtualinvoke v12.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)>(v13);
v14 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer TSV_TOKENIZER_PROTOTYPE>;
v15 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher doubleQuoteMatcher()>();
virtualinvoke v14.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setQuoteMatcher(org.apache.commons.lang3.text.StrMatcher)>(v15);
v16 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer TSV_TOKENIZER_PROTOTYPE>;
v17 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();
virtualinvoke v16.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setIgnoredMatcher(org.apache.commons.lang3.text.StrMatcher)>(v17);
v18 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer TSV_TOKENIZER_PROTOTYPE>;
v19 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher trimMatcher()>();
virtualinvoke v18.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setTrimmerMatcher(org.apache.commons.lang3.text.StrMatcher)>(v19);
v20 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer TSV_TOKENIZER_PROTOTYPE>;
virtualinvoke v20.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setEmptyTokenAsNull(boolean)>(0);
v21 = <org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer TSV_TOKENIZER_PROTOTYPE>;
virtualinvoke v21.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer setIgnoreEmptyTokens(boolean)>(0);
return;
}
}