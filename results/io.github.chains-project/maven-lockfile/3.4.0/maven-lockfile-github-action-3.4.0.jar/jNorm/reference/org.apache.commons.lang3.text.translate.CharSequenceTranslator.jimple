public abstract class org.apache.commons.lang3.text.translate.CharSequenceTranslator extends java.lang.Object
{
static final char[] HEX_DIGITS;
public void <init>()
{
org.apache.commons.lang3.text.translate.CharSequenceTranslator v0;
v0 := @this: org.apache.commons.lang3.text.translate.CharSequenceTranslator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public abstract int translate(java.lang.CharSequence, int, java.io.Writer) throws java.io.IOException;
public final java.lang.String translate(java.lang.CharSequence)
{
java.lang.CharSequence v1;
java.io.StringWriter v2;
org.apache.commons.lang3.text.translate.CharSequenceTranslator v0;
java.io.IOException v6;
java.lang.RuntimeException v7;
int v3, v4;
java.lang.String v5;
v0 := @this: org.apache.commons.lang3.text.translate.CharSequenceTranslator;
v1 := @parameter0: java.lang.CharSequence;
if v1 != null goto label1;
return null;
label1:
v2 = new java.io.StringWriter;
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v4 = v3 * 2;
specialinvoke v2.<java.io.StringWriter: void <init>(int)>(v4);
virtualinvoke v0.<org.apache.commons.lang3.text.translate.CharSequenceTranslator: void translate(java.lang.CharSequence,java.io.Writer)>(v1, v2);
v5 = virtualinvoke v2.<java.io.StringWriter: java.lang.String toString()>();
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = new java.lang.RuntimeException;
specialinvoke v7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v6);
throw v7;
catch java.io.IOException from label1 to label2 with label3;
}
public final void translate(java.lang.CharSequence, java.io.Writer) throws java.io.IOException
{
java.lang.CharSequence v1;
org.apache.commons.lang3.text.translate.CharSequenceTranslator v0;
char v7, v9;
java.lang.IllegalArgumentException v3;
int v11, v12, v13, v4, v5, v6;
java.io.Writer v2;
boolean v10, v8;
v0 := @this: org.apache.commons.lang3.text.translate.CharSequenceTranslator;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.io.Writer;
if v2 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Writer must not be null");
throw v3;
label1:
if v1 != null goto label2;
return;
label2:
v4 = 0;
v5 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
label3:
if v4 >= v5 goto label6;
v6 = virtualinvoke v0.<org.apache.commons.lang3.text.translate.CharSequenceTranslator: int translate(java.lang.CharSequence,int,java.io.Writer)>(v1, v4, v2);
if v6 != 0 goto label4;
v7 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v4);
virtualinvoke v2.<java.io.Writer: void write(int)>(v7);
v4 = v4 + 1;
v8 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v7);
if v8 == 0 goto label3;
if v4 >= v5 goto label6;
v9 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v4);
v10 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(v9);
if v10 == 0 goto label3;
virtualinvoke v2.<java.io.Writer: void write(int)>(v9);
v4 = v4 + 1;
goto label3;
label4:
v11 = 0;
label5:
if v11 >= v6 goto label3;
v12 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(v1, v4);
v13 = staticinvoke <java.lang.Character: int charCount(int)>(v12);
v4 = v4 + v13;
v11 = v11 + 1;
goto label5;
label6:
return;
}
public final transient org.apache.commons.lang3.text.translate.CharSequenceTranslator 'with'(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])
{
org.apache.commons.lang3.text.translate.CharSequenceTranslator[] v1, v4;
org.apache.commons.lang3.text.translate.AggregateTranslator v6;
org.apache.commons.lang3.text.translate.CharSequenceTranslator v0;
int v2, v3, v5;
v0 := @this: org.apache.commons.lang3.text.translate.CharSequenceTranslator;
v1 := @parameter0: org.apache.commons.lang3.text.translate.CharSequenceTranslator[];
v2 = lengthof v1;
v3 = v2 + 1;
v4 = newarray (org.apache.commons.lang3.text.translate.CharSequenceTranslator)[v3];
v4[0] = v0;
v5 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v4, 1, v5);
v6 = new org.apache.commons.lang3.text.translate.AggregateTranslator;
specialinvoke v6.<org.apache.commons.lang3.text.translate.AggregateTranslator: void <init>(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])>(v4);
return v6;
}
public static java.lang.String hex(int)
{
java.util.Locale v2;
int v0;
java.lang.String v1, v3;
v0 := @parameter0: int;
v1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v0);
v2 = <java.util.Locale: java.util.Locale ENGLISH>;
v3 = virtualinvoke v1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(v2);
return v3;
}
static void <clinit>()
{
char[] v0;
v0 = newarray (char)[16];
v0[0] = 48;
v0[1] = 49;
v0[2] = 50;
v0[3] = 51;
v0[4] = 52;
v0[5] = 53;
v0[6] = 54;
v0[7] = 55;
v0[8] = 56;
v0[9] = 57;
v0[10] = 65;
v0[11] = 66;
v0[12] = 67;
v0[13] = 68;
v0[14] = 69;
v0[15] = 70;
<org.apache.commons.lang3.text.translate.CharSequenceTranslator: char[] HEX_DIGITS> = v0;
return;
}
}