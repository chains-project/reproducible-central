public abstract class org.apache.commons.lang3.tuple.Pair extends java.lang.Object implements java.util.Map$Entry, java.lang.Comparable, java.io.Serializable
{
private static final long serialVersionUID;
public static final org.apache.commons.lang3.tuple.Pair[] EMPTY_ARRAY;
public void <init>()
{
org.apache.commons.lang3.tuple.Pair v0;
v0 := @this: org.apache.commons.lang3.tuple.Pair;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static org.apache.commons.lang3.tuple.Pair[] emptyArray()
{
org.apache.commons.lang3.tuple.Pair[] v0;
v0 = <org.apache.commons.lang3.tuple.Pair: org.apache.commons.lang3.tuple.Pair[] EMPTY_ARRAY>;
return v0;
}
public static org.apache.commons.lang3.tuple.Pair of(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
org.apache.commons.lang3.tuple.ImmutablePair v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
public static org.apache.commons.lang3.tuple.Pair of(java.util.Map$Entry)
{
java.util.Map$Entry v0;
org.apache.commons.lang3.tuple.ImmutablePair v1;
v0 := @parameter0: java.util.Map$Entry;
v1 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.util.Map$Entry)>(v0);
return v1;
}
public int compareTo(org.apache.commons.lang3.tuple.Pair)
{
org.apache.commons.lang3.builder.CompareToBuilder v2, v5, v8;
org.apache.commons.lang3.tuple.Pair v0, v1;
int v9;
java.lang.Object v3, v4, v6, v7;
v0 := @this: org.apache.commons.lang3.tuple.Pair;
v1 := @parameter0: org.apache.commons.lang3.tuple.Pair;
v2 = new org.apache.commons.lang3.builder.CompareToBuilder;
specialinvoke v2.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();
v3 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getLeft()>();
v4 = virtualinvoke v1.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getLeft()>();
v5 = virtualinvoke v2.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(v3, v4);
v6 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getRight()>();
v7 = virtualinvoke v1.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getRight()>();
v8 = virtualinvoke v5.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(v6, v7);
v9 = virtualinvoke v8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();
return v9;
}
public boolean equals(java.lang.Object)
{
org.apache.commons.lang3.tuple.Pair v0;
java.lang.Object v1, v3, v4, v6, v7;
boolean v2, v5, v8, v9;
v0 := @this: org.apache.commons.lang3.tuple.Pair;
v1 := @parameter0: java.lang.Object;
if v1 != v0 goto label1;
return 1;
label1:
v2 = v1 instanceof java.util.Map$Entry;
if v2 == 0 goto label4;
v3 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getKey()>();
v4 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
v5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v3, v4);
if v5 == 0 goto label2;
v6 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getValue()>();
v7 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v6, v7);
if v8 == 0 goto label2;
v9 = 1;
goto label3;
label2:
v9 = 0;
label3:
return v9;
label4:
return 0;
}
public final java.lang.Object getKey()
{
java.lang.Object v1;
org.apache.commons.lang3.tuple.Pair v0;
v0 := @this: org.apache.commons.lang3.tuple.Pair;
v1 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getLeft()>();
return v1;
}
public abstract java.lang.Object getLeft();
public abstract java.lang.Object getRight();
public java.lang.Object getValue()
{
java.lang.Object v1;
org.apache.commons.lang3.tuple.Pair v0;
v0 := @this: org.apache.commons.lang3.tuple.Pair;
v1 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getRight()>();
return v1;
}
public int hashCode()
{
org.apache.commons.lang3.tuple.Pair v0;
int v2, v4, v5;
java.lang.Object v1, v3;
v0 := @this: org.apache.commons.lang3.tuple.Pair;
v1 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getKey()>();
v2 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v1);
v3 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getValue()>();
v4 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v3);
v5 = v2 ^ v4;
return v5;
}
public java.lang.String toString()
{
org.apache.commons.lang3.tuple.Pair v0;
java.lang.Object v1, v2;
java.lang.String v3;
v0 := @this: org.apache.commons.lang3.tuple.Pair;
v1 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getLeft()>();
v2 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getRight()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,java.lang.Object)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(\u0001,\u0001)");
return v3;
}
public java.lang.String toString(java.lang.String)
{
java.lang.Object[] v2;
org.apache.commons.lang3.tuple.Pair v0;
java.lang.Object v3, v4;
java.lang.String v1, v5;
v0 := @this: org.apache.commons.lang3.tuple.Pair;
v1 := @parameter0: java.lang.String;
v2 = newarray (java.lang.Object)[2];
v3 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getLeft()>();
v2[0] = v3;
v4 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getRight()>();
v2[1] = v4;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
return v5;
}
static void <clinit>()
{
org.apache.commons.lang3.tuple.Pair$PairAdapter[] v0;
v0 = newarray (org.apache.commons.lang3.tuple.Pair$PairAdapter)[0];
<org.apache.commons.lang3.tuple.Pair: org.apache.commons.lang3.tuple.Pair[] EMPTY_ARRAY> = v0;
return;
}
}