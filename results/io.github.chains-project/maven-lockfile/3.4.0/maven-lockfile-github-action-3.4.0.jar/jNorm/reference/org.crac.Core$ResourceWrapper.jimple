class org.crac.Core$ResourceWrapper extends java.lang.ref.WeakReference implements java.lang.reflect.InvocationHandler
{
private static final java.util.WeakHashMap weakMap;
private java.lang.Object proxy;
private org.crac.Resource strongRef;
public void setProxy(java.lang.Object)
{
java.lang.Object v1;
org.crac.Core$ResourceWrapper v0;
v0 := @this: org.crac.Core$ResourceWrapper;
v1 := @parameter0: java.lang.Object;
v0.<org.crac.Core$ResourceWrapper: java.lang.Object proxy> = v1;
return;
}
public void <init>(org.crac.Resource)
{
org.crac.Core$ResourceWrapper v0;
org.crac.Resource v1;
java.util.WeakHashMap v2;
v0 := @this: org.crac.Core$ResourceWrapper;
v1 := @parameter0: org.crac.Resource;
specialinvoke v0.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(v1);
v2 = <org.crac.Core$ResourceWrapper: java.util.WeakHashMap weakMap>;
virtualinvoke v2.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v0);
v0.<org.crac.Core$ResourceWrapper: org.crac.Resource strongRef> = null;
return;
}
public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
{
java.lang.Throwable v15;
java.lang.Object[] v3;
org.crac.Core$ResourceWrapper v0;
java.lang.String v11, v4, v5, v7, v9;
java.lang.reflect.Method v2;
boolean v10, v6, v8;
java.lang.reflect.InvocationTargetException v14;
java.lang.Object v1, v12, v13;
v0 := @this: org.crac.Core$ResourceWrapper;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 := @parameter2: java.lang.Object[];
v4 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.String getName()>();
v5 = "beforeCheckpoint";
v6 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>(v4);
if v6 == 0 goto label1;
specialinvoke v0.<org.crac.Core$ResourceWrapper: void beforeCheckpoint()>();
return null;
label1:
v7 = "afterRestore";
v8 = virtualinvoke v7.<java.lang.String: boolean equals(java.lang.Object)>(v4);
if v8 == 0 goto label2;
specialinvoke v0.<org.crac.Core$ResourceWrapper: void afterRestore()>();
return null;
label2:
v9 = "toString";
v10 = virtualinvoke v9.<java.lang.String: boolean equals(java.lang.Object)>(v4);
if v10 == 0 goto label3;
v11 = virtualinvoke v0.<org.crac.Core$ResourceWrapper: java.lang.String toString()>();
return v11;
label3:
v12 = virtualinvoke v0.<org.crac.Core$ResourceWrapper: java.lang.Object get()>();
v13 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v12, v3);
label4:
return v13;
label5:
v14 := @caughtexception;
v15 = virtualinvoke v14.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
throw v15;
catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
}
private void beforeCheckpoint() throws java.lang.Exception
{
java.lang.Object v1;
org.crac.Context v2;
org.crac.Core$ResourceWrapper v0;
v0 := @this: org.crac.Core$ResourceWrapper;
v1 = virtualinvoke v0.<org.crac.Core$ResourceWrapper: java.lang.Object get()>();
v0.<org.crac.Core$ResourceWrapper: org.crac.Resource strongRef> = v1;
if v1 == null goto label1;
v2 = <org.crac.Core: org.crac.Context globalContextWrapper>;
interfaceinvoke v1.<org.crac.Resource: void beforeCheckpoint(org.crac.Context)>(v2);
label1:
return;
}
private void afterRestore() throws java.lang.Exception
{
java.lang.Object v1;
org.crac.Context v2;
org.crac.Core$ResourceWrapper v0;
v0 := @this: org.crac.Core$ResourceWrapper;
v1 = virtualinvoke v0.<org.crac.Core$ResourceWrapper: java.lang.Object get()>();
v0.<org.crac.Core$ResourceWrapper: org.crac.Resource strongRef> = null;
if v1 == null goto label1;
v2 = <org.crac.Core: org.crac.Context globalContextWrapper>;
interfaceinvoke v1.<org.crac.Resource: void afterRestore(org.crac.Context)>(v2);
label1:
return;
}
public java.lang.String toString()
{
org.crac.Core$ResourceWrapper v0;
java.lang.Object v1;
java.lang.String v2, v3;
v0 := @this: org.crac.Core$ResourceWrapper;
v1 = virtualinvoke v0.<org.crac.Core$ResourceWrapper: java.lang.Object get()>();
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("org.crac.ResourceWrapper[\u0001]");
return v3;
}
static void <clinit>()
{
java.util.WeakHashMap v0;
v0 = new java.util.WeakHashMap;
specialinvoke v0.<java.util.WeakHashMap: void <init>()>();
<org.crac.Core$ResourceWrapper: java.util.WeakHashMap weakMap> = v0;
return;
}
}