public interface  org.eclipse.microprofile.config.Config extends java.lang.Object
{
public static final java.lang.String PROFILE;
public static final java.lang.String PROPERTY_EXPRESSIONS_ENABLED;
public abstract java.lang.Object getValue(java.lang.String, java.lang.Class);
public abstract org.eclipse.microprofile.config.ConfigValue getConfigValue(java.lang.String);
public java.util.List getValues(java.lang.String, java.lang.Class)
{
java.util.List v6;
java.lang.Class v2, v4;
java.lang.Object v3, v5;
java.lang.String v1;
org.eclipse.microprofile.config.Config v0;
v0 := @this: org.eclipse.microprofile.config.Config;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v2, 0);
v4 = virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v5 = interfaceinvoke v0.<org.eclipse.microprofile.config.Config: java.lang.Object getValue(java.lang.String,java.lang.Class)>(v1, v4);
v6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v5);
return v6;
}
public abstract java.util.Optional getOptionalValue(java.lang.String, java.lang.Class);
public java.util.Optional getOptionalValues(java.lang.String, java.lang.Class)
{
org.eclipse.microprofile.config.Config v0;
java.util.function.Function v6;
java.util.Optional v5, v7;
java.lang.Class v2, v4;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: org.eclipse.microprofile.config.Config;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v2, 0);
v4 = virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v5 = interfaceinvoke v0.<org.eclipse.microprofile.config.Config: java.util.Optional getOptionalValue(java.lang.String,java.lang.Class)>(v1, v4);
v6 = staticinvoke <org.eclipse.microprofile.config.Config$asList__3155: java.util.function.Function bootstrap$()>();
v7 = virtualinvoke v5.<java.util.Optional: java.util.Optional map(java.util.function.Function)>(v6);
return v7;
}
public abstract java.lang.Iterable getPropertyNames();
public abstract java.lang.Iterable getConfigSources();
public abstract java.util.Optional getConverter(java.lang.Class);
public abstract java.lang.Object unwrap(java.lang.Class);
}