class org.eclipse.parsson.BufferPoolImpl extends java.lang.Object implements org.eclipse.parsson.api.BufferPool
{
private volatile java.lang.ref.WeakReference queue;
void <init>()
{
org.eclipse.parsson.BufferPoolImpl v0;
v0 := @this: org.eclipse.parsson.BufferPoolImpl;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public final char[] take()
{
org.eclipse.parsson.BufferPoolImpl v0;
char[] v3;
java.lang.Object v2;
java.util.concurrent.ConcurrentLinkedQueue v1;
v0 := @this: org.eclipse.parsson.BufferPoolImpl;
v1 = specialinvoke v0.<org.eclipse.parsson.BufferPoolImpl: java.util.concurrent.ConcurrentLinkedQueue getQueue()>();
v2 = virtualinvoke v1.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();
if v2 != null goto label1;
v3 = newarray (char)[4096];
return v3;
label1:
return v2;
}
private java.util.concurrent.ConcurrentLinkedQueue getQueue()
{
org.eclipse.parsson.BufferPoolImpl v0;
java.lang.Object v2;
java.lang.ref.WeakReference v1, v4;
java.util.concurrent.ConcurrentLinkedQueue v3;
v0 := @this: org.eclipse.parsson.BufferPoolImpl;
v1 = v0.<org.eclipse.parsson.BufferPoolImpl: java.lang.ref.WeakReference queue>;
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.lang.ref.WeakReference: java.lang.Object get()>();
if v2 == null goto label1;
return v2;
label1:
v3 = new java.util.concurrent.ConcurrentLinkedQueue;
specialinvoke v3.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();
v4 = new java.lang.ref.WeakReference;
specialinvoke v4.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(v3);
v0.<org.eclipse.parsson.BufferPoolImpl: java.lang.ref.WeakReference queue> = v4;
return v3;
}
public final void recycle(char[])
{
char[] v1;
org.eclipse.parsson.BufferPoolImpl v0;
java.util.concurrent.ConcurrentLinkedQueue v2;
v0 := @this: org.eclipse.parsson.BufferPoolImpl;
v1 := @parameter0: char[];
v2 = specialinvoke v0.<org.eclipse.parsson.BufferPoolImpl: java.util.concurrent.ConcurrentLinkedQueue getQueue()>();
virtualinvoke v2.<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(java.lang.Object)>(v1);
return;
}
}