class org.eclipse.parsson.JsonGeneratorImpl extends java.lang.Object implements jakarta.json.stream.JsonGenerator
{
private static final char[] INT_MIN_VALUE_CHARS;
private static final int[] INT_CHARS_SIZE_TABLE;
private static final char[] DIGIT_TENS;
private static final char[] DIGIT_ONES;
private static final char[] DIGITS;
private final org.eclipse.parsson.api.BufferPool bufferPool;
private final java.io.Writer writer;
private org.eclipse.parsson.JsonGeneratorImpl$Context currentContext;
private final java.util.Deque stack;
private final char[] buf;
private int len;
private boolean closed;
void <init>(java.io.Writer, org.eclipse.parsson.api.BufferPool)
{
java.io.Writer v1;
org.eclipse.parsson.JsonGeneratorImpl v0;
org.eclipse.parsson.JsonGeneratorImpl$Scope v4;
char[] v6;
org.eclipse.parsson.JsonGeneratorImpl$Context v3;
org.eclipse.parsson.api.BufferPool v2;
java.util.ArrayDeque v5;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.io.Writer;
v2 := @parameter1: org.eclipse.parsson.api.BufferPool;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new org.eclipse.parsson.JsonGeneratorImpl$Context;
v4 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_NONE>;
specialinvoke v3.<org.eclipse.parsson.JsonGeneratorImpl$Context: void <init>(org.eclipse.parsson.JsonGeneratorImpl$Scope)>(v4);
v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext> = v3;
v5 = new java.util.ArrayDeque;
specialinvoke v5.<java.util.ArrayDeque: void <init>()>();
v0.<org.eclipse.parsson.JsonGeneratorImpl: java.util.Deque stack> = v5;
v0.<org.eclipse.parsson.JsonGeneratorImpl: int len> = 0;
v0.<org.eclipse.parsson.JsonGeneratorImpl: boolean closed> = 0;
v0.<org.eclipse.parsson.JsonGeneratorImpl: java.io.Writer writer> = v1;
v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.api.BufferPool bufferPool> = v2;
v6 = interfaceinvoke v2.<org.eclipse.parsson.api.BufferPool: char[] take()>();
v0.<org.eclipse.parsson.JsonGeneratorImpl: char[] buf> = v6;
return;
}
void <init>(java.io.OutputStream, org.eclipse.parsson.api.BufferPool)
{
java.io.OutputStream v1;
java.nio.charset.Charset v3;
org.eclipse.parsson.JsonGeneratorImpl v0;
org.eclipse.parsson.api.BufferPool v2;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.io.OutputStream;
v2 := @parameter1: org.eclipse.parsson.api.BufferPool;
v3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void <init>(java.io.OutputStream,java.nio.charset.Charset,org.eclipse.parsson.api.BufferPool)>(v1, v3, v2);
return;
}
void <init>(java.io.OutputStream, java.nio.charset.Charset, org.eclipse.parsson.api.BufferPool)
{
java.io.OutputStream v1;
java.nio.charset.Charset v2;
org.eclipse.parsson.JsonGeneratorImpl v0;
java.io.OutputStreamWriter v4;
org.eclipse.parsson.api.BufferPool v3;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.io.OutputStream;
v2 := @parameter1: java.nio.charset.Charset;
v3 := @parameter2: org.eclipse.parsson.api.BufferPool;
v4 = new java.io.OutputStreamWriter;
specialinvoke v4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(v1, v2);
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void <init>(java.io.Writer,org.eclipse.parsson.api.BufferPool)>(v4, v3);
return;
}
public void flush()
{
java.io.Writer v1;
org.eclipse.parsson.JsonGeneratorImpl v0;
java.io.IOException v2;
jakarta.json.JsonException v3;
java.lang.String v4;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void flushBuffer()>();
label1:
v1 = v0.<org.eclipse.parsson.JsonGeneratorImpl: java.io.Writer writer>;
virtualinvoke v1.<java.io.Writer: void flush()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = new jakarta.json.JsonException;
v4 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_FLUSH_IO_ERR()>();
specialinvoke v3.<jakarta.json.JsonException: void <init>(java.lang.String,java.lang.Throwable)>(v4, v2);
throw v3;
label4:
return;
catch java.io.IOException from label1 to label2 with label3;
}
public jakarta.json.stream.JsonGenerator writeStartObject()
{
jakarta.json.stream.JsonGenerationException v13, v4;
org.eclipse.parsson.JsonGeneratorImpl v0;
java.util.Deque v15;
org.eclipse.parsson.JsonGeneratorImpl$Scope v10, v18, v2, v3, v6, v9;
org.eclipse.parsson.JsonGeneratorImpl$Context v1, v11, v16, v17, v5, v8;
java.lang.String v14, v7;
boolean v12;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v2 = v1.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v3 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v2 != v3 goto label1;
v4 = new jakarta.json.stream.JsonGenerationException;
v5 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v6 = v5.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v7 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v6);
specialinvoke v4.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v7);
throw v4;
label1:
v8 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v9 = v8.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v10 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_NONE>;
if v9 != v10 goto label2;
v11 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v12 = v11.<org.eclipse.parsson.JsonGeneratorImpl$Context: boolean first>;
if v12 != 0 goto label2;
v13 = new jakarta.json.stream.JsonGenerationException;
v14 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_MULTIPLE_TEXT()>();
specialinvoke v13.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v14);
throw v13;
label2:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeComma()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(123);
v15 = v0.<org.eclipse.parsson.JsonGeneratorImpl: java.util.Deque stack>;
v16 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
interfaceinvoke v15.<java.util.Deque: void push(java.lang.Object)>(v16);
v17 = new org.eclipse.parsson.JsonGeneratorImpl$Context;
v18 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
specialinvoke v17.<org.eclipse.parsson.JsonGeneratorImpl$Context: void <init>(org.eclipse.parsson.JsonGeneratorImpl$Scope)>(v18);
v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext> = v17;
return v0;
}
public jakarta.json.stream.JsonGenerator writeStartObject(java.lang.String)
{
jakarta.json.stream.JsonGenerationException v5;
org.eclipse.parsson.JsonGeneratorImpl v0;
java.util.Deque v9;
org.eclipse.parsson.JsonGeneratorImpl$Scope v12, v3, v4, v7;
org.eclipse.parsson.JsonGeneratorImpl$Context v10, v11, v2, v6;
java.lang.String v1, v8;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v3 = v2.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v4 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v3 == v4 goto label1;
v5 = new jakarta.json.stream.JsonGenerationException;
v6 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v7 = v6.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v8 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v7);
specialinvoke v5.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v8);
throw v5;
label1:
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeName(java.lang.String)>(v1);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(123);
v9 = v0.<org.eclipse.parsson.JsonGeneratorImpl: java.util.Deque stack>;
v10 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
interfaceinvoke v9.<java.util.Deque: void push(java.lang.Object)>(v10);
v11 = new org.eclipse.parsson.JsonGeneratorImpl$Context;
v12 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
specialinvoke v11.<org.eclipse.parsson.JsonGeneratorImpl$Context: void <init>(org.eclipse.parsson.JsonGeneratorImpl$Scope)>(v12);
v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext> = v11;
return v0;
}
private jakarta.json.stream.JsonGenerator writeName(java.lang.String)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
java.lang.String v1;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeComma()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeEscapedString(java.lang.CharSequence)>(v1);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeColon()>();
return v0;
}
public jakarta.json.stream.JsonGenerator write(java.lang.String, java.lang.String)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
java.lang.String v1, v2;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void write(java.lang.String,java.lang.CharSequence)>(v1, v2);
return v0;
}
public jakarta.json.stream.JsonGenerator write(java.lang.String, int)
{
jakarta.json.stream.JsonGenerationException v6;
org.eclipse.parsson.JsonGeneratorImpl v0;
int v2;
org.eclipse.parsson.JsonGeneratorImpl$Scope v4, v5, v8;
org.eclipse.parsson.JsonGeneratorImpl$Context v3, v7;
java.lang.String v1, v9;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v4 = v3.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v5 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v4 == v5 goto label1;
v6 = new jakarta.json.stream.JsonGenerationException;
v7 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v8 = v7.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v9 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v8);
specialinvoke v6.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v9);
throw v6;
label1:
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeName(java.lang.String)>(v1);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeInt(int)>(v2);
return v0;
}
public jakarta.json.stream.JsonGenerator write(java.lang.String, long)
{
jakarta.json.stream.JsonGenerationException v6;
org.eclipse.parsson.JsonGeneratorImpl v0;
long v2;
org.eclipse.parsson.JsonGeneratorImpl$Scope v4, v5, v8;
org.eclipse.parsson.JsonGeneratorImpl$Context v3, v7;
java.lang.String v1, v10, v9;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v4 = v3.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v5 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v4 == v5 goto label1;
v6 = new jakarta.json.stream.JsonGenerationException;
v7 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v8 = v7.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v9 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v8);
specialinvoke v6.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v9);
throw v6;
label1:
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeName(java.lang.String)>(v1);
v10 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(v2);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence)>(v10);
return v0;
}
public jakarta.json.stream.JsonGenerator write(java.lang.String, double)
{
jakarta.json.stream.JsonGenerationException v6;
org.eclipse.parsson.JsonGeneratorImpl v0;
java.lang.NumberFormatException v12;
org.eclipse.parsson.JsonGeneratorImpl$Scope v4, v5, v8;
org.eclipse.parsson.JsonGeneratorImpl$Context v3, v7;
java.lang.String v1, v13, v14, v9;
boolean v10, v11;
double v2;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: double;
v3 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v4 = v3.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v5 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v4 == v5 goto label1;
v6 = new jakarta.json.stream.JsonGenerationException;
v7 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v8 = v7.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v9 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v8);
specialinvoke v6.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v9);
throw v6;
label1:
v10 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(v2);
if v10 != 0 goto label2;
v11 = staticinvoke <java.lang.Double: boolean isNaN(double)>(v2);
if v11 == 0 goto label3;
label2:
v12 = new java.lang.NumberFormatException;
v13 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_DOUBLE_INFINITE_NAN()>();
specialinvoke v12.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v13);
throw v12;
label3:
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeName(java.lang.String)>(v1);
v14 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(v2);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence)>(v14);
return v0;
}
public jakarta.json.stream.JsonGenerator write(java.lang.String, java.math.BigInteger)
{
jakarta.json.stream.JsonGenerationException v6;
org.eclipse.parsson.JsonGeneratorImpl v0;
org.eclipse.parsson.JsonGeneratorImpl$Scope v4, v5, v8;
java.math.BigInteger v2;
org.eclipse.parsson.JsonGeneratorImpl$Context v3, v7;
java.lang.String v1, v10, v9;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.math.BigInteger;
v3 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v4 = v3.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v5 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v4 == v5 goto label1;
v6 = new jakarta.json.stream.JsonGenerationException;
v7 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v8 = v7.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v9 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v8);
specialinvoke v6.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v9);
throw v6;
label1:
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeName(java.lang.String)>(v1);
v10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(v2);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence)>(v10);
return v0;
}
public jakarta.json.stream.JsonGenerator write(java.lang.String, java.math.BigDecimal)
{
jakarta.json.stream.JsonGenerationException v6;
org.eclipse.parsson.JsonGeneratorImpl v0;
java.math.BigDecimal v2;
org.eclipse.parsson.JsonGeneratorImpl$Scope v4, v5, v8;
org.eclipse.parsson.JsonGeneratorImpl$Context v3, v7;
java.lang.String v1, v10, v9;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.math.BigDecimal;
v3 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v4 = v3.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v5 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v4 == v5 goto label1;
v6 = new jakarta.json.stream.JsonGenerationException;
v7 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v8 = v7.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v9 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v8);
specialinvoke v6.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v9);
throw v6;
label1:
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeName(java.lang.String)>(v1);
v10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(v2);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence)>(v10);
return v0;
}
public jakarta.json.stream.JsonGenerator write(java.lang.String, boolean)
{
jakarta.json.stream.JsonGenerationException v6;
org.eclipse.parsson.JsonGeneratorImpl v0;
org.eclipse.parsson.JsonGeneratorImpl$Scope v4, v5, v8;
org.eclipse.parsson.JsonGeneratorImpl$Context v3, v7;
java.lang.String v1, v10, v9;
boolean v2;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v4 = v3.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v5 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v4 == v5 goto label1;
v6 = new jakarta.json.stream.JsonGenerationException;
v7 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v8 = v7.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v9 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v8);
specialinvoke v6.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v9);
throw v6;
label1:
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeName(java.lang.String)>(v1);
if v2 == 0 goto label2;
v10 = "true";
goto label3;
label2:
v10 = "false";
label3:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence)>(v10);
return v0;
}
public jakarta.json.stream.JsonGenerator writeNull(java.lang.String)
{
jakarta.json.stream.JsonGenerationException v5;
org.eclipse.parsson.JsonGeneratorImpl v0;
org.eclipse.parsson.JsonGeneratorImpl$Scope v3, v4, v7;
org.eclipse.parsson.JsonGeneratorImpl$Context v2, v6;
java.lang.String v1, v8;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v3 = v2.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v4 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v3 == v4 goto label1;
v5 = new jakarta.json.stream.JsonGenerationException;
v6 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v7 = v6.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v8 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v7);
specialinvoke v5.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v8);
throw v5;
label1:
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeName(java.lang.String)>(v1);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence)>("null");
return v0;
}
public jakarta.json.stream.JsonGenerator write(jakarta.json.JsonValue)
{
jakarta.json.JsonValue v1;
org.eclipse.parsson.JsonGeneratorImpl v0;
int[] v2;
int v4, v5;
jakarta.json.JsonValue$ValueType v3;
java.lang.String v15, v16;
boolean v11, v7;
java.util.Iterator v10, v6;
java.util.Set v9;
java.lang.Object v12, v13, v14, v8;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: jakarta.json.JsonValue;
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void checkContextForValue()>();
v2 = <org.eclipse.parsson.JsonGeneratorImpl$1: int[] $SwitchMap$jakarta$json$JsonValue$ValueType>;
v3 = interfaceinvoke v1.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v4 = virtualinvoke v3.<jakarta.json.JsonValue$ValueType: int ordinal()>();
v5 = v2[v4];
tableswitch(v5)
{
case 1: goto label01;
case 2: goto label04;
case 3: goto label07;
case 4: goto label08;
case 5: goto label09;
case 6: goto label10;
case 7: goto label11;
default: goto label12;
};
label01:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeStartArray()>();
v6 = interfaceinvoke v1.<jakarta.json.JsonArray: java.util.Iterator iterator()>();
label02:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label03;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator write(jakarta.json.JsonValue)>(v8);
goto label02;
label03:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeEnd()>();
goto label12;
label04:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeStartObject()>();
v9 = interfaceinvoke v1.<jakarta.json.JsonObject: java.util.Set entrySet()>();
v10 = interfaceinvoke v9.<java.util.Set: java.util.Iterator iterator()>();
label05:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label06;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = interfaceinvoke v12.<java.util.Map$Entry: java.lang.Object getKey()>();
v14 = interfaceinvoke v12.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator write(java.lang.String,jakarta.json.JsonValue)>(v13, v14);
goto label05;
label06:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeEnd()>();
goto label12;
label07:
v15 = interfaceinvoke v1.<jakarta.json.JsonString: java.lang.String getString()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator write(java.lang.String)>(v15);
goto label12;
label08:
v16 = interfaceinvoke v1.<jakarta.json.JsonNumber: java.lang.String toString()>();
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeValue(java.lang.String)>(v16);
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void popFieldContext()>();
goto label12;
label09:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator write(boolean)>(1);
goto label12;
label10:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator write(boolean)>(0);
goto label12;
label11:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeNull()>();
label12:
return v0;
}
public jakarta.json.stream.JsonGenerator writeStartArray()
{
jakarta.json.stream.JsonGenerationException v13, v4;
org.eclipse.parsson.JsonGeneratorImpl v0;
java.util.Deque v15;
org.eclipse.parsson.JsonGeneratorImpl$Scope v10, v18, v2, v3, v6, v9;
org.eclipse.parsson.JsonGeneratorImpl$Context v1, v11, v16, v17, v5, v8;
java.lang.String v14, v7;
boolean v12;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v2 = v1.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v3 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v2 != v3 goto label1;
v4 = new jakarta.json.stream.JsonGenerationException;
v5 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v6 = v5.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v7 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v6);
specialinvoke v4.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v7);
throw v4;
label1:
v8 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v9 = v8.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v10 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_NONE>;
if v9 != v10 goto label2;
v11 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v12 = v11.<org.eclipse.parsson.JsonGeneratorImpl$Context: boolean first>;
if v12 != 0 goto label2;
v13 = new jakarta.json.stream.JsonGenerationException;
v14 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_MULTIPLE_TEXT()>();
specialinvoke v13.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v14);
throw v13;
label2:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeComma()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(91);
v15 = v0.<org.eclipse.parsson.JsonGeneratorImpl: java.util.Deque stack>;
v16 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
interfaceinvoke v15.<java.util.Deque: void push(java.lang.Object)>(v16);
v17 = new org.eclipse.parsson.JsonGeneratorImpl$Context;
v18 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_ARRAY>;
specialinvoke v17.<org.eclipse.parsson.JsonGeneratorImpl$Context: void <init>(org.eclipse.parsson.JsonGeneratorImpl$Scope)>(v18);
v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext> = v17;
return v0;
}
public jakarta.json.stream.JsonGenerator writeStartArray(java.lang.String)
{
jakarta.json.stream.JsonGenerationException v5;
org.eclipse.parsson.JsonGeneratorImpl v0;
java.util.Deque v9;
org.eclipse.parsson.JsonGeneratorImpl$Scope v12, v3, v4, v7;
org.eclipse.parsson.JsonGeneratorImpl$Context v10, v11, v2, v6;
java.lang.String v1, v8;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v3 = v2.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v4 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v3 == v4 goto label1;
v5 = new jakarta.json.stream.JsonGenerationException;
v6 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v7 = v6.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v8 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v7);
specialinvoke v5.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v8);
throw v5;
label1:
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeName(java.lang.String)>(v1);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(91);
v9 = v0.<org.eclipse.parsson.JsonGeneratorImpl: java.util.Deque stack>;
v10 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
interfaceinvoke v9.<java.util.Deque: void push(java.lang.Object)>(v10);
v11 = new org.eclipse.parsson.JsonGeneratorImpl$Context;
v12 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_ARRAY>;
specialinvoke v11.<org.eclipse.parsson.JsonGeneratorImpl$Context: void <init>(org.eclipse.parsson.JsonGeneratorImpl$Scope)>(v12);
v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext> = v11;
return v0;
}
public jakarta.json.stream.JsonGenerator write(java.lang.String, jakarta.json.JsonValue)
{
jakarta.json.JsonValue v2;
jakarta.json.stream.JsonGenerationException v6;
org.eclipse.parsson.JsonGeneratorImpl v0;
int[] v10;
int v12, v13;
jakarta.json.JsonValue$ValueType v11;
org.eclipse.parsson.JsonGeneratorImpl$Scope v4, v5, v8;
org.eclipse.parsson.JsonGeneratorImpl$Context v3, v7;
java.lang.String v1, v24, v9;
boolean v15, v19;
java.lang.CharSequence v23;
java.util.Iterator v14, v18;
java.util.Set v17;
java.lang.Object v16, v20, v21, v22;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: jakarta.json.JsonValue;
v3 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v4 = v3.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v5 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v4 == v5 goto label01;
v6 = new jakarta.json.stream.JsonGenerationException;
v7 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v8 = v7.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v9 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v8);
specialinvoke v6.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v9);
throw v6;
label01:
v10 = <org.eclipse.parsson.JsonGeneratorImpl$1: int[] $SwitchMap$jakarta$json$JsonValue$ValueType>;
v11 = interfaceinvoke v2.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v12 = virtualinvoke v11.<jakarta.json.JsonValue$ValueType: int ordinal()>();
v13 = v10[v12];
tableswitch(v13)
{
case 1: goto label02;
case 2: goto label05;
case 3: goto label08;
case 4: goto label09;
case 5: goto label10;
case 6: goto label11;
case 7: goto label12;
default: goto label13;
};
label02:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeStartArray(java.lang.String)>(v1);
v14 = interfaceinvoke v2.<jakarta.json.JsonArray: java.util.Iterator iterator()>();
label03:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label04;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator write(jakarta.json.JsonValue)>(v16);
goto label03;
label04:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeEnd()>();
goto label13;
label05:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeStartObject(java.lang.String)>(v1);
v17 = interfaceinvoke v2.<jakarta.json.JsonObject: java.util.Set entrySet()>();
v18 = interfaceinvoke v17.<java.util.Set: java.util.Iterator iterator()>();
label06:
v19 = interfaceinvoke v18.<java.util.Iterator: boolean hasNext()>();
if v19 == 0 goto label07;
v20 = interfaceinvoke v18.<java.util.Iterator: java.lang.Object next()>();
v21 = interfaceinvoke v20.<java.util.Map$Entry: java.lang.Object getKey()>();
v22 = interfaceinvoke v20.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator write(java.lang.String,jakarta.json.JsonValue)>(v21, v22);
goto label06;
label07:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeEnd()>();
goto label13;
label08:
v23 = interfaceinvoke v2.<jakarta.json.JsonString: java.lang.CharSequence getChars()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void write(java.lang.String,java.lang.CharSequence)>(v1, v23);
goto label13;
label09:
v24 = interfaceinvoke v2.<jakarta.json.JsonNumber: java.lang.String toString()>();
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeValue(java.lang.String,java.lang.String)>(v1, v24);
goto label13;
label10:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator write(java.lang.String,boolean)>(v1, 1);
goto label13;
label11:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator write(java.lang.String,boolean)>(v1, 0);
goto label13;
label12:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeNull(java.lang.String)>(v1);
label13:
return v0;
}
public jakarta.json.stream.JsonGenerator write(java.lang.String)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
java.lang.String v1;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void checkContextForValue()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeComma()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeEscapedString(java.lang.CharSequence)>(v1);
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void popFieldContext()>();
return v0;
}
public jakarta.json.stream.JsonGenerator write(int)
{
int v1;
org.eclipse.parsson.JsonGeneratorImpl v0;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: int;
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void checkContextForValue()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeComma()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeInt(int)>(v1);
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void popFieldContext()>();
return v0;
}
public jakarta.json.stream.JsonGenerator write(long)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
long v1;
java.lang.String v2;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: long;
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void checkContextForValue()>();
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(v1);
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeValue(java.lang.String)>(v2);
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void popFieldContext()>();
return v0;
}
public jakarta.json.stream.JsonGenerator write(double)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
java.lang.NumberFormatException v4;
java.lang.String v5, v6;
boolean v2, v3;
double v1;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: double;
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void checkContextForValue()>();
v2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(v1);
if v2 != 0 goto label1;
v3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(v1);
if v3 == 0 goto label2;
label1:
v4 = new java.lang.NumberFormatException;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_DOUBLE_INFINITE_NAN()>();
specialinvoke v4.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v5);
throw v4;
label2:
v6 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(v1);
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeValue(java.lang.String)>(v6);
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void popFieldContext()>();
return v0;
}
public jakarta.json.stream.JsonGenerator write(java.math.BigInteger)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
java.math.BigInteger v1;
java.lang.String v2;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.math.BigInteger;
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void checkContextForValue()>();
v2 = virtualinvoke v1.<java.math.BigInteger: java.lang.String toString()>();
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeValue(java.lang.String)>(v2);
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void popFieldContext()>();
return v0;
}
private void checkContextForValue()
{
jakarta.json.stream.JsonGenerationException v14;
org.eclipse.parsson.JsonGeneratorImpl v0;
org.eclipse.parsson.JsonGeneratorImpl$Scope v12, v13, v16, v4, v5, v7, v8;
org.eclipse.parsson.JsonGeneratorImpl$Context v1, v11, v15, v3, v6, v9;
java.lang.String v17;
boolean v10, v2;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v2 = v1.<org.eclipse.parsson.JsonGeneratorImpl$Context: boolean first>;
if v2 != 0 goto label1;
v3 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v4 = v3.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v5 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_ARRAY>;
if v4 == v5 goto label1;
v6 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v7 = v6.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v8 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_FIELD>;
if v7 != v8 goto label2;
label1:
v9 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v10 = v9.<org.eclipse.parsson.JsonGeneratorImpl$Context: boolean first>;
if v10 == 0 goto label3;
v11 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v12 = v11.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v13 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v12 != v13 goto label3;
label2:
v14 = new jakarta.json.stream.JsonGenerationException;
v15 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v16 = v15.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v17 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v16);
specialinvoke v14.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v17);
throw v14;
label3:
return;
}
public jakarta.json.stream.JsonGenerator write(java.math.BigDecimal)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
java.math.BigDecimal v1;
java.lang.String v2;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.math.BigDecimal;
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void checkContextForValue()>();
v2 = virtualinvoke v1.<java.math.BigDecimal: java.lang.String toString()>();
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeValue(java.lang.String)>(v2);
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void popFieldContext()>();
return v0;
}
private void popFieldContext()
{
org.eclipse.parsson.JsonGeneratorImpl v0;
org.eclipse.parsson.JsonGeneratorImpl$Scope v2, v3;
java.lang.Object v5;
org.eclipse.parsson.JsonGeneratorImpl$Context v1;
java.util.Deque v4;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v2 = v1.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v3 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_FIELD>;
if v2 != v3 goto label1;
v4 = v0.<org.eclipse.parsson.JsonGeneratorImpl: java.util.Deque stack>;
v5 = interfaceinvoke v4.<java.util.Deque: java.lang.Object pop()>();
v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext> = v5;
label1:
return;
}
public jakarta.json.stream.JsonGenerator write(boolean)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
java.lang.String v2;
boolean v1;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: boolean;
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void checkContextForValue()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeComma()>();
if v1 == 0 goto label1;
v2 = "true";
goto label2;
label1:
v2 = "false";
label2:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence)>(v2);
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void popFieldContext()>();
return v0;
}
public jakarta.json.stream.JsonGenerator writeNull()
{
org.eclipse.parsson.JsonGeneratorImpl v0;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void checkContextForValue()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeComma()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence)>("null");
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void popFieldContext()>();
return v0;
}
private void writeValue(java.lang.String)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
java.lang.String v1;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeComma()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence)>(v1);
return;
}
private void writeValue(java.lang.String, java.lang.String)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
java.lang.String v1, v2;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeComma()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeEscapedString(java.lang.CharSequence)>(v1);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeColon()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence)>(v2);
return;
}
public jakarta.json.stream.JsonGenerator writeKey(java.lang.String)
{
jakarta.json.stream.JsonGenerationException v5;
org.eclipse.parsson.JsonGeneratorImpl v0;
java.util.Deque v9;
org.eclipse.parsson.JsonGeneratorImpl$Scope v12, v3, v4, v7;
org.eclipse.parsson.JsonGeneratorImpl$Context v10, v11, v13, v2, v6;
java.lang.String v1, v8;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v3 = v2.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v4 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v3 == v4 goto label1;
v5 = new jakarta.json.stream.JsonGenerationException;
v6 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v7 = v6.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v8 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v7);
specialinvoke v5.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v8);
throw v5;
label1:
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeName(java.lang.String)>(v1);
v9 = v0.<org.eclipse.parsson.JsonGeneratorImpl: java.util.Deque stack>;
v10 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
interfaceinvoke v9.<java.util.Deque: void push(java.lang.Object)>(v10);
v11 = new org.eclipse.parsson.JsonGeneratorImpl$Context;
v12 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_FIELD>;
specialinvoke v11.<org.eclipse.parsson.JsonGeneratorImpl$Context: void <init>(org.eclipse.parsson.JsonGeneratorImpl$Scope)>(v12);
v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext> = v11;
v13 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v13.<org.eclipse.parsson.JsonGeneratorImpl$Context: boolean first> = 0;
return v0;
}
public jakarta.json.stream.JsonGenerator writeEnd()
{
jakarta.json.stream.JsonGenerationException v4;
org.eclipse.parsson.JsonGeneratorImpl v0;
char v8;
java.util.Deque v9;
org.eclipse.parsson.JsonGeneratorImpl$Scope v2, v3, v6, v7;
java.lang.Object v10;
org.eclipse.parsson.JsonGeneratorImpl$Context v1, v5;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v2 = v1.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v3 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_NONE>;
if v2 != v3 goto label1;
v4 = new jakarta.json.stream.JsonGenerationException;
specialinvoke v4.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>("writeEnd() cannot be called in no context");
throw v4;
label1:
v5 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v6 = v5.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v7 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_ARRAY>;
if v6 != v7 goto label2;
v8 = 93;
goto label3;
label2:
v8 = 125;
label3:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(v8);
v9 = v0.<org.eclipse.parsson.JsonGeneratorImpl: java.util.Deque stack>;
v10 = interfaceinvoke v9.<java.util.Deque: java.lang.Object pop()>();
v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext> = v10;
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void popFieldContext()>();
return v0;
}
void write(java.lang.String, java.lang.CharSequence)
{
java.lang.CharSequence v2;
jakarta.json.stream.JsonGenerationException v6;
org.eclipse.parsson.JsonGeneratorImpl v0;
org.eclipse.parsson.JsonGeneratorImpl$Scope v4, v5, v8;
org.eclipse.parsson.JsonGeneratorImpl$Context v3, v7;
java.lang.String v1, v9;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.CharSequence;
v3 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v4 = v3.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v5 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_OBJECT>;
if v4 == v5 goto label1;
v6 = new jakarta.json.stream.JsonGenerationException;
v7 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v8 = v7.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v9 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_ILLEGAL_METHOD(java.lang.Object)>(v8);
specialinvoke v6.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v9);
throw v6;
label1:
specialinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: jakarta.json.stream.JsonGenerator writeName(java.lang.String)>(v1);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeEscapedString(java.lang.CharSequence)>(v2);
return;
}
protected void writeComma()
{
org.eclipse.parsson.JsonGeneratorImpl v0;
org.eclipse.parsson.JsonGeneratorImpl$Context v2;
boolean v1;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 = virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: boolean isCommaAllowed()>();
if v1 == 0 goto label1;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(44);
label1:
v2 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v2.<org.eclipse.parsson.JsonGeneratorImpl$Context: boolean first> = 0;
return;
}
protected boolean inNone()
{
org.eclipse.parsson.JsonGeneratorImpl v0;
org.eclipse.parsson.JsonGeneratorImpl$Scope v2, v3;
org.eclipse.parsson.JsonGeneratorImpl$Context v1;
boolean v4;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v2 = v1.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v3 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_NONE>;
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
boolean isCommaAllowed()
{
org.eclipse.parsson.JsonGeneratorImpl v0;
org.eclipse.parsson.JsonGeneratorImpl$Scope v4, v5;
org.eclipse.parsson.JsonGeneratorImpl$Context v1, v3;
boolean v2, v6;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v2 = v1.<org.eclipse.parsson.JsonGeneratorImpl$Context: boolean first>;
if v2 != 0 goto label1;
v3 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v4 = v3.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v5 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_FIELD>;
if v4 == v5 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
protected void writeColon()
{
org.eclipse.parsson.JsonGeneratorImpl v0;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(58);
return;
}
public void close()
{
jakarta.json.stream.JsonGenerationException v7;
org.eclipse.parsson.JsonGeneratorImpl v0;
java.io.IOException v10;
java.io.Writer v9;
org.eclipse.parsson.JsonGeneratorImpl$Scope v3, v4;
char[] v14;
org.eclipse.parsson.JsonGeneratorImpl$Context v2, v5;
jakarta.json.JsonException v11;
java.lang.String v12, v8;
org.eclipse.parsson.api.BufferPool v13;
boolean v1, v6;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 = v0.<org.eclipse.parsson.JsonGeneratorImpl: boolean closed>;
if v1 != 0 goto label7;
v2 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v3 = v2.<org.eclipse.parsson.JsonGeneratorImpl$Context: org.eclipse.parsson.JsonGeneratorImpl$Scope scope>;
v4 = <org.eclipse.parsson.JsonGeneratorImpl$Scope: org.eclipse.parsson.JsonGeneratorImpl$Scope IN_NONE>;
if v3 != v4 goto label1;
v5 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.JsonGeneratorImpl$Context currentContext>;
v6 = v5.<org.eclipse.parsson.JsonGeneratorImpl$Context: boolean first>;
if v6 == 0 goto label2;
label1:
v7 = new jakarta.json.stream.JsonGenerationException;
v8 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_INCOMPLETE_JSON()>();
specialinvoke v7.<jakarta.json.stream.JsonGenerationException: void <init>(java.lang.String)>(v8);
throw v7;
label2:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void flushBuffer()>();
label3:
v9 = v0.<org.eclipse.parsson.JsonGeneratorImpl: java.io.Writer writer>;
virtualinvoke v9.<java.io.Writer: void close()>();
label4:
goto label6;
label5:
v10 := @caughtexception;
v11 = new jakarta.json.JsonException;
v12 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_CLOSE_IO_ERR()>();
specialinvoke v11.<jakarta.json.JsonException: void <init>(java.lang.String,java.lang.Throwable)>(v12, v10);
throw v11;
label6:
v13 = v0.<org.eclipse.parsson.JsonGeneratorImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
v14 = v0.<org.eclipse.parsson.JsonGeneratorImpl: char[] buf>;
interfaceinvoke v13.<org.eclipse.parsson.api.BufferPool: void recycle(char[])>(v14);
v0.<org.eclipse.parsson.JsonGeneratorImpl: boolean closed> = 1;
label7:
return;
catch java.io.IOException from label3 to label4 with label5;
}
void writeEscapedString(java.lang.CharSequence)
{
java.lang.CharSequence v1;
org.eclipse.parsson.JsonGeneratorImpl v0;
char v6;
int v10, v2, v3, v4, v5, v9;
java.lang.String v11, v12, v7, v8;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.CharSequence;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(34);
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v3 = 0;
label01:
if v3 >= v2 goto label13;
v4 = v3;
v5 = v3;
v6 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v3);
label02:
if v6 < 32 goto label03;
if v6 > 1114111 goto label03;
if v6 == 34 goto label03;
if v6 == 92 goto label03;
v3 = v3 + 1;
v5 = v3;
if v3 >= v2 goto label03;
v6 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v3);
goto label02;
label03:
if v4 >= v5 goto label04;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence,int,int)>(v1, v4, v5);
if v3 == v2 goto label13;
label04:
lookupswitch(v6)
{
case 8: goto label06;
case 9: goto label10;
case 10: goto label08;
case 12: goto label07;
case 13: goto label09;
case 34: goto label05;
case 92: goto label05;
default: goto label11;
};
label05:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(92);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(v6);
goto label12;
label06:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(92);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(98);
goto label12;
label07:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(92);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(102);
goto label12;
label08:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(92);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(110);
goto label12;
label09:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(92);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(114);
goto label12;
label10:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(92);
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(116);
goto label12;
label11:
v7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v6);
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("000\u0001");
v9 = virtualinvoke v8.<java.lang.String: int length()>();
v10 = v9 - 4;
v11 = virtualinvoke v8.<java.lang.String: java.lang.String substring(int)>(v10);
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\\u\u0001");
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence)>(v12);
label12:
v3 = v3 + 1;
goto label01;
label13:
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeChar(char)>(34);
return;
}
void writeString(java.lang.CharSequence, int, int)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
int v11, v13, v14, v16, v17, v18, v19, v2, v21, v3, v5, v6, v7, v8, v9;
boolean v10;
java.lang.CharSequence v1;
char[] v12, v15, v20, v4;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
label1:
if v2 >= v3 goto label4;
v4 = v0.<org.eclipse.parsson.JsonGeneratorImpl: char[] buf>;
v5 = lengthof v4;
v6 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
v7 = v5 - v6;
v8 = v3 - v2;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v7, v8);
v10 = v1 instanceof java.lang.String;
if v10 == 0 goto label2;
v11 = v2 + v9;
v12 = v0.<org.eclipse.parsson.JsonGeneratorImpl: char[] buf>;
v13 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
virtualinvoke v1.<java.lang.String: void getChars(int,int,char[],int)>(v2, v11, v12, v13);
goto label3;
label2:
v14 = v2 + v9;
v15 = v0.<org.eclipse.parsson.JsonGeneratorImpl: char[] buf>;
v16 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void getChars(java.lang.CharSequence,int,int,char[],int)>(v1, v2, v14, v15, v16);
label3:
v2 = v2 + v9;
v17 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
v18 = v17 + v9;
v0.<org.eclipse.parsson.JsonGeneratorImpl: int len> = v18;
v19 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
v20 = v0.<org.eclipse.parsson.JsonGeneratorImpl: char[] buf>;
v21 = lengthof v20;
if v19 < v21 goto label1;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void flushBuffer()>();
goto label1;
label4:
return;
}
void writeString(java.lang.CharSequence)
{
int v2;
org.eclipse.parsson.JsonGeneratorImpl v0;
java.lang.CharSequence v1;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void writeString(java.lang.CharSequence,int,int)>(v1, 0, v2);
return;
}
void writeChar(char)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
char v1;
int v2, v4, v6, v7;
char[] v3, v5;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: char;
v2 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
v3 = v0.<org.eclipse.parsson.JsonGeneratorImpl: char[] buf>;
v4 = lengthof v3;
if v2 < v4 goto label1;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void flushBuffer()>();
label1:
v5 = v0.<org.eclipse.parsson.JsonGeneratorImpl: char[] buf>;
v6 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
v7 = v6 + 1;
v0.<org.eclipse.parsson.JsonGeneratorImpl: int len> = v7;
v5[v6] = v1;
return;
}
void writeInt(int)
{
org.eclipse.parsson.JsonGeneratorImpl v0;
int v1, v10, v13, v15, v16, v17, v18, v3, v4, v5, v6, v7, v8;
char[] v11, v12, v14, v2, v9;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: int;
if v1 != -2147483648 goto label1;
v2 = <org.eclipse.parsson.JsonGeneratorImpl: char[] INT_MIN_VALUE_CHARS>;
v3 = lengthof v2;
goto label4;
label1:
if v1 >= 0 goto label2;
v4 = neg v1;
v5 = staticinvoke <org.eclipse.parsson.JsonGeneratorImpl: int stringSize(int)>(v4);
v6 = v5 + 1;
goto label3;
label2:
v6 = staticinvoke <org.eclipse.parsson.JsonGeneratorImpl: int stringSize(int)>(v1);
label3:
v3 = v6;
label4:
v7 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
v8 = v7 + v3;
v9 = v0.<org.eclipse.parsson.JsonGeneratorImpl: char[] buf>;
v10 = lengthof v9;
if v8 < v10 goto label5;
virtualinvoke v0.<org.eclipse.parsson.JsonGeneratorImpl: void flushBuffer()>();
label5:
if v1 != -2147483648 goto label6;
v11 = <org.eclipse.parsson.JsonGeneratorImpl: char[] INT_MIN_VALUE_CHARS>;
v12 = v0.<org.eclipse.parsson.JsonGeneratorImpl: char[] buf>;
v13 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v11, 0, v12, v13, v3);
goto label7;
label6:
v14 = v0.<org.eclipse.parsson.JsonGeneratorImpl: char[] buf>;
v15 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
v16 = v15 + v3;
staticinvoke <org.eclipse.parsson.JsonGeneratorImpl: void fillIntChars(int,char[],int)>(v1, v14, v16);
label7:
v17 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
v18 = v17 + v3;
v0.<org.eclipse.parsson.JsonGeneratorImpl: int len> = v18;
return;
}
void flushBuffer()
{
org.eclipse.parsson.JsonGeneratorImpl v0;
java.io.IOException v5;
int v1, v4;
java.io.Writer v2;
char[] v3;
jakarta.json.JsonException v6;
java.lang.String v7;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
label1:
v1 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
if v1 <= 0 goto label4;
v2 = v0.<org.eclipse.parsson.JsonGeneratorImpl: java.io.Writer writer>;
v3 = v0.<org.eclipse.parsson.JsonGeneratorImpl: char[] buf>;
v4 = v0.<org.eclipse.parsson.JsonGeneratorImpl: int len>;
virtualinvoke v2.<java.io.Writer: void write(char[],int,int)>(v3, 0, v4);
v0.<org.eclipse.parsson.JsonGeneratorImpl: int len> = 0;
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = new jakarta.json.JsonException;
v7 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String GENERATOR_WRITE_IO_ERR()>();
specialinvoke v6.<jakarta.json.JsonException: void <init>(java.lang.String,java.lang.Throwable)>(v7, v5);
throw v6;
label4:
return;
catch java.io.IOException from label1 to label2 with label3;
}
private static int stringSize(int)
{
int[] v2;
int v0, v1, v3, v4;
v0 := @parameter0: int;
v1 = 0;
label1:
v2 = <org.eclipse.parsson.JsonGeneratorImpl: int[] INT_CHARS_SIZE_TABLE>;
v3 = v2[v1];
if v0 > v3 goto label2;
v4 = v1 + 1;
return v4;
label2:
v1 = v1 + 1;
goto label1;
}
void getChars(java.lang.CharSequence, int, int, char[], int)
{
java.lang.CharSequence v1;
org.eclipse.parsson.JsonGeneratorImpl v0;
char v10;
int v2, v3, v5, v6, v7, v8, v9;
char[] v4;
v0 := @this: org.eclipse.parsson.JsonGeneratorImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: char[];
v5 := @parameter4: int;
v6 = v3 - v2;
v7 = 0;
label1:
if v7 >= v6 goto label2;
v8 = v2 + v7;
v9 = v5 + v7;
v10 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v8);
v4[v9] = v10;
v7 = v7 + 1;
goto label1;
label2:
return;
}
private static void fillIntChars(int, char[], int)
{
int v0, v10, v11, v12, v17, v18, v19, v2, v20, v21, v22, v23, v26, v3, v5, v6, v7, v8, v9;
char v14, v16, v25, v4;
char[] v1, v13, v15, v24;
v0 := @parameter0: int;
v1 := @parameter1: char[];
v2 := @parameter2: int;
v3 = v2;
v4 = 0;
if v0 >= 0 goto label1;
v4 = 45;
v0 = neg v0;
label1:
if v0 < 65536 goto label2;
v5 = v0 / 100;
v6 = v5 << 6;
v7 = v5 << 5;
v8 = v6 + v7;
v9 = v5 << 2;
v10 = v8 + v9;
v11 = v0 - v10;
v0 = v5;
v12 = v3 - 1;
v13 = <org.eclipse.parsson.JsonGeneratorImpl: char[] DIGIT_ONES>;
v14 = v13[v11];
v1[v12] = v14;
v3 = v12 - 1;
v15 = <org.eclipse.parsson.JsonGeneratorImpl: char[] DIGIT_TENS>;
v16 = v15[v11];
v1[v3] = v16;
goto label1;
label2:
v17 = (int) 52429;
v18 = v0 * v17;
v19 = v18 >>> 19;
v20 = v19 << 3;
v21 = v19 << 1;
v22 = v20 + v21;
v23 = v0 - v22;
v3 = v3 - 1;
v24 = <org.eclipse.parsson.JsonGeneratorImpl: char[] DIGITS>;
v25 = v24[v23];
v1[v3] = v25;
v0 = v19;
if v19 != 0 goto label2;
if v4 == 0 goto label3;
v26 = v3 - 1;
v1[v26] = v4;
label3:
return;
}
static void <clinit>()
{
int[] v2;
char[] v1, v3, v4, v5;
java.lang.String v0;
v0 = "-2147483648";
v1 = virtualinvoke v0.<java.lang.String: char[] toCharArray()>();
<org.eclipse.parsson.JsonGeneratorImpl: char[] INT_MIN_VALUE_CHARS> = v1;
v2 = newarray (int)[10];
v2[0] = 9;
v2[1] = 99;
v2[2] = 999;
v2[3] = 9999;
v2[4] = 99999;
v2[5] = 999999;
v2[6] = 9999999;
v2[7] = 99999999;
v2[8] = 999999999;
v2[9] = 2147483647;
<org.eclipse.parsson.JsonGeneratorImpl: int[] INT_CHARS_SIZE_TABLE> = v2;
v3 = newarray (char)[100];
v3[0] = 48;
v3[1] = 48;
v3[2] = 48;
v3[3] = 48;
v3[4] = 48;
v3[5] = 48;
v3[6] = 48;
v3[7] = 48;
v3[8] = 48;
v3[9] = 48;
v3[10] = 49;
v3[11] = 49;
v3[12] = 49;
v3[13] = 49;
v3[14] = 49;
v3[15] = 49;
v3[16] = 49;
v3[17] = 49;
v3[18] = 49;
v3[19] = 49;
v3[20] = 50;
v3[21] = 50;
v3[22] = 50;
v3[23] = 50;
v3[24] = 50;
v3[25] = 50;
v3[26] = 50;
v3[27] = 50;
v3[28] = 50;
v3[29] = 50;
v3[30] = 51;
v3[31] = 51;
v3[32] = 51;
v3[33] = 51;
v3[34] = 51;
v3[35] = 51;
v3[36] = 51;
v3[37] = 51;
v3[38] = 51;
v3[39] = 51;
v3[40] = 52;
v3[41] = 52;
v3[42] = 52;
v3[43] = 52;
v3[44] = 52;
v3[45] = 52;
v3[46] = 52;
v3[47] = 52;
v3[48] = 52;
v3[49] = 52;
v3[50] = 53;
v3[51] = 53;
v3[52] = 53;
v3[53] = 53;
v3[54] = 53;
v3[55] = 53;
v3[56] = 53;
v3[57] = 53;
v3[58] = 53;
v3[59] = 53;
v3[60] = 54;
v3[61] = 54;
v3[62] = 54;
v3[63] = 54;
v3[64] = 54;
v3[65] = 54;
v3[66] = 54;
v3[67] = 54;
v3[68] = 54;
v3[69] = 54;
v3[70] = 55;
v3[71] = 55;
v3[72] = 55;
v3[73] = 55;
v3[74] = 55;
v3[75] = 55;
v3[76] = 55;
v3[77] = 55;
v3[78] = 55;
v3[79] = 55;
v3[80] = 56;
v3[81] = 56;
v3[82] = 56;
v3[83] = 56;
v3[84] = 56;
v3[85] = 56;
v3[86] = 56;
v3[87] = 56;
v3[88] = 56;
v3[89] = 56;
v3[90] = 57;
v3[91] = 57;
v3[92] = 57;
v3[93] = 57;
v3[94] = 57;
v3[95] = 57;
v3[96] = 57;
v3[97] = 57;
v3[98] = 57;
v3[99] = 57;
<org.eclipse.parsson.JsonGeneratorImpl: char[] DIGIT_TENS> = v3;
v4 = newarray (char)[100];
v4[0] = 48;
v4[1] = 49;
v4[2] = 50;
v4[3] = 51;
v4[4] = 52;
v4[5] = 53;
v4[6] = 54;
v4[7] = 55;
v4[8] = 56;
v4[9] = 57;
v4[10] = 48;
v4[11] = 49;
v4[12] = 50;
v4[13] = 51;
v4[14] = 52;
v4[15] = 53;
v4[16] = 54;
v4[17] = 55;
v4[18] = 56;
v4[19] = 57;
v4[20] = 48;
v4[21] = 49;
v4[22] = 50;
v4[23] = 51;
v4[24] = 52;
v4[25] = 53;
v4[26] = 54;
v4[27] = 55;
v4[28] = 56;
v4[29] = 57;
v4[30] = 48;
v4[31] = 49;
v4[32] = 50;
v4[33] = 51;
v4[34] = 52;
v4[35] = 53;
v4[36] = 54;
v4[37] = 55;
v4[38] = 56;
v4[39] = 57;
v4[40] = 48;
v4[41] = 49;
v4[42] = 50;
v4[43] = 51;
v4[44] = 52;
v4[45] = 53;
v4[46] = 54;
v4[47] = 55;
v4[48] = 56;
v4[49] = 57;
v4[50] = 48;
v4[51] = 49;
v4[52] = 50;
v4[53] = 51;
v4[54] = 52;
v4[55] = 53;
v4[56] = 54;
v4[57] = 55;
v4[58] = 56;
v4[59] = 57;
v4[60] = 48;
v4[61] = 49;
v4[62] = 50;
v4[63] = 51;
v4[64] = 52;
v4[65] = 53;
v4[66] = 54;
v4[67] = 55;
v4[68] = 56;
v4[69] = 57;
v4[70] = 48;
v4[71] = 49;
v4[72] = 50;
v4[73] = 51;
v4[74] = 52;
v4[75] = 53;
v4[76] = 54;
v4[77] = 55;
v4[78] = 56;
v4[79] = 57;
v4[80] = 48;
v4[81] = 49;
v4[82] = 50;
v4[83] = 51;
v4[84] = 52;
v4[85] = 53;
v4[86] = 54;
v4[87] = 55;
v4[88] = 56;
v4[89] = 57;
v4[90] = 48;
v4[91] = 49;
v4[92] = 50;
v4[93] = 51;
v4[94] = 52;
v4[95] = 53;
v4[96] = 54;
v4[97] = 55;
v4[98] = 56;
v4[99] = 57;
<org.eclipse.parsson.JsonGeneratorImpl: char[] DIGIT_ONES> = v4;
v5 = newarray (char)[10];
v5[0] = 48;
v5[1] = 49;
v5[2] = 50;
v5[3] = 51;
v5[4] = 52;
v5[5] = 53;
v5[6] = 54;
v5[7] = 55;
v5[8] = 56;
v5[9] = 57;
<org.eclipse.parsson.JsonGeneratorImpl: char[] DIGITS> = v5;
return;
}
}