public final class org.eclipse.parsson.JsonMergePatchImpl extends java.lang.Object implements jakarta.json.JsonMergePatch
{
private jakarta.json.JsonValue patch;
public void <init>(jakarta.json.JsonValue)
{
jakarta.json.JsonValue v1;
org.eclipse.parsson.JsonMergePatchImpl v0;
v0 := @this: org.eclipse.parsson.JsonMergePatchImpl;
v1 := @parameter0: jakarta.json.JsonValue;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.eclipse.parsson.JsonMergePatchImpl: jakarta.json.JsonValue patch> = v1;
return;
}
public jakarta.json.JsonValue apply(jakarta.json.JsonValue)
{
jakarta.json.JsonValue v1, v2, v3;
org.eclipse.parsson.JsonMergePatchImpl v0;
v0 := @this: org.eclipse.parsson.JsonMergePatchImpl;
v1 := @parameter0: jakarta.json.JsonValue;
v2 = v0.<org.eclipse.parsson.JsonMergePatchImpl: jakarta.json.JsonValue patch>;
v3 = staticinvoke <org.eclipse.parsson.JsonMergePatchImpl: jakarta.json.JsonValue mergePatch(jakarta.json.JsonValue,jakarta.json.JsonValue)>(v1, v2);
return v3;
}
public jakarta.json.JsonValue toJsonValue()
{
jakarta.json.JsonValue v1;
org.eclipse.parsson.JsonMergePatchImpl v0;
v0 := @this: org.eclipse.parsson.JsonMergePatchImpl;
v1 = v0.<org.eclipse.parsson.JsonMergePatchImpl: jakarta.json.JsonValue patch>;
return v1;
}
private static jakarta.json.JsonValue mergePatch(jakarta.json.JsonValue, jakarta.json.JsonValue)
{
org.eclipse.parsson.JsonObjectBuilderImpl v7;
jakarta.json.JsonValue v0, v1;
jakarta.json.JsonObject v11, v6, v9;
jakarta.json.JsonValue$ValueType v2, v3, v4, v5;
java.util.function.BiConsumer v10;
org.eclipse.parsson.api.BufferPool v8;
v0 := @parameter0: jakarta.json.JsonValue;
v1 := @parameter1: jakarta.json.JsonValue;
v2 = interfaceinvoke v1.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v3 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType OBJECT>;
if v2 == v3 goto label1;
return v1;
label1:
v4 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v5 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType OBJECT>;
if v4 == v5 goto label2;
v0 = <jakarta.json.JsonValue: jakarta.json.JsonObject EMPTY_JSON_OBJECT>;
label2:
v6 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonObject asJsonObject()>();
v7 = new org.eclipse.parsson.JsonObjectBuilderImpl;
v8 = staticinvoke <org.eclipse.parsson.JsonUtil: org.eclipse.parsson.api.BufferPool getInternalBufferPool()>();
specialinvoke v7.<org.eclipse.parsson.JsonObjectBuilderImpl: void <init>(jakarta.json.JsonObject,org.eclipse.parsson.api.BufferPool)>(v6, v8);
v9 = interfaceinvoke v1.<jakarta.json.JsonValue: jakarta.json.JsonObject asJsonObject()>();
v10 = staticinvoke <org.eclipse.parsson.JsonMergePatchImpl$lambda_mergePatch_0__587: java.util.function.BiConsumer bootstrap$(jakarta.json.JsonObject,jakarta.json.JsonObjectBuilder)>(v6, v7);
interfaceinvoke v9.<jakarta.json.JsonObject: void forEach(java.util.function.BiConsumer)>(v10);
v11 = interfaceinvoke v7.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObject build()>();
return v11;
}
static jakarta.json.JsonValue diff(jakarta.json.JsonValue, jakarta.json.JsonValue)
{
org.eclipse.parsson.JsonObjectBuilderImpl v6;
jakarta.json.JsonValue v0, v1;
jakarta.json.JsonObject v10;
jakarta.json.JsonValue$ValueType v2, v3, v4, v5;
java.util.function.BiConsumer v8, v9;
org.eclipse.parsson.api.BufferPool v7;
v0 := @parameter0: jakarta.json.JsonValue;
v1 := @parameter1: jakarta.json.JsonValue;
v2 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v3 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType OBJECT>;
if v2 != v3 goto label1;
v4 = interfaceinvoke v1.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v5 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType OBJECT>;
if v4 == v5 goto label2;
label1:
return v1;
label2:
v6 = new org.eclipse.parsson.JsonObjectBuilderImpl;
v7 = staticinvoke <org.eclipse.parsson.JsonUtil: org.eclipse.parsson.api.BufferPool getInternalBufferPool()>();
specialinvoke v6.<org.eclipse.parsson.JsonObjectBuilderImpl: void <init>(org.eclipse.parsson.api.BufferPool)>(v7);
v8 = staticinvoke <org.eclipse.parsson.JsonMergePatchImpl$lambda_diff_1__588: java.util.function.BiConsumer bootstrap$(jakarta.json.JsonObject,jakarta.json.JsonObjectBuilder)>(v1, v6);
interfaceinvoke v0.<jakarta.json.JsonObject: void forEach(java.util.function.BiConsumer)>(v8);
v9 = staticinvoke <org.eclipse.parsson.JsonMergePatchImpl$lambda_diff_2__589: java.util.function.BiConsumer bootstrap$(jakarta.json.JsonObject,jakarta.json.JsonObjectBuilder)>(v0, v6);
interfaceinvoke v1.<jakarta.json.JsonObject: void forEach(java.util.function.BiConsumer)>(v9);
v10 = interfaceinvoke v6.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObject build()>();
return v10;
}
public boolean equals(java.lang.Object)
{
jakarta.json.JsonValue v3, v4;
org.eclipse.parsson.JsonMergePatchImpl v0;
java.lang.Class v2;
java.lang.Object v1;
boolean v5;
v0 := @this: org.eclipse.parsson.JsonMergePatchImpl;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 != null goto label2;
return 0;
label2:
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
if v2 == class "Lorg/eclipse/parsson/JsonMergePatchImpl;" goto label3;
return 0;
label3:
v3 = v0.<org.eclipse.parsson.JsonMergePatchImpl: jakarta.json.JsonValue patch>;
v4 = v1.<org.eclipse.parsson.JsonMergePatchImpl: jakarta.json.JsonValue patch>;
v5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v3, v4);
return v5;
}
public int hashCode()
{
int v2;
jakarta.json.JsonValue v1;
org.eclipse.parsson.JsonMergePatchImpl v0;
v0 := @this: org.eclipse.parsson.JsonMergePatchImpl;
v1 = v0.<org.eclipse.parsson.JsonMergePatchImpl: jakarta.json.JsonValue patch>;
v2 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v1);
return v2;
}
public java.lang.String toString()
{
java.lang.String v2;
jakarta.json.JsonValue v1;
org.eclipse.parsson.JsonMergePatchImpl v0;
v0 := @this: org.eclipse.parsson.JsonMergePatchImpl;
v1 = v0.<org.eclipse.parsson.JsonMergePatchImpl: jakarta.json.JsonValue patch>;
v2 = interfaceinvoke v1.<jakarta.json.JsonValue: java.lang.String toString()>();
return v2;
}
}