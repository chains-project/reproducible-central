final class org.eclipse.parsson.JsonParserImpl$ObjectContext extends org.eclipse.parsson.JsonParserImpl$Context
{
private boolean firstValue;
final org.eclipse.parsson.JsonParserImpl this$0;
private void <init>(org.eclipse.parsson.JsonParserImpl)
{
org.eclipse.parsson.JsonParserImpl v1;
org.eclipse.parsson.JsonParserImpl$ObjectContext v0;
v0 := @this: org.eclipse.parsson.JsonParserImpl$ObjectContext;
v1 := @parameter0: org.eclipse.parsson.JsonParserImpl;
v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0> = v1;
specialinvoke v0.<org.eclipse.parsson.JsonParserImpl$Context: void <init>(org.eclipse.parsson.JsonParserImpl)>(v1);
v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: boolean firstValue> = 1;
return;
}
public jakarta.json.stream.JsonParser$Event getNextEvent()
{
org.eclipse.parsson.JsonTokenizer v2, v23, v58;
int[] v5;
boolean v25, v53;
jakarta.json.stream.JsonParsingException v11, v13, v15, v21, v46, v56, v62;
org.eclipse.parsson.JsonParserImpl$Stack v29, v38, v50;
org.eclipse.parsson.JsonParserImpl$Context v31, v40, v51;
org.eclipse.parsson.JsonTokenizer$JsonToken v19, v24, v27, v3, v36, v4, v47, v54, v59;
org.eclipse.parsson.JsonParserImpl$ObjectContext v0, v33;
int v8, v9;
org.eclipse.parsson.JsonParserImpl v1, v10, v12, v14, v16, v20, v22, v28, v30, v32, v34, v37, v39, v41, v43, v45, v48, v49, v55, v57, v6, v61;
jakarta.json.stream.JsonParser$Event v17, v18, v26, v35, v44, v52, v60, v7;
org.eclipse.parsson.JsonParserImpl$ArrayContext v42;
v0 := @this: org.eclipse.parsson.JsonParserImpl$ObjectContext;
v1 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v2 = v1.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v3 = virtualinvoke v2.<org.eclipse.parsson.JsonTokenizer: org.eclipse.parsson.JsonTokenizer$JsonToken nextToken()>();
v4 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken EOF>;
if v3 != v4 goto label04;
v5 = <org.eclipse.parsson.JsonParserImpl$4: int[] $SwitchMap$jakarta$json$stream$JsonParser$Event>;
v6 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v7 = v6.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v8 = virtualinvoke v7.<jakarta.json.stream.JsonParser$Event: int ordinal()>();
v9 = v5[v8];
lookupswitch(v9)
{
case 2: goto label01;
case 3: goto label02;
default: goto label03;
};
label01:
v10 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v11 = specialinvoke v10.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParsingException parsingException(org.eclipse.parsson.JsonTokenizer$JsonToken,java.lang.String)>(v3, "[STRING, CURLYCLOSE]");
throw v11;
label02:
v12 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v13 = specialinvoke v12.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParsingException parsingException(org.eclipse.parsson.JsonTokenizer$JsonToken,java.lang.String)>(v3, "[COLON]");
throw v13;
label03:
v14 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v15 = specialinvoke v14.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParsingException parsingException(org.eclipse.parsson.JsonTokenizer$JsonToken,java.lang.String)>(v3, "[COMMA, CURLYCLOSE]");
throw v15;
label04:
v16 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v17 = v16.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v18 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event KEY_NAME>;
if v17 != v18 goto label09;
v19 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken COLON>;
if v3 == v19 goto label05;
v20 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v21 = specialinvoke v20.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParsingException parsingException(org.eclipse.parsson.JsonTokenizer$JsonToken,java.lang.String)>(v3, "[COLON]");
throw v21;
label05:
v22 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v23 = v22.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v24 = virtualinvoke v23.<org.eclipse.parsson.JsonTokenizer: org.eclipse.parsson.JsonTokenizer$JsonToken nextToken()>();
v25 = virtualinvoke v24.<org.eclipse.parsson.JsonTokenizer$JsonToken: boolean isValue()>();
if v25 == 0 goto label06;
v26 = virtualinvoke v24.<org.eclipse.parsson.JsonTokenizer$JsonToken: jakarta.json.stream.JsonParser$Event getEvent()>();
return v26;
label06:
v27 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken CURLYOPEN>;
if v24 != v27 goto label07;
v28 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v29 = v28.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Stack stack>;
v30 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v31 = v30.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext>;
specialinvoke v29.<org.eclipse.parsson.JsonParserImpl$Stack: void push(org.eclipse.parsson.JsonParserImpl$Context)>(v31);
v32 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v33 = new org.eclipse.parsson.JsonParserImpl$ObjectContext;
v34 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
specialinvoke v33.<org.eclipse.parsson.JsonParserImpl$ObjectContext: void <init>(org.eclipse.parsson.JsonParserImpl)>(v34);
v32.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext> = v33;
v35 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_OBJECT>;
return v35;
label07:
v36 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken SQUAREOPEN>;
if v24 != v36 goto label08;
v37 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v38 = v37.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Stack stack>;
v39 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v40 = v39.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext>;
specialinvoke v38.<org.eclipse.parsson.JsonParserImpl$Stack: void push(org.eclipse.parsson.JsonParserImpl$Context)>(v40);
v41 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v42 = new org.eclipse.parsson.JsonParserImpl$ArrayContext;
v43 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
specialinvoke v42.<org.eclipse.parsson.JsonParserImpl$ArrayContext: void <init>(org.eclipse.parsson.JsonParserImpl)>(v43);
v41.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext> = v42;
v44 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_ARRAY>;
return v44;
label08:
v45 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v46 = specialinvoke v45.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParsingException parsingException(org.eclipse.parsson.JsonTokenizer$JsonToken,java.lang.String)>(v24, "[CURLYOPEN, SQUAREOPEN, STRING, NUMBER, TRUE, FALSE, NULL]");
throw v46;
label09:
v47 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken CURLYCLOSE>;
if v3 != v47 goto label10;
v48 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v49 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v50 = v49.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Stack stack>;
v51 = specialinvoke v50.<org.eclipse.parsson.JsonParserImpl$Stack: org.eclipse.parsson.JsonParserImpl$Context pop()>();
v48.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext> = v51;
v52 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_OBJECT>;
return v52;
label10:
v53 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: boolean firstValue>;
if v53 == 0 goto label11;
v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: boolean firstValue> = 0;
goto label13;
label11:
v54 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken COMMA>;
if v3 == v54 goto label12;
v55 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v56 = specialinvoke v55.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParsingException parsingException(org.eclipse.parsson.JsonTokenizer$JsonToken,java.lang.String)>(v3, "[COMMA]");
throw v56;
label12:
v57 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v58 = v57.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v3 = virtualinvoke v58.<org.eclipse.parsson.JsonTokenizer: org.eclipse.parsson.JsonTokenizer$JsonToken nextToken()>();
label13:
v59 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken STRING>;
if v3 != v59 goto label14;
v60 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event KEY_NAME>;
return v60;
label14:
v61 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v62 = specialinvoke v61.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParsingException parsingException(org.eclipse.parsson.JsonTokenizer$JsonToken,java.lang.String)>(v3, "[STRING]");
throw v62;
}
void skip()
{
org.eclipse.parsson.JsonTokenizer$JsonToken v4, v8;
org.eclipse.parsson.JsonParserImpl v2;
org.eclipse.parsson.JsonTokenizer v3;
org.eclipse.parsson.JsonParserImpl$ObjectContext v0;
int[] v5;
int v1, v6, v7;
v0 := @this: org.eclipse.parsson.JsonParserImpl$ObjectContext;
v1 = 1;
label1:
v2 = v0.<org.eclipse.parsson.JsonParserImpl$ObjectContext: org.eclipse.parsson.JsonParserImpl this$0>;
v3 = v2.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v4 = virtualinvoke v3.<org.eclipse.parsson.JsonTokenizer: org.eclipse.parsson.JsonTokenizer$JsonToken nextToken()>();
v5 = <org.eclipse.parsson.JsonParserImpl$4: int[] $SwitchMap$org$eclipse$parsson$JsonTokenizer$JsonToken>;
v6 = virtualinvoke v4.<org.eclipse.parsson.JsonTokenizer$JsonToken: int ordinal()>();
v7 = v5[v6];
lookupswitch(v7)
{
case 1: goto label2;
case 2: goto label3;
default: goto label4;
};
label2:
v1 = v1 - 1;
goto label4;
label3:
v1 = v1 + 1;
label4:
v8 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken CURLYCLOSE>;
if v4 != v8 goto label1;
if v1 != 0 goto label1;
return;
}
}