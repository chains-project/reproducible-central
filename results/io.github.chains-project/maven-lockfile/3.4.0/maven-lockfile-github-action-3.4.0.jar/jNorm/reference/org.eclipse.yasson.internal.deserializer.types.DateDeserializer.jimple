class org.eclipse.yasson.internal.deserializer.types.DateDeserializer extends org.eclipse.yasson.internal.deserializer.types.AbstractDateDeserializer
{
private static final java.time.format.DateTimeFormatter DEFAULT_DATE_TIME_FORMATTER;
void <init>(org.eclipse.yasson.internal.deserializer.types.TypeDeserializerBuilder)
{
org.eclipse.yasson.internal.deserializer.types.DateDeserializer v0;
org.eclipse.yasson.internal.deserializer.types.TypeDeserializerBuilder v1;
v0 := @this: org.eclipse.yasson.internal.deserializer.types.DateDeserializer;
v1 := @parameter0: org.eclipse.yasson.internal.deserializer.types.TypeDeserializerBuilder;
specialinvoke v0.<org.eclipse.yasson.internal.deserializer.types.AbstractDateDeserializer: void <init>(org.eclipse.yasson.internal.deserializer.types.TypeDeserializerBuilder)>(v1);
return;
}
java.util.Date fromInstant(java.time.Instant)
{
org.eclipse.yasson.internal.deserializer.types.DateDeserializer v0;
java.util.Date v2;
long v3;
java.time.Instant v1;
v0 := @this: org.eclipse.yasson.internal.deserializer.types.DateDeserializer;
v1 := @parameter0: java.time.Instant;
v2 = new java.util.Date;
v3 = virtualinvoke v1.<java.time.Instant: long toEpochMilli()>();
specialinvoke v2.<java.util.Date: void <init>(long)>(v3);
return v2;
}
java.util.Date parseDefault(java.lang.String, java.util.Locale)
{
org.eclipse.yasson.internal.deserializer.types.DateDeserializer v0;
java.util.Date v5;
java.util.Locale v2;
java.time.format.DateTimeFormatter v3, v4;
java.lang.String v1;
v0 := @this: org.eclipse.yasson.internal.deserializer.types.DateDeserializer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.Locale;
v3 = <org.eclipse.yasson.internal.deserializer.types.DateDeserializer: java.time.format.DateTimeFormatter DEFAULT_DATE_TIME_FORMATTER>;
v4 = virtualinvoke v3.<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withLocale(java.util.Locale)>(v2);
v5 = staticinvoke <org.eclipse.yasson.internal.deserializer.types.DateDeserializer: java.util.Date parseWithOrWithoutZone(java.lang.String,java.time.format.DateTimeFormatter)>(v1, v4);
return v5;
}
java.util.Date parseWithFormatter(java.lang.String, java.time.format.DateTimeFormatter)
{
org.eclipse.yasson.internal.deserializer.types.DateDeserializer v0;
java.util.Date v3;
java.time.format.DateTimeFormatter v2;
java.lang.String v1;
v0 := @this: org.eclipse.yasson.internal.deserializer.types.DateDeserializer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.time.format.DateTimeFormatter;
v3 = staticinvoke <org.eclipse.yasson.internal.deserializer.types.DateDeserializer: java.util.Date parseWithOrWithoutZone(java.lang.String,java.time.format.DateTimeFormatter)>(v1, v2);
return v3;
}
private static java.util.Date parseWithOrWithoutZone(java.lang.String, java.time.format.DateTimeFormatter)
{
java.util.Date v7;
java.time.ZonedDateTime v5;
java.time.Instant v6;
java.time.ZoneId v2, v3;
java.time.format.DateTimeFormatter v1, v4;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.time.format.DateTimeFormatter;
v2 = virtualinvoke v1.<java.time.format.DateTimeFormatter: java.time.ZoneId getZone()>();
if v2 != null goto label1;
v3 = <org.eclipse.yasson.internal.deserializer.types.DateDeserializer: java.time.ZoneId UTC>;
v4 = virtualinvoke v1.<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>(v3);
v5 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>(v0, v4);
goto label2;
label1:
v5 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>(v0, v1);
label2:
v6 = virtualinvoke v5.<java.time.ZonedDateTime: java.time.Instant toInstant()>();
v7 = staticinvoke <java.util.Date: java.util.Date 'from'(java.time.Instant)>(v6);
return v7;
}
static void <clinit>()
{
java.time.format.DateTimeFormatter v0;
v0 = <java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ISO_DATE_TIME>;
<org.eclipse.yasson.internal.deserializer.types.DateDeserializer: java.time.format.DateTimeFormatter DEFAULT_DATE_TIME_FORMATTER> = v0;
return;
}
}