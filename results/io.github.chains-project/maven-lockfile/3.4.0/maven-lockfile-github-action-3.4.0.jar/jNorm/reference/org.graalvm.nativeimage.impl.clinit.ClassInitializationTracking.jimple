public class org.graalvm.nativeimage.impl.clinit.ClassInitializationTracking extends java.lang.Object
{
public static final java.util.Map initializedClasses;
public static final java.util.Map instantiatedObjects;
public void <init>()
{
org.graalvm.nativeimage.impl.clinit.ClassInitializationTracking v0;
v0 := @this: org.graalvm.nativeimage.impl.clinit.ClassInitializationTracking;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void reportClassInitialized(java.lang.Class, java.lang.StackTraceElement[])
{
java.lang.StackTraceElement[] v1, v3;
java.util.Map v2;
java.lang.Class v0;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.StackTraceElement[];
v2 = <org.graalvm.nativeimage.impl.clinit.ClassInitializationTracking: java.util.Map initializedClasses>;
v3 = staticinvoke <org.graalvm.nativeimage.impl.clinit.ClassInitializationTracking: java.lang.StackTraceElement[] relevantStackTrace(java.lang.StackTraceElement[])>(v1);
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v0, v3);
return;
}
public static void reportObjectInstantiated(java.lang.Object, java.lang.StackTraceElement[])
{
java.lang.StackTraceElement[] v1, v3;
java.util.Map v2;
java.lang.Object v0;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.StackTraceElement[];
v2 = <org.graalvm.nativeimage.impl.clinit.ClassInitializationTracking: java.util.Map instantiatedObjects>;
v3 = staticinvoke <org.graalvm.nativeimage.impl.clinit.ClassInitializationTracking: java.lang.StackTraceElement[] relevantStackTrace(java.lang.StackTraceElement[])>(v1);
interfaceinvoke v2.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v0, v3);
return;
}
private static java.lang.StackTraceElement[] relevantStackTrace(java.lang.StackTraceElement[])
{
java.lang.Object[] v15;
java.util.ArrayList v1;
int v12, v2, v4, v5;
java.lang.StackTraceElement v6;
java.lang.String v10, v7, v8;
boolean v11, v3, v9;
java.util.List v13;
java.lang.StackTraceElement[] v0, v14;
v0 := @parameter0: java.lang.StackTraceElement[];
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = 0;
v3 = 0;
v4 = 0;
label1:
v5 = lengthof v0;
if v4 >= v5 goto label4;
v6 = v0[v4];
v7 = "<clinit>";
v8 = virtualinvoke v6.<java.lang.StackTraceElement: java.lang.String getMethodName()>();
v9 = virtualinvoke v7.<java.lang.String: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label2;
v2 = v4;
label2:
v10 = virtualinvoke v6.<java.lang.StackTraceElement: java.lang.String getClassName()>();
v11 = virtualinvoke v10.<java.lang.String: boolean equals(java.lang.Object)>("java.lang.invoke.LambdaMetafactory");
if v11 == 0 goto label3;
v3 = 1;
label3:
virtualinvoke v1.<java.util.ArrayList: boolean add(java.lang.Object)>(v6);
v4 = v4 + 1;
goto label1;
label4:
if v2 == 0 goto label5;
if v3 != 0 goto label5;
v12 = v2 + 1;
v13 = virtualinvoke v1.<java.util.ArrayList: java.util.List subList(int,int)>(0, v12);
goto label6;
label5:
v13 = v1;
label6:
v14 = newarray (java.lang.StackTraceElement)[0];
v15 = interfaceinvoke v13.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v14);
return v15;
}
static void <clinit>()
{
java.util.concurrent.ConcurrentHashMap v0;
java.util.IdentityHashMap v1;
java.util.Map v2;
v0 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
<org.graalvm.nativeimage.impl.clinit.ClassInitializationTracking: java.util.Map initializedClasses> = v0;
v1 = new java.util.IdentityHashMap;
specialinvoke v1.<java.util.IdentityHashMap: void <init>()>();
v2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>(v1);
<org.graalvm.nativeimage.impl.clinit.ClassInitializationTracking: java.util.Map instantiatedObjects> = v2;
return;
}
}