public final class org.graalvm.polyglot.Engine$Builder extends java.lang.Object
{
private java.io.OutputStream out;
private java.io.OutputStream err;
private java.io.InputStream in;
private java.util.Map options;
private boolean allowExperimentalOptions;
private boolean useSystemProperties;
private boolean boundEngine;
private org.graalvm.polyglot.io.MessageTransport messageTransport;
private java.lang.Object customLogHandler;
private java.lang.String[] permittedLanguages;
final org.graalvm.polyglot.Engine this$0;
void <init>(org.graalvm.polyglot.Engine, java.lang.String[])
{
java.io.PrintStream v3, v4;
java.lang.String[] v2;
java.util.HashMap v6;
org.graalvm.polyglot.Engine$Builder v0;
org.graalvm.polyglot.Engine v1;
int v7, v8;
java.lang.String v9;
java.io.InputStream v5;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 := @parameter0: org.graalvm.polyglot.Engine;
v2 := @parameter1: java.lang.String[];
v0.<org.graalvm.polyglot.Engine$Builder: org.graalvm.polyglot.Engine this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = <java.lang.System: java.io.PrintStream out>;
v0.<org.graalvm.polyglot.Engine$Builder: java.io.OutputStream out> = v3;
v4 = <java.lang.System: java.io.PrintStream err>;
v0.<org.graalvm.polyglot.Engine$Builder: java.io.OutputStream err> = v4;
v5 = <java.lang.System: java.io.InputStream in>;
v0.<org.graalvm.polyglot.Engine$Builder: java.io.InputStream in> = v5;
v6 = new java.util.HashMap;
specialinvoke v6.<java.util.HashMap: void <init>()>();
v0.<org.graalvm.polyglot.Engine$Builder: java.util.Map options> = v6;
v0.<org.graalvm.polyglot.Engine$Builder: boolean allowExperimentalOptions> = 0;
v0.<org.graalvm.polyglot.Engine$Builder: boolean useSystemProperties> = 1;
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v7 = lengthof v2;
v8 = 0;
label1:
if v8 >= v7 goto label2;
v9 = v2[v8];
virtualinvoke v9.<java.lang.Object: java.lang.Class getClass()>();
v8 = v8 + 1;
goto label1;
label2:
v0.<org.graalvm.polyglot.Engine$Builder: java.lang.String[] permittedLanguages> = v2;
return;
}
org.graalvm.polyglot.Engine$Builder setBoundEngine(boolean)
{
org.graalvm.polyglot.Engine$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.Engine$Builder: boolean boundEngine> = v1;
return v0;
}
public org.graalvm.polyglot.Engine$Builder out(java.io.OutputStream)
{
java.io.OutputStream v1;
org.graalvm.polyglot.Engine$Builder v0;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 := @parameter0: java.io.OutputStream;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v0.<org.graalvm.polyglot.Engine$Builder: java.io.OutputStream out> = v1;
return v0;
}
public org.graalvm.polyglot.Engine$Builder err(java.io.OutputStream)
{
java.io.OutputStream v1;
org.graalvm.polyglot.Engine$Builder v0;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 := @parameter0: java.io.OutputStream;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v0.<org.graalvm.polyglot.Engine$Builder: java.io.OutputStream err> = v1;
return v0;
}
public org.graalvm.polyglot.Engine$Builder in(java.io.InputStream)
{
org.graalvm.polyglot.Engine$Builder v0;
java.io.InputStream v1;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 := @parameter0: java.io.InputStream;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v0.<org.graalvm.polyglot.Engine$Builder: java.io.InputStream in> = v1;
return v0;
}
public org.graalvm.polyglot.Engine$Builder allowExperimentalOptions(boolean)
{
org.graalvm.polyglot.Engine$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.Engine$Builder: boolean allowExperimentalOptions> = v1;
return v0;
}
public org.graalvm.polyglot.Engine$Builder useSystemProperties(boolean)
{
org.graalvm.polyglot.Engine$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.Engine$Builder: boolean useSystemProperties> = v1;
return v0;
}
public org.graalvm.polyglot.Engine$Builder option(java.lang.String, java.lang.String)
{
org.graalvm.polyglot.Engine$Builder v0;
java.util.Map v3;
java.lang.String v1, v2;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Key must not be null.");
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "Value must not be null.");
v3 = v0.<org.graalvm.polyglot.Engine$Builder: java.util.Map options>;
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
return v0;
}
public org.graalvm.polyglot.Engine$Builder options(java.util.Map)
{
java.util.Iterator v3;
java.util.Set v2;
org.graalvm.polyglot.Engine$Builder v0;
java.util.Map v1, v7;
java.lang.Object v5, v6;
boolean v4;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 := @parameter0: java.util.Map;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v5);
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v6, "All option values must be non-null.");
goto label1;
label2:
v7 = v0.<org.graalvm.polyglot.Engine$Builder: java.util.Map options>;
interfaceinvoke v7.<java.util.Map: void putAll(java.util.Map)>(v1);
return v0;
}
public org.graalvm.polyglot.Engine$Builder serverTransport(org.graalvm.polyglot.io.MessageTransport)
{
org.graalvm.polyglot.Engine$Builder v0;
org.graalvm.polyglot.io.MessageTransport v1;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 := @parameter0: org.graalvm.polyglot.io.MessageTransport;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "MessageTransport must be non null.");
v0.<org.graalvm.polyglot.Engine$Builder: org.graalvm.polyglot.io.MessageTransport messageTransport> = v1;
return v0;
}
public org.graalvm.polyglot.Engine$Builder logHandler(java.util.logging.Handler)
{
org.graalvm.polyglot.Engine$Builder v0;
java.util.logging.Handler v1;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 := @parameter0: java.util.logging.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Handler must be non null.");
v0.<org.graalvm.polyglot.Engine$Builder: java.lang.Object customLogHandler> = v1;
return v0;
}
public org.graalvm.polyglot.Engine$Builder logHandler(java.io.OutputStream)
{
java.io.OutputStream v1;
org.graalvm.polyglot.Engine$Builder v0;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 := @parameter0: java.io.OutputStream;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "LogOut must be non null.");
v0.<org.graalvm.polyglot.Engine$Builder: java.lang.Object customLogHandler> = v1;
return v0;
}
public org.graalvm.polyglot.Engine build()
{
java.lang.IllegalStateException v2;
org.graalvm.polyglot.io.MessageTransport v11;
java.lang.String[] v3;
java.util.Map v7;
org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractHostAccess v13;
boolean v10, v8, v9;
java.io.OutputStream v4, v5;
org.graalvm.polyglot.Engine$Builder v0;
org.graalvm.polyglot.Engine v15;
org.graalvm.polyglot.impl.AbstractPolyglotImpl v1;
java.lang.Object v12, v14;
java.io.InputStream v6;
v0 := @this: org.graalvm.polyglot.Engine$Builder;
v1 = staticinvoke <org.graalvm.polyglot.Engine: org.graalvm.polyglot.impl.AbstractPolyglotImpl getImpl()>();
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The Polyglot API implementation failed to load.");
throw v2;
label1:
v3 = v0.<org.graalvm.polyglot.Engine$Builder: java.lang.String[] permittedLanguages>;
v4 = v0.<org.graalvm.polyglot.Engine$Builder: java.io.OutputStream out>;
v5 = v0.<org.graalvm.polyglot.Engine$Builder: java.io.OutputStream err>;
v6 = v0.<org.graalvm.polyglot.Engine$Builder: java.io.InputStream in>;
v7 = v0.<org.graalvm.polyglot.Engine$Builder: java.util.Map options>;
v8 = v0.<org.graalvm.polyglot.Engine$Builder: boolean useSystemProperties>;
v9 = v0.<org.graalvm.polyglot.Engine$Builder: boolean allowExperimentalOptions>;
v10 = v0.<org.graalvm.polyglot.Engine$Builder: boolean boundEngine>;
v11 = v0.<org.graalvm.polyglot.Engine$Builder: org.graalvm.polyglot.io.MessageTransport messageTransport>;
v12 = v0.<org.graalvm.polyglot.Engine$Builder: java.lang.Object customLogHandler>;
v13 = virtualinvoke v1.<org.graalvm.polyglot.impl.AbstractPolyglotImpl: org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractHostAccess createHostAccess()>();
v14 = virtualinvoke v1.<org.graalvm.polyglot.impl.AbstractPolyglotImpl: java.lang.Object createHostLanguage(org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractHostAccess)>(v13);
v15 = virtualinvoke v1.<org.graalvm.polyglot.impl.AbstractPolyglotImpl: org.graalvm.polyglot.Engine buildEngine(java.lang.String[],java.io.OutputStream,java.io.OutputStream,java.io.InputStream,java.util.Map,boolean,boolean,boolean,org.graalvm.polyglot.io.MessageTransport,java.lang.Object,java.lang.Object,boolean,boolean,org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractPolyglotHostService)>(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v14, 0, 1, null);
return v15;
}
}