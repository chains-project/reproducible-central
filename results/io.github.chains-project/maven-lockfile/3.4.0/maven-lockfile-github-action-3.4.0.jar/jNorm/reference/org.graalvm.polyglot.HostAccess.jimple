public final class org.graalvm.polyglot.HostAccess extends java.lang.Object
{
private final java.lang.String name;
private final org.graalvm.collections.EconomicSet accessAnnotations;
private final org.graalvm.collections.EconomicSet implementableAnnotations;
private final org.graalvm.collections.EconomicMap excludeTypes;
private final org.graalvm.collections.EconomicSet members;
private final org.graalvm.collections.EconomicSet implementableTypes;
private final java.util.List targetMappings;
final boolean allowPublic;
private final boolean allowAllInterfaceImplementations;
private final boolean allowAllClassImplementations;
final boolean allowArrayAccess;
final boolean allowListAccess;
final boolean allowBufferAccess;
final boolean allowIterableAccess;
final boolean allowIteratorAccess;
final boolean allowMapAccess;
final boolean allowAccessInheritance;
private final boolean methodScopingDefault;
private final org.graalvm.collections.EconomicSet disableMethodScopingAnnotations;
private final org.graalvm.collections.EconomicSet disableMethodScoping;
volatile java.lang.Object impl;
private static final org.graalvm.polyglot.HostAccess EMPTY;
public static final org.graalvm.polyglot.HostAccess EXPLICIT;
public static final org.graalvm.polyglot.HostAccess SCOPED;
public static final org.graalvm.polyglot.HostAccess ALL;
public static final org.graalvm.polyglot.HostAccess NONE;
void <init>(org.graalvm.collections.EconomicSet, org.graalvm.collections.EconomicMap, org.graalvm.collections.EconomicSet, org.graalvm.collections.EconomicSet, org.graalvm.collections.EconomicSet, java.util.List, java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, org.graalvm.collections.EconomicSet, org.graalvm.collections.EconomicSet)
{
org.graalvm.collections.EconomicSet v1, v19, v20, v22, v26, v28, v3, v30, v4, v5;
org.graalvm.collections.EconomicMap v2, v24;
boolean v10, v11, v12, v13, v14, v15, v16, v17, v18, v32, v33, v8, v9;
java.util.List v6;
java.util.ArrayList v31;
java.lang.String v7;
org.graalvm.collections.Equivalence v21, v23, v25, v27, v29;
org.graalvm.polyglot.HostAccess v0;
v0 := @this: org.graalvm.polyglot.HostAccess;
v1 := @parameter0: org.graalvm.collections.EconomicSet;
v2 := @parameter1: org.graalvm.collections.EconomicMap;
v3 := @parameter2: org.graalvm.collections.EconomicSet;
v4 := @parameter3: org.graalvm.collections.EconomicSet;
v5 := @parameter4: org.graalvm.collections.EconomicSet;
v6 := @parameter5: java.util.List;
v7 := @parameter6: java.lang.String;
v8 := @parameter7: boolean;
v9 := @parameter8: boolean;
v10 := @parameter9: boolean;
v11 := @parameter10: boolean;
v12 := @parameter11: boolean;
v13 := @parameter12: boolean;
v14 := @parameter13: boolean;
v15 := @parameter14: boolean;
v16 := @parameter15: boolean;
v17 := @parameter16: boolean;
v18 := @parameter17: boolean;
v19 := @parameter18: org.graalvm.collections.EconomicSet;
v20 := @parameter19: org.graalvm.collections.EconomicSet;
specialinvoke v0.<java.lang.Object: void <init>()>();
v21 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v22 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet copySet(org.graalvm.collections.EconomicSet,org.graalvm.collections.Equivalence)>(v1, v21);
v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet accessAnnotations> = v22;
v23 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v24 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicMap copyMap(org.graalvm.collections.EconomicMap,org.graalvm.collections.Equivalence)>(v2, v23);
v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicMap excludeTypes> = v24;
v25 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence DEFAULT>;
v26 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet copySet(org.graalvm.collections.EconomicSet,org.graalvm.collections.Equivalence)>(v3, v25);
v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet members> = v26;
v27 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v28 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet copySet(org.graalvm.collections.EconomicSet,org.graalvm.collections.Equivalence)>(v4, v27);
v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableAnnotations> = v28;
v29 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v30 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet copySet(org.graalvm.collections.EconomicSet,org.graalvm.collections.Equivalence)>(v5, v29);
v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableTypes> = v30;
if v6 == null goto label1;
v31 = new java.util.ArrayList;
specialinvoke v31.<java.util.ArrayList: void <init>(java.util.Collection)>(v6);
goto label2;
label1:
v31 = null;
label2:
v0.<org.graalvm.polyglot.HostAccess: java.util.List targetMappings> = v31;
v0.<org.graalvm.polyglot.HostAccess: java.lang.String name> = v7;
v0.<org.graalvm.polyglot.HostAccess: boolean allowPublic> = v8;
v0.<org.graalvm.polyglot.HostAccess: boolean allowAllInterfaceImplementations> = v9;
v0.<org.graalvm.polyglot.HostAccess: boolean allowAllClassImplementations> = v10;
v0.<org.graalvm.polyglot.HostAccess: boolean allowArrayAccess> = v11;
v0.<org.graalvm.polyglot.HostAccess: boolean allowListAccess> = v12;
v0.<org.graalvm.polyglot.HostAccess: boolean allowBufferAccess> = v13;
if v12 != 0 goto label3;
if v14 == 0 goto label4;
label3:
v32 = 1;
goto label5;
label4:
v32 = 0;
label5:
v0.<org.graalvm.polyglot.HostAccess: boolean allowIterableAccess> = v32;
v0.<org.graalvm.polyglot.HostAccess: boolean allowMapAccess> = v16;
if v12 != 0 goto label6;
if v14 != 0 goto label6;
if v16 != 0 goto label6;
if v15 == 0 goto label7;
label6:
v33 = 1;
goto label8;
label7:
v33 = 0;
label8:
v0.<org.graalvm.polyglot.HostAccess: boolean allowIteratorAccess> = v33;
v0.<org.graalvm.polyglot.HostAccess: boolean allowAccessInheritance> = v17;
v0.<org.graalvm.polyglot.HostAccess: boolean methodScopingDefault> = v18;
v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet disableMethodScopingAnnotations> = v19;
v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet disableMethodScoping> = v20;
return;
}
public boolean equals(java.lang.Object)
{
org.graalvm.collections.EconomicSet v22, v23, v25, v26, v28, v29, v34, v35;
org.graalvm.collections.EconomicMap v19, v20;
boolean v10, v11, v12, v13, v14, v15, v16, v17, v18, v2, v21, v24, v27, v3, v30, v33, v36, v37, v4, v5, v6, v7, v8, v9;
java.util.List v31, v32;
org.graalvm.polyglot.HostAccess v0;
java.lang.Object v1;
v0 := @this: org.graalvm.polyglot.HostAccess;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof org.graalvm.polyglot.HostAccess;
if v2 != 0 goto label1;
return 0;
label1:
v3 = v0.<org.graalvm.polyglot.HostAccess: boolean allowPublic>;
v4 = v1.<org.graalvm.polyglot.HostAccess: boolean allowPublic>;
if v3 != v4 goto label2;
v5 = v0.<org.graalvm.polyglot.HostAccess: boolean allowAllInterfaceImplementations>;
v6 = v1.<org.graalvm.polyglot.HostAccess: boolean allowAllInterfaceImplementations>;
if v5 != v6 goto label2;
v7 = v0.<org.graalvm.polyglot.HostAccess: boolean allowAllClassImplementations>;
v8 = v1.<org.graalvm.polyglot.HostAccess: boolean allowAllClassImplementations>;
if v7 != v8 goto label2;
v9 = v0.<org.graalvm.polyglot.HostAccess: boolean allowArrayAccess>;
v10 = v1.<org.graalvm.polyglot.HostAccess: boolean allowArrayAccess>;
if v9 != v10 goto label2;
v11 = v0.<org.graalvm.polyglot.HostAccess: boolean allowListAccess>;
v12 = v1.<org.graalvm.polyglot.HostAccess: boolean allowListAccess>;
if v11 != v12 goto label2;
v13 = v0.<org.graalvm.polyglot.HostAccess: boolean allowIterableAccess>;
v14 = v1.<org.graalvm.polyglot.HostAccess: boolean allowIterableAccess>;
if v13 != v14 goto label2;
v15 = v0.<org.graalvm.polyglot.HostAccess: boolean allowIteratorAccess>;
v16 = v1.<org.graalvm.polyglot.HostAccess: boolean allowIteratorAccess>;
if v15 != v16 goto label2;
v17 = v0.<org.graalvm.polyglot.HostAccess: boolean allowMapAccess>;
v18 = v1.<org.graalvm.polyglot.HostAccess: boolean allowMapAccess>;
if v17 != v18 goto label2;
v19 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicMap excludeTypes>;
v20 = v1.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicMap excludeTypes>;
v21 = staticinvoke <org.graalvm.polyglot.HostAccess: boolean equalsMap(org.graalvm.collections.EconomicMap,org.graalvm.collections.EconomicMap)>(v19, v20);
if v21 == 0 goto label2;
v22 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet members>;
v23 = v1.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet members>;
v24 = staticinvoke <org.graalvm.polyglot.HostAccess: boolean equalsSet(org.graalvm.collections.EconomicSet,org.graalvm.collections.EconomicSet)>(v22, v23);
if v24 == 0 goto label2;
v25 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableAnnotations>;
v26 = v1.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableAnnotations>;
v27 = staticinvoke <org.graalvm.polyglot.HostAccess: boolean equalsSet(org.graalvm.collections.EconomicSet,org.graalvm.collections.EconomicSet)>(v25, v26);
if v27 == 0 goto label2;
v28 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableTypes>;
v29 = v1.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableTypes>;
v30 = staticinvoke <org.graalvm.polyglot.HostAccess: boolean equalsSet(org.graalvm.collections.EconomicSet,org.graalvm.collections.EconomicSet)>(v28, v29);
if v30 == 0 goto label2;
v31 = v0.<org.graalvm.polyglot.HostAccess: java.util.List targetMappings>;
v32 = v1.<org.graalvm.polyglot.HostAccess: java.util.List targetMappings>;
v33 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v31, v32);
if v33 == 0 goto label2;
v34 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet accessAnnotations>;
v35 = v1.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet accessAnnotations>;
v36 = staticinvoke <org.graalvm.polyglot.HostAccess: boolean equalsSet(org.graalvm.collections.EconomicSet,org.graalvm.collections.EconomicSet)>(v34, v35);
if v36 == 0 goto label2;
v37 = 1;
goto label3;
label2:
v37 = 0;
label3:
return v37;
}
public int hashCode()
{
org.graalvm.collections.EconomicSet v21, v24, v27, v30, v34;
java.lang.Integer v20, v23, v26, v29, v32, v36;
org.graalvm.collections.EconomicMap v18;
boolean v10, v12, v14, v16, v2, v4, v6, v8;
java.util.List v33;
java.lang.Object[] v1;
int v19, v22, v25, v28, v31, v35, v37;
java.lang.Boolean v11, v13, v15, v17, v3, v5, v7, v9;
org.graalvm.polyglot.HostAccess v0;
v0 := @this: org.graalvm.polyglot.HostAccess;
v1 = newarray (java.lang.Object)[15];
v2 = v0.<org.graalvm.polyglot.HostAccess: boolean allowPublic>;
v3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v2);
v1[0] = v3;
v4 = v0.<org.graalvm.polyglot.HostAccess: boolean allowAllInterfaceImplementations>;
v5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v4);
v1[1] = v5;
v6 = v0.<org.graalvm.polyglot.HostAccess: boolean allowAllClassImplementations>;
v7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v6);
v1[2] = v7;
v8 = v0.<org.graalvm.polyglot.HostAccess: boolean allowArrayAccess>;
v9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v8);
v1[3] = v9;
v10 = v0.<org.graalvm.polyglot.HostAccess: boolean allowListAccess>;
v11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v10);
v1[4] = v11;
v12 = v0.<org.graalvm.polyglot.HostAccess: boolean allowIterableAccess>;
v13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v12);
v1[5] = v13;
v14 = v0.<org.graalvm.polyglot.HostAccess: boolean allowIteratorAccess>;
v15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v14);
v1[6] = v15;
v16 = v0.<org.graalvm.polyglot.HostAccess: boolean allowMapAccess>;
v17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v16);
v1[7] = v17;
v18 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicMap excludeTypes>;
v19 = staticinvoke <org.graalvm.polyglot.HostAccess: int hashMap(org.graalvm.collections.EconomicMap)>(v18);
v20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v19);
v1[8] = v20;
v21 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet members>;
v22 = staticinvoke <org.graalvm.polyglot.HostAccess: int hashSet(org.graalvm.collections.EconomicSet)>(v21);
v23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v22);
v1[9] = v23;
v24 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableAnnotations>;
v25 = staticinvoke <org.graalvm.polyglot.HostAccess: int hashSet(org.graalvm.collections.EconomicSet)>(v24);
v26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v25);
v1[10] = v26;
v27 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableTypes>;
v28 = staticinvoke <org.graalvm.polyglot.HostAccess: int hashSet(org.graalvm.collections.EconomicSet)>(v27);
v29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v28);
v1[11] = v29;
v30 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet members>;
v31 = staticinvoke <org.graalvm.polyglot.HostAccess: int hashSet(org.graalvm.collections.EconomicSet)>(v30);
v32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v31);
v1[12] = v32;
v33 = v0.<org.graalvm.polyglot.HostAccess: java.util.List targetMappings>;
v1[13] = v33;
v34 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet accessAnnotations>;
v35 = staticinvoke <org.graalvm.polyglot.HostAccess: int hashSet(org.graalvm.collections.EconomicSet)>(v34);
v36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v35);
v1[14] = v36;
v37 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>(v1);
return v37;
}
private static int hashMap(org.graalvm.collections.EconomicMap)
{
org.graalvm.collections.MapCursor v2;
org.graalvm.collections.EconomicMap v0;
int v1, v5, v7, v8;
java.lang.Object v4, v6;
boolean v3;
v0 := @parameter0: org.graalvm.collections.EconomicMap;
v1 = 0;
if v0 == null goto label2;
v2 = interfaceinvoke v0.<org.graalvm.collections.EconomicMap: org.graalvm.collections.MapCursor getEntries()>();
label1:
v3 = interfaceinvoke v2.<org.graalvm.collections.MapCursor: boolean advance()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<org.graalvm.collections.MapCursor: java.lang.Object getKey()>();
v5 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v4);
v6 = interfaceinvoke v2.<org.graalvm.collections.MapCursor: java.lang.Object getValue()>();
v7 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v6);
v8 = v5 ^ v7;
v1 = v1 + v8;
goto label1;
label2:
return v1;
}
private static int hashSet(org.graalvm.collections.EconomicSet)
{
java.util.Iterator v2;
int v1, v5;
java.lang.Object v4;
org.graalvm.collections.EconomicSet v0;
boolean v3;
v0 := @parameter0: org.graalvm.collections.EconomicSet;
v1 = 0;
if v0 == null goto label2;
v2 = interfaceinvoke v0.<org.graalvm.collections.EconomicSet: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
if v4 == null goto label1;
v5 = virtualinvoke v4.<java.lang.Object: int hashCode()>();
v1 = v1 + v5;
goto label1;
label2:
return v1;
}
private static boolean equalsMap(org.graalvm.collections.EconomicMap, org.graalvm.collections.EconomicMap)
{
org.graalvm.collections.MapCursor v5;
org.graalvm.collections.EconomicMap v0, v1;
int v3, v4;
java.lang.Object v10, v11, v7, v9;
boolean v12, v2, v6, v8;
v0 := @parameter0: org.graalvm.collections.EconomicMap;
v1 := @parameter1: org.graalvm.collections.EconomicMap;
v2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v0, v1);
if v2 == 0 goto label1;
return 1;
label1:
if v0 != null goto label2;
return 0;
label2:
v3 = interfaceinvoke v0.<org.graalvm.collections.EconomicMap: int size()>();
v4 = interfaceinvoke v1.<org.graalvm.collections.EconomicMap: int size()>();
if v3 == v4 goto label3;
return 0;
label3:
v5 = interfaceinvoke v0.<org.graalvm.collections.EconomicMap: org.graalvm.collections.MapCursor getEntries()>();
label4:
v6 = interfaceinvoke v5.<org.graalvm.collections.MapCursor: boolean advance()>();
if v6 == 0 goto label6;
v7 = interfaceinvoke v5.<org.graalvm.collections.MapCursor: java.lang.Object getKey()>();
v8 = interfaceinvoke v1.<org.graalvm.collections.EconomicMap: boolean containsKey(java.lang.Object)>(v7);
if v8 != 0 goto label5;
return 0;
label5:
v9 = interfaceinvoke v5.<org.graalvm.collections.MapCursor: java.lang.Object getValue()>();
v10 = interfaceinvoke v5.<org.graalvm.collections.MapCursor: java.lang.Object getKey()>();
v11 = interfaceinvoke v1.<org.graalvm.collections.EconomicMap: java.lang.Object get(java.lang.Object)>(v10);
v12 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v9, v11);
if v12 != 0 goto label4;
return 0;
label6:
return 1;
}
private static boolean equalsSet(org.graalvm.collections.EconomicSet, org.graalvm.collections.EconomicSet)
{
java.util.Iterator v5;
org.graalvm.collections.EconomicSet v0, v1;
int v3, v4;
java.lang.Object v7;
boolean v2, v6, v8;
v0 := @parameter0: org.graalvm.collections.EconomicSet;
v1 := @parameter1: org.graalvm.collections.EconomicSet;
v2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v0, v1);
if v2 == 0 goto label1;
return 1;
label1:
if v0 != null goto label2;
return 0;
label2:
v3 = interfaceinvoke v0.<org.graalvm.collections.EconomicSet: int size()>();
v4 = interfaceinvoke v1.<org.graalvm.collections.EconomicSet: int size()>();
if v3 == v4 goto label3;
return 0;
label3:
v5 = interfaceinvoke v0.<org.graalvm.collections.EconomicSet: java.util.Iterator iterator()>();
label4:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label5;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v1.<org.graalvm.collections.EconomicSet: boolean contains(java.lang.Object)>(v7);
if v8 != 0 goto label4;
return 0;
label5:
return 1;
}
private static org.graalvm.collections.EconomicSet copySet(org.graalvm.collections.EconomicSet, org.graalvm.collections.Equivalence)
{
org.graalvm.collections.EconomicSet v0, v2;
org.graalvm.collections.Equivalence v1;
v0 := @parameter0: org.graalvm.collections.EconomicSet;
v1 := @parameter1: org.graalvm.collections.Equivalence;
if v0 != null goto label1;
return null;
label1:
v2 = staticinvoke <org.graalvm.collections.EconomicSet: org.graalvm.collections.EconomicSet create(org.graalvm.collections.Equivalence,org.graalvm.collections.UnmodifiableEconomicSet)>(v1, v0);
return v2;
}
private static org.graalvm.collections.EconomicMap copyMap(org.graalvm.collections.EconomicMap, org.graalvm.collections.Equivalence)
{
org.graalvm.collections.Equivalence v1;
org.graalvm.collections.EconomicMap v0, v2;
v0 := @parameter0: org.graalvm.collections.EconomicMap;
v1 := @parameter1: org.graalvm.collections.Equivalence;
if v0 != null goto label1;
return null;
label1:
v2 = staticinvoke <org.graalvm.collections.EconomicMap: org.graalvm.collections.EconomicMap create(org.graalvm.collections.Equivalence,org.graalvm.collections.UnmodifiableEconomicMap)>(v1, v0);
return v2;
}
public static org.graalvm.polyglot.HostAccess$Builder newBuilder()
{
org.graalvm.polyglot.HostAccess v1;
org.graalvm.polyglot.HostAccess$Builder v0;
v0 = new org.graalvm.polyglot.HostAccess$Builder;
v1 = <org.graalvm.polyglot.HostAccess: org.graalvm.polyglot.HostAccess EMPTY>;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
specialinvoke v0.<org.graalvm.polyglot.HostAccess$Builder: void <init>(org.graalvm.polyglot.HostAccess)>(v1);
return v0;
}
public static org.graalvm.polyglot.HostAccess$Builder newBuilder(org.graalvm.polyglot.HostAccess)
{
org.graalvm.polyglot.HostAccess v0, v2;
org.graalvm.polyglot.HostAccess$Builder v1;
v0 := @parameter0: org.graalvm.polyglot.HostAccess;
virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v1 = new org.graalvm.polyglot.HostAccess$Builder;
v2 = <org.graalvm.polyglot.HostAccess: org.graalvm.polyglot.HostAccess EMPTY>;
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
specialinvoke v1.<org.graalvm.polyglot.HostAccess$Builder: void <init>(org.graalvm.polyglot.HostAccess,org.graalvm.polyglot.HostAccess)>(v2, v0);
return v1;
}
java.util.List getTargetMappings()
{
java.util.List v1;
org.graalvm.polyglot.HostAccess v0;
v0 := @this: org.graalvm.polyglot.HostAccess;
v1 = v0.<org.graalvm.polyglot.HostAccess: java.util.List targetMappings>;
return v1;
}
boolean allowsImplementation(java.lang.Class)
{
java.util.Iterator v11;
org.graalvm.collections.EconomicSet v10, v6, v7, v9;
org.graalvm.polyglot.HostAccess v0;
java.lang.'annotation'.Annotation v14;
java.lang.Class v1;
java.lang.Object v13;
boolean v12, v2, v3, v4, v5, v8;
v0 := @this: org.graalvm.polyglot.HostAccess;
v1 := @parameter0: java.lang.Class;
v2 = v0.<org.graalvm.polyglot.HostAccess: boolean allowAllInterfaceImplementations>;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<java.lang.Class: boolean isInterface()>();
if v3 == 0 goto label1;
return 1;
label1:
v4 = v0.<org.graalvm.polyglot.HostAccess: boolean allowAllClassImplementations>;
if v4 == 0 goto label2;
v5 = virtualinvoke v1.<java.lang.Class: boolean isInterface()>();
if v5 != 0 goto label2;
return 1;
label2:
v6 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableTypes>;
if v6 == null goto label3;
v7 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableTypes>;
v8 = interfaceinvoke v7.<org.graalvm.collections.EconomicSet: boolean contains(java.lang.Object)>(v1);
if v8 == 0 goto label3;
return 1;
label3:
v9 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableAnnotations>;
if v9 == null goto label5;
v10 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableAnnotations>;
v11 = interfaceinvoke v10.<org.graalvm.collections.EconomicSet: java.util.Iterator iterator()>();
label4:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label5;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = virtualinvoke v1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v13);
if v14 == null goto label4;
return 1;
label5:
return 0;
}
boolean allowsAccess(java.lang.reflect.AnnotatedElement)
{
org.graalvm.collections.EconomicSet v12, v13, v15, v16;
org.graalvm.collections.EconomicMap v2, v4;
boolean v10, v11, v14, v18, v20, v6, v9;
java.util.Iterator v17;
org.graalvm.collections.MapCursor v5;
org.graalvm.polyglot.HostAccess v0;
java.lang.Class v3;
java.lang.Object v19, v7, v8;
java.lang.reflect.AnnotatedElement v1;
v0 := @this: org.graalvm.polyglot.HostAccess;
v1 := @parameter0: java.lang.reflect.AnnotatedElement;
v2 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicMap excludeTypes>;
if v2 == null goto label3;
v3 = staticinvoke <org.graalvm.polyglot.HostAccess: java.lang.Class getDeclaringClass(java.lang.reflect.AnnotatedElement)>(v1);
v4 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicMap excludeTypes>;
v5 = interfaceinvoke v4.<org.graalvm.collections.EconomicMap: org.graalvm.collections.MapCursor getEntries()>();
label1:
v6 = interfaceinvoke v5.<org.graalvm.collections.MapCursor: boolean advance()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v5.<org.graalvm.collections.MapCursor: java.lang.Object getKey()>();
v8 = interfaceinvoke v5.<org.graalvm.collections.MapCursor: java.lang.Object getValue()>();
v9 = virtualinvoke v8.<java.lang.Boolean: boolean booleanValue()>();
if v9 == 0 goto label2;
v10 = virtualinvoke v7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v3);
if v10 == 0 goto label1;
return 0;
label2:
if v7 != v3 goto label1;
return 0;
label3:
v11 = v0.<org.graalvm.polyglot.HostAccess: boolean allowPublic>;
if v11 == 0 goto label4;
return 1;
label4:
v12 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet members>;
if v12 == null goto label5;
v13 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet members>;
v14 = interfaceinvoke v13.<org.graalvm.collections.EconomicSet: boolean contains(java.lang.Object)>(v1);
if v14 == 0 goto label5;
return 1;
label5:
v15 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet accessAnnotations>;
if v15 == null goto label7;
v16 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet accessAnnotations>;
v17 = interfaceinvoke v16.<org.graalvm.collections.EconomicSet: java.util.Iterator iterator()>();
label6:
v18 = interfaceinvoke v17.<java.util.Iterator: boolean hasNext()>();
if v18 == 0 goto label7;
v19 = interfaceinvoke v17.<java.util.Iterator: java.lang.Object next()>();
v20 = staticinvoke <org.graalvm.polyglot.HostAccess: boolean hasAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>(v1, v19);
if v20 == 0 goto label6;
return 1;
label7:
return 0;
}
boolean isMethodScoped(java.lang.reflect.Executable)
{
java.util.Iterator v8;
org.graalvm.collections.EconomicSet v3, v4, v6, v7;
org.graalvm.polyglot.HostAccess v0;
java.lang.'annotation'.Annotation v11;
java.lang.reflect.Executable v1;
java.lang.Object v10;
boolean v2, v5, v9;
v0 := @this: org.graalvm.polyglot.HostAccess;
v1 := @parameter0: java.lang.reflect.Executable;
v2 = virtualinvoke v0.<org.graalvm.polyglot.HostAccess: boolean isMethodScopingEnabled()>();
if v2 != 0 goto label1;
return 0;
label1:
v3 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet disableMethodScoping>;
if v3 == null goto label2;
v4 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet disableMethodScoping>;
v5 = interfaceinvoke v4.<org.graalvm.collections.EconomicSet: boolean contains(java.lang.Object)>(v1);
if v5 == 0 goto label2;
return 0;
label2:
v6 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet disableMethodScopingAnnotations>;
if v6 == null goto label4;
v7 = v0.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet disableMethodScopingAnnotations>;
v8 = interfaceinvoke v7.<org.graalvm.collections.EconomicSet: java.util.Iterator iterator()>();
label3:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label4;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = virtualinvoke v1.<java.lang.reflect.Executable: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v10);
if v11 == null goto label3;
return 0;
label4:
return 1;
}
boolean isMethodScopingEnabled()
{
org.graalvm.polyglot.HostAccess v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.HostAccess;
v1 = v0.<org.graalvm.polyglot.HostAccess: boolean methodScopingDefault>;
return v1;
}
public java.lang.String toString()
{
java.lang.String v1, v2;
org.graalvm.polyglot.HostAccess v0;
v0 := @this: org.graalvm.polyglot.HostAccess;
v1 = v0.<org.graalvm.polyglot.HostAccess: java.lang.String name>;
if v1 != null goto label1;
v2 = specialinvoke v0.<java.lang.Object: java.lang.String toString()>();
goto label2;
label1:
v2 = v0.<org.graalvm.polyglot.HostAccess: java.lang.String name>;
label2:
return v2;
}
private static boolean hasAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class)
{
java.lang.'annotation'.Annotation v3, v6, v9;
java.lang.Class v1;
boolean v10, v2, v4, v5, v7, v8;
java.lang.reflect.AnnotatedElement v0;
v0 := @parameter0: java.lang.reflect.AnnotatedElement;
v1 := @parameter1: java.lang.Class;
v2 = v0 instanceof java.lang.reflect.Field;
if v2 == 0 goto label3;
v3 = virtualinvoke v0.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
if v3 == null goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
label3:
v5 = v0 instanceof java.lang.reflect.Method;
if v5 == 0 goto label6;
v6 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
if v6 == null goto label4;
v7 = 1;
goto label5;
label4:
v7 = 0;
label5:
return v7;
label6:
v8 = v0 instanceof java.lang.reflect.Constructor;
if v8 == 0 goto label9;
v9 = virtualinvoke v0.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
if v9 == null goto label7;
v10 = 1;
goto label8;
label7:
v10 = 0;
label8:
return v10;
label9:
return 0;
}
private static java.lang.Class getDeclaringClass(java.lang.reflect.AnnotatedElement)
{
java.lang.Class v2, v4, v6;
boolean v1, v3, v5;
java.lang.reflect.AnnotatedElement v0;
v0 := @parameter0: java.lang.reflect.AnnotatedElement;
v1 = v0 instanceof java.lang.reflect.Field;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();
return v2;
label1:
v3 = v0 instanceof java.lang.reflect.Method;
if v3 == 0 goto label2;
v4 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
return v4;
label2:
v5 = v0 instanceof java.lang.reflect.Constructor;
if v5 == 0 goto label3;
v6 = virtualinvoke v0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
return v6;
label3:
return class "Ljava/lang/Object;";
}
static void <clinit>()
{
org.graalvm.polyglot.HostAccess$Builder v1, v10, v11, v12, v13, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v26, v28, v29, v3, v4, v5, v7, v8, v9;
org.graalvm.polyglot.HostAccess v0, v14, v27, v30, v6;
v0 = new org.graalvm.polyglot.HostAccess;
specialinvoke v0.<org.graalvm.polyglot.HostAccess: void <init>(org.graalvm.collections.EconomicSet,org.graalvm.collections.EconomicMap,org.graalvm.collections.EconomicSet,org.graalvm.collections.EconomicSet,org.graalvm.collections.EconomicSet,java.util.List,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,org.graalvm.collections.EconomicSet,org.graalvm.collections.EconomicSet)>(null, null, null, null, null, null, null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null, null);
<org.graalvm.polyglot.HostAccess: org.graalvm.polyglot.HostAccess EMPTY> = v0;
v1 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.polyglot.HostAccess$Builder newBuilder()>();
v2 = virtualinvoke v1.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowAccessAnnotatedBy(java.lang.Class)>(class "Lorg/graalvm/polyglot/HostAccess$Export;");
v3 = virtualinvoke v2.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowImplementationsAnnotatedBy(java.lang.Class)>(class "Lorg/graalvm/polyglot/HostAccess$Implementable;");
v4 = virtualinvoke v3.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowImplementationsAnnotatedBy(java.lang.Class)>(class "Ljava/lang/FunctionalInterface;");
v5 = virtualinvoke v4.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder name(java.lang.String)>("HostAccess.EXPLICIT");
v6 = virtualinvoke v5.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess build()>();
<org.graalvm.polyglot.HostAccess: org.graalvm.polyglot.HostAccess EXPLICIT> = v6;
v7 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.polyglot.HostAccess$Builder newBuilder()>();
v8 = virtualinvoke v7.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowAccessAnnotatedBy(java.lang.Class)>(class "Lorg/graalvm/polyglot/HostAccess$Export;");
v9 = virtualinvoke v8.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowImplementationsAnnotatedBy(java.lang.Class)>(class "Lorg/graalvm/polyglot/HostAccess$Implementable;");
v10 = virtualinvoke v9.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowImplementationsAnnotatedBy(java.lang.Class)>(class "Ljava/lang/FunctionalInterface;");
v11 = virtualinvoke v10.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder methodScoping(boolean)>(1);
v12 = virtualinvoke v11.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder disableMethodScopingAnnotatedBy(java.lang.Class)>(class "Lorg/graalvm/polyglot/HostAccess$DisableMethodScoping;");
v13 = virtualinvoke v12.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder name(java.lang.String)>("HostAccess.SCOPED");
v14 = virtualinvoke v13.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess build()>();
<org.graalvm.polyglot.HostAccess: org.graalvm.polyglot.HostAccess SCOPED> = v14;
v15 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.polyglot.HostAccess$Builder newBuilder()>();
v16 = virtualinvoke v15.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowPublicAccess(boolean)>(1);
v17 = virtualinvoke v16.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowAllImplementations(boolean)>(1);
v18 = virtualinvoke v17.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowAllClassImplementations(boolean)>(1);
v19 = virtualinvoke v18.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowArrayAccess(boolean)>(1);
v20 = virtualinvoke v19.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowListAccess(boolean)>(1);
v21 = virtualinvoke v20.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowBufferAccess(boolean)>(1);
v22 = virtualinvoke v21.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowIterableAccess(boolean)>(1);
v23 = virtualinvoke v22.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowIteratorAccess(boolean)>(1);
v24 = virtualinvoke v23.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowMapAccess(boolean)>(1);
v25 = virtualinvoke v24.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder allowAccessInheritance(boolean)>(1);
v26 = virtualinvoke v25.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder name(java.lang.String)>("HostAccess.ALL");
v27 = virtualinvoke v26.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess build()>();
<org.graalvm.polyglot.HostAccess: org.graalvm.polyglot.HostAccess ALL> = v27;
v28 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.polyglot.HostAccess$Builder newBuilder()>();
v29 = virtualinvoke v28.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder name(java.lang.String)>("HostAccess.NONE");
v30 = virtualinvoke v29.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess build()>();
<org.graalvm.polyglot.HostAccess: org.graalvm.polyglot.HostAccess NONE> = v30;
return;
}
}