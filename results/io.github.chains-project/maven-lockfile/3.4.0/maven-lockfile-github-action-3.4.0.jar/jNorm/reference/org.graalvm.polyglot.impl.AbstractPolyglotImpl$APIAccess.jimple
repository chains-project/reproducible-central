public abstract class org.graalvm.polyglot.impl.AbstractPolyglotImpl$APIAccess extends java.lang.Object
{
protected void <init>()
{
java.lang.AssertionError v4;
org.graalvm.polyglot.impl.AbstractPolyglotImpl$APIAccess v0;
java.lang.Class v1, v5;
java.lang.String v2, v6, v7;
boolean v3;
v0 := @this: org.graalvm.polyglot.impl.AbstractPolyglotImpl$APIAccess;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getCanonicalName()>();
v3 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>("org.graalvm.polyglot.Engine.APIAccessImpl");
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getCanonicalName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Only one implementation of APIAccess allowed. \u0001");
specialinvoke v4.<java.lang.AssertionError: void <init>(java.lang.Object)>(v7);
throw v4;
label1:
return;
}
public abstract org.graalvm.polyglot.Engine newEngine(org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractEngineDispatch, java.lang.Object, boolean);
public abstract org.graalvm.polyglot.Context newContext(org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractContextDispatch, java.lang.Object, org.graalvm.polyglot.Engine);
public abstract org.graalvm.polyglot.Language newLanguage(org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractLanguageDispatch, java.lang.Object);
public abstract org.graalvm.polyglot.Instrument newInstrument(org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractInstrumentDispatch, java.lang.Object);
public abstract org.graalvm.polyglot.Value newValue(org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractValueDispatch, java.lang.Object, java.lang.Object);
public abstract org.graalvm.polyglot.Source newSource(org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractSourceDispatch, java.lang.Object);
public abstract org.graalvm.polyglot.SourceSection newSourceSection(org.graalvm.polyglot.Source, org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractSourceSectionDispatch, java.lang.Object);
public abstract org.graalvm.polyglot.PolyglotException newLanguageException(java.lang.String, org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractExceptionDispatch, java.lang.Object);
public abstract java.lang.Object getReceiver(org.graalvm.polyglot.Instrument);
public abstract java.lang.Object getReceiver(org.graalvm.polyglot.Language);
public abstract java.lang.Object getReceiver(org.graalvm.polyglot.Engine);
public abstract java.lang.Object getReceiver(org.graalvm.polyglot.Context);
public abstract java.lang.Object getReceiver(org.graalvm.polyglot.PolyglotException);
public abstract java.lang.Object getReceiver(org.graalvm.polyglot.Value);
public abstract java.lang.Object getReceiver(org.graalvm.polyglot.ResourceLimits);
public abstract java.lang.Object getReceiver(org.graalvm.polyglot.Source);
public abstract java.lang.Object getReceiver(org.graalvm.polyglot.SourceSection);
public abstract org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractValueDispatch getDispatch(org.graalvm.polyglot.Value);
public abstract java.lang.Object getContext(org.graalvm.polyglot.Value);
public abstract org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractStackFrameImpl getDispatch(org.graalvm.polyglot.PolyglotException$StackFrame);
public abstract org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractLanguageDispatch getDispatch(org.graalvm.polyglot.Language);
public abstract org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractInstrumentDispatch getDispatch(org.graalvm.polyglot.Instrument);
public abstract org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractEngineDispatch getDispatch(org.graalvm.polyglot.Engine);
public abstract org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractContextDispatch getDispatch(org.graalvm.polyglot.Context);
public abstract org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractSourceDispatch getDispatch(org.graalvm.polyglot.Source);
public abstract org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractSourceSectionDispatch getDispatch(org.graalvm.polyglot.SourceSection);
public abstract org.graalvm.polyglot.ResourceLimitEvent newResourceLimitsEvent(org.graalvm.polyglot.Context);
public abstract org.graalvm.polyglot.PolyglotException$StackFrame newPolyglotStackTraceElement(org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractStackFrameImpl, java.lang.Object);
public abstract java.util.List getTargetMappings(org.graalvm.polyglot.HostAccess);
public abstract boolean allowsAccess(org.graalvm.polyglot.HostAccess, java.lang.reflect.AnnotatedElement);
public abstract boolean allowsImplementation(org.graalvm.polyglot.HostAccess, java.lang.Class);
public abstract boolean isMethodScopingEnabled(org.graalvm.polyglot.HostAccess);
public abstract boolean isMethodScoped(org.graalvm.polyglot.HostAccess, java.lang.reflect.Executable);
public abstract boolean isArrayAccessible(org.graalvm.polyglot.HostAccess);
public abstract boolean isListAccessible(org.graalvm.polyglot.HostAccess);
public abstract boolean isBufferAccessible(org.graalvm.polyglot.HostAccess);
public abstract boolean isIterableAccessible(org.graalvm.polyglot.HostAccess);
public abstract boolean isIteratorAccessible(org.graalvm.polyglot.HostAccess);
public abstract boolean isMapAccessible(org.graalvm.polyglot.HostAccess);
public abstract boolean allowsPublicAccess(org.graalvm.polyglot.HostAccess);
public abstract boolean allowsAccessInheritance(org.graalvm.polyglot.HostAccess);
public abstract java.lang.Object getHostAccessImpl(org.graalvm.polyglot.HostAccess);
public abstract void setHostAccessImpl(org.graalvm.polyglot.HostAccess, java.lang.Object);
public abstract org.graalvm.collections.UnmodifiableEconomicSet getEvalAccess(org.graalvm.polyglot.PolyglotAccess, java.lang.String);
public abstract org.graalvm.collections.UnmodifiableEconomicMap getEvalAccess(org.graalvm.polyglot.PolyglotAccess);
public abstract org.graalvm.collections.UnmodifiableEconomicSet getBindingsAccess(org.graalvm.polyglot.PolyglotAccess);
public abstract java.lang.String validatePolyglotAccess(org.graalvm.polyglot.PolyglotAccess, java.util.Set);
public abstract void engineClosed(org.graalvm.polyglot.Engine);
}