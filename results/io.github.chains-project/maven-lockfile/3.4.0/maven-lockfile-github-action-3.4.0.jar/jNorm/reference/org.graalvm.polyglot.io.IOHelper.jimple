final class org.graalvm.polyglot.io.IOHelper extends java.lang.Object
{
static final org.graalvm.polyglot.impl.AbstractPolyglotImpl IMPL;
private void <init>()
{
java.lang.IllegalStateException v1;
org.graalvm.polyglot.io.IOHelper v0;
v0 := @this: org.graalvm.polyglot.io.IOHelper;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No instance allowed.");
throw v1;
}
static transient void copy(java.nio.file.Path, java.nio.file.Path, org.graalvm.polyglot.io.FileSystem, java.nio.file.CopyOption[]) throws java.io.IOException
{
java.nio.file.CopyOption[] v3;
org.graalvm.polyglot.io.FileSystem v2;
java.nio.file.Path v0, v1;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: org.graalvm.polyglot.io.FileSystem;
v3 := @parameter3: java.nio.file.CopyOption[];
staticinvoke <org.graalvm.polyglot.io.IOHelper: void copy(java.nio.file.Path,java.nio.file.Path,org.graalvm.polyglot.io.FileSystem,org.graalvm.polyglot.io.FileSystem,java.nio.file.CopyOption[])>(v0, v1, v2, v2, v3);
return;
}
static transient void copy(java.nio.file.Path, java.nio.file.Path, org.graalvm.polyglot.io.FileSystem, org.graalvm.polyglot.io.FileSystem, java.nio.file.CopyOption[]) throws java.io.IOException
{
java.nio.file.attribute.FileAttribute[] v46, v52, v54;
java.util.Map v29;
java.nio.file.Path v0, v1, v11, v8;
java.util.EnumSet v15, v37, v48, v51;
java.nio.file.CopyOption v18;
java.lang.Throwable v60, v61, v70, v71;
java.lang.Object[] v28;
java.nio.file.StandardCopyOption v21, v34, v62;
java.lang.String v24, v25, v42, v67;
java.nio.file.LinkOption[] v27, v38, v6, v69, v9;
java.io.IOException v33, v40;
org.graalvm.polyglot.io.FileSystem v2, v3;
java.nio.file.NoSuchFileException v12, v36;
java.nio.ByteBuffer v56;
boolean v13, v19, v20, v22, v32, v35, v39, v45, v5, v59, v63;
java.nio.file.StandardOpenOption v47, v49, v50;
java.nio.channels.SeekableByteChannel v53, v55;
java.nio.file.CopyOption[] v4;
java.lang.String[] v64;
java.util.HashSet v14;
java.nio.file.LinkOption v10, v7;
int v16, v17, v26, v57, v58, v65, v66;
java.lang.Boolean v30, v43;
java.nio.file.FileAlreadyExistsException v41;
java.nio.file.AtomicMoveNotSupportedException v23;
java.lang.Object v31, v44, v68;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: org.graalvm.polyglot.io.FileSystem;
v3 := @parameter3: org.graalvm.polyglot.io.FileSystem;
v4 := @parameter4: java.nio.file.CopyOption[];
v5 = interfaceinvoke v0.<java.nio.file.Path: boolean equals(java.lang.Object)>(v1);
if v5 == 0 goto label01;
return;
label01:
v6 = newarray (java.nio.file.LinkOption)[1];
v7 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
v6[0] = v7;
v8 = interfaceinvoke v2.<org.graalvm.polyglot.io.FileSystem: java.nio.file.Path toRealPath(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v6);
label02:
v9 = newarray (java.nio.file.LinkOption)[1];
v10 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
v9[0] = v10;
v11 = interfaceinvoke v3.<org.graalvm.polyglot.io.FileSystem: java.nio.file.Path toRealPath(java.nio.file.Path,java.nio.file.LinkOption[])>(v1, v9);
label03:
goto label05;
label04:
v12 := @caughtexception;
v11 = v1;
label05:
v13 = interfaceinvoke v8.<java.nio.file.Path: boolean equals(java.lang.Object)>(v11);
if v13 == 0 goto label06;
return;
label06:
v14 = new java.util.HashSet;
specialinvoke v14.<java.util.HashSet: void <init>()>();
v15 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Ljava/nio/file/StandardCopyOption;");
v16 = lengthof v4;
v17 = 0;
label07:
if v17 >= v16 goto label10;
v18 = v4[v17];
v19 = v18 instanceof java.nio.file.StandardCopyOption;
if v19 == 0 goto label08;
interfaceinvoke v15.<java.util.Set: boolean add(java.lang.Object)>(v18);
goto label09;
label08:
v20 = v18 instanceof java.nio.file.LinkOption;
if v20 == 0 goto label09;
interfaceinvoke v14.<java.util.Set: boolean add(java.lang.Object)>(v18);
label09:
v17 = v17 + 1;
goto label07;
label10:
v21 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption ATOMIC_MOVE>;
v22 = interfaceinvoke v15.<java.util.Set: boolean contains(java.lang.Object)>(v21);
if v22 == 0 goto label11;
v23 = new java.nio.file.AtomicMoveNotSupportedException;
v24 = interfaceinvoke v0.<java.nio.file.Path: java.lang.String toString()>();
v25 = interfaceinvoke v1.<java.nio.file.Path: java.lang.String toString()>();
specialinvoke v23.<java.nio.file.AtomicMoveNotSupportedException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(v24, v25, "Atomic move not supported");
throw v23;
label11:
v26 = interfaceinvoke v14.<java.util.Set: int size()>();
v27 = newarray (java.nio.file.LinkOption)[v26];
v28 = interfaceinvoke v14.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v27);
v29 = interfaceinvoke v2.<org.graalvm.polyglot.io.FileSystem: java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])>(v8, "basic:isSymbolicLink,isDirectory,lastModifiedTime,lastAccessTime,creationTime", v28);
v30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
v31 = interfaceinvoke v29.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>("isSymbolicLink", v30);
v32 = virtualinvoke v31.<java.lang.Boolean: boolean booleanValue()>();
if v32 == 0 goto label12;
v33 = new java.io.IOException;
specialinvoke v33.<java.io.IOException: void <init>(java.lang.String)>("Copying of symbolic links is not supported.");
throw v33;
label12:
v34 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;
v35 = interfaceinvoke v15.<java.util.Set: boolean contains(java.lang.Object)>(v34);
if v35 == 0 goto label16;
label13:
interfaceinvoke v3.<org.graalvm.polyglot.io.FileSystem: void delete(java.nio.file.Path)>(v11);
label14:
goto label20;
label15:
v36 := @caughtexception;
goto label20;
label16:
v37 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Ljava/nio/file/AccessMode;");
v38 = newarray (java.nio.file.LinkOption)[0];
interfaceinvoke v3.<org.graalvm.polyglot.io.FileSystem: void checkAccess(java.nio.file.Path,java.util.Set,java.nio.file.LinkOption[])>(v11, v37, v38);
v39 = 1;
label17:
goto label19;
label18:
v40 := @caughtexception;
v39 = 0;
label19:
if v39 == 0 goto label20;
v41 = new java.nio.file.FileAlreadyExistsException;
v42 = interfaceinvoke v1.<java.nio.file.Path: java.lang.String toString()>();
specialinvoke v41.<java.nio.file.FileAlreadyExistsException: void <init>(java.lang.String)>(v42);
throw v41;
label20:
v43 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
v44 = interfaceinvoke v29.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>("isDirectory", v43);
v45 = virtualinvoke v44.<java.lang.Boolean: boolean booleanValue()>();
if v45 == 0 goto label21;
v46 = newarray (java.nio.file.attribute.FileAttribute)[0];
interfaceinvoke v3.<org.graalvm.polyglot.io.FileSystem: void createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(v11, v46);
goto label31;
label21:
v47 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption READ>;
v48 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>(v47);
v49 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption WRITE>;
v50 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption CREATE_NEW>;
v51 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>(v49, v50);
v52 = newarray (java.nio.file.attribute.FileAttribute)[0];
v53 = interfaceinvoke v2.<org.graalvm.polyglot.io.FileSystem: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>(v8, v48, v52);
label22:
v54 = newarray (java.nio.file.attribute.FileAttribute)[0];
v55 = interfaceinvoke v3.<org.graalvm.polyglot.io.FileSystem: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>(v11, v51, v54);
label23:
v56 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(65536);
label24:
v57 = interfaceinvoke v53.<java.nio.channels.SeekableByteChannel: int read(java.nio.ByteBuffer)>(v56);
v58 = (int) -1;
if v57 == v58 goto label27;
virtualinvoke v56.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>();
label25:
v59 = virtualinvoke v56.<java.nio.ByteBuffer: boolean hasRemaining()>();
if v59 == 0 goto label26;
interfaceinvoke v55.<java.nio.channels.SeekableByteChannel: int write(java.nio.ByteBuffer)>(v56);
goto label25;
label26:
virtualinvoke v56.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
goto label24;
label27:
if v55 == null goto label29;
interfaceinvoke v55.<java.nio.channels.SeekableByteChannel: void close()>();
goto label29;
label28:
v60 := @caughtexception;
throw v60;
label29:
interfaceinvoke v53.<java.nio.channels.SeekableByteChannel: void close()>();
goto label31;
label30:
v61 := @caughtexception;
throw v61;
label31:
v62 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption COPY_ATTRIBUTES>;
v63 = interfaceinvoke v15.<java.util.Set: boolean contains(java.lang.Object)>(v62);
if v63 == 0 goto label40;
v64 = newarray (java.lang.String)[3];
v64[0] = "lastModifiedTime";
v64[1] = "lastAccessTime";
v64[2] = "creationTime";
label32:
v65 = lengthof v64;
v66 = 0;
label33:
if v66 >= v65 goto label40;
v67 = v64[v66];
v68 = interfaceinvoke v29.<java.util.Map: java.lang.Object get(java.lang.Object)>(v67);
if v68 == null goto label34;
v69 = newarray (java.nio.file.LinkOption)[0];
interfaceinvoke v3.<org.graalvm.polyglot.io.FileSystem: void setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[])>(v11, v67, v68, v69);
label34:
v66 = v66 + 1;
goto label33;
label35:
v70 := @caughtexception;
label36:
interfaceinvoke v3.<org.graalvm.polyglot.io.FileSystem: void delete(java.nio.file.Path)>(v11);
label37:
goto label39;
label38:
v71 := @caughtexception;
virtualinvoke v70.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(v71);
label39:
throw v70;
label40:
return;
catch java.nio.file.NoSuchFileException from label02 to label03 with label04;
catch java.nio.file.NoSuchFileException from label13 to label14 with label15;
catch java.io.IOException from label16 to label17 with label18;
catch java.lang.Throwable from label23 to label27 with label28;
catch java.lang.Throwable from label22 to label29 with label30;
catch java.lang.Throwable from label32 to label35 with label35;
catch java.lang.Throwable from label36 to label37 with label38;
}
static transient void move(java.nio.file.Path, java.nio.file.Path, org.graalvm.polyglot.io.FileSystem, java.nio.file.CopyOption[]) throws java.io.IOException
{
java.nio.file.CopyOption[] v3;
java.nio.file.StandardCopyOption v7;
org.graalvm.polyglot.io.FileSystem v2;
int v4, v5;
java.nio.file.AtomicMoveNotSupportedException v9;
java.lang.String v10, v11;
java.nio.file.Path v0, v1;
boolean v8;
java.nio.file.CopyOption v6;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: org.graalvm.polyglot.io.FileSystem;
v3 := @parameter3: java.nio.file.CopyOption[];
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
v7 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption ATOMIC_MOVE>;
v8 = virtualinvoke v7.<java.nio.file.StandardCopyOption: boolean equals(java.lang.Object)>(v6);
if v8 == 0 goto label2;
v9 = new java.nio.file.AtomicMoveNotSupportedException;
v10 = interfaceinvoke v0.<java.nio.file.Path: java.lang.String toString()>();
v11 = interfaceinvoke v1.<java.nio.file.Path: java.lang.String toString()>();
specialinvoke v9.<java.nio.file.AtomicMoveNotSupportedException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(v10, v11, "Atomic move not supported");
throw v9;
label2:
v5 = v5 + 1;
goto label1;
label3:
interfaceinvoke v2.<org.graalvm.polyglot.io.FileSystem: void copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v0, v1, v3);
interfaceinvoke v2.<org.graalvm.polyglot.io.FileSystem: void delete(java.nio.file.Path)>(v0);
return;
}
static transient void move(java.nio.file.Path, java.nio.file.Path, org.graalvm.polyglot.io.FileSystem, org.graalvm.polyglot.io.FileSystem, java.nio.file.CopyOption[]) throws java.io.IOException
{
java.nio.file.CopyOption[] v4;
java.nio.file.StandardCopyOption v8;
org.graalvm.polyglot.io.FileSystem v2, v3;
int v5, v6;
java.nio.file.AtomicMoveNotSupportedException v10;
java.lang.String v11, v12;
java.nio.file.Path v0, v1;
boolean v9;
java.nio.file.CopyOption v7;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: org.graalvm.polyglot.io.FileSystem;
v3 := @parameter3: org.graalvm.polyglot.io.FileSystem;
v4 := @parameter4: java.nio.file.CopyOption[];
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label3;
v7 = v4[v6];
v8 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption ATOMIC_MOVE>;
v9 = virtualinvoke v8.<java.nio.file.StandardCopyOption: boolean equals(java.lang.Object)>(v7);
if v9 == 0 goto label2;
v10 = new java.nio.file.AtomicMoveNotSupportedException;
v11 = interfaceinvoke v0.<java.nio.file.Path: java.lang.String toString()>();
v12 = interfaceinvoke v1.<java.nio.file.Path: java.lang.String toString()>();
specialinvoke v10.<java.nio.file.AtomicMoveNotSupportedException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(v11, v12, "Atomic move not supported");
throw v10;
label2:
v6 = v6 + 1;
goto label1;
label3:
staticinvoke <org.graalvm.polyglot.io.IOHelper: void copy(java.nio.file.Path,java.nio.file.Path,org.graalvm.polyglot.io.FileSystem,org.graalvm.polyglot.io.FileSystem,java.nio.file.CopyOption[])>(v0, v1, v2, v3, v4);
interfaceinvoke v2.<org.graalvm.polyglot.io.FileSystem: void delete(java.nio.file.Path)>(v0);
return;
}
private static org.graalvm.polyglot.impl.AbstractPolyglotImpl initImpl()
{
java.lang.IllegalStateException v7;
java.lang.Object[] v3;
org.graalvm.polyglot.io.IOHelper$IOAccessImpl v5;
java.lang.Class[] v1;
java.lang.Exception v6;
java.lang.Class v0;
java.lang.Object v4;
java.lang.reflect.Method v2;
label1:
v0 = class "Lorg/graalvm/polyglot/Engine;";
v1 = newarray (java.lang.Class)[0];
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getImpl", v1);
virtualinvoke v2.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
v3 = newarray (java.lang.Object)[0];
v4 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v3);
v5 = new org.graalvm.polyglot.io.IOHelper$IOAccessImpl;
specialinvoke v5.<org.graalvm.polyglot.io.IOHelper$IOAccessImpl: void <init>()>();
virtualinvoke v4.<org.graalvm.polyglot.impl.AbstractPolyglotImpl: void setIO(org.graalvm.polyglot.impl.AbstractPolyglotImpl$IOAccess)>(v5);
label2:
return v4;
label3:
v6 := @caughtexception;
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to initialize execution listener class.", v6);
throw v7;
catch java.lang.Exception from label1 to label2 with label3;
}
static void <clinit>()
{
org.graalvm.polyglot.impl.AbstractPolyglotImpl v0;
v0 = staticinvoke <org.graalvm.polyglot.io.IOHelper: org.graalvm.polyglot.impl.AbstractPolyglotImpl initImpl()>();
<org.graalvm.polyglot.io.IOHelper: org.graalvm.polyglot.impl.AbstractPolyglotImpl IMPL> = v0;
return;
}
}