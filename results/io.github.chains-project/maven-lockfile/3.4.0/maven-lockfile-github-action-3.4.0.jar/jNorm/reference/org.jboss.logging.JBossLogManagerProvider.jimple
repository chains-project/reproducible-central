public final class org.jboss.logging.JBossLogManagerProvider extends java.lang.Object implements org.jboss.logging.LoggerProvider
{
private static final org.jboss.logmanager.Logger$AttachmentKey KEY;
private static final org.jboss.logmanager.Logger$AttachmentKey LEGACY_KEY;
public void <init>()
{
org.jboss.logging.JBossLogManagerProvider v0;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public org.jboss.logging.Logger getLogger(java.lang.String)
{
java.lang.NoSuchMethodError v6;
org.jboss.logging.Logger v5, v7;
java.security.PrivilegedAction v3;
java.lang.SecurityManager v2;
org.jboss.logging.JBossLogManagerProvider v0;
java.lang.Object v4;
java.lang.String v1;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v2 == null goto label1;
v3 = staticinvoke <org.jboss.logging.JBossLogManagerProvider$lambda_getLogger_0__3021: java.security.PrivilegedAction bootstrap$(java.lang.String)>(v1);
v4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v3);
return v4;
label1:
v5 = staticinvoke <org.jboss.logging.JBossLogManagerProvider: org.jboss.logging.Logger doGetLogger(java.lang.String)>(v1);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = staticinvoke <org.jboss.logging.JBossLogManagerProvider: org.jboss.logging.Logger doLegacyGetLogger(java.lang.String)>(v1);
return v7;
catch java.lang.NoSuchMethodError from label1 to label2 with label3;
}
private static org.jboss.logging.Logger doLegacyGetLogger(java.lang.String)
{
org.jboss.logmanager.Logger v2, v9;
org.jboss.logmanager.LogContext v1;
java.util.concurrent.ConcurrentHashMap v5;
org.jboss.logging.JBossLogManagerLogger v10;
org.jboss.logmanager.Logger$AttachmentKey v3, v6;
java.lang.Object v11, v4, v7, v8;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.jboss.logmanager.LogContext: org.jboss.logmanager.LogContext getLogContext()>();
v2 = virtualinvoke v1.<org.jboss.logmanager.LogContext: org.jboss.logmanager.Logger getLogger(java.lang.String)>("");
v3 = <org.jboss.logging.JBossLogManagerProvider: org.jboss.logmanager.Logger$AttachmentKey LEGACY_KEY>;
v4 = virtualinvoke v2.<org.jboss.logmanager.Logger: java.lang.Object getAttachment(org.jboss.logmanager.Logger$AttachmentKey)>(v3);
if v4 != null goto label1;
v5 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v4 = v5;
v6 = <org.jboss.logging.JBossLogManagerProvider: org.jboss.logmanager.Logger$AttachmentKey LEGACY_KEY>;
v7 = virtualinvoke v2.<org.jboss.logmanager.Logger: java.lang.Object attachIfAbsent(org.jboss.logmanager.Logger$AttachmentKey,java.lang.Object)>(v6, v5);
if v7 == null goto label1;
v4 = v7;
label1:
v8 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v0);
if v8 == null goto label2;
return v8;
label2:
v9 = staticinvoke <org.jboss.logmanager.Logger: org.jboss.logmanager.Logger getLogger(java.lang.String)>(v0);
v10 = new org.jboss.logging.JBossLogManagerLogger;
specialinvoke v10.<org.jboss.logging.JBossLogManagerLogger: void <init>(java.lang.String,org.jboss.logmanager.Logger)>(v0, v9);
v11 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v0, v10);
if v11 != null goto label3;
return v10;
label3:
return v11;
}
private static org.jboss.logging.Logger doGetLogger(java.lang.String)
{
org.jboss.logmanager.Logger v4;
org.jboss.logmanager.LogContext v1;
org.jboss.logging.JBossLogManagerLogger v5;
org.jboss.logmanager.Logger$AttachmentKey v2, v6;
java.lang.Object v3, v7;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.jboss.logmanager.LogContext: org.jboss.logmanager.LogContext getLogContext()>();
v2 = <org.jboss.logging.JBossLogManagerProvider: org.jboss.logmanager.Logger$AttachmentKey KEY>;
v3 = virtualinvoke v1.<org.jboss.logmanager.LogContext: java.lang.Object getAttachment(java.lang.String,org.jboss.logmanager.Logger$AttachmentKey)>(v0, v2);
if v3 == null goto label1;
return v3;
label1:
v4 = staticinvoke <org.jboss.logmanager.Logger: org.jboss.logmanager.Logger getLogger(java.lang.String)>(v0);
v5 = new org.jboss.logging.JBossLogManagerLogger;
specialinvoke v5.<org.jboss.logging.JBossLogManagerLogger: void <init>(java.lang.String,org.jboss.logmanager.Logger)>(v0, v4);
v6 = <org.jboss.logging.JBossLogManagerProvider: org.jboss.logmanager.Logger$AttachmentKey KEY>;
v7 = virtualinvoke v4.<org.jboss.logmanager.Logger: java.lang.Object attachIfAbsent(org.jboss.logmanager.Logger$AttachmentKey,java.lang.Object)>(v6, v5);
if v7 != null goto label2;
return v5;
label2:
return v7;
}
public void clearMdc()
{
org.jboss.logging.JBossLogManagerProvider v0;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
staticinvoke <org.jboss.logmanager.MDC: void clear()>();
return;
}
public java.lang.Object putMdc(java.lang.String, java.lang.Object)
{
org.jboss.logging.JBossLogManagerProvider v0;
java.lang.Object v2, v3;
java.lang.String v1;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <org.jboss.logmanager.MDC: java.lang.Object putObject(java.lang.String,java.lang.Object)>(v1, v2);
return v3;
}
public java.lang.Object getMdc(java.lang.String)
{
java.lang.Object v2;
java.lang.String v1;
org.jboss.logging.JBossLogManagerProvider v0;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <org.jboss.logmanager.MDC: java.lang.Object getObject(java.lang.String)>(v1);
return v2;
}
public void removeMdc(java.lang.String)
{
java.lang.String v1;
org.jboss.logging.JBossLogManagerProvider v0;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
v1 := @parameter0: java.lang.String;
staticinvoke <org.jboss.logmanager.MDC: java.lang.Object removeObject(java.lang.String)>(v1);
return;
}
public java.util.Map getMdcMap()
{
org.jboss.logging.JBossLogManagerProvider v0;
java.util.Map v1;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
v1 = staticinvoke <org.jboss.logmanager.MDC: java.util.Map copyObject()>();
return v1;
}
public void clearNdc()
{
org.jboss.logging.JBossLogManagerProvider v0;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
staticinvoke <org.jboss.logmanager.NDC: void clear()>();
return;
}
public java.lang.String getNdc()
{
java.lang.String v1;
org.jboss.logging.JBossLogManagerProvider v0;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
v1 = staticinvoke <org.jboss.logmanager.NDC: java.lang.String get()>();
return v1;
}
public int getNdcDepth()
{
int v1;
org.jboss.logging.JBossLogManagerProvider v0;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
v1 = staticinvoke <org.jboss.logmanager.NDC: int getDepth()>();
return v1;
}
public java.lang.String popNdc()
{
java.lang.String v1;
org.jboss.logging.JBossLogManagerProvider v0;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
v1 = staticinvoke <org.jboss.logmanager.NDC: java.lang.String pop()>();
return v1;
}
public java.lang.String peekNdc()
{
java.lang.String v1;
org.jboss.logging.JBossLogManagerProvider v0;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
v1 = staticinvoke <org.jboss.logmanager.NDC: java.lang.String get()>();
return v1;
}
public void pushNdc(java.lang.String)
{
java.lang.String v1;
org.jboss.logging.JBossLogManagerProvider v0;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
v1 := @parameter0: java.lang.String;
staticinvoke <org.jboss.logmanager.NDC: int push(java.lang.String)>(v1);
return;
}
public void setNdcMaxDepth(int)
{
int v1;
org.jboss.logging.JBossLogManagerProvider v0;
v0 := @this: org.jboss.logging.JBossLogManagerProvider;
v1 := @parameter0: int;
staticinvoke <org.jboss.logmanager.NDC: void trimTo(int)>(v1);
return;
}
static void <clinit>()
{
org.jboss.logmanager.Logger$AttachmentKey v0, v1;
v0 = new org.jboss.logmanager.Logger$AttachmentKey;
specialinvoke v0.<org.jboss.logmanager.Logger$AttachmentKey: void <init>()>();
<org.jboss.logging.JBossLogManagerProvider: org.jboss.logmanager.Logger$AttachmentKey KEY> = v0;
v1 = new org.jboss.logmanager.Logger$AttachmentKey;
specialinvoke v1.<org.jboss.logmanager.Logger$AttachmentKey: void <init>()>();
<org.jboss.logging.JBossLogManagerProvider: org.jboss.logmanager.Logger$AttachmentKey LEGACY_KEY> = v1;
return;
}
}