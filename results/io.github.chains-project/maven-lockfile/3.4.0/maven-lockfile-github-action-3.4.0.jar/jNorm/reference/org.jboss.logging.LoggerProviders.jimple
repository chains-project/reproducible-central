final class org.jboss.logging.LoggerProviders extends java.lang.Object
{
static final java.lang.String LOGGING_PROVIDER_KEY;
static final org.jboss.logging.LoggerProvider PROVIDER;
private static org.jboss.logging.LoggerProvider find()
{
org.jboss.logging.LoggerProvider v0;
v0 = staticinvoke <org.jboss.logging.LoggerProviders: org.jboss.logging.LoggerProvider findProvider()>();
return v0;
}
private static org.jboss.logging.LoggerProvider findProvider()
{
org.jboss.logging.LoggerProvider v11, v14, v17, v25, v27, v29, v31, v5;
org.jboss.logging.JDKLoggerProvider v33, v8;
boolean v10, v13, v16, v21, v4, v7;
java.util.ServiceLoader v19;
java.lang.ClassLoader v1;
java.lang.Throwable v18, v24, v26, v28, v30, v32;
java.util.ServiceConfigurationError v23;
java.lang.String v12, v15, v2, v3, v6, v9;
java.util.Iterator v20;
java.lang.Class v0;
java.lang.Object v22;
v0 = class "Lorg/jboss/logging/LoggerProviders;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
label01:
v2 = staticinvoke <org.jboss.logging.SecurityActions: java.lang.String getSystemProperty(java.lang.String)>("org.jboss.logging.provider");
if v2 == null goto label12;
v3 = "jboss";
v4 = virtualinvoke v3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v2);
if v4 == 0 goto label03;
v5 = staticinvoke <org.jboss.logging.LoggerProviders: org.jboss.logging.LoggerProvider tryJBossLogManager(java.lang.ClassLoader,java.lang.String)>(v1, "system property");
label02:
return v5;
label03:
v6 = "jdk";
v7 = virtualinvoke v6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v2);
if v7 == 0 goto label05;
v8 = staticinvoke <org.jboss.logging.LoggerProviders: org.jboss.logging.JDKLoggerProvider tryJDK(java.lang.String)>("system property");
label04:
return v8;
label05:
v9 = "log4j2";
v10 = virtualinvoke v9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v2);
if v10 == 0 goto label07;
v11 = staticinvoke <org.jboss.logging.LoggerProviders: org.jboss.logging.LoggerProvider tryLog4j2(java.lang.ClassLoader,java.lang.String)>(v1, "system property");
label06:
return v11;
label07:
v12 = "log4j";
v13 = virtualinvoke v12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v2);
if v13 == 0 goto label09;
v14 = staticinvoke <org.jboss.logging.LoggerProviders: org.jboss.logging.LoggerProvider tryLog4j(java.lang.ClassLoader,java.lang.String)>(v1, "system property");
label08:
return v14;
label09:
v15 = "slf4j";
v16 = virtualinvoke v15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v2);
if v16 == 0 goto label12;
v17 = staticinvoke <org.jboss.logging.LoggerProviders: org.jboss.logging.LoggerProvider trySlf4j(java.lang.String)>("system property");
label10:
return v17;
label11:
v18 := @caughtexception;
label12:
v19 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lorg/jboss/logging/LoggerProvider;", v1);
v20 = virtualinvoke v19.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label13:
v21 = interfaceinvoke v20.<java.util.Iterator: boolean hasNext()>();
if v21 == 0 goto label18;
label14:
v22 = interfaceinvoke v20.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <org.jboss.logging.LoggerProviders: void logProvider(org.jboss.logging.LoggerProvider,java.lang.String)>(v22, "service loader");
label15:
return v22;
label16:
v23 := @caughtexception;
goto label13;
label17:
v24 := @caughtexception;
label18:
v25 = staticinvoke <org.jboss.logging.LoggerProviders: org.jboss.logging.LoggerProvider tryJBossLogManager(java.lang.ClassLoader,java.lang.String)>(v1, null);
label19:
return v25;
label20:
v26 := @caughtexception;
label21:
v27 = staticinvoke <org.jboss.logging.LoggerProviders: org.jboss.logging.LoggerProvider tryLog4j2(java.lang.ClassLoader,java.lang.String)>(v1, null);
label22:
return v27;
label23:
v28 := @caughtexception;
label24:
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("ch.qos.logback.classic.Logger", 0, v1);
v29 = staticinvoke <org.jboss.logging.LoggerProviders: org.jboss.logging.LoggerProvider trySlf4j(java.lang.String)>(null);
label25:
return v29;
label26:
v30 := @caughtexception;
label27:
v31 = staticinvoke <org.jboss.logging.LoggerProviders: org.jboss.logging.LoggerProvider tryLog4j(java.lang.ClassLoader,java.lang.String)>(v1, null);
label28:
return v31;
label29:
v32 := @caughtexception;
v33 = staticinvoke <org.jboss.logging.LoggerProviders: org.jboss.logging.JDKLoggerProvider tryJDK(java.lang.String)>(null);
return v33;
catch java.lang.Throwable from label01 to label02 with label11;
catch java.lang.Throwable from label03 to label04 with label11;
catch java.lang.Throwable from label05 to label06 with label11;
catch java.lang.Throwable from label07 to label08 with label11;
catch java.lang.Throwable from label09 to label10 with label11;
catch java.util.ServiceConfigurationError from label13 to label14 with label16;
catch java.util.ServiceConfigurationError from label14 to label15 with label16;
catch java.lang.Throwable from label12 to label15 with label17;
catch java.lang.Throwable from label16 to label17 with label17;
catch java.lang.Throwable from label18 to label19 with label20;
catch java.lang.Throwable from label21 to label22 with label23;
catch java.lang.Throwable from label24 to label25 with label26;
catch java.lang.Throwable from label27 to label28 with label29;
}
private static org.jboss.logging.JDKLoggerProvider tryJDK(java.lang.String)
{
java.lang.String v0;
org.jboss.logging.JDKLoggerProvider v1;
v0 := @parameter0: java.lang.String;
v1 = new org.jboss.logging.JDKLoggerProvider;
specialinvoke v1.<org.jboss.logging.JDKLoggerProvider: void <init>()>();
staticinvoke <org.jboss.logging.LoggerProviders: void logProvider(org.jboss.logging.LoggerProvider,java.lang.String)>(v1, v0);
return v1;
}
private static org.jboss.logging.LoggerProvider trySlf4j(java.lang.String)
{
java.lang.String v0;
org.jboss.logging.Slf4jLoggerProvider v1;
v0 := @parameter0: java.lang.String;
v1 = new org.jboss.logging.Slf4jLoggerProvider;
specialinvoke v1.<org.jboss.logging.Slf4jLoggerProvider: void <init>()>();
staticinvoke <org.jboss.logging.LoggerProviders: void logProvider(org.jboss.logging.LoggerProvider,java.lang.String)>(v1, v0);
return v1;
}
private static org.jboss.logging.LoggerProvider tryLog4j2(java.lang.ClassLoader, java.lang.String) throws java.lang.ClassNotFoundException
{
java.lang.ClassLoader v0;
java.lang.String v1;
org.jboss.logging.Log4j2LoggerProvider v2;
v0 := @parameter0: java.lang.ClassLoader;
v1 := @parameter1: java.lang.String;
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.logging.log4j.Logger", 1, v0);
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.logging.log4j.LogManager", 1, v0);
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.logging.log4j.spi.AbstractLogger", 1, v0);
v2 = new org.jboss.logging.Log4j2LoggerProvider;
specialinvoke v2.<org.jboss.logging.Log4j2LoggerProvider: void <init>()>();
staticinvoke <org.jboss.logging.LoggerProviders: void logProvider(org.jboss.logging.LoggerProvider,java.lang.String)>(v2, v1);
return v2;
}
private static org.jboss.logging.LoggerProvider tryLog4j(java.lang.ClassLoader, java.lang.String) throws java.lang.ClassNotFoundException
{
java.lang.ClassLoader v0;
java.lang.String v1;
org.jboss.logging.Log4jLoggerProvider v2;
v0 := @parameter0: java.lang.ClassLoader;
v1 := @parameter1: java.lang.String;
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.log4j.LogManager", 1, v0);
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.log4j.config.PropertySetter", 1, v0);
v2 = new org.jboss.logging.Log4jLoggerProvider;
specialinvoke v2.<org.jboss.logging.Log4jLoggerProvider: void <init>()>();
staticinvoke <org.jboss.logging.LoggerProviders: void logProvider(org.jboss.logging.LoggerProvider,java.lang.String)>(v2, v1);
return v2;
}
private static org.jboss.logging.LoggerProvider tryJBossLogManager(java.lang.ClassLoader, java.lang.String) throws java.lang.ClassNotFoundException
{
java.lang.IllegalStateException v9;
java.util.logging.LogManager v2;
org.jboss.logging.JBossLogManagerProvider v8;
java.lang.Class v3, v4, v5;
java.lang.ClassLoader v0, v6, v7;
java.lang.String v1;
v0 := @parameter0: java.lang.ClassLoader;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
v3 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.jboss.logmanager.LogManager", 0, v0);
if v3 != v4 goto label1;
v5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.jboss.logmanager.Logger$AttachmentKey", 1, v0);
v6 = virtualinvoke v5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v7 = virtualinvoke v3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
if v6 != v7 goto label1;
v8 = new org.jboss.logging.JBossLogManagerProvider;
specialinvoke v8.<org.jboss.logging.JBossLogManagerProvider: void <init>()>();
staticinvoke <org.jboss.logging.LoggerProviders: void logProvider(org.jboss.logging.LoggerProvider,java.lang.String)>(v8, v1);
return v8;
label1:
v9 = new java.lang.IllegalStateException;
specialinvoke v9.<java.lang.IllegalStateException: void <init>()>();
throw v9;
}
private static void logProvider(org.jboss.logging.LoggerProvider, java.lang.String)
{
org.jboss.logging.LoggerProvider v0;
org.jboss.logging.Logger v2;
java.lang.Class v3, v5;
java.lang.String v1, v4, v6;
v0 := @parameter0: org.jboss.logging.LoggerProvider;
v1 := @parameter1: java.lang.String;
v2 = interfaceinvoke v0.<org.jboss.logging.LoggerProvider: org.jboss.logging.Logger getLogger(java.lang.String)>("org.jboss.logging");
if v1 != null goto label1;
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v2.<org.jboss.logging.Logger: void debugf(java.lang.String,java.lang.Object)>("Logging Provider: %s", v4);
goto label2;
label1:
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v2.<org.jboss.logging.Logger: void debugf(java.lang.String,java.lang.Object,java.lang.Object)>("Logging Provider: %s found via %s", v6, v1);
label2:
return;
}
private void <init>()
{
org.jboss.logging.LoggerProviders v0;
v0 := @this: org.jboss.logging.LoggerProviders;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
org.jboss.logging.LoggerProvider v0;
v0 = staticinvoke <org.jboss.logging.LoggerProviders: org.jboss.logging.LoggerProvider find()>();
<org.jboss.logging.LoggerProviders: org.jboss.logging.LoggerProvider PROVIDER> = v0;
return;
}
}