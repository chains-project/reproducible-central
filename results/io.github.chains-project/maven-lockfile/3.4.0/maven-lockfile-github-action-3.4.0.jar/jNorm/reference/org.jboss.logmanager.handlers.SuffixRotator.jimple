class org.jboss.logmanager.handlers.SuffixRotator extends java.lang.Object
{
static final org.jboss.logmanager.handlers.SuffixRotator EMPTY;
private final java.lang.String originalSuffix;
private final java.lang.String datePattern;
private final java.text.SimpleDateFormat formatter;
private final java.lang.String compressionSuffix;
private final org.jboss.logmanager.handlers.SuffixRotator$CompressionType compressionType;
private void <init>(java.lang.String, java.lang.String, java.lang.String, org.jboss.logmanager.handlers.SuffixRotator$CompressionType)
{
org.jboss.logmanager.handlers.SuffixRotator$CompressionType v4;
org.jboss.logmanager.handlers.SuffixRotator v0;
java.text.SimpleDateFormat v6;
java.lang.String v1, v2, v3;
boolean v5;
v0 := @this: org.jboss.logmanager.handlers.SuffixRotator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: org.jboss.logmanager.handlers.SuffixRotator$CompressionType;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.jboss.logmanager.handlers.SuffixRotator: java.lang.String originalSuffix> = v1;
v0.<org.jboss.logmanager.handlers.SuffixRotator: java.lang.String datePattern> = v2;
v0.<org.jboss.logmanager.handlers.SuffixRotator: java.lang.String compressionSuffix> = v3;
v0.<org.jboss.logmanager.handlers.SuffixRotator: org.jboss.logmanager.handlers.SuffixRotator$CompressionType compressionType> = v4;
v5 = virtualinvoke v2.<java.lang.String: boolean isEmpty()>();
if v5 == 0 goto label1;
v0.<org.jboss.logmanager.handlers.SuffixRotator: java.text.SimpleDateFormat formatter> = null;
goto label2;
label1:
v6 = new java.text.SimpleDateFormat;
specialinvoke v6.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(v2);
v0.<org.jboss.logmanager.handlers.SuffixRotator: java.text.SimpleDateFormat formatter> = v6;
label2:
return;
}
static org.jboss.logmanager.handlers.SuffixRotator parse(java.lang.String)
{
java.util.Locale v6;
int v10, v11, v8, v9;
java.lang.String v0, v3, v4, v7;
boolean v1, v12, v13;
org.jboss.logmanager.handlers.SuffixRotator$CompressionType v15, v5;
org.jboss.logmanager.handlers.SuffixRotator v14, v16, v2;
v0 := @parameter0: java.lang.String;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.lang.String: boolean isEmpty()>();
if v1 == 0 goto label2;
label1:
v2 = <org.jboss.logmanager.handlers.SuffixRotator: org.jboss.logmanager.handlers.SuffixRotator EMPTY>;
return v2;
label2:
v3 = "";
v4 = "";
v5 = <org.jboss.logmanager.handlers.SuffixRotator$CompressionType: org.jboss.logmanager.handlers.SuffixRotator$CompressionType NONE>;
v6 = <java.util.Locale: java.util.Locale ROOT>;
v7 = virtualinvoke v0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v6);
v8 = virtualinvoke v7.<java.lang.String: int indexOf(java.lang.String)>(".gz");
v9 = (int) -1;
if v8 == v9 goto label3;
v3 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v8);
v4 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v8);
v5 = <org.jboss.logmanager.handlers.SuffixRotator$CompressionType: org.jboss.logmanager.handlers.SuffixRotator$CompressionType GZIP>;
goto label4;
label3:
v10 = virtualinvoke v7.<java.lang.String: int indexOf(java.lang.String)>(".zip");
v11 = (int) -1;
if v10 == v11 goto label4;
v3 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v10);
v4 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v10);
v5 = <org.jboss.logmanager.handlers.SuffixRotator$CompressionType: org.jboss.logmanager.handlers.SuffixRotator$CompressionType ZIP>;
label4:
v12 = virtualinvoke v3.<java.lang.String: boolean isEmpty()>();
if v12 == 0 goto label5;
v13 = virtualinvoke v4.<java.lang.String: boolean isEmpty()>();
if v13 == 0 goto label5;
v14 = new org.jboss.logmanager.handlers.SuffixRotator;
v15 = <org.jboss.logmanager.handlers.SuffixRotator$CompressionType: org.jboss.logmanager.handlers.SuffixRotator$CompressionType NONE>;
specialinvoke v14.<org.jboss.logmanager.handlers.SuffixRotator: void <init>(java.lang.String,java.lang.String,java.lang.String,org.jboss.logmanager.handlers.SuffixRotator$CompressionType)>(v0, v0, "", v15);
return v14;
label5:
v16 = new org.jboss.logmanager.handlers.SuffixRotator;
specialinvoke v16.<org.jboss.logmanager.handlers.SuffixRotator: void <init>(java.lang.String,java.lang.String,java.lang.String,org.jboss.logmanager.handlers.SuffixRotator$CompressionType)>(v0, v4, v3, v5);
return v16;
}
java.lang.String getDatePattern()
{
org.jboss.logmanager.handlers.SuffixRotator v0;
java.lang.String v1;
v0 := @this: org.jboss.logmanager.handlers.SuffixRotator;
v1 = v0.<org.jboss.logmanager.handlers.SuffixRotator: java.lang.String datePattern>;
return v1;
}
java.lang.String getCompressionSuffix()
{
org.jboss.logmanager.handlers.SuffixRotator v0;
java.lang.String v1;
v0 := @this: org.jboss.logmanager.handlers.SuffixRotator;
v1 = v0.<org.jboss.logmanager.handlers.SuffixRotator: java.lang.String compressionSuffix>;
return v1;
}
org.jboss.logmanager.handlers.SuffixRotator$CompressionType getCompressionType()
{
org.jboss.logmanager.handlers.SuffixRotator v0;
org.jboss.logmanager.handlers.SuffixRotator$CompressionType v1;
v0 := @this: org.jboss.logmanager.handlers.SuffixRotator;
v1 = v0.<org.jboss.logmanager.handlers.SuffixRotator: org.jboss.logmanager.handlers.SuffixRotator$CompressionType compressionType>;
return v1;
}
void rotate(java.util.logging.ErrorManager, java.nio.file.Path, java.lang.String)
{
java.lang.Object[] v11, v16;
java.lang.String[] v6;
java.lang.String v12, v17, v3, v4, v5;
java.nio.file.Path v2, v7;
java.util.logging.ErrorManager v1;
java.lang.Exception v10, v15;
org.jboss.logmanager.handlers.SuffixRotator$CompressionType v13, v14, v8, v9;
org.jboss.logmanager.handlers.SuffixRotator v0;
v0 := @this: org.jboss.logmanager.handlers.SuffixRotator;
v1 := @parameter0: java.util.logging.ErrorManager;
v2 := @parameter1: java.nio.file.Path;
v3 := @parameter2: java.lang.String;
v4 = v0.<org.jboss.logmanager.handlers.SuffixRotator: java.lang.String compressionSuffix>;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.nio.file.Path,java.lang.String,java.lang.String)>(v2, v3, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001\u0001");
v6 = newarray (java.lang.String)[0];
v7 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(v5, v6);
v8 = v0.<org.jboss.logmanager.handlers.SuffixRotator: org.jboss.logmanager.handlers.SuffixRotator$CompressionType compressionType>;
v9 = <org.jboss.logmanager.handlers.SuffixRotator$CompressionType: org.jboss.logmanager.handlers.SuffixRotator$CompressionType GZIP>;
if v8 != v9 goto label4;
label1:
staticinvoke <org.jboss.logmanager.handlers.SuffixRotator: void archiveGzip(java.nio.file.Path,java.nio.file.Path)>(v2, v7);
staticinvoke <java.nio.file.Files: void delete(java.nio.file.Path)>(v2);
label2:
goto label9;
label3:
v10 := @caughtexception;
v11 = newarray (java.lang.Object)[2];
v11[0] = v2;
v11[1] = v7;
v12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to compress %s to %s. Compressed file may be left on the filesystem corrupted.", v11);
virtualinvoke v1.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>(v12, v10, 1);
goto label9;
label4:
v13 = v0.<org.jboss.logmanager.handlers.SuffixRotator: org.jboss.logmanager.handlers.SuffixRotator$CompressionType compressionType>;
v14 = <org.jboss.logmanager.handlers.SuffixRotator$CompressionType: org.jboss.logmanager.handlers.SuffixRotator$CompressionType ZIP>;
if v13 != v14 goto label8;
label5:
staticinvoke <org.jboss.logmanager.handlers.SuffixRotator: void archiveZip(java.nio.file.Path,java.nio.file.Path)>(v2, v7);
staticinvoke <java.nio.file.Files: void delete(java.nio.file.Path)>(v2);
label6:
goto label9;
label7:
v15 := @caughtexception;
v16 = newarray (java.lang.Object)[2];
v16[0] = v2;
v16[1] = v7;
v17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to compress %s to %s. Compressed file may be left on the filesystem corrupted.", v16);
virtualinvoke v1.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>(v17, v15, 1);
goto label9;
label8:
specialinvoke v0.<org.jboss.logmanager.handlers.SuffixRotator: void move(java.util.logging.ErrorManager,java.nio.file.Path,java.nio.file.Path)>(v1, v2, v7);
label9:
return;
catch java.lang.Exception from label1 to label2 with label3;
catch java.lang.Exception from label5 to label6 with label7;
}
void rotate(java.util.logging.ErrorManager, java.nio.file.Path, int)
{
java.lang.Throwable v9;
java.util.Date v7;
java.text.SimpleDateFormat v4, v5, v6;
java.util.logging.ErrorManager v1;
int v3;
org.jboss.logmanager.handlers.SuffixRotator v0;
java.lang.String v8;
java.nio.file.Path v2;
v0 := @this: org.jboss.logmanager.handlers.SuffixRotator;
v1 := @parameter0: java.util.logging.ErrorManager;
v2 := @parameter1: java.nio.file.Path;
v3 := @parameter2: int;
v4 = v0.<org.jboss.logmanager.handlers.SuffixRotator: java.text.SimpleDateFormat formatter>;
if v4 != null goto label1;
virtualinvoke v0.<org.jboss.logmanager.handlers.SuffixRotator: void rotate(java.util.logging.ErrorManager,java.nio.file.Path,java.lang.String,int)>(v1, v2, "", v3);
goto label6;
label1:
v5 = v0.<org.jboss.logmanager.handlers.SuffixRotator: java.text.SimpleDateFormat formatter>;
entermonitor v5;
label2:
v6 = v0.<org.jboss.logmanager.handlers.SuffixRotator: java.text.SimpleDateFormat formatter>;
v7 = new java.util.Date;
specialinvoke v7.<java.util.Date: void <init>()>();
v8 = virtualinvoke v6.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(v7);
exitmonitor v5;
label3:
goto label5;
label4:
v9 := @caughtexception;
exitmonitor v5;
throw v9;
label5:
virtualinvoke v0.<org.jboss.logmanager.handlers.SuffixRotator: void rotate(java.util.logging.ErrorManager,java.nio.file.Path,java.lang.String,int)>(v1, v2, v8, v3);
label6:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
void rotate(java.util.logging.ErrorManager, java.nio.file.Path, java.lang.String, int)
{
java.lang.Object[] v14;
java.lang.String[] v11, v19, v26;
int v16, v23, v4;
java.lang.String v10, v15, v17, v18, v24, v25, v28, v3, v5, v6, v8, v9;
java.nio.file.Path v12, v2, v20, v27, v7;
boolean v22, v29;
java.nio.file.LinkOption[] v21;
java.util.logging.ErrorManager v1;
java.lang.Exception v13;
org.jboss.logmanager.handlers.SuffixRotator v0;
v0 := @this: org.jboss.logmanager.handlers.SuffixRotator;
v1 := @parameter0: java.util.logging.ErrorManager;
v2 := @parameter1: java.nio.file.Path;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: int;
if v4 <= 0 goto label10;
if v3 != null goto label01;
v5 = "";
goto label02;
label01:
v5 = v3;
label02:
v6 = v5;
v7 = interfaceinvoke v2.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.nio.file.Path,java.lang.String)>(v7, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
v9 = v0.<org.jboss.logmanager.handlers.SuffixRotator: java.lang.String compressionSuffix>;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,java.lang.String)>(v8, v4, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001\u0001");
v11 = newarray (java.lang.String)[0];
v12 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(v10, v11);
label03:
staticinvoke <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>(v12);
label04:
goto label06;
label05:
v13 := @caughtexception;
v14 = newarray (java.lang.Object)[1];
v14[0] = v12;
v15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to delete file %s", v14);
virtualinvoke v1.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>(v15, v13, 0);
label06:
v16 = v4 - 1;
label07:
if v16 < 1 goto label09;
v17 = v0.<org.jboss.logmanager.handlers.SuffixRotator: java.lang.String compressionSuffix>;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,java.lang.String)>(v8, v16, v17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001\u0001");
v19 = newarray (java.lang.String)[0];
v20 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(v18, v19);
v21 = newarray (java.nio.file.LinkOption)[0];
v22 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(v20, v21);
if v22 == 0 goto label08;
v23 = v16 + 1;
v24 = v0.<org.jboss.logmanager.handlers.SuffixRotator: java.lang.String compressionSuffix>;
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,java.lang.String)>(v8, v23, v24) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001\u0001");
v26 = newarray (java.lang.String)[0];
v27 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(v25, v26);
specialinvoke v0.<org.jboss.logmanager.handlers.SuffixRotator: void move(java.util.logging.ErrorManager,java.nio.file.Path,java.nio.file.Path)>(v1, v20, v27);
label08:
v16 = v16 - 1;
goto label07;
label09:
v28 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.1");
virtualinvoke v0.<org.jboss.logmanager.handlers.SuffixRotator: void rotate(java.util.logging.ErrorManager,java.nio.file.Path,java.lang.String)>(v1, v2, v28);
goto label11;
label10:
if v3 == null goto label11;
v29 = virtualinvoke v3.<java.lang.String: boolean isEmpty()>();
if v29 != 0 goto label11;
virtualinvoke v0.<org.jboss.logmanager.handlers.SuffixRotator: void rotate(java.util.logging.ErrorManager,java.nio.file.Path,java.lang.String)>(v1, v2, v3);
label11:
return;
catch java.lang.Exception from label03 to label04 with label05;
}
public java.lang.String toString()
{
org.jboss.logmanager.handlers.SuffixRotator v0;
java.lang.String v1;
v0 := @this: org.jboss.logmanager.handlers.SuffixRotator;
v1 = v0.<org.jboss.logmanager.handlers.SuffixRotator: java.lang.String originalSuffix>;
return v1;
}
private void move(java.util.logging.ErrorManager, java.nio.file.Path, java.nio.file.Path)
{
java.nio.file.CopyOption[] v4;
java.lang.Object[] v7;
java.util.logging.ErrorManager v1;
java.lang.Exception v6;
java.nio.file.StandardCopyOption v5;
org.jboss.logmanager.handlers.SuffixRotator v0;
java.lang.String v8;
java.nio.file.Path v2, v3;
v0 := @this: org.jboss.logmanager.handlers.SuffixRotator;
v1 := @parameter0: java.util.logging.ErrorManager;
v2 := @parameter1: java.nio.file.Path;
v3 := @parameter2: java.nio.file.Path;
label1:
v4 = newarray (java.nio.file.CopyOption)[1];
v5 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;
v4[0] = v5;
staticinvoke <java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v2, v3, v4);
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = newarray (java.lang.Object)[2];
v7[0] = v2;
v7[1] = v3;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to move file %s to %s.", v7);
virtualinvoke v1.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>(v8, v6, 0);
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
private static void archiveGzip(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
{
java.io.OutputStream v5;
java.lang.Throwable v10, v11;
byte[] v2;
java.nio.file.OpenOption[] v4, v6;
int v8, v9;
java.util.zip.GZIPOutputStream v3;
java.nio.file.Path v0, v1;
java.io.InputStream v7;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 = newarray (byte)[512];
v3 = new java.util.zip.GZIPOutputStream;
v4 = newarray (java.nio.file.OpenOption)[0];
v5 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(v1, v4);
specialinvoke v3.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream,boolean)>(v5, 1);
label1:
v6 = newarray (java.nio.file.OpenOption)[0];
v7 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(v0, v6);
label2:
v8 = virtualinvoke v7.<java.io.InputStream: int read(byte[])>(v2);
v9 = (int) -1;
if v8 == v9 goto label3;
virtualinvoke v3.<java.util.zip.GZIPOutputStream: void write(byte[],int,int)>(v2, 0, v8);
goto label2;
label3:
virtualinvoke v7.<java.io.InputStream: void close()>();
goto label5;
label4:
v10 := @caughtexception;
throw v10;
label5:
virtualinvoke v3.<java.util.zip.GZIPOutputStream: void finish()>();
label6:
virtualinvoke v3.<java.util.zip.GZIPOutputStream: void close()>();
goto label8;
label7:
v11 := @caughtexception;
throw v11;
label8:
return;
catch java.lang.Throwable from label2 to label3 with label4;
catch java.lang.Throwable from label1 to label6 with label7;
}
private static void archiveZip(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
{
java.lang.Throwable v14, v15;
java.util.zip.ZipOutputStream v3;
byte[] v2;
java.nio.charset.Charset v6;
java.nio.file.OpenOption[] v10, v4;
int v12, v13;
java.lang.String v9;
java.nio.file.Path v0, v1, v8;
java.util.zip.ZipEntry v7;
java.io.OutputStream v5;
java.io.InputStream v11;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 = newarray (byte)[512];
v3 = new java.util.zip.ZipOutputStream;
v4 = newarray (java.nio.file.OpenOption)[0];
v5 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(v1, v4);
v6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
specialinvoke v3.<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(v5, v6);
label1:
v7 = new java.util.zip.ZipEntry;
v8 = interfaceinvoke v0.<java.nio.file.Path: java.nio.file.Path getFileName()>();
v9 = interfaceinvoke v8.<java.nio.file.Path: java.lang.String toString()>();
specialinvoke v7.<java.util.zip.ZipEntry: void <init>(java.lang.String)>(v9);
virtualinvoke v3.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>(v7);
v10 = newarray (java.nio.file.OpenOption)[0];
v11 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(v0, v10);
label2:
v12 = virtualinvoke v11.<java.io.InputStream: int read(byte[])>(v2);
v13 = (int) -1;
if v12 == v13 goto label3;
virtualinvoke v3.<java.util.zip.ZipOutputStream: void write(byte[],int,int)>(v2, 0, v12);
goto label2;
label3:
virtualinvoke v11.<java.io.InputStream: void close()>();
goto label5;
label4:
v14 := @caughtexception;
throw v14;
label5:
virtualinvoke v3.<java.util.zip.ZipOutputStream: void closeEntry()>();
label6:
virtualinvoke v3.<java.util.zip.ZipOutputStream: void close()>();
goto label8;
label7:
v15 := @caughtexception;
throw v15;
label8:
return;
catch java.lang.Throwable from label2 to label3 with label4;
catch java.lang.Throwable from label1 to label6 with label7;
}
static void <clinit>()
{
org.jboss.logmanager.handlers.SuffixRotator v0;
org.jboss.logmanager.handlers.SuffixRotator$CompressionType v1;
v0 = new org.jboss.logmanager.handlers.SuffixRotator;
v1 = <org.jboss.logmanager.handlers.SuffixRotator$CompressionType: org.jboss.logmanager.handlers.SuffixRotator$CompressionType NONE>;
specialinvoke v0.<org.jboss.logmanager.handlers.SuffixRotator: void <init>(java.lang.String,java.lang.String,java.lang.String,org.jboss.logmanager.handlers.SuffixRotator$CompressionType)>("", "", "", v1);
<org.jboss.logmanager.handlers.SuffixRotator: org.jboss.logmanager.handlers.SuffixRotator EMPTY> = v0;
return;
}
}