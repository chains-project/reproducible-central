public final class org.jboss.threads.EnhancedQueueExecutor$Builder extends java.lang.Object
{
private java.util.concurrent.ThreadFactory threadFactory;
private java.lang.Runnable terminationTask;
private java.util.concurrent.Executor handoffExecutor;
private java.lang.Thread$UncaughtExceptionHandler exceptionHandler;
private int coreSize;
private int maxSize;
private java.time.Duration keepAliveTime;
private float growthResistance;
private boolean allowCoreTimeOut;
private int maxQueueSize;
private boolean registerMBean;
private java.lang.String mBeanName;
private org.jboss.threads.ContextHandler contextHandler;
public void <init>()
{
java.util.concurrent.Executor v3;
org.jboss.threads.ContextHandler v7;
java.lang.Thread$UncaughtExceptionHandler v4;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
java.time.Duration v5;
java.util.concurrent.ThreadFactory v1;
boolean v6;
org.jboss.threads.NullRunnable v2;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.util.concurrent.ThreadFactory threadFactory> = v1;
v2 = staticinvoke <org.jboss.threads.NullRunnable: org.jboss.threads.NullRunnable getInstance()>();
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.lang.Runnable terminationTask> = v2;
v3 = <org.jboss.threads.EnhancedQueueExecutor: java.util.concurrent.Executor DEFAULT_HANDLER>;
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.util.concurrent.Executor handoffExecutor> = v3;
v4 = staticinvoke <org.jboss.threads.JBossExecutors: java.lang.Thread$UncaughtExceptionHandler loggingExceptionHandler()>();
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.lang.Thread$UncaughtExceptionHandler exceptionHandler> = v4;
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: int coreSize> = 16;
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: int maxSize> = 64;
v5 = staticinvoke <java.time.Duration: java.time.Duration ofSeconds(long)>(30L);
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.time.Duration keepAliveTime> = v5;
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: int maxQueueSize> = 2147483647;
v6 = <org.jboss.threads.EnhancedQueueExecutor: boolean REGISTER_MBEAN>;
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: boolean registerMBean> = v6;
v7 = <org.jboss.threads.ContextHandler: org.jboss.threads.ContextHandler NONE>;
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: org.jboss.threads.ContextHandler contextHandler> = v7;
return;
}
public java.util.concurrent.ThreadFactory getThreadFactory()
{
java.util.concurrent.ThreadFactory v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.util.concurrent.ThreadFactory threadFactory>;
return v1;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setThreadFactory(java.util.concurrent.ThreadFactory)
{
java.util.concurrent.ThreadFactory v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: java.util.concurrent.ThreadFactory;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("threadFactory", v1);
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.util.concurrent.ThreadFactory threadFactory> = v1;
return v0;
}
public java.lang.Runnable getTerminationTask()
{
java.lang.Runnable v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.lang.Runnable terminationTask>;
return v1;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setTerminationTask(java.lang.Runnable)
{
java.lang.Runnable v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: java.lang.Runnable;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("terminationTask", v1);
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.lang.Runnable terminationTask> = v1;
return v0;
}
public int getCorePoolSize()
{
int v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: int coreSize>;
return v1;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setCorePoolSize(int)
{
int v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: int;
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("coreSize", 0, v1);
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,long,long)>("coreSize", 1048575L, v1);
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: int coreSize> = v1;
return v0;
}
public int getMaximumPoolSize()
{
int v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: int maxSize>;
return v1;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setMaximumPoolSize(int)
{
int v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: int;
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("maxSize", 0, v1);
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,long,long)>("maxSize", 1048575L, v1);
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: int maxSize> = v1;
return v0;
}
public java.time.Duration getKeepAliveTime()
{
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
java.time.Duration v1;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.time.Duration keepAliveTime>;
return v1;
}
public long getKeepAliveTime(java.util.concurrent.TimeUnit)
{
long v10, v12, v3, v5, v9;
java.util.concurrent.TimeUnit v1, v4, v8;
byte v11;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
java.time.Duration v2, v6;
int v7;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: java.util.concurrent.TimeUnit;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("keepAliveUnits", v1);
v2 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.time.Duration keepAliveTime>;
v3 = virtualinvoke v2.<java.time.Duration: long getSeconds()>();
v4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v5 = virtualinvoke v1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(v3, v4);
v6 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.time.Duration keepAliveTime>;
v7 = virtualinvoke v6.<java.time.Duration: int getNano()>();
v8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v9 = virtualinvoke v1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(v7, v8);
v10 = v5 + v9;
v11 = v10 cmp 0L;
if v11 >= 0 goto label1;
v12 = 9223372036854775807L;
goto label2;
label1:
v12 = v10;
label2:
return v12;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setKeepAliveTime(java.time.Duration)
{
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
java.time.Duration v1;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: java.time.Duration;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("keepAliveTime", v1);
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.time.Duration keepAliveTime> = v1;
return v0;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setKeepAliveTime(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
java.time.Duration v4;
java.time.temporal.TemporalUnit v3;
long v1;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,long,long)>("keepAliveTime", 1L, v1);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("keepAliveUnits", v2);
v3 = staticinvoke <org.jboss.threads.JDKSpecific: java.time.temporal.TemporalUnit timeToTemporal(java.util.concurrent.TimeUnit)>(v2);
v4 = staticinvoke <java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>(v1, v3);
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.time.Duration keepAliveTime> = v4;
return v0;
}
public float getGrowthResistance()
{
float v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: float growthResistance>;
return v1;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setGrowthResistance(float)
{
float v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: float;
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,float,float)>("growthResistance", 0.0F, v1);
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,float,float)>("growthResistance", 1.0F, v1);
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: float growthResistance> = v1;
return v0;
}
public boolean allowsCoreThreadTimeOut()
{
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
boolean v1;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: boolean allowCoreTimeOut>;
return v1;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder allowCoreThreadTimeOut(boolean)
{
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
boolean v1;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: boolean;
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: boolean allowCoreTimeOut> = v1;
return v0;
}
public int getMaximumQueueSize()
{
int v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: int maxQueueSize>;
return v1;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setMaximumQueueSize(int)
{
int v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: int;
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("maxQueueSize", 0, v1);
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("maxQueueSize", 2147483647, v1);
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: int maxQueueSize> = v1;
return v0;
}
public java.util.concurrent.Executor getHandoffExecutor()
{
java.util.concurrent.Executor v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.util.concurrent.Executor handoffExecutor>;
return v1;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setHandoffExecutor(java.util.concurrent.Executor)
{
java.util.concurrent.Executor v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: java.util.concurrent.Executor;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("handoffExecutor", v1);
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.util.concurrent.Executor handoffExecutor> = v1;
return v0;
}
public java.lang.Thread$UncaughtExceptionHandler getExceptionHandler()
{
java.lang.Thread$UncaughtExceptionHandler v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.lang.Thread$UncaughtExceptionHandler exceptionHandler>;
return v1;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
{
java.lang.Thread$UncaughtExceptionHandler v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.lang.Thread$UncaughtExceptionHandler exceptionHandler> = v1;
return v0;
}
public org.jboss.threads.EnhancedQueueExecutor build()
{
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = new org.jboss.threads.EnhancedQueueExecutor;
specialinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: void <init>(org.jboss.threads.EnhancedQueueExecutor$Builder)>(v0);
return v1;
}
public boolean isRegisterMBean()
{
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
boolean v1;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: boolean registerMBean>;
return v1;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setRegisterMBean(boolean)
{
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
boolean v1;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: boolean;
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: boolean registerMBean> = v1;
return v0;
}
public java.lang.String getMBeanName()
{
java.lang.String v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.lang.String mBeanName>;
return v1;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setMBeanName(java.lang.String)
{
java.lang.String v1;
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: java.lang.String;
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: java.lang.String mBeanName> = v1;
return v0;
}
public org.jboss.threads.ContextHandler getContextHandler()
{
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
org.jboss.threads.ContextHandler v1;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: org.jboss.threads.ContextHandler contextHandler>;
return v1;
}
public org.jboss.threads.EnhancedQueueExecutor$Builder setContextHandler(org.jboss.threads.ContextHandler)
{
org.jboss.threads.EnhancedQueueExecutor$Builder v0;
org.jboss.threads.ContextHandler v1;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$Builder;
v1 := @parameter0: org.jboss.threads.ContextHandler;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("contextHandler", v1);
v0.<org.jboss.threads.EnhancedQueueExecutor$Builder: org.jboss.threads.ContextHandler contextHandler> = v1;
return v0;
}
}