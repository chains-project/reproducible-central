class org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl extends java.lang.Object implements org.jboss.threads.management.StandardThreadPoolMXBean
{
final org.jboss.threads.ManagedThreadPoolExecutor this$0;
void <init>(org.jboss.threads.ManagedThreadPoolExecutor)
{
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 := @parameter0: org.jboss.threads.ManagedThreadPoolExecutor;
v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public float getGrowthResistance()
{
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
return 1.0F;
}
public void setGrowthResistance(float)
{
float v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 := @parameter0: float;
return;
}
public boolean isGrowthResistanceSupported()
{
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
return 0;
}
public int getCorePoolSize()
{
int v2;
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: int getCorePoolSize()>();
return v2;
}
public void setCorePoolSize(int)
{
int v1;
org.jboss.threads.ManagedThreadPoolExecutor v2;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 := @parameter0: int;
v2 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
virtualinvoke v2.<org.jboss.threads.ManagedThreadPoolExecutor: void setCorePoolSize(int)>(v1);
return;
}
public boolean isCorePoolSizeSupported()
{
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
return 1;
}
public boolean prestartCoreThread()
{
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
boolean v2;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: boolean prestartCoreThread()>();
return v2;
}
public int prestartAllCoreThreads()
{
int v2;
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: int prestartAllCoreThreads()>();
return v2;
}
public boolean isCoreThreadPrestartSupported()
{
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
return 1;
}
public int getMaximumPoolSize()
{
int v2;
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: int getMaximumPoolSize()>();
return v2;
}
public void setMaximumPoolSize(int)
{
int v1;
org.jboss.threads.ManagedThreadPoolExecutor v2;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 := @parameter0: int;
v2 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
virtualinvoke v2.<org.jboss.threads.ManagedThreadPoolExecutor: void setMaximumPoolSize(int)>(v1);
return;
}
public int getPoolSize()
{
int v2;
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: int getPoolSize()>();
return v2;
}
public int getLargestPoolSize()
{
int v2;
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: int getLargestPoolSize()>();
return v2;
}
public int getActiveCount()
{
int v2;
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: int getActiveCount()>();
return v2;
}
public boolean isAllowCoreThreadTimeOut()
{
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
boolean v2;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: boolean allowsCoreThreadTimeOut()>();
return v2;
}
public void setAllowCoreThreadTimeOut(boolean)
{
org.jboss.threads.ManagedThreadPoolExecutor v2;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
boolean v1;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 := @parameter0: boolean;
v2 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
virtualinvoke v2.<org.jboss.threads.ManagedThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(v1);
return;
}
public long getKeepAliveTimeSeconds()
{
java.util.concurrent.TimeUnit v2;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
long v3;
org.jboss.threads.ManagedThreadPoolExecutor v1;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v3 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: long getKeepAliveTime(java.util.concurrent.TimeUnit)>(v2);
return v3;
}
public void setKeepAliveTimeSeconds(long)
{
java.util.concurrent.TimeUnit v3;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
long v1;
org.jboss.threads.ManagedThreadPoolExecutor v2;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 := @parameter0: long;
v2 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
virtualinvoke v2.<org.jboss.threads.ManagedThreadPoolExecutor: void setKeepAliveTime(long,java.util.concurrent.TimeUnit)>(v1, v3);
return;
}
public int getMaximumQueueSize()
{
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
return 0;
}
public void setMaximumQueueSize(int)
{
int v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 := @parameter0: int;
return;
}
public int getQueueSize()
{
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
int v3;
java.util.concurrent.BlockingQueue v2;
org.jboss.threads.ManagedThreadPoolExecutor v1;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();
v3 = interfaceinvoke v2.<java.util.concurrent.BlockingQueue: int size()>();
return v3;
}
public int getLargestQueueSize()
{
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
return 0;
}
public boolean isQueueBounded()
{
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
return 0;
}
public boolean isQueueSizeModifiable()
{
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
return 0;
}
public boolean isShutdown()
{
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
boolean v2;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: boolean isShutdown()>();
return v2;
}
public boolean isTerminating()
{
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
boolean v2;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: boolean isTerminating()>();
return v2;
}
public boolean isTerminated()
{
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
boolean v2;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: boolean isTerminated()>();
return v2;
}
public long getSubmittedTaskCount()
{
long v2;
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: long getTaskCount()>();
return v2;
}
public long getRejectedTaskCount()
{
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
return 0L;
}
public long getCompletedTaskCount()
{
long v2;
org.jboss.threads.ManagedThreadPoolExecutor v1;
org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.ManagedThreadPoolExecutor$MXBeanImpl: org.jboss.threads.ManagedThreadPoolExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.ManagedThreadPoolExecutor: long getCompletedTaskCount()>();
return v2;
}
}