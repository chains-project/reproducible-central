public abstract class org.jboss.threads.ViewExecutor extends java.util.concurrent.AbstractExecutorService
{
private volatile java.lang.Thread$UncaughtExceptionHandler handler;
private volatile java.lang.Runnable terminationTask;
void <init>()
{
org.jboss.threads.ViewExecutor v0;
v0 := @this: org.jboss.threads.ViewExecutor;
specialinvoke v0.<java.util.concurrent.AbstractExecutorService: void <init>()>();
return;
}
public final void shutdown()
{
org.jboss.threads.ViewExecutor v0;
v0 := @this: org.jboss.threads.ViewExecutor;
virtualinvoke v0.<org.jboss.threads.ViewExecutor: void shutdown(boolean)>(0);
return;
}
public abstract void shutdown(boolean);
public final java.lang.Thread$UncaughtExceptionHandler getExceptionHandler()
{
org.jboss.threads.ViewExecutor v0;
java.lang.Thread$UncaughtExceptionHandler v1;
v0 := @this: org.jboss.threads.ViewExecutor;
v1 = v0.<org.jboss.threads.ViewExecutor: java.lang.Thread$UncaughtExceptionHandler handler>;
return v1;
}
public final void setExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
{
org.jboss.threads.ViewExecutor v0;
java.lang.Thread$UncaughtExceptionHandler v1;
v0 := @this: org.jboss.threads.ViewExecutor;
v1 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("handler", v1);
v0.<org.jboss.threads.ViewExecutor: java.lang.Thread$UncaughtExceptionHandler handler> = v1;
return;
}
public final java.lang.Runnable getTerminationTask()
{
org.jboss.threads.ViewExecutor v0;
java.lang.Runnable v1;
v0 := @this: org.jboss.threads.ViewExecutor;
v1 = v0.<org.jboss.threads.ViewExecutor: java.lang.Runnable terminationTask>;
return v1;
}
public final void setTerminationTask(java.lang.Runnable)
{
org.jboss.threads.ViewExecutor v0;
java.lang.Runnable v1;
v0 := @this: org.jboss.threads.ViewExecutor;
v1 := @parameter0: java.lang.Runnable;
v0.<org.jboss.threads.ViewExecutor: java.lang.Runnable terminationTask> = v1;
return;
}
public static org.jboss.threads.ViewExecutor$Builder builder(java.util.concurrent.Executor)
{
org.jboss.threads.ViewExecutor$Builder v1;
java.util.concurrent.Executor v0;
v0 := @parameter0: java.util.concurrent.Executor;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("delegate", v0);
v1 = new org.jboss.threads.ViewExecutor$Builder;
specialinvoke v1.<org.jboss.threads.ViewExecutor$Builder: void <init>(java.util.concurrent.Executor)>(v0);
return v1;
}
protected void runTermination()
{
java.lang.Throwable v2, v6;
org.jboss.threads.ViewExecutor v0;
java.lang.Thread$UncaughtExceptionHandler v3, v4;
java.lang.Thread v5;
java.lang.Runnable v1;
v0 := @this: org.jboss.threads.ViewExecutor;
v1 = v0.<org.jboss.threads.ViewExecutor: java.lang.Runnable terminationTask>;
v0.<org.jboss.threads.ViewExecutor: java.lang.Runnable terminationTask> = null;
if v1 == null goto label7;
label1:
interfaceinvoke v1.<java.lang.Runnable: void run()>();
label2:
goto label7;
label3:
v2 := @caughtexception;
v3 = v0.<org.jboss.threads.ViewExecutor: java.lang.Thread$UncaughtExceptionHandler handler>;
if v3 == null goto label7;
label4:
v4 = v0.<org.jboss.threads.ViewExecutor: java.lang.Thread$UncaughtExceptionHandler handler>;
v5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
interfaceinvoke v4.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(v5, v2);
label5:
goto label7;
label6:
v6 := @caughtexception;
label7:
return;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label4 to label5 with label6;
}
static int readIntPropertyPrefixed(java.lang.String, int)
{
int v1, v4;
java.lang.NumberFormatException v5;
java.lang.String v0, v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
label1:
v2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(v1);
v3 = staticinvoke <org.jboss.threads.ViewExecutor: java.lang.String readPropertyPrefixed(java.lang.String,java.lang.String)>(v0, v2);
v4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v3);
label2:
return v4;
label3:
v5 := @caughtexception;
return v1;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
static java.lang.String readPropertyPrefixed(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("org.jboss.threads.view-executor.\u0001");
v3 = staticinvoke <org.jboss.threads.ViewExecutor: java.lang.String readProperty(java.lang.String,java.lang.String)>(v2, v1);
return v3;
}
static java.lang.String readProperty(java.lang.String, java.lang.String)
{
java.lang.Object v4;
java.lang.String v0, v1, v5;
java.security.PrivilegedAction v3;
java.lang.SecurityManager v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v2 == null goto label1;
v3 = staticinvoke <org.jboss.threads.ViewExecutor$lambda_readProperty_0__3218: java.security.PrivilegedAction bootstrap$(java.lang.String,java.lang.String)>(v0, v1);
v4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v3);
return v4;
label1:
v5 = staticinvoke <org.jboss.threads.ViewExecutor: java.lang.String readPropertyRaw(java.lang.String,java.lang.String)>(v0, v1);
return v5;
}
static java.lang.String readPropertyRaw(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>(v0, v1);
return v2;
}
}