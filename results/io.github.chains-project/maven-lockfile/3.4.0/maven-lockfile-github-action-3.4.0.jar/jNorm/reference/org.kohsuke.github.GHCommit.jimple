public class org.kohsuke.github.GHCommit extends java.lang.Object
{
private org.kohsuke.github.GHRepository owner;
private org.kohsuke.github.GHCommit$ShortInfo commit;
java.lang.String url;
java.lang.String html_url;
java.lang.String sha;
java.util.List files;
org.kohsuke.github.GHCommit$Stats stats;
java.util.List parents;
org.kohsuke.github.GHCommit$User author;
org.kohsuke.github.GHCommit$User committer;
public void <init>()
{
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
void <init>(org.kohsuke.github.GHCommit$ShortInfo)
{
org.kohsuke.github.GHRepository v3;
org.kohsuke.github.GHCommit$ShortInfo v1, v10, v2, v4, v6, v8;
java.util.List v11;
java.lang.String v5, v7, v9;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 := @parameter0: org.kohsuke.github.GHCommit$ShortInfo;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$ShortInfo commit> = v1;
v2 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$ShortInfo commit>;
v3 = virtualinvoke v2.<org.kohsuke.github.GHCommit$ShortInfo: org.kohsuke.github.GHRepository getOwner()>();
v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner> = v3;
v4 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$ShortInfo commit>;
v5 = virtualinvoke v4.<org.kohsuke.github.GHCommit$ShortInfo: java.lang.String getHtmlUrl()>();
v0.<org.kohsuke.github.GHCommit: java.lang.String html_url> = v5;
v6 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$ShortInfo commit>;
v7 = virtualinvoke v6.<org.kohsuke.github.GHCommit$ShortInfo: java.lang.String getSha()>();
v0.<org.kohsuke.github.GHCommit: java.lang.String sha> = v7;
v8 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$ShortInfo commit>;
v9 = virtualinvoke v8.<org.kohsuke.github.GHCommit$ShortInfo: java.lang.String getUrl()>();
v0.<org.kohsuke.github.GHCommit: java.lang.String url> = v9;
v10 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$ShortInfo commit>;
v11 = virtualinvoke v10.<org.kohsuke.github.GHCommit$ShortInfo: java.util.List getParents()>();
v0.<org.kohsuke.github.GHCommit: java.util.List parents> = v11;
return;
}
public org.kohsuke.github.GHCommit$ShortInfo getCommitShortInfo() throws java.io.IOException
{
org.kohsuke.github.GHCommit v0;
org.kohsuke.github.GHCommit$ShortInfo v1, v2;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$ShortInfo commit>;
if v1 != null goto label1;
virtualinvoke v0.<org.kohsuke.github.GHCommit: void populate()>();
label1:
v2 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$ShortInfo commit>;
return v2;
}
public org.kohsuke.github.GHRepository getOwner()
{
org.kohsuke.github.GHRepository v1;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
return v1;
}
public int getLinesChanged() throws java.io.IOException
{
int v2;
org.kohsuke.github.GHCommit$Stats v1;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
virtualinvoke v0.<org.kohsuke.github.GHCommit: void populate()>();
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$Stats stats>;
v2 = v1.<org.kohsuke.github.GHCommit$Stats: int total>;
return v2;
}
public int getLinesAdded() throws java.io.IOException
{
int v2;
org.kohsuke.github.GHCommit$Stats v1;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
virtualinvoke v0.<org.kohsuke.github.GHCommit: void populate()>();
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$Stats stats>;
v2 = v1.<org.kohsuke.github.GHCommit$Stats: int additions>;
return v2;
}
public int getLinesDeleted() throws java.io.IOException
{
int v2;
org.kohsuke.github.GHCommit$Stats v1;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
virtualinvoke v0.<org.kohsuke.github.GHCommit: void populate()>();
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$Stats stats>;
v2 = v1.<org.kohsuke.github.GHCommit$Stats: int deletions>;
return v2;
}
public org.kohsuke.github.GHTree getTree() throws java.io.IOException
{
org.kohsuke.github.GHRepository v1;
org.kohsuke.github.GHCommit$ShortInfo v2;
java.lang.String v3;
org.kohsuke.github.GHTree v4;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v2 = virtualinvoke v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$ShortInfo getCommitShortInfo()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GHCommit$ShortInfo: java.lang.String getTreeSHA1()>();
v4 = virtualinvoke v1.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHTree getTree(java.lang.String)>(v3);
return v4;
}
public java.net.URL getHtmlUrl()
{
java.lang.String v1;
java.net.URL v2;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: java.lang.String html_url>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.lang.String getSHA1()
{
java.lang.String v1;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: java.lang.String sha>;
return v1;
}
public java.net.URL getUrl()
{
java.lang.String v1;
java.net.URL v2;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: java.lang.String url>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.util.List getFiles() throws java.io.IOException
{
java.util.List v1, v2, v3;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
virtualinvoke v0.<org.kohsuke.github.GHCommit: void populate()>();
v1 = v0.<org.kohsuke.github.GHCommit: java.util.List files>;
if v1 == null goto label1;
v2 = v0.<org.kohsuke.github.GHCommit: java.util.List files>;
v3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v2);
goto label2;
label1:
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
label2:
return v3;
}
public java.util.List getParentSHA1s()
{
java.util.List v1, v2, v4;
int v3;
org.kohsuke.github.GHCommit$1 v5;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: java.util.List parents>;
if v1 == null goto label1;
v2 = v0.<org.kohsuke.github.GHCommit: java.util.List parents>;
v3 = interfaceinvoke v2.<java.util.List: int size()>();
if v3 != 0 goto label2;
label1:
v4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v4;
label2:
v5 = new org.kohsuke.github.GHCommit$1;
specialinvoke v5.<org.kohsuke.github.GHCommit$1: void <init>(org.kohsuke.github.GHCommit)>(v0);
return v5;
}
public java.util.List getParents() throws java.io.IOException
{
org.kohsuke.github.GHRepository v6;
java.util.Iterator v3;
java.util.ArrayList v1;
java.util.List v2;
java.lang.Object v5;
org.kohsuke.github.GHCommit v0, v7;
boolean v4;
v0 := @this: org.kohsuke.github.GHCommit;
virtualinvoke v0.<org.kohsuke.github.GHCommit: void populate()>();
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = virtualinvoke v0.<org.kohsuke.github.GHCommit: java.util.List getParentSHA1s()>();
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v7 = virtualinvoke v6.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHCommit getCommit(java.lang.String)>(v5);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v7);
goto label1;
label2:
return v1;
}
public org.kohsuke.github.GHUser getAuthor() throws java.io.IOException
{
org.kohsuke.github.GHCommit$User v1;
org.kohsuke.github.GHUser v2;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
virtualinvoke v0.<org.kohsuke.github.GHCommit: void populate()>();
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$User author>;
v2 = specialinvoke v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHUser resolveUser(org.kohsuke.github.GHCommit$User)>(v1);
return v2;
}
public java.util.Date getAuthoredDate() throws java.io.IOException
{
java.util.Date v2;
org.kohsuke.github.GHCommit v0;
org.kohsuke.github.GHCommit$ShortInfo v1;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = virtualinvoke v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$ShortInfo getCommitShortInfo()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GHCommit$ShortInfo: java.util.Date getAuthoredDate()>();
return v2;
}
public org.kohsuke.github.GHUser getCommitter() throws java.io.IOException
{
org.kohsuke.github.GHCommit$User v1;
org.kohsuke.github.GHUser v2;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
virtualinvoke v0.<org.kohsuke.github.GHCommit: void populate()>();
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$User committer>;
v2 = specialinvoke v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHUser resolveUser(org.kohsuke.github.GHCommit$User)>(v1);
return v2;
}
public java.util.Date getCommitDate() throws java.io.IOException
{
java.util.Date v2;
org.kohsuke.github.GHCommit v0;
org.kohsuke.github.GHCommit$ShortInfo v1;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = virtualinvoke v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$ShortInfo getCommitShortInfo()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GHCommit$ShortInfo: java.util.Date getCommitDate()>();
return v2;
}
private org.kohsuke.github.GHUser resolveUser(org.kohsuke.github.GHCommit$User) throws java.io.IOException
{
org.kohsuke.github.GHRepository v3;
org.kohsuke.github.GHCommit$User v1;
org.kohsuke.github.GHUser v6;
java.lang.String v2, v5;
org.kohsuke.github.GHCommit v0;
org.kohsuke.github.GitHub v4;
v0 := @this: org.kohsuke.github.GHCommit;
v1 := @parameter0: org.kohsuke.github.GHCommit$User;
if v1 == null goto label1;
v2 = v1.<org.kohsuke.github.GHCommit$User: java.lang.String login>;
if v2 != null goto label2;
label1:
return null;
label2:
v3 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v4 = virtualinvoke v3.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v5 = v1.<org.kohsuke.github.GHCommit$User: java.lang.String login>;
v6 = virtualinvoke v4.<org.kohsuke.github.GitHub: org.kohsuke.github.GHUser getUser(java.lang.String)>(v5);
return v6;
}
public org.kohsuke.github.PagedIterable listPullRequests()
{
org.kohsuke.github.GHRepository v1, v7, v9;
java.lang.Object[] v6;
java.lang.String[] v13;
org.kohsuke.github.GitHubRequest$Builder v14, v5;
java.lang.String v10, v11, v12, v8;
org.kohsuke.github.PagedIterable v16;
org.kohsuke.github.GitHub v2;
org.kohsuke.github.internal.Previews v4;
java.util.function.Consumer v15;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v2 = virtualinvoke v1.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews GROOT>;
v5 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v4);
v6 = newarray (java.lang.Object)[3];
v7 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v8 = virtualinvoke v7.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v6[0] = v8;
v9 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v10 = virtualinvoke v9.<org.kohsuke.github.GHRepository: java.lang.String getName()>();
v6[1] = v10;
v11 = v0.<org.kohsuke.github.GHCommit: java.lang.String sha>;
v6[2] = v11;
v12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/commits/%s/pulls", v6);
v13 = newarray (java.lang.String)[0];
v14 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v12, v13);
v15 = staticinvoke <org.kohsuke.github.GHCommit$lambda_listPullRequests_0__88: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHCommit)>(v0);
v16 = virtualinvoke v14.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHPullRequest;", v15);
return v16;
}
public org.kohsuke.github.PagedIterable listBranchesWhereHead() throws java.io.IOException
{
org.kohsuke.github.GHRepository v1, v7, v9;
java.lang.Object[] v6;
java.lang.String[] v13;
org.kohsuke.github.GitHubRequest$Builder v14, v5;
java.lang.String v10, v11, v12, v8;
org.kohsuke.github.PagedIterable v16;
org.kohsuke.github.GitHub v2;
org.kohsuke.github.internal.Previews v4;
java.util.function.Consumer v15;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v2 = virtualinvoke v1.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews GROOT>;
v5 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v4);
v6 = newarray (java.lang.Object)[3];
v7 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v8 = virtualinvoke v7.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v6[0] = v8;
v9 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v10 = virtualinvoke v9.<org.kohsuke.github.GHRepository: java.lang.String getName()>();
v6[1] = v10;
v11 = v0.<org.kohsuke.github.GHCommit: java.lang.String sha>;
v6[2] = v11;
v12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/commits/%s/branches-where-head", v6);
v13 = newarray (java.lang.String)[0];
v14 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v12, v13);
v15 = staticinvoke <org.kohsuke.github.GHCommit$lambda_listBranchesWhereHead_1__89: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHCommit)>(v0);
v16 = virtualinvoke v14.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHBranch;", v15);
return v16;
}
public org.kohsuke.github.PagedIterable listComments()
{
org.kohsuke.github.GHRepository v1;
java.lang.String v2;
org.kohsuke.github.PagedIterable v3;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v2 = v0.<org.kohsuke.github.GHCommit: java.lang.String sha>;
v3 = virtualinvoke v1.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listCommitComments(java.lang.String)>(v2);
return v3;
}
public org.kohsuke.github.GHCommitComment createComment(java.lang.String, java.lang.String, java.lang.Integer, java.lang.Integer) throws java.io.IOException
{
org.kohsuke.github.GHRepository v14, v16, v23, v5;
java.lang.Object[] v13;
java.lang.String[] v20;
org.kohsuke.github.GitHubRequest$Builder v10, v11, v12, v21, v8, v9;
java.lang.Integer v3, v4;
java.lang.String v1, v15, v17, v18, v19, v2;
org.kohsuke.github.GHCommitComment v24;
org.kohsuke.github.GitHub v6;
java.lang.Object v22;
org.kohsuke.github.Requester v7;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Integer;
v4 := @parameter3: java.lang.Integer;
v5 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v6 = virtualinvoke v5.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v7 = virtualinvoke v6.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("body", v1);
v10 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("path", v2);
v11 = virtualinvoke v10.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Object)>("line", v3);
v12 = virtualinvoke v11.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Object)>("position", v4);
v13 = newarray (java.lang.Object)[3];
v14 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v15 = virtualinvoke v14.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v13[0] = v15;
v16 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v17 = virtualinvoke v16.<org.kohsuke.github.GHRepository: java.lang.String getName()>();
v13[1] = v17;
v18 = v0.<org.kohsuke.github.GHCommit: java.lang.String sha>;
v13[2] = v18;
v19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/commits/%s/comments", v13);
v20 = newarray (java.lang.String)[0];
v21 = virtualinvoke v12.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v19, v20);
v22 = virtualinvoke v21.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHCommitComment;");
v23 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v24 = virtualinvoke v22.<org.kohsuke.github.GHCommitComment: org.kohsuke.github.GHCommitComment wrap(org.kohsuke.github.GHRepository)>(v23);
return v24;
}
public org.kohsuke.github.GHCommitComment createComment(java.lang.String) throws java.io.IOException
{
java.lang.String v1;
org.kohsuke.github.GHCommitComment v2;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommitComment createComment(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer)>(v1, null, null, null);
return v2;
}
public org.kohsuke.github.PagedIterable listStatuses() throws java.io.IOException
{
org.kohsuke.github.GHRepository v1;
java.lang.String v2;
org.kohsuke.github.PagedIterable v3;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v2 = v0.<org.kohsuke.github.GHCommit: java.lang.String sha>;
v3 = virtualinvoke v1.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listCommitStatuses(java.lang.String)>(v2);
return v3;
}
public org.kohsuke.github.GHCommitStatus getLastStatus() throws java.io.IOException
{
org.kohsuke.github.GHRepository v1;
org.kohsuke.github.GHCommitStatus v3;
java.lang.String v2;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v2 = v0.<org.kohsuke.github.GHCommit: java.lang.String sha>;
v3 = virtualinvoke v1.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHCommitStatus getLastCommitStatus(java.lang.String)>(v2);
return v3;
}
public org.kohsuke.github.PagedIterable getCheckRuns() throws java.io.IOException
{
org.kohsuke.github.GHRepository v1;
java.lang.String v2;
org.kohsuke.github.PagedIterable v3;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v2 = v0.<org.kohsuke.github.GHCommit: java.lang.String sha>;
v3 = virtualinvoke v1.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable getCheckRuns(java.lang.String)>(v2);
return v3;
}
void populate() throws java.io.IOException
{
org.kohsuke.github.GHRepository v3, v6;
java.lang.String[] v10;
org.kohsuke.github.GitHubRequest$Builder v11;
java.util.List v1;
java.lang.String v7, v8, v9;
org.kohsuke.github.GHCommit$Stats v2;
org.kohsuke.github.Requester v5;
org.kohsuke.github.GHCommit v0;
org.kohsuke.github.GitHub v4;
v0 := @this: org.kohsuke.github.GHCommit;
v1 = v0.<org.kohsuke.github.GHCommit: java.util.List files>;
if v1 != null goto label1;
v2 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit$Stats stats>;
if v2 != null goto label1;
v3 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v4 = virtualinvoke v3.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v6 = v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner>;
v7 = v0.<org.kohsuke.github.GHCommit: java.lang.String sha>;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("commits/\u0001");
v9 = virtualinvoke v6.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v8);
v10 = newarray (java.lang.String)[0];
v11 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v9, v10);
virtualinvoke v11.<org.kohsuke.github.Requester: java.lang.Object fetchInto(java.lang.Object)>(v0);
label1:
return;
}
org.kohsuke.github.GHCommit wrapUp(org.kohsuke.github.GHRepository)
{
org.kohsuke.github.GHRepository v1;
org.kohsuke.github.GHCommit v0;
v0 := @this: org.kohsuke.github.GHCommit;
v1 := @parameter0: org.kohsuke.github.GHRepository;
v0.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHRepository owner> = v1;
return v0;
}
}