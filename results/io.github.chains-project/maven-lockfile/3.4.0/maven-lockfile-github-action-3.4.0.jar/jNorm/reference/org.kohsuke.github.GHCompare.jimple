public class org.kohsuke.github.GHCompare extends java.lang.Object
{
private java.lang.String url;
private java.lang.String html_url;
private java.lang.String permalink_url;
private java.lang.String diff_url;
private java.lang.String patch_url;
private org.kohsuke.github.GHCompare$Status status;
private int ahead_by;
private int behind_by;
private int total_commits;
private org.kohsuke.github.GHCompare$Commit base_commit;
private org.kohsuke.github.GHCompare$Commit merge_base_commit;
private org.kohsuke.github.GHCompare$Commit[] commits;
private org.kohsuke.github.GHCommit$File[] files;
private org.kohsuke.github.GHRepository owner;
private boolean usePaginatedCommits;
public void <init>()
{
org.kohsuke.github.GHCompare v0;
v0 := @this: org.kohsuke.github.GHCompare;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.net.URL getUrl()
{
java.lang.String v1;
org.kohsuke.github.GHCompare v0;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: java.lang.String url>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.net.URL getHtmlUrl()
{
java.lang.String v1;
org.kohsuke.github.GHCompare v0;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: java.lang.String html_url>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.net.URL getPermalinkUrl()
{
java.lang.String v1;
org.kohsuke.github.GHCompare v0;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: java.lang.String permalink_url>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.net.URL getDiffUrl()
{
java.lang.String v1;
org.kohsuke.github.GHCompare v0;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: java.lang.String diff_url>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.net.URL getPatchUrl()
{
java.lang.String v1;
org.kohsuke.github.GHCompare v0;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: java.lang.String patch_url>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public org.kohsuke.github.GHCompare$Status getStatus()
{
org.kohsuke.github.GHCompare$Status v1;
org.kohsuke.github.GHCompare v0;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHCompare$Status status>;
return v1;
}
public int getAheadBy()
{
int v1;
org.kohsuke.github.GHCompare v0;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: int ahead_by>;
return v1;
}
public int getBehindBy()
{
int v1;
org.kohsuke.github.GHCompare v0;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: int behind_by>;
return v1;
}
public int getTotalCommits()
{
int v1;
org.kohsuke.github.GHCompare v0;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: int total_commits>;
return v1;
}
public org.kohsuke.github.GHCompare$Commit getBaseCommit()
{
org.kohsuke.github.GHCompare$Commit v1;
org.kohsuke.github.GHCompare v0;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHCompare$Commit base_commit>;
return v1;
}
public org.kohsuke.github.GHCompare$Commit getMergeBaseCommit()
{
org.kohsuke.github.GHCompare$Commit v1;
org.kohsuke.github.GHCompare v0;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHCompare$Commit merge_base_commit>;
return v1;
}
public org.kohsuke.github.GHCompare$Commit[] getCommits()
{
java.lang.Object[] v3;
org.kohsuke.github.GHCompare v0;
java.io.IOException v4;
java.lang.String v6;
org.kohsuke.github.PagedIterable v1, v2;
org.kohsuke.github.GHException v5;
v0 := @this: org.kohsuke.github.GHCompare;
label1:
v1 = virtualinvoke v0.<org.kohsuke.github.GHCompare: org.kohsuke.github.PagedIterable listCommits()>();
v2 = virtualinvoke v1.<org.kohsuke.github.PagedIterable: org.kohsuke.github.PagedIterable withPageSize(int)>(100);
v3 = virtualinvoke v2.<org.kohsuke.github.PagedIterable: java.lang.Object[] toArray()>();
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new org.kohsuke.github.GHException;
v6 = virtualinvoke v4.<java.io.IOException: java.lang.String getMessage()>();
specialinvoke v5.<org.kohsuke.github.GHException: void <init>(java.lang.String,java.lang.Throwable)>(v6, v4);
throw v5;
catch java.io.IOException from label1 to label2 with label3;
}
public org.kohsuke.github.PagedIterable listCommits()
{
org.kohsuke.github.GHCompare v0;
org.kohsuke.github.GHCompare$1 v3;
boolean v1;
org.kohsuke.github.GHCompare$GHCompareCommitsIterable v2;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: boolean usePaginatedCommits>;
if v1 == 0 goto label1;
v2 = new org.kohsuke.github.GHCompare$GHCompareCommitsIterable;
specialinvoke v2.<org.kohsuke.github.GHCompare$GHCompareCommitsIterable: void <init>(org.kohsuke.github.GHCompare)>(v0);
return v2;
label1:
v3 = new org.kohsuke.github.GHCompare$1;
specialinvoke v3.<org.kohsuke.github.GHCompare$1: void <init>(org.kohsuke.github.GHCompare)>(v0);
return v3;
}
public org.kohsuke.github.GHCommit$File[] getFiles()
{
org.kohsuke.github.GHCommit$File[] v1, v3, v4, v5;
org.kohsuke.github.GHCompare v0;
int v2, v6;
v0 := @this: org.kohsuke.github.GHCompare;
v1 = v0.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHCommit$File[] files>;
v2 = lengthof v1;
v3 = newarray (org.kohsuke.github.GHCommit$File)[v2];
v4 = v0.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHCommit$File[] files>;
v5 = v0.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHCommit$File[] files>;
v6 = lengthof v5;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v4, 0, v3, 0, v6);
return v3;
}
public org.kohsuke.github.GHCompare wrap(org.kohsuke.github.GHRepository)
{
org.kohsuke.github.GHRepository v1;
java.lang.RuntimeException v2;
org.kohsuke.github.GHCompare v0;
v0 := @this: org.kohsuke.github.GHCompare;
v1 := @parameter0: org.kohsuke.github.GHRepository;
v2 = new java.lang.RuntimeException;
specialinvoke v2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Do not use this method.");
throw v2;
}
org.kohsuke.github.GHCompare lateBind(org.kohsuke.github.GHRepository)
{
org.kohsuke.github.GHRepository v1;
org.kohsuke.github.GHCompare v0;
org.kohsuke.github.GHCompare$Commit[] v2;
int v3, v4;
org.kohsuke.github.GHCompare$Commit v5, v6, v7;
v0 := @this: org.kohsuke.github.GHCompare;
v1 := @parameter0: org.kohsuke.github.GHRepository;
v0.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHRepository owner> = v1;
v2 = v0.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHCompare$Commit[] commits>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
virtualinvoke v5.<org.kohsuke.github.GHCompare$Commit: org.kohsuke.github.GHCommit wrapUp(org.kohsuke.github.GHRepository)>(v1);
v4 = v4 + 1;
goto label1;
label2:
v6 = v0.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHCompare$Commit merge_base_commit>;
virtualinvoke v6.<org.kohsuke.github.GHCompare$Commit: org.kohsuke.github.GHCommit wrapUp(org.kohsuke.github.GHRepository)>(v1);
v7 = v0.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHCompare$Commit base_commit>;
virtualinvoke v7.<org.kohsuke.github.GHCompare$Commit: org.kohsuke.github.GHCommit wrapUp(org.kohsuke.github.GHRepository)>(v1);
return v0;
}
}