public class org.kohsuke.github.GHEventPayload$Status extends org.kohsuke.github.GHEventPayload
{
private java.lang.String context;
private java.lang.String description;
private org.kohsuke.github.GHCommitState state;
private org.kohsuke.github.GHCommit commit;
private java.lang.String targetUrl;
public void <init>()
{
org.kohsuke.github.GHEventPayload$Status v0;
v0 := @this: org.kohsuke.github.GHEventPayload$Status;
specialinvoke v0.<org.kohsuke.github.GHEventPayload: void <init>()>();
return;
}
public java.lang.String getContext()
{
org.kohsuke.github.GHEventPayload$Status v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHEventPayload$Status;
v1 = v0.<org.kohsuke.github.GHEventPayload$Status: java.lang.String context>;
return v1;
}
public java.lang.String getTargetUrl()
{
org.kohsuke.github.GHEventPayload$Status v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHEventPayload$Status;
v1 = v0.<org.kohsuke.github.GHEventPayload$Status: java.lang.String targetUrl>;
return v1;
}
public java.lang.String getDescription()
{
org.kohsuke.github.GHEventPayload$Status v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHEventPayload$Status;
v1 = v0.<org.kohsuke.github.GHEventPayload$Status: java.lang.String description>;
return v1;
}
public org.kohsuke.github.GHCommitState getState()
{
org.kohsuke.github.GHEventPayload$Status v0;
org.kohsuke.github.GHCommitState v1;
v0 := @this: org.kohsuke.github.GHEventPayload$Status;
v1 = v0.<org.kohsuke.github.GHEventPayload$Status: org.kohsuke.github.GHCommitState state>;
return v1;
}
public void setState(org.kohsuke.github.GHCommitState)
{
org.kohsuke.github.GHEventPayload$Status v0;
org.kohsuke.github.GHCommitState v1;
java.lang.RuntimeException v2;
v0 := @this: org.kohsuke.github.GHEventPayload$Status;
v1 := @parameter0: org.kohsuke.github.GHCommitState;
v2 = new java.lang.RuntimeException;
specialinvoke v2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Do not use this method.");
throw v2;
}
public org.kohsuke.github.GHCommit getCommit()
{
org.kohsuke.github.GHEventPayload$Status v0;
org.kohsuke.github.GHCommit v1;
v0 := @this: org.kohsuke.github.GHEventPayload$Status;
v1 = v0.<org.kohsuke.github.GHEventPayload$Status: org.kohsuke.github.GHCommit commit>;
return v1;
}
public void setCommit(org.kohsuke.github.GHCommit)
{
org.kohsuke.github.GHEventPayload$Status v0;
java.lang.RuntimeException v2;
org.kohsuke.github.GHCommit v1;
v0 := @this: org.kohsuke.github.GHEventPayload$Status;
v1 := @parameter0: org.kohsuke.github.GHCommit;
v2 = new java.lang.RuntimeException;
specialinvoke v2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Do not use this method.");
throw v2;
}
void lateBind()
{
java.lang.IllegalStateException v2;
org.kohsuke.github.GHCommitState v1;
org.kohsuke.github.GHRepository v3;
org.kohsuke.github.GHEventPayload$Status v0;
org.kohsuke.github.GHCommit v4;
v0 := @this: org.kohsuke.github.GHEventPayload$Status;
v1 = v0.<org.kohsuke.github.GHEventPayload$Status: org.kohsuke.github.GHCommitState state>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Expected status payload, but got something else. Maybe we\'ve got another type of event?");
throw v2;
label1:
specialinvoke v0.<org.kohsuke.github.GHEventPayload: void lateBind()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHEventPayload$Status: org.kohsuke.github.GHRepository getRepository()>();
if v3 == null goto label2;
v4 = v0.<org.kohsuke.github.GHEventPayload$Status: org.kohsuke.github.GHCommit commit>;
virtualinvoke v4.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit wrapUp(org.kohsuke.github.GHRepository)>(v3);
label2:
return;
}
}