public class org.kohsuke.github.GHRateLimit$UnknownLimitRecord extends org.kohsuke.github.GHRateLimit$Record
{
private static final long defaultUnknownLimitResetSeconds;
static long unknownLimitResetSeconds;
static final int unknownLimit;
static final int unknownRemaining;
private static final org.kohsuke.github.GHRateLimit$UnknownLimitRecord DEFAULT;
private static final java.util.concurrent.atomic.AtomicReference current;
private void <init>(long)
{
long v1;
org.kohsuke.github.GHRateLimit$UnknownLimitRecord v0;
v0 := @this: org.kohsuke.github.GHRateLimit$UnknownLimitRecord;
v1 := @parameter0: long;
specialinvoke v0.<org.kohsuke.github.GHRateLimit$Record: void <init>(int,int,long)>(1000000, 999999, v1);
return;
}
static org.kohsuke.github.GHRateLimit$Record current()
{
org.kohsuke.github.GHRateLimit$UnknownLimitRecord v4;
long v5, v6, v7, v8;
java.util.concurrent.atomic.AtomicReference v0, v3, v9;
java.lang.Object v1;
boolean v2;
v0 = <org.kohsuke.github.GHRateLimit$UnknownLimitRecord: java.util.concurrent.atomic.AtomicReference current>;
v1 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: boolean isExpired()>();
if v2 == 0 goto label1;
v3 = <org.kohsuke.github.GHRateLimit$UnknownLimitRecord: java.util.concurrent.atomic.AtomicReference current>;
v4 = new org.kohsuke.github.GHRateLimit$UnknownLimitRecord;
v5 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v6 = v5 / 1000L;
v7 = <org.kohsuke.github.GHRateLimit$UnknownLimitRecord: long unknownLimitResetSeconds>;
v8 = v6 + v7;
specialinvoke v4.<org.kohsuke.github.GHRateLimit$UnknownLimitRecord: void <init>(long)>(v8);
virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v4);
v9 = <org.kohsuke.github.GHRateLimit$UnknownLimitRecord: java.util.concurrent.atomic.AtomicReference current>;
virtualinvoke v9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
label1:
return v1;
}
static void reset()
{
long v2;
java.util.concurrent.atomic.AtomicReference v0;
org.kohsuke.github.GHRateLimit$UnknownLimitRecord v1;
v0 = <org.kohsuke.github.GHRateLimit$UnknownLimitRecord: java.util.concurrent.atomic.AtomicReference current>;
v1 = <org.kohsuke.github.GHRateLimit$UnknownLimitRecord: org.kohsuke.github.GHRateLimit$UnknownLimitRecord DEFAULT>;
virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v1);
v2 = <org.kohsuke.github.GHRateLimit$UnknownLimitRecord: long defaultUnknownLimitResetSeconds>;
<org.kohsuke.github.GHRateLimit$UnknownLimitRecord: long unknownLimitResetSeconds> = v2;
return;
}
static void <clinit>()
{
org.kohsuke.github.GHRateLimit$UnknownLimitRecord v3, v5;
java.time.Duration v0;
long v1, v2;
java.util.concurrent.atomic.AtomicReference v4;
v0 = staticinvoke <java.time.Duration: java.time.Duration ofSeconds(long)>(30L);
v1 = virtualinvoke v0.<java.time.Duration: long getSeconds()>();
<org.kohsuke.github.GHRateLimit$UnknownLimitRecord: long defaultUnknownLimitResetSeconds> = v1;
v2 = <org.kohsuke.github.GHRateLimit$UnknownLimitRecord: long defaultUnknownLimitResetSeconds>;
<org.kohsuke.github.GHRateLimit$UnknownLimitRecord: long unknownLimitResetSeconds> = v2;
v3 = new org.kohsuke.github.GHRateLimit$UnknownLimitRecord;
specialinvoke v3.<org.kohsuke.github.GHRateLimit$UnknownLimitRecord: void <init>(long)>(-9223372036854775808L);
<org.kohsuke.github.GHRateLimit$UnknownLimitRecord: org.kohsuke.github.GHRateLimit$UnknownLimitRecord DEFAULT> = v3;
v4 = new java.util.concurrent.atomic.AtomicReference;
v5 = <org.kohsuke.github.GHRateLimit$UnknownLimitRecord: org.kohsuke.github.GHRateLimit$UnknownLimitRecord DEFAULT>;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(v5);
<org.kohsuke.github.GHRateLimit$UnknownLimitRecord: java.util.concurrent.atomic.AtomicReference current> = v4;
return;
}
}