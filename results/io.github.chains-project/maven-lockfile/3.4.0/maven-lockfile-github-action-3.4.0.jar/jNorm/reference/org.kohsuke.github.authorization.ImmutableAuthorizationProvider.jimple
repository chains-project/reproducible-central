public class org.kohsuke.github.authorization.ImmutableAuthorizationProvider extends java.lang.Object implements org.kohsuke.github.authorization.AuthorizationProvider
{
private final java.lang.String authorization;
public void <init>(java.lang.String)
{
org.kohsuke.github.authorization.ImmutableAuthorizationProvider v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.authorization.ImmutableAuthorizationProvider;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.kohsuke.github.authorization.ImmutableAuthorizationProvider: java.lang.String authorization> = v1;
return;
}
public static org.kohsuke.github.authorization.AuthorizationProvider fromOauthToken(java.lang.String)
{
java.lang.Object[] v2;
org.kohsuke.github.authorization.ImmutableAuthorizationProvider$UserProvider v1;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 = new org.kohsuke.github.authorization.ImmutableAuthorizationProvider$UserProvider;
v2 = newarray (java.lang.Object)[1];
v2[0] = v0;
v3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("token %s", v2);
specialinvoke v1.<org.kohsuke.github.authorization.ImmutableAuthorizationProvider$UserProvider: void <init>(java.lang.String)>(v3);
return v1;
}
public static org.kohsuke.github.authorization.AuthorizationProvider fromOauthToken(java.lang.String, java.lang.String)
{
java.lang.Object[] v3;
org.kohsuke.github.authorization.ImmutableAuthorizationProvider$UserProvider v2;
java.lang.String v0, v1, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = new org.kohsuke.github.authorization.ImmutableAuthorizationProvider$UserProvider;
v3 = newarray (java.lang.Object)[1];
v3[0] = v0;
v4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("token %s", v3);
specialinvoke v2.<org.kohsuke.github.authorization.ImmutableAuthorizationProvider$UserProvider: void <init>(java.lang.String,java.lang.String)>(v4, v1);
return v2;
}
public static org.kohsuke.github.authorization.AuthorizationProvider fromAppInstallationToken(java.lang.String)
{
java.lang.String v0;
org.kohsuke.github.authorization.AuthorizationProvider v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.kohsuke.github.authorization.ImmutableAuthorizationProvider: org.kohsuke.github.authorization.AuthorizationProvider fromOauthToken(java.lang.String,java.lang.String)>(v0, "");
return v1;
}
public static org.kohsuke.github.authorization.AuthorizationProvider fromJwtToken(java.lang.String)
{
java.lang.Object[] v2;
org.kohsuke.github.authorization.ImmutableAuthorizationProvider v1;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 = new org.kohsuke.github.authorization.ImmutableAuthorizationProvider;
v2 = newarray (java.lang.Object)[1];
v2[0] = v0;
v3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Bearer %s", v2);
specialinvoke v1.<org.kohsuke.github.authorization.ImmutableAuthorizationProvider: void <init>(java.lang.String)>(v3);
return v1;
}
public static org.kohsuke.github.authorization.AuthorizationProvider fromLoginAndPassword(java.lang.String, java.lang.String)
{
byte[] v7;
java.lang.IllegalStateException v13;
java.lang.Object[] v2, v9;
java.util.Base64$Encoder v6;
java.nio.charset.Charset v4;
org.kohsuke.github.authorization.ImmutableAuthorizationProvider$UserProvider v11;
java.lang.String v0, v1, v10, v3, v5, v8;
java.io.UnsupportedEncodingException v12;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
label1:
v2 = newarray (java.lang.Object)[2];
v2[0] = v0;
v2[1] = v1;
v3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", v2);
v4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
v5 = virtualinvoke v4.<java.nio.charset.Charset: java.lang.String name()>();
v6 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getEncoder()>();
v7 = virtualinvoke v3.<java.lang.String: byte[] getBytes(java.lang.String)>(v5);
v8 = virtualinvoke v6.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(v7);
v9 = newarray (java.lang.Object)[1];
v9[0] = v8;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Basic %s", v9);
v11 = new org.kohsuke.github.authorization.ImmutableAuthorizationProvider$UserProvider;
specialinvoke v11.<org.kohsuke.github.authorization.ImmutableAuthorizationProvider$UserProvider: void <init>(java.lang.String,java.lang.String)>(v10, v0);
label2:
return v11;
label3:
v12 := @caughtexception;
v13 = new java.lang.IllegalStateException;
specialinvoke v13.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not generate encoded authorization", v12);
throw v13;
catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
}
public java.lang.String getEncodedAuthorization()
{
org.kohsuke.github.authorization.ImmutableAuthorizationProvider v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.authorization.ImmutableAuthorizationProvider;
v1 = v0.<org.kohsuke.github.authorization.ImmutableAuthorizationProvider: java.lang.String authorization>;
return v1;
}
}