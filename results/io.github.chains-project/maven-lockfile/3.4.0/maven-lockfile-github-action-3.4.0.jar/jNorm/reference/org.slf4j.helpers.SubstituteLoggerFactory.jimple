public class org.slf4j.helpers.SubstituteLoggerFactory extends java.lang.Object implements org.slf4j.ILoggerFactory
{
volatile boolean postInitialization;
final java.util.Map loggers;
final java.util.concurrent.LinkedBlockingQueue eventQueue;
public void <init>()
{
java.util.concurrent.ConcurrentHashMap v1;
java.util.concurrent.LinkedBlockingQueue v2;
org.slf4j.helpers.SubstituteLoggerFactory v0;
v0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.slf4j.helpers.SubstituteLoggerFactory: boolean postInitialization> = 0;
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.Map loggers> = v1;
v2 = new java.util.concurrent.LinkedBlockingQueue;
specialinvoke v2.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();
v0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.LinkedBlockingQueue eventQueue> = v2;
return;
}
public synchronized org.slf4j.Logger getLogger(java.lang.String)
{
org.slf4j.helpers.SubstituteLogger v4;
java.util.concurrent.LinkedBlockingQueue v5;
org.slf4j.helpers.SubstituteLoggerFactory v0;
java.util.Map v2, v7;
java.lang.Object v3;
java.lang.String v1;
boolean v6;
v0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.Map loggers>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
v4 = new org.slf4j.helpers.SubstituteLogger;
v5 = v0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.LinkedBlockingQueue eventQueue>;
v6 = v0.<org.slf4j.helpers.SubstituteLoggerFactory: boolean postInitialization>;
specialinvoke v4.<org.slf4j.helpers.SubstituteLogger: void <init>(java.lang.String,java.util.Queue,boolean)>(v1, v5, v6);
v3 = v4;
v7 = v0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.Map loggers>;
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v4);
label1:
return v3;
}
public java.util.List getLoggerNames()
{
java.util.Map v2;
java.util.Set v3;
java.util.ArrayList v1;
org.slf4j.helpers.SubstituteLoggerFactory v0;
v0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;
v1 = new java.util.ArrayList;
v2 = v0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.Map loggers>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Set keySet()>();
specialinvoke v1.<java.util.ArrayList: void <init>(java.util.Collection)>(v3);
return v1;
}
public java.util.List getLoggers()
{
java.util.Collection v3;
java.util.Map v2;
java.util.ArrayList v1;
org.slf4j.helpers.SubstituteLoggerFactory v0;
v0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;
v1 = new java.util.ArrayList;
v2 = v0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.Map loggers>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Collection values()>();
specialinvoke v1.<java.util.ArrayList: void <init>(java.util.Collection)>(v3);
return v1;
}
public java.util.concurrent.LinkedBlockingQueue getEventQueue()
{
java.util.concurrent.LinkedBlockingQueue v1;
org.slf4j.helpers.SubstituteLoggerFactory v0;
v0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;
v1 = v0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.LinkedBlockingQueue eventQueue>;
return v1;
}
public void postInitialization()
{
org.slf4j.helpers.SubstituteLoggerFactory v0;
v0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;
v0.<org.slf4j.helpers.SubstituteLoggerFactory: boolean postInitialization> = 1;
return;
}
public void clear()
{
java.util.concurrent.LinkedBlockingQueue v2;
java.util.Map v1;
org.slf4j.helpers.SubstituteLoggerFactory v0;
v0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;
v1 = v0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.Map loggers>;
interfaceinvoke v1.<java.util.Map: void clear()>();
v2 = v0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.LinkedBlockingQueue eventQueue>;
virtualinvoke v2.<java.util.concurrent.LinkedBlockingQueue: void clear()>();
return;
}
}