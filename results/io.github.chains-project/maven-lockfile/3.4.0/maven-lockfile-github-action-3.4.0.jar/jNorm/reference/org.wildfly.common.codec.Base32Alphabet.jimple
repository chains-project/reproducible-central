public abstract class org.wildfly.common.codec.Base32Alphabet extends org.wildfly.common.codec.Alphabet
{
public static final org.wildfly.common.codec.Base32Alphabet STANDARD;
public static final org.wildfly.common.codec.Base32Alphabet LOWERCASE;
protected void <init>(boolean)
{
org.wildfly.common.codec.Base32Alphabet v0;
boolean v1;
v0 := @this: org.wildfly.common.codec.Base32Alphabet;
v1 := @parameter0: boolean;
specialinvoke v0.<org.wildfly.common.codec.Alphabet: void <init>(boolean)>(v1);
return;
}
public abstract int encode(int);
public abstract int decode(int);
static void <clinit>()
{
org.wildfly.common.codec.Base32Alphabet$2 v1;
org.wildfly.common.codec.Base32Alphabet$1 v0;
v0 = new org.wildfly.common.codec.Base32Alphabet$1;
specialinvoke v0.<org.wildfly.common.codec.Base32Alphabet$1: void <init>(boolean)>(0);
<org.wildfly.common.codec.Base32Alphabet: org.wildfly.common.codec.Base32Alphabet STANDARD> = v0;
v1 = new org.wildfly.common.codec.Base32Alphabet$2;
specialinvoke v1.<org.wildfly.common.codec.Base32Alphabet$2: void <init>(boolean)>(0);
<org.wildfly.common.codec.Base32Alphabet: org.wildfly.common.codec.Base32Alphabet LOWERCASE> = v1;
return;
}
}