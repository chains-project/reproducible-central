class org.wildfly.common.codec.Base64Alphabet$1 extends org.wildfly.common.codec.Base64Alphabet
{
static final boolean $assertionsDisabled;
void <init>(boolean)
{
org.wildfly.common.codec.Base64Alphabet$1 v0;
boolean v1;
v0 := @this: org.wildfly.common.codec.Base64Alphabet$1;
v1 := @parameter0: boolean;
specialinvoke v0.<org.wildfly.common.codec.Base64Alphabet: void <init>(boolean)>(v1);
return;
}
public int encode(int)
{
org.wildfly.common.codec.Base64Alphabet$1 v0;
java.lang.AssertionError v8;
int v1, v2, v3, v4, v5, v6;
boolean v7;
v0 := @this: org.wildfly.common.codec.Base64Alphabet$1;
v1 := @parameter0: int;
if v1 > 25 goto label1;
v2 = 65 + v1;
return v2;
label1:
if v1 > 51 goto label2;
v3 = 97 + v1;
v4 = v3 - 26;
return v4;
label2:
if v1 > 61 goto label3;
v5 = 48 + v1;
v6 = v5 - 52;
return v6;
label3:
if v1 != 62 goto label4;
return 43;
label4:
v7 = <org.wildfly.common.codec.Base64Alphabet$1: boolean $assertionsDisabled>;
if v7 != 0 goto label5;
if v1 == 63 goto label5;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label5:
return 47;
}
public int decode(int) throws java.lang.IllegalArgumentException
{
org.wildfly.common.codec.Base64Alphabet$1 v0;
int v1, v2, v3, v4, v5, v6, v7;
v0 := @this: org.wildfly.common.codec.Base64Alphabet$1;
v1 := @parameter0: int;
if 65 > v1 goto label1;
if v1 > 90 goto label1;
v2 = v1 - 65;
return v2;
label1:
if 97 > v1 goto label2;
if v1 > 122 goto label2;
v3 = v1 - 97;
v4 = v3 + 26;
return v4;
label2:
if 48 > v1 goto label3;
if v1 > 57 goto label3;
v5 = v1 - 48;
v6 = v5 + 52;
return v6;
label3:
if v1 != 43 goto label4;
return 62;
label4:
if v1 != 47 goto label5;
return 63;
label5:
v7 = (int) -1;
return v7;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lorg/wildfly/common/codec/Base64Alphabet;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.wildfly.common.codec.Base64Alphabet$1: boolean $assertionsDisabled> = v2;
return;
}
}