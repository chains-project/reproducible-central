abstract class org.wildfly.common.format.FormatFlags extends org.wildfly.common.flags.Flags
{
void <init>(int)
{
int v1;
org.wildfly.common.format.FormatFlags v0;
v0 := @this: org.wildfly.common.format.FormatFlags;
v1 := @parameter0: int;
specialinvoke v0.<org.wildfly.common.flags.Flags: void <init>(int)>(v1);
return;
}
public final void forbidAll()
{
java.lang.IllegalArgumentException v2;
org.wildfly.common.format.FormatFlags v0;
boolean v1;
v0 := @this: org.wildfly.common.format.FormatFlags;
v1 = virtualinvoke v0.<org.wildfly.common.format.FormatFlags: boolean isEmpty()>();
if v1 != 0 goto label1;
v2 = staticinvoke <org.wildfly.common.format.FormatFlags: java.lang.IllegalArgumentException notAllowed(org.wildfly.common.flags.Flags)>(v0);
throw v2;
label1:
return;
}
public final void forbidAllBut(java.lang.Enum)
{
org.wildfly.common.flags.Flags v2;
java.lang.Enum v1;
org.wildfly.common.format.FormatFlags v0;
v0 := @this: org.wildfly.common.format.FormatFlags;
v1 := @parameter0: java.lang.Enum;
v2 = virtualinvoke v0.<org.wildfly.common.format.FormatFlags: org.wildfly.common.flags.Flags without(java.lang.Enum)>(v1);
virtualinvoke v2.<org.wildfly.common.format.FormatFlags: void forbidAll()>();
return;
}
private static java.lang.IllegalArgumentException notAllowed(org.wildfly.common.flags.Flags)
{
org.wildfly.common.flags.Flags v0;
java.lang.String v2;
java.lang.IllegalArgumentException v1;
v0 := @parameter0: org.wildfly.common.flags.Flags;
v1 = new java.lang.IllegalArgumentException;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.wildfly.common.flags.Flags)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Flags \u0001 not allowed here");
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v2);
return v1;
}
public void forbid(java.lang.Enum)
{
org.wildfly.common.flags.Flags v3, v4;
java.lang.Enum v1;
org.wildfly.common.format.FormatFlags v0;
java.lang.IllegalArgumentException v5;
boolean v2;
v0 := @this: org.wildfly.common.format.FormatFlags;
v1 := @parameter0: java.lang.Enum;
v2 = virtualinvoke v0.<org.wildfly.common.format.FormatFlags: boolean contains(java.lang.Enum)>(v1);
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<org.wildfly.common.format.FormatFlags: org.wildfly.common.flags.Flags value(int)>(0);
v4 = virtualinvoke v3.<org.wildfly.common.format.FormatFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v1);
v5 = staticinvoke <org.wildfly.common.format.FormatFlags: java.lang.IllegalArgumentException notAllowed(org.wildfly.common.flags.Flags)>(v4);
throw v5;
label1:
return;
}
}