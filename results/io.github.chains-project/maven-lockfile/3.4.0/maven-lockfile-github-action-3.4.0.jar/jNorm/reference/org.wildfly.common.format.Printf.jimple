public class org.wildfly.common.format.Printf extends java.lang.Object
{
private static final java.lang.String someSpaces;
private static final java.lang.String someZeroes;
private final java.util.Locale locale;
private volatile java.text.DateFormatSymbols dfs;
public static final org.wildfly.common.format.Printf DEFAULT;
private static final int ST_INITIAL;
private static final int ST_PCT;
private static final int ST_TIME;
private static final int ST_WIDTH;
private static final int ST_DOT;
private static final int ST_PREC;
private static final int ST_DOLLAR;
private static final java.math.BigDecimal NEG_ONE;
private static final java.math.BigDecimal NEG_TEN_EM4;
private static final java.time.temporal.TemporalField MILLIS_OF_INSTANT;
private static final java.time.temporal.TemporalField YEAR_OF_CENTURY;
private static final java.time.temporal.TemporalField CENTURY_OF_YEAR;
static final boolean $assertionsDisabled;
public void <init>(java.util.Locale)
{
org.wildfly.common.format.Printf v0;
java.util.Locale v1;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.util.Locale;
specialinvoke v0.<java.lang.Object: void <init>()>();
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("locale", v1);
v0.<org.wildfly.common.format.Printf: java.util.Locale locale> = v1;
return;
}
public void <init>()
{
org.wildfly.common.format.Printf v0;
java.util.Locale v2;
java.util.Locale$Category v1;
v0 := @this: org.wildfly.common.format.Printf;
v1 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
v2 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>(v1);
specialinvoke v0.<org.wildfly.common.format.Printf: void <init>(java.util.Locale)>(v2);
return;
}
public java.util.Locale getLocale()
{
org.wildfly.common.format.Printf v0;
java.util.Locale v1;
v0 := @this: org.wildfly.common.format.Printf;
v1 = v0.<org.wildfly.common.format.Printf: java.util.Locale locale>;
return v1;
}
public transient java.lang.String format(java.lang.String, java.lang.Object[])
{
org.wildfly.common.format.Printf v0;
java.lang.Object[] v2;
java.lang.StringBuilder v3, v4;
java.lang.String v1, v5;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object[];
v3 = new java.lang.StringBuilder;
specialinvoke v3.<java.lang.StringBuilder: void <init>()>();
v4 = virtualinvoke v0.<org.wildfly.common.format.Printf: java.lang.StringBuilder formatDirect(java.lang.StringBuilder,java.lang.String,java.lang.Object[])>(v3, v1, v2);
v5 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
return v5;
}
public transient java.lang.Appendable formatBuffered(java.lang.Appendable, java.lang.String, java.lang.Object[]) throws java.io.IOException
{
java.lang.Object[] v3;
java.lang.Appendable v1;
org.wildfly.common.format.Printf v0;
int v5, v6;
java.lang.StringBuilder v4, v7;
java.lang.String v2;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.Appendable;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Object[];
v4 = new java.lang.StringBuilder;
v5 = virtualinvoke v2.<java.lang.String: int length()>();
v6 = v5 << 1;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(v6);
v7 = virtualinvoke v0.<org.wildfly.common.format.Printf: java.lang.StringBuilder formatDirect(java.lang.StringBuilder,java.lang.String,java.lang.Object[])>(v4, v2, v3);
interfaceinvoke v1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(v7);
return v1;
}
public transient java.lang.StringBuilder formatDirect(java.lang.StringBuilder, java.lang.String, java.lang.Object[])
{
java.time.temporal.TemporalField v101, v105, v134, v89;
org.wildfly.common.format.Printf v0;
java.lang.Class[] v214, v230, v239, v247, v259;
int v10, v11, v110, v114, v116, v118, v12, v120, v122, v126, v128, v13, v131, v133, v135, v137, v14, v140, v142, v144, v146, v149, v15, v151, v153, v155, v158, v16, v160, v162, v169, v17, v172, v174, v176, v178, v183, v184, v185, v186, v187, v19, v190, v191, v192, v194, v195, v197, v198, v20, v200, v201, v203, v205, v21, v219, v22, v223, v228, v23, v24, v245, v25, v257, v56, v58, v7, v8, v9;
java.util.UnknownFormatConversionException v179, v182, v189, v207, v261;
java.lang.Class v213, v226, v238, v73;
java.lang.AssertionError v242;
java.lang.String v127, v136, v145, v154, v168, v177, v196, v2, v202;
java.util.IllegalFormatPrecisionException v206, v220, v229, v246, v258, v57;
boolean v209, v211, v217, v221, v224, v232, v234, v235, v236, v241, v249, v251, v252, v255, v31, v36, v41, v47, v59, v63, v67, v71;
java.text.DateFormatSymbols v108, v112, v164, v75, v78, v81, v84, v87;
org.wildfly.common.format.NumericFlags v181, v6;
byte v4;
java.time.ZoneId v62, v66, v69;
java.lang.StringBuilder v1, v106, v129, v138, v147, v156, v170;
java.lang.Object[] v3;
long v60, v64;
java.util.TimeZone v68;
java.time.Instant v61, v65, v70;
java.util.MissingFormatArgumentException v193, v199;
org.wildfly.common.flags.Flags v124, v167, v29, v45;
org.wildfly.common.format.GeneralFlag v123, v166, v204, v208, v210, v216, v218, v227, v233, v243, v250, v253, v256, v40, v43, v44, v48, v53, v54, v55;
java.util.IllegalFormatConversionException v212, v225, v237, v72;
java.lang.Object v18, v215, v231, v240, v248, v260;
org.wildfly.common.format.GeneralFlags v180, v5;
org.wildfly.common.format.NumericFlag v244, v254, v27, v28, v30, v32, v33, v34, v35, v37, v38, v39, v42, v46, v49, v50, v51, v52;
java.lang.IllegalStateException v188;
java.time.temporal.ChronoField v100, v102, v103, v104, v107, v111, v115, v117, v119, v121, v125, v130, v132, v139, v141, v143, v148, v150, v152, v157, v159, v161, v163, v171, v173, v175, v74, v77, v80, v83, v86, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99;
java.lang.String[] v109, v113, v165, v76, v79, v82, v85, v88;
java.util.IllegalFormatFlagsException v26;
char v222;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Object[];
v4 = 0;
v5 = <org.wildfly.common.format.GeneralFlags: org.wildfly.common.format.GeneralFlags NONE>;
v6 = <org.wildfly.common.format.NumericFlags: org.wildfly.common.format.NumericFlags NONE>;
v7 = (int) -1;
v8 = v7;
v9 = (int) -1;
v10 = v9;
v11 = (int) -1;
v12 = v11;
v13 = (int) -1;
v14 = v13;
v15 = 0;
v16 = (int) -1;
v17 = v16;
v18 = null;
v19 = 0;
label001:
v20 = virtualinvoke v2.<java.lang.String: int length()>();
if v19 >= v20 goto label121;
v21 = virtualinvoke v2.<java.lang.String: int codePointAt(int)>(v19);
if v4 != 0 goto label003;
if v21 != 37 goto label002;
v17 = v19;
v4 = 1;
v5 = <org.wildfly.common.format.GeneralFlags: org.wildfly.common.format.GeneralFlags NONE>;
v6 = <org.wildfly.common.format.NumericFlags: org.wildfly.common.format.NumericFlags NONE>;
v22 = (int) -1;
v8 = v22;
v23 = (int) -1;
v10 = v23;
v14 = v12;
v24 = (int) -1;
v12 = v24;
goto label120;
label002:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(v21);
goto label120;
label003:
if v4 == 1 goto label004;
if v4 != 6 goto label015;
label004:
if v4 != 1 goto label006;
if v21 != 60 goto label006;
v25 = (int) -1;
if v14 != v25 goto label005;
v26 = new java.util.IllegalFormatFlagsException;
specialinvoke v26.<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>("<");
throw v26;
label005:
v12 = v14;
goto label120;
label006:
tableswitch(v21)
{
case 32: goto label008;
case 33: goto label061;
case 34: goto label061;
case 35: goto label014;
case 36: goto label061;
case 37: goto label061;
case 38: goto label061;
case 39: goto label061;
case 40: goto label012;
case 41: goto label061;
case 42: goto label061;
case 43: goto label009;
case 44: goto label013;
case 45: goto label011;
case 46: goto label007;
case 47: goto label061;
case 48: goto label010;
default: goto label061;
};
label007:
v4 = 4;
goto label120;
label008:
v27 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag SPACE_POSITIVE>;
virtualinvoke v6.<org.wildfly.common.format.NumericFlags: void forbid(java.lang.Enum)>(v27);
v28 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag SPACE_POSITIVE>;
v29 = virtualinvoke v6.<org.wildfly.common.format.NumericFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v28);
v30 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag SIGN>;
v31 = virtualinvoke v29.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v30);
if v31 == 0 goto label120;
v32 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag SPACE_POSITIVE>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbid(java.lang.Enum)>(v32);
goto label120;
label009:
v33 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag SIGN>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbid(java.lang.Enum)>(v33);
v34 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag SIGN>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v34);
v35 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag SPACE_POSITIVE>;
v36 = virtualinvoke v29.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v35);
if v36 == 0 goto label120;
v37 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag SIGN>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbid(java.lang.Enum)>(v37);
goto label120;
label010:
v38 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag ZERO_PAD>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbid(java.lang.Enum)>(v38);
v39 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag ZERO_PAD>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v39);
v40 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
v41 = virtualinvoke v5.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v40);
if v41 == 0 goto label120;
v42 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag ZERO_PAD>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbid(java.lang.Enum)>(v42);
goto label120;
label011:
v43 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
virtualinvoke v5.<org.wildfly.common.format.GeneralFlags: void forbid(java.lang.Enum)>(v43);
v44 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
v45 = virtualinvoke v5.<org.wildfly.common.format.GeneralFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v44);
v46 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag ZERO_PAD>;
v47 = virtualinvoke v29.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v46);
if v47 == 0 goto label120;
v48 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: void forbid(java.lang.Enum)>(v48);
goto label120;
label012:
v49 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag NEGATIVE_PARENTHESES>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbid(java.lang.Enum)>(v49);
v50 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag NEGATIVE_PARENTHESES>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v50);
goto label120;
label013:
v51 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag LOCALE_GROUPING_SEPARATORS>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbid(java.lang.Enum)>(v51);
v52 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag LOCALE_GROUPING_SEPARATORS>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v52);
goto label120;
label014:
v53 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag ALTERNATE>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: void forbid(java.lang.Enum)>(v53);
v54 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag ALTERNATE>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v54);
goto label120;
label015:
if v4 != 2 goto label056;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbidAll()>();
v55 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag ALTERNATE>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: void forbid(java.lang.Enum)>(v55);
v56 = (int) -1;
if v8 == v56 goto label016;
v57 = staticinvoke <org.wildfly.common.format.Printf: java.util.IllegalFormatPrecisionException precisionException(int)>(v8);
throw v57;
label016:
if v18 != null goto label017;
v58 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatPlainString(java.lang.StringBuilder,java.lang.Object,org.wildfly.common.format.GeneralFlags,int,int)>(v1, null, v45, v10, v58);
goto label120;
label017:
v59 = v18 instanceof java.lang.Long;
if v59 == 0 goto label018;
v60 = virtualinvoke v18.<java.lang.Long: long longValue()>();
v61 = staticinvoke <java.time.Instant: java.time.Instant ofEpochMilli(long)>(v60);
v62 = staticinvoke <java.time.ZoneId: java.time.ZoneId systemDefault()>();
staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.Instant,java.time.ZoneId)>(v61, v62);
goto label023;
label018:
v63 = v18 instanceof java.util.Date;
if v63 == 0 goto label019;
v64 = virtualinvoke v18.<java.util.Date: long getTime()>();
v65 = staticinvoke <java.time.Instant: java.time.Instant ofEpochMilli(long)>(v64);
v66 = staticinvoke <java.time.ZoneId: java.time.ZoneId systemDefault()>();
staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.Instant,java.time.ZoneId)>(v65, v66);
goto label023;
label019:
v67 = v18 instanceof java.util.Calendar;
if v67 == 0 goto label022;
v68 = virtualinvoke v18.<java.util.Calendar: java.util.TimeZone getTimeZone()>();
if v68 != null goto label020;
v69 = staticinvoke <java.time.ZoneId: java.time.ZoneId systemDefault()>();
goto label021;
label020:
v69 = virtualinvoke v68.<java.util.TimeZone: java.time.ZoneId toZoneId()>();
label021:
v70 = virtualinvoke v18.<java.util.Calendar: java.time.Instant toInstant()>();
staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.Instant,java.time.ZoneId)>(v70, v69);
goto label023;
label022:
v71 = v18 instanceof java.time.temporal.TemporalAccessor;
if v71 != 0 goto label023;
v72 = new java.util.IllegalFormatConversionException;
v73 = virtualinvoke v18.<java.lang.Object: java.lang.Class getClass()>();
specialinvoke v72.<java.util.IllegalFormatConversionException: void <init>(char,java.lang.Class)>(v21, v73);
throw v72;
label023:
tableswitch(v21)
{
case 65: goto label024;
case 66: goto label026;
case 67: goto label029;
case 68: goto label049;
case 69: goto label054;
case 70: goto label050;
case 71: goto label054;
case 72: goto label032;
case 73: goto label033;
case 74: goto label054;
case 75: goto label054;
case 76: goto label036;
case 77: goto label038;
case 78: goto label040;
case 79: goto label054;
case 80: goto label054;
case 81: goto label041;
case 82: goto label051;
case 83: goto label042;
case 84: goto label053;
case 85: goto label054;
case 86: goto label054;
case 87: goto label054;
case 88: goto label054;
case 89: goto label044;
case 90: goto label046;
case 91: goto label054;
case 92: goto label054;
case 93: goto label054;
case 94: goto label054;
case 95: goto label054;
case 96: goto label054;
case 97: goto label025;
case 98: goto label027;
case 99: goto label048;
case 100: goto label030;
case 101: goto label031;
case 102: goto label054;
case 103: goto label054;
case 104: goto label027;
case 105: goto label054;
case 106: goto label034;
case 107: goto label035;
case 108: goto label037;
case 109: goto label039;
case 110: goto label054;
case 111: goto label054;
case 112: goto label028;
case 113: goto label054;
case 114: goto label052;
case 115: goto label043;
case 116: goto label054;
case 117: goto label054;
case 118: goto label054;
case 119: goto label054;
case 120: goto label054;
case 121: goto label045;
case 122: goto label047;
default: goto label054;
};
label024:
v74 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField DAY_OF_WEEK>;
v75 = virtualinvoke v0.<org.wildfly.common.format.Printf: java.text.DateFormatSymbols getDateFormatSymbols()>();
v76 = virtualinvoke v75.<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>();
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeTextField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,java.lang.String[],org.wildfly.common.format.GeneralFlags,int)>(v1, v18, v74, v76, v45, v10);
goto label055;
label025:
v77 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField DAY_OF_WEEK>;
v78 = virtualinvoke v0.<org.wildfly.common.format.Printf: java.text.DateFormatSymbols getDateFormatSymbols()>();
v79 = virtualinvoke v78.<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>();
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeTextField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,java.lang.String[],org.wildfly.common.format.GeneralFlags,int)>(v1, v18, v77, v79, v45, v10);
goto label055;
label026:
v80 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MONTH_OF_YEAR>;
v81 = virtualinvoke v0.<org.wildfly.common.format.Printf: java.text.DateFormatSymbols getDateFormatSymbols()>();
v82 = virtualinvoke v81.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeTextField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,java.lang.String[],org.wildfly.common.format.GeneralFlags,int)>(v1, v18, v80, v82, v45, v10);
goto label055;
label027:
v83 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MONTH_OF_YEAR>;
v84 = virtualinvoke v0.<org.wildfly.common.format.Printf: java.text.DateFormatSymbols getDateFormatSymbols()>();
v85 = virtualinvoke v84.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeTextField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,java.lang.String[],org.wildfly.common.format.GeneralFlags,int)>(v1, v18, v83, v85, v45, v10);
goto label055;
label028:
v86 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField AMPM_OF_DAY>;
v87 = virtualinvoke v0.<org.wildfly.common.format.Printf: java.text.DateFormatSymbols getDateFormatSymbols()>();
v88 = virtualinvoke v87.<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>();
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeTextField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,java.lang.String[],org.wildfly.common.format.GeneralFlags,int)>(v1, v18, v86, v88, v45, v10);
goto label055;
label029:
v89 = <org.wildfly.common.format.Printf: java.time.temporal.TemporalField CENTURY_OF_YEAR>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v89, v45, v10, 2);
goto label055;
label030:
v90 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField DAY_OF_MONTH>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v90, v45, v10, 2);
goto label055;
label031:
v91 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField DAY_OF_MONTH>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v91, v45, v10, 1);
goto label055;
label032:
v92 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField HOUR_OF_DAY>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v92, v45, v10, 2);
goto label055;
label033:
v93 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField CLOCK_HOUR_OF_AMPM>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v93, v45, v10, 2);
goto label055;
label034:
v94 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField DAY_OF_YEAR>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v94, v45, v10, 3);
goto label055;
label035:
v95 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField HOUR_OF_DAY>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v95, v45, v10, 1);
goto label055;
label036:
v96 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MILLI_OF_SECOND>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v96, v45, v10, 3);
goto label055;
label037:
v97 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField CLOCK_HOUR_OF_AMPM>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v97, v45, v10, 1);
goto label055;
label038:
v98 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MINUTE_OF_HOUR>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v98, v45, v10, 2);
goto label055;
label039:
v99 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MONTH_OF_YEAR>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v99, v45, v10, 2);
goto label055;
label040:
v100 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField NANO_OF_SECOND>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v100, v45, v10, 9);
goto label055;
label041:
v101 = <org.wildfly.common.format.Printf: java.time.temporal.TemporalField MILLIS_OF_INSTANT>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v101, v45, v10, 1);
goto label055;
label042:
v102 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField SECOND_OF_MINUTE>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v102, v45, v10, 2);
goto label055;
label043:
v103 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField INSTANT_SECONDS>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v103, v45, v10, 2);
goto label055;
label044:
v104 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField YEAR_OF_ERA>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v104, v45, v10, 4);
goto label055;
label045:
v105 = <org.wildfly.common.format.Printf: java.time.temporal.TemporalField YEAR_OF_CENTURY>;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v105, v45, v10, 2);
goto label055;
label046:
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeZoneId(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,org.wildfly.common.format.GeneralFlags,int)>(v1, v18, v45, v10);
goto label055;
label047:
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeZoneOffset(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,org.wildfly.common.format.GeneralFlags,int)>(v1, v18, v45, v10);
goto label055;
label048:
v106 = new java.lang.StringBuilder;
specialinvoke v106.<java.lang.StringBuilder: void <init>()>();
v107 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField DAY_OF_WEEK>;
v108 = virtualinvoke v0.<org.wildfly.common.format.Printf: java.text.DateFormatSymbols getDateFormatSymbols()>();
v109 = virtualinvoke v108.<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>();
v110 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeTextField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,java.lang.String[],org.wildfly.common.format.GeneralFlags,int)>(v106, v18, v107, v109, v45, v110);
virtualinvoke v106.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
v111 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MONTH_OF_YEAR>;
v112 = virtualinvoke v0.<org.wildfly.common.format.Printf: java.text.DateFormatSymbols getDateFormatSymbols()>();
v113 = virtualinvoke v112.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();
v114 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeTextField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,java.lang.String[],org.wildfly.common.format.GeneralFlags,int)>(v106, v18, v111, v113, v45, v114);
virtualinvoke v106.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
v115 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField DAY_OF_MONTH>;
v116 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v106, v18, v115, v45, v116, 2);
virtualinvoke v106.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
v117 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField HOUR_OF_DAY>;
v118 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v106, v18, v117, v45, v118, 2);
virtualinvoke v106.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v119 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MINUTE_OF_HOUR>;
v120 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v106, v18, v119, v45, v120, 2);
virtualinvoke v106.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v121 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField SECOND_OF_MINUTE>;
v122 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v106, v18, v121, v45, v122, 2);
virtualinvoke v106.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
v123 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
v124 = virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v123);
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeZoneId(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,org.wildfly.common.format.GeneralFlags,int)>(v106, v18, v124, v10);
virtualinvoke v106.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
v125 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField YEAR_OF_ERA>;
v126 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v106, v18, v125, v45, v126, 4);
v127 = virtualinvoke v106.<java.lang.StringBuilder: java.lang.String toString()>();
v128 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v45, v10, v128, v127);
goto label055;
label049:
v129 = new java.lang.StringBuilder;
specialinvoke v129.<java.lang.StringBuilder: void <init>()>();
v130 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MONTH_OF_YEAR>;
v131 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v129, v18, v130, v45, v131, 2);
virtualinvoke v129.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);
v132 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField DAY_OF_MONTH>;
v133 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v129, v18, v132, v45, v133, 2);
virtualinvoke v129.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);
v134 = <org.wildfly.common.format.Printf: java.time.temporal.TemporalField YEAR_OF_CENTURY>;
v135 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v129, v18, v134, v45, v135, 2);
v136 = virtualinvoke v129.<java.lang.StringBuilder: java.lang.String toString()>();
v137 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v45, v10, v137, v136);
goto label055;
label050:
v138 = new java.lang.StringBuilder;
specialinvoke v138.<java.lang.StringBuilder: void <init>()>();
v139 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField YEAR_OF_ERA>;
v140 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v138, v18, v139, v45, v140, 4);
virtualinvoke v138.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);
v141 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MONTH_OF_YEAR>;
v142 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v138, v18, v141, v45, v142, 2);
virtualinvoke v138.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);
v143 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField DAY_OF_MONTH>;
v144 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v138, v18, v143, v45, v144, 2);
v145 = virtualinvoke v138.<java.lang.StringBuilder: java.lang.String toString()>();
v146 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v45, v10, v146, v145);
goto label055;
label051:
v147 = new java.lang.StringBuilder;
specialinvoke v147.<java.lang.StringBuilder: void <init>()>();
v148 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField HOUR_OF_DAY>;
v149 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v147, v18, v148, v45, v149, 2);
virtualinvoke v147.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v150 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MINUTE_OF_HOUR>;
v151 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v147, v18, v150, v45, v151, 2);
virtualinvoke v147.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v152 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField SECOND_OF_MINUTE>;
v153 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v147, v18, v152, v45, v153, 2);
v154 = virtualinvoke v147.<java.lang.StringBuilder: java.lang.String toString()>();
v155 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v45, v10, v155, v154);
goto label055;
label052:
v156 = new java.lang.StringBuilder;
specialinvoke v156.<java.lang.StringBuilder: void <init>()>();
v157 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField HOUR_OF_DAY>;
v158 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v156, v18, v157, v45, v158, 2);
virtualinvoke v156.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v159 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MINUTE_OF_HOUR>;
v160 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v156, v18, v159, v45, v160, 2);
virtualinvoke v156.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v161 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField SECOND_OF_MINUTE>;
v162 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v156, v18, v161, v45, v162, 2);
virtualinvoke v156.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
v163 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField AMPM_OF_DAY>;
v164 = virtualinvoke v0.<org.wildfly.common.format.Printf: java.text.DateFormatSymbols getDateFormatSymbols()>();
v165 = virtualinvoke v164.<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>();
v166 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
v167 = virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v166);
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeTextField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,java.lang.String[],org.wildfly.common.format.GeneralFlags,int)>(v156, v18, v163, v165, v167, v10);
v168 = virtualinvoke v156.<java.lang.StringBuilder: java.lang.String toString()>();
v169 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v45, v10, v169, v168);
goto label055;
label053:
v170 = new java.lang.StringBuilder;
specialinvoke v170.<java.lang.StringBuilder: void <init>()>();
v171 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField HOUR_OF_DAY>;
v172 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v170, v18, v171, v45, v172, 2);
virtualinvoke v170.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v173 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MINUTE_OF_HOUR>;
v174 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v170, v18, v173, v45, v174, 2);
virtualinvoke v170.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v175 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField SECOND_OF_MINUTE>;
v176 = (int) -1;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatTimeField(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,java.time.temporal.TemporalField,org.wildfly.common.format.GeneralFlags,int,int)>(v170, v18, v175, v45, v176, 2);
v177 = virtualinvoke v170.<java.lang.StringBuilder: java.lang.String toString()>();
v178 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v45, v10, v178, v177);
goto label055;
label054:
v179 = staticinvoke <org.wildfly.common.format.Printf: java.util.UnknownFormatConversionException unknownFormat(java.lang.String,int)>(v2, v19);
throw v179;
label055:
v4 = 0;
goto label120;
label056:
if v4 != 3 goto label061;
lookupswitch(v21)
{
case 36: goto label057;
case 46: goto label060;
default: goto label061;
};
label057:
v180 = <org.wildfly.common.format.GeneralFlags: org.wildfly.common.format.GeneralFlags NONE>;
if v45 != v180 goto label058;
v181 = <org.wildfly.common.format.NumericFlags: org.wildfly.common.format.NumericFlags NONE>;
if v29 == v181 goto label059;
label058:
v182 = staticinvoke <org.wildfly.common.format.Printf: java.util.UnknownFormatConversionException unknownFormat(java.lang.String,int)>(v2, v19);
throw v182;
label059:
v12 = v10;
v183 = (int) -1;
v10 = v183;
v4 = 6;
goto label120;
label060:
v4 = 4;
goto label120;
label061:
if 48 > v21 goto label067;
if v21 > 57 goto label067;
tableswitch(v4)
{
case 1: goto label062;
case 2: goto label066;
case 3: goto label063;
case 4: goto label064;
case 5: goto label065;
case 6: goto label062;
default: goto label066;
};
label062:
v4 = 3;
v10 = v21 - 48;
goto label120;
label063:
v184 = staticinvoke <java.lang.Math: int multiplyExact(int,int)>(v10, 10);
v185 = v21 - 48;
v10 = staticinvoke <java.lang.Math: int addExact(int,int)>(v184, v185);
goto label120;
label064:
v4 = 5;
v8 = v21 - 48;
goto label120;
label065:
v186 = staticinvoke <java.lang.Math: int multiplyExact(int,int)>(v8, 10);
v187 = v21 - 48;
v8 = staticinvoke <java.lang.Math: int addExact(int,int)>(v186, v187);
goto label120;
label066:
v188 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException impossibleSwitchCase(int)>(v4);
throw v188;
label067:
if v4 != 4 goto label068;
v189 = staticinvoke <org.wildfly.common.format.Printf: java.util.UnknownFormatConversionException unknownFormat(java.lang.String,int)>(v2, v19);
throw v189;
label068:
if v21 == 110 goto label078;
v190 = (int) -1;
if v12 == v190 goto label073;
v191 = v12 - 1;
v192 = lengthof v3;
if v191 < v192 goto label072;
v193 = new java.util.MissingFormatArgumentException;
v194 = v17;
if v21 == 116 goto label069;
if v21 != 84 goto label070;
label069:
v195 = v19 + 2;
goto label071;
label070:
v195 = v19 + 1;
label071:
v196 = virtualinvoke v2.<java.lang.String: java.lang.String substring(int,int)>(v194, v195);
specialinvoke v193.<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>(v196);
throw v193;
label072:
v197 = v12 - 1;
v18 = v3[v197];
goto label078;
label073:
v198 = lengthof v3;
if v15 < v198 goto label077;
v199 = new java.util.MissingFormatArgumentException;
v200 = v17;
if v21 == 116 goto label074;
if v21 != 84 goto label075;
label074:
v201 = v19 + 2;
goto label076;
label075:
v201 = v19 + 1;
label076:
v202 = virtualinvoke v2.<java.lang.String: java.lang.String substring(int,int)>(v200, v201);
specialinvoke v199.<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>(v202);
throw v199;
label077:
v203 = v15;
v15 = v15 + 1;
v18 = v3[v203];
v12 = v15;
label078:
tableswitch(v21)
{
case 37: goto label079;
case 38: goto label118;
case 39: goto label118;
case 40: goto label118;
case 41: goto label118;
case 42: goto label118;
case 43: goto label118;
case 44: goto label118;
case 45: goto label118;
case 46: goto label118;
case 47: goto label118;
case 48: goto label118;
case 49: goto label118;
case 50: goto label118;
case 51: goto label118;
case 52: goto label118;
case 53: goto label118;
case 54: goto label118;
case 55: goto label118;
case 56: goto label118;
case 57: goto label118;
case 58: goto label118;
case 59: goto label118;
case 60: goto label118;
case 61: goto label118;
case 62: goto label118;
case 63: goto label118;
case 64: goto label118;
case 65: goto label082;
case 66: goto label083;
case 67: goto label086;
case 68: goto label118;
case 69: goto label097;
case 70: goto label118;
case 71: goto label097;
case 72: goto label104;
case 73: goto label118;
case 74: goto label118;
case 75: goto label118;
case 76: goto label118;
case 77: goto label118;
case 78: goto label118;
case 79: goto label118;
case 80: goto label118;
case 81: goto label118;
case 82: goto label118;
case 83: goto label109;
case 84: goto label112;
case 85: goto label118;
case 86: goto label118;
case 87: goto label118;
case 88: goto label114;
case 89: goto label118;
case 90: goto label118;
case 91: goto label118;
case 92: goto label118;
case 93: goto label118;
case 94: goto label118;
case 95: goto label118;
case 96: goto label118;
case 97: goto label082;
case 98: goto label083;
case 99: goto label086;
case 100: goto label094;
case 101: goto label097;
case 102: goto label097;
case 103: goto label097;
case 104: goto label104;
case 105: goto label118;
case 106: goto label118;
case 107: goto label118;
case 108: goto label118;
case 109: goto label118;
case 110: goto label105;
case 111: goto label106;
case 112: goto label118;
case 113: goto label118;
case 114: goto label118;
case 115: goto label109;
case 116: goto label112;
case 117: goto label118;
case 118: goto label118;
case 119: goto label118;
case 120: goto label114;
default: goto label118;
};
label079:
v204 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: void forbidAllBut(java.lang.Enum)>(v204);
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbidAll()>();
v205 = (int) -1;
if v8 != v205 goto label080;
if v4 != 5 goto label081;
label080:
v206 = staticinvoke <org.wildfly.common.format.Printf: java.util.IllegalFormatPrecisionException precisionException(int)>(v8);
throw v206;
label081:
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatPercent(java.lang.StringBuilder)>(v1);
goto label119;
label082:
v207 = staticinvoke <org.wildfly.common.format.Printf: java.util.UnknownFormatConversionException unknownFormat(java.lang.String,int)>(v2, v19);
throw v207;
label083:
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbidAll()>();
v208 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag ALTERNATE>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: void forbid(java.lang.Enum)>(v208);
v209 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(v21);
if v209 == 0 goto label084;
v210 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v210);
label084:
if v18 == null goto label085;
v211 = v18 instanceof java.lang.Boolean;
if v211 != 0 goto label085;
v212 = new java.util.IllegalFormatConversionException;
v213 = virtualinvoke v18.<java.lang.Object: java.lang.Class getClass()>();
specialinvoke v212.<java.util.IllegalFormatConversionException: void <init>(char,java.lang.Class)>(v21, v213);
throw v212;
label085:
v214 = newarray (java.lang.Class)[0];
v215 = staticinvoke <org.wildfly.common.format.Printf: java.lang.Object checkType(int,java.lang.Object,java.lang.Class,java.lang.Class[])>(v21, v18, class "Ljava/lang/Boolean;", v214);
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatBoolean(java.lang.StringBuilder,java.lang.Object,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v215, v45, v10, v8);
goto label119;
label086:
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbidAll()>();
v216 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: void forbidAllBut(java.lang.Enum)>(v216);
v217 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(v21);
if v217 == 0 goto label087;
v218 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v218);
label087:
v219 = (int) -1;
if v8 != v219 goto label088;
if v4 != 5 goto label089;
label088:
v220 = staticinvoke <org.wildfly.common.format.Printf: java.util.IllegalFormatPrecisionException precisionException(int)>(v8);
throw v220;
label089:
if v18 != null goto label090;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v45, v10, v8, "null");
goto label119;
label090:
v221 = v18 instanceof java.lang.Character;
if v221 == 0 goto label091;
v222 = virtualinvoke v18.<java.lang.Character: char charValue()>();
v223 = v222;
goto label093;
label091:
v224 = v18 instanceof java.lang.Integer;
if v224 == 0 goto label092;
v223 = virtualinvoke v18.<java.lang.Integer: int intValue()>();
goto label093;
label092:
v225 = new java.util.IllegalFormatConversionException;
v226 = virtualinvoke v18.<java.lang.Object: java.lang.Class getClass()>();
specialinvoke v225.<java.util.IllegalFormatConversionException: void <init>(char,java.lang.Class)>(v21, v226);
throw v225;
label093:
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatCharacter(java.lang.StringBuilder,int,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v223, v45, v10, v8);
goto label119;
label094:
v227 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag ALTERNATE>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: void forbid(java.lang.Enum)>(v227);
v228 = (int) -1;
if v8 != v228 goto label095;
if v4 != 5 goto label096;
label095:
v229 = staticinvoke <org.wildfly.common.format.Printf: java.util.IllegalFormatPrecisionException precisionException(int)>(v8);
throw v229;
label096:
v230 = newarray (java.lang.Class)[5];
v230[0] = class "Ljava/lang/Byte;";
v230[1] = class "Ljava/lang/Short;";
v230[2] = class "Ljava/lang/Integer;";
v230[3] = class "Ljava/lang/Long;";
v230[4] = class "Ljava/math/BigInteger;";
v231 = staticinvoke <org.wildfly.common.format.Printf: java.lang.Object checkType(int,java.lang.Object,java.lang.Class,java.lang.Class[])>(v21, v18, class "Ljava/lang/Number;", v230);
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatDecimalInteger(java.lang.StringBuilder,java.lang.Number,org.wildfly.common.format.GeneralFlags,org.wildfly.common.format.NumericFlags,int)>(v1, v231, v45, v29, v10);
goto label119;
label097:
v232 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(v21);
if v232 == 0 goto label098;
v233 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v233);
label098:
if v18 == null goto label099;
v234 = v18 instanceof java.lang.Float;
if v234 != 0 goto label099;
v235 = v18 instanceof java.lang.Double;
if v235 != 0 goto label099;
v236 = v18 instanceof java.math.BigDecimal;
if v236 != 0 goto label099;
v237 = new java.util.IllegalFormatConversionException;
v238 = virtualinvoke v18.<java.lang.Object: java.lang.Class getClass()>();
specialinvoke v237.<java.util.IllegalFormatConversionException: void <init>(char,java.lang.Class)>(v21, v238);
throw v237;
label099:
v239 = newarray (java.lang.Class)[3];
v239[0] = class "Ljava/lang/Float;";
v239[1] = class "Ljava/lang/Double;";
v239[2] = class "Ljava/math/BigDecimal;";
v240 = staticinvoke <org.wildfly.common.format.Printf: java.lang.Object checkType(int,java.lang.Object,java.lang.Class,java.lang.Class[])>(v21, v18, class "Ljava/lang/Number;", v239);
if v21 == 101 goto label100;
if v21 != 69 goto label101;
label100:
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatFloatingPointSci(java.lang.StringBuilder,java.lang.Number,org.wildfly.common.format.GeneralFlags,org.wildfly.common.format.NumericFlags,int,int)>(v1, v240, v45, v29, v10, v8);
goto label119;
label101:
if v21 != 102 goto label102;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatFloatingPointDecimal(java.lang.StringBuilder,java.lang.Number,org.wildfly.common.format.GeneralFlags,org.wildfly.common.format.NumericFlags,int,int)>(v1, v240, v45, v29, v10, v8);
goto label119;
label102:
v241 = <org.wildfly.common.format.Printf: boolean $assertionsDisabled>;
if v241 != 0 goto label103;
if v21 == 103 goto label103;
if v21 == 71 goto label103;
v242 = new java.lang.AssertionError;
specialinvoke v242.<java.lang.AssertionError: void <init>()>();
throw v242;
label103:
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatFloatingPointGeneral(java.lang.StringBuilder,java.lang.Number,org.wildfly.common.format.GeneralFlags,org.wildfly.common.format.NumericFlags,int,int)>(v1, v240, v45, v29, v10, v8);
goto label119;
label104:
v243 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag ALTERNATE>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: void forbid(java.lang.Enum)>(v243);
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbidAll()>();
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatHashCode(java.lang.StringBuilder,java.lang.Object,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v45, v10, v8);
goto label119;
label105:
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbidAll()>();
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: void forbidAll()>();
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatLineSeparator(java.lang.StringBuilder)>(v1);
goto label119;
label106:
v244 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag ZERO_PAD>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbidAllBut(java.lang.Enum)>(v244);
v245 = (int) -1;
if v8 != v245 goto label107;
if v4 != 5 goto label108;
label107:
v246 = staticinvoke <org.wildfly.common.format.Printf: java.util.IllegalFormatPrecisionException precisionException(int)>(v8);
throw v246;
label108:
v247 = newarray (java.lang.Class)[5];
v247[0] = class "Ljava/lang/Byte;";
v247[1] = class "Ljava/lang/Short;";
v247[2] = class "Ljava/lang/Integer;";
v247[3] = class "Ljava/lang/Long;";
v247[4] = class "Ljava/math/BigInteger;";
v248 = staticinvoke <org.wildfly.common.format.Printf: java.lang.Object checkType(int,java.lang.Object,java.lang.Class,java.lang.Class[])>(v21, v18, class "Ljava/lang/Number;", v247);
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatOctalInteger(java.lang.StringBuilder,java.lang.Number,org.wildfly.common.format.GeneralFlags,org.wildfly.common.format.NumericFlags,int)>(v1, v248, v45, v29, v10);
goto label119;
label109:
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbidAll()>();
v249 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(v21);
if v249 == 0 goto label110;
v250 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v250);
label110:
v251 = v18 instanceof java.util.Formattable;
if v251 == 0 goto label111;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatFormattableString(java.lang.StringBuilder,java.util.Formattable,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v45, v10, v8);
goto label119;
label111:
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatPlainString(java.lang.StringBuilder,java.lang.Object,org.wildfly.common.format.GeneralFlags,int,int)>(v1, v18, v45, v10, v8);
goto label119;
label112:
v252 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(v21);
if v252 == 0 goto label113;
v253 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v253);
label113:
v4 = 2;
goto label120;
label114:
v254 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag ZERO_PAD>;
virtualinvoke v29.<org.wildfly.common.format.NumericFlags: void forbidAllBut(java.lang.Enum)>(v254);
v255 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(v21);
if v255 == 0 goto label115;
v256 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
virtualinvoke v45.<org.wildfly.common.format.GeneralFlags: org.wildfly.common.flags.Flags 'with'(java.lang.Enum)>(v256);
label115:
v257 = (int) -1;
if v8 != v257 goto label116;
if v4 != 5 goto label117;
label116:
v258 = staticinvoke <org.wildfly.common.format.Printf: java.util.IllegalFormatPrecisionException precisionException(int)>(v8);
throw v258;
label117:
v259 = newarray (java.lang.Class)[5];
v259[0] = class "Ljava/lang/Byte;";
v259[1] = class "Ljava/lang/Short;";
v259[2] = class "Ljava/lang/Integer;";
v259[3] = class "Ljava/lang/Long;";
v259[4] = class "Ljava/math/BigInteger;";
v260 = staticinvoke <org.wildfly.common.format.Printf: java.lang.Object checkType(int,java.lang.Object,java.lang.Class,java.lang.Class[])>(v21, v18, class "Ljava/lang/Number;", v259);
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatHexInteger(java.lang.StringBuilder,java.lang.Number,org.wildfly.common.format.GeneralFlags,org.wildfly.common.format.NumericFlags,int)>(v1, v260, v45, v29, v10);
goto label119;
label118:
v261 = staticinvoke <org.wildfly.common.format.Printf: java.util.UnknownFormatConversionException unknownFormat(java.lang.String,int)>(v2, v19);
throw v261;
label119:
v4 = 0;
label120:
v19 = virtualinvoke v2.<java.lang.String: int offsetByCodePoints(int,int)>(v19, 1);
goto label001;
label121:
return v1;
}
protected static void appendSpaces(java.lang.StringBuilder, int)
{
int v1;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: int;
staticinvoke <org.wildfly.common.format.Printf: void appendFiller(java.lang.StringBuilder,java.lang.String,int)>(v0, "                                ", v1);
return;
}
protected static void appendZeros(java.lang.StringBuilder, int)
{
int v1;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: int;
staticinvoke <org.wildfly.common.format.Printf: void appendFiller(java.lang.StringBuilder,java.lang.String,int)>(v0, "00000000000000000000000000000000", v1);
return;
}
protected java.text.DateFormatSymbols getDateFormatSymbols()
{
java.lang.Throwable v4;
org.wildfly.common.format.Printf v0;
java.text.DateFormatSymbols v1, v3;
java.util.Locale v2;
v0 := @this: org.wildfly.common.format.Printf;
v1 = v0.<org.wildfly.common.format.Printf: java.text.DateFormatSymbols dfs>;
if v1 != null goto label5;
entermonitor v0;
label1:
v1 = v0.<org.wildfly.common.format.Printf: java.text.DateFormatSymbols dfs>;
if v1 != null goto label2;
v2 = v0.<org.wildfly.common.format.Printf: java.util.Locale locale>;
v3 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)>(v2);
v1 = v3;
v0.<org.wildfly.common.format.Printf: java.text.DateFormatSymbols dfs> = v3;
label2:
exitmonitor v0;
label3:
goto label5;
label4:
v4 := @caughtexception;
exitmonitor v0;
throw v4;
label5:
return v1;
catch java.lang.Throwable from label1 to label3 with label4;
}
protected void formatTimeTextField(java.lang.StringBuilder, java.time.temporal.TemporalAccessor, java.time.temporal.TemporalField, java.lang.String[], org.wildfly.common.format.GeneralFlags, int)
{
java.time.temporal.ChronoField v10, v8;
org.wildfly.common.format.GeneralFlags v5;
java.time.temporal.TemporalField v3;
java.lang.String[] v4;
java.time.temporal.TemporalAccessor v2;
org.wildfly.common.format.Printf v0;
int v11, v13, v6, v7, v9;
java.lang.StringBuilder v1;
java.lang.String v12;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.time.temporal.TemporalAccessor;
v3 := @parameter2: java.time.temporal.TemporalField;
v4 := @parameter3: java.lang.String[];
v5 := @parameter4: org.wildfly.common.format.GeneralFlags;
v6 := @parameter5: int;
v7 = interfaceinvoke v2.<java.time.temporal.TemporalAccessor: int get(java.time.temporal.TemporalField)>(v3);
v8 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField MONTH_OF_YEAR>;
if v3 != v8 goto label1;
v9 = v7 - 1;
goto label3;
label1:
v10 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField DAY_OF_WEEK>;
if v3 != v10 goto label2;
v11 = v7 + 1;
v9 = v11 % 7;
goto label3;
label2:
v9 = v7;
label3:
v12 = v4[v9];
v13 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v5, v6, v13, v12);
return;
}
protected void formatTimeZoneId(java.lang.StringBuilder, java.time.temporal.TemporalAccessor, org.wildfly.common.format.GeneralFlags, int)
{
java.time.temporal.ChronoField v12;
org.wildfly.common.format.GeneralFlags v3;
java.time.temporal.TemporalQuery v7;
java.time.temporal.TemporalAccessor v2;
java.time.zone.ZoneRules v14;
java.util.Locale v18;
int v20, v4;
java.lang.String v19;
boolean v13, v16, v6;
java.util.TimeZone v17;
org.wildfly.common.format.GeneralFlag v5;
char v10;
java.util.IllegalFormatConversionException v9;
java.time.Instant v15;
org.wildfly.common.format.Printf v0;
java.lang.Class v11;
java.lang.Object v8;
java.lang.StringBuilder v1;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.time.temporal.TemporalAccessor;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: int;
v5 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
v6 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v5);
v7 = staticinvoke <java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery zone()>();
v8 = interfaceinvoke v2.<java.time.temporal.TemporalAccessor: java.lang.Object query(java.time.temporal.TemporalQuery)>(v7);
if v8 != null goto label3;
v9 = new java.util.IllegalFormatConversionException;
if v6 == 0 goto label1;
v10 = 84;
goto label2;
label1:
v10 = 116;
label2:
v11 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
specialinvoke v9.<java.util.IllegalFormatConversionException: void <init>(char,java.lang.Class)>(v10, v11);
throw v9;
label3:
v12 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField INSTANT_SECONDS>;
v13 = interfaceinvoke v2.<java.time.temporal.TemporalAccessor: boolean isSupported(java.time.temporal.TemporalField)>(v12);
if v13 == 0 goto label4;
v14 = virtualinvoke v8.<java.time.ZoneId: java.time.zone.ZoneRules getRules()>();
v15 = staticinvoke <java.time.Instant: java.time.Instant 'from'(java.time.temporal.TemporalAccessor)>(v2);
v16 = virtualinvoke v14.<java.time.zone.ZoneRules: boolean isDaylightSavings(java.time.Instant)>(v15);
v17 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.time.ZoneId)>(v8);
v18 = v0.<org.wildfly.common.format.Printf: java.util.Locale locale>;
v19 = virtualinvoke v17.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>(v16, 0, v18);
goto label5;
label4:
v19 = virtualinvoke v8.<java.time.ZoneId: java.lang.String getId()>();
label5:
v20 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v4, v20, v19);
return;
}
protected void formatTimeZoneOffset(java.lang.StringBuilder, java.time.temporal.TemporalAccessor, org.wildfly.common.format.GeneralFlags, int)
{
java.time.temporal.ChronoField v5;
org.wildfly.common.format.GeneralFlags v3;
java.time.temporal.TemporalAccessor v2;
int v10, v13, v15, v4, v6, v7, v8, v9;
boolean v12;
org.wildfly.common.format.GeneralFlag v11;
char v14;
org.wildfly.common.format.Printf v0;
java.lang.StringBuilder v1;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.time.temporal.TemporalAccessor;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: int;
v5 = <java.time.temporal.ChronoField: java.time.temporal.ChronoField OFFSET_SECONDS>;
v6 = interfaceinvoke v2.<java.time.temporal.TemporalAccessor: int get(java.time.temporal.TemporalField)>(v5);
v7 = staticinvoke <java.lang.Math: int abs(int)>(v6);
v8 = v7 / 60;
v9 = v8 % 60;
v10 = v7 / 3600;
v11 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
v12 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v11);
if v4 <= 5 goto label1;
if v12 != 0 goto label1;
v13 = v4 - 5;
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v13);
label1:
if v6 <= 0 goto label2;
v14 = 43;
goto label3;
label2:
v14 = 45;
label3:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v14);
if v10 >= 10 goto label4;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
label4:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v10);
if v9 >= 10 goto label5;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
label5:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v9);
if v4 <= 5 goto label6;
if v12 == 0 goto label6;
v15 = v4 - 5;
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v15);
label6:
return;
}
protected void formatTimeField(java.lang.StringBuilder, java.time.temporal.TemporalAccessor, java.time.temporal.TemporalField, org.wildfly.common.format.GeneralFlags, int, int)
{
org.wildfly.common.format.GeneralFlags v4;
long v7;
java.time.temporal.TemporalAccessor v2;
int v10, v13, v14, v15, v5, v6, v9;
java.lang.String v8;
boolean v12;
org.wildfly.common.format.GeneralFlag v11;
java.time.temporal.TemporalField v3;
org.wildfly.common.format.Printf v0;
java.lang.StringBuilder v1;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.time.temporal.TemporalAccessor;
v3 := @parameter2: java.time.temporal.TemporalField;
v4 := @parameter3: org.wildfly.common.format.GeneralFlags;
v5 := @parameter4: int;
v6 := @parameter5: int;
v7 = interfaceinvoke v2.<java.time.temporal.TemporalAccessor: long getLong(java.time.temporal.TemporalField)>(v3);
v8 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(v7);
v9 = virtualinvoke v8.<java.lang.String: int length()>();
v10 = staticinvoke <java.lang.Math: int max(int,int)>(v6, v9);
v11 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
v12 = virtualinvoke v4.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v11);
if v5 <= v10 goto label1;
if v12 != 0 goto label1;
v13 = v5 - v10;
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v13);
label1:
if v6 <= v9 goto label2;
v14 = v6 - v9;
staticinvoke <org.wildfly.common.format.Printf: void appendZeros(java.lang.StringBuilder,int)>(v1, v14);
label2:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v8);
if v5 <= v10 goto label3;
if v12 == 0 goto label3;
v15 = v5 - v10;
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v15);
label3:
return;
}
protected void formatPercent(java.lang.StringBuilder)
{
org.wildfly.common.format.Printf v0;
org.wildfly.common.format.GeneralFlags v2;
int v3;
java.lang.StringBuilder v1;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 = <org.wildfly.common.format.GeneralFlags: org.wildfly.common.format.GeneralFlags NONE>;
v3 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendChar(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,char)>(v1, v2, 1, v3, 37);
return;
}
protected void formatLineSeparator(java.lang.StringBuilder)
{
java.lang.StringBuilder v1;
org.wildfly.common.format.Printf v0;
java.lang.String v2;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);
return;
}
protected void formatFormattableString(java.lang.StringBuilder, java.util.Formattable, org.wildfly.common.format.GeneralFlags, int, int)
{
java.util.Formattable v2;
org.wildfly.common.format.GeneralFlags v3;
org.wildfly.common.format.GeneralFlag v11, v7, v9;
java.util.Formatter v13;
org.wildfly.common.format.Printf v0;
byte v6;
int v4, v5;
java.lang.StringBuilder v1;
boolean v10, v12, v8;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.util.Formattable;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = 0;
v7 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
v8 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v7);
if v8 == 0 goto label1;
v6 = 1;
label1:
v9 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
v10 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v9);
if v10 == 0 goto label2;
v6 = v6 | 2;
label2:
v11 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag ALTERNATE>;
v12 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v11);
if v12 == 0 goto label3;
v6 = v6 | 4;
label3:
v13 = new java.util.Formatter;
specialinvoke v13.<java.util.Formatter: void <init>(java.lang.Appendable)>(v1);
interfaceinvoke v2.<java.util.Formattable: void formatTo(java.util.Formatter,int,int,int)>(v13, v6, v4, v5);
return;
}
protected void formatPlainString(java.lang.StringBuilder, java.lang.Object, org.wildfly.common.format.GeneralFlags, int, int)
{
org.wildfly.common.format.Printf v0;
org.wildfly.common.format.GeneralFlags v3;
int v4, v5;
java.lang.Object v2;
java.lang.StringBuilder v1;
java.lang.String v6;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(v2);
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v4, v5, v6);
return;
}
protected void formatBoolean(java.lang.StringBuilder, java.lang.Object, org.wildfly.common.format.GeneralFlags, int, int)
{
org.wildfly.common.format.GeneralFlags v3;
org.wildfly.common.format.Printf v0;
int v4, v5;
java.lang.Object v2;
java.lang.StringBuilder v1;
java.lang.String v7;
boolean v6, v8;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = v2 instanceof java.lang.Boolean;
if v6 == 0 goto label1;
v7 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
goto label4;
label1:
if v2 == null goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
v7 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(v8);
label4:
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v4, v5, v7);
return;
}
protected void formatHashCode(java.lang.StringBuilder, java.lang.Object, org.wildfly.common.format.GeneralFlags, int, int)
{
org.wildfly.common.format.GeneralFlags v3;
org.wildfly.common.format.Printf v0;
int v4, v5, v6;
java.lang.Object v2;
java.lang.StringBuilder v1;
java.lang.String v7;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v2);
v7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v6);
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v4, v5, v7);
return;
}
protected void formatCharacter(java.lang.StringBuilder, int, org.wildfly.common.format.GeneralFlags, int, int)
{
org.wildfly.common.format.GeneralFlags v3;
org.wildfly.common.format.Printf v0;
int[] v8;
int v2, v4, v5;
java.lang.StringBuilder v1;
java.lang.String v7;
boolean v6;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: int;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = staticinvoke <java.lang.Character: boolean isBmpCodePoint(int)>(v2);
if v6 == 0 goto label1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendChar(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,char)>(v1, v3, v4, v5, v2);
goto label2;
label1:
v7 = new java.lang.String;
v8 = newarray (int)[1];
v8[0] = v2;
specialinvoke v7.<java.lang.String: void <init>(int[],int,int)>(v8, 0, 1);
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v4, v5, v7);
label2:
return;
}
protected void formatDecimalInteger(java.lang.StringBuilder, java.lang.Number, org.wildfly.common.format.GeneralFlags, org.wildfly.common.format.NumericFlags, int)
{
org.wildfly.common.format.GeneralFlags v3;
org.wildfly.common.format.NumericFlag v11, v13, v15, v17, v9;
org.wildfly.common.format.NumericFlags v4;
java.text.NumberFormat v8;
java.util.Locale v7;
int v22, v5, v6;
java.lang.String v21;
java.lang.Number v2;
boolean v10, v12, v14, v16, v18, v20;
org.wildfly.common.format.GeneralFlag v19;
org.wildfly.common.format.Printf v0;
java.lang.StringBuilder v1;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.Number;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: org.wildfly.common.format.NumericFlags;
v5 := @parameter4: int;
if v2 != null goto label1;
v6 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v5, v6, "null");
goto label8;
label1:
v7 = v0.<org.wildfly.common.format.Printf: java.util.Locale locale>;
v8 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getIntegerInstance(java.util.Locale)>(v7);
v9 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag SIGN>;
v10 = virtualinvoke v4.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v9);
if v10 == 0 goto label2;
virtualinvoke v8.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>("+");
goto label4;
label2:
v11 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag SPACE_POSITIVE>;
v12 = virtualinvoke v4.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v11);
if v12 == 0 goto label3;
virtualinvoke v8.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>(" ");
goto label4;
label3:
virtualinvoke v8.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>("");
label4:
virtualinvoke v8.<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>("");
v13 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag NEGATIVE_PARENTHESES>;
v14 = virtualinvoke v4.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v13);
if v14 == 0 goto label5;
virtualinvoke v8.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>("(");
virtualinvoke v8.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>(")");
goto label6;
label5:
virtualinvoke v8.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>("-");
virtualinvoke v8.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>("");
label6:
v15 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag LOCALE_GROUPING_SEPARATORS>;
v16 = virtualinvoke v4.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v15);
virtualinvoke v8.<java.text.DecimalFormat: void setGroupingUsed(boolean)>(v16);
v17 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag ZERO_PAD>;
v18 = virtualinvoke v4.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v17);
if v18 == 0 goto label7;
virtualinvoke v8.<java.text.DecimalFormat: void setMinimumIntegerDigits(int)>(v5);
label7:
v19 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag ALTERNATE>;
v20 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v19);
virtualinvoke v8.<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(v20);
v21 = virtualinvoke v8.<java.text.DecimalFormat: java.lang.String format(java.lang.Object)>(v2);
v22 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v5, v22, v21);
label8:
return;
}
protected void formatOctalInteger(java.lang.StringBuilder, java.lang.Number, org.wildfly.common.format.GeneralFlags, org.wildfly.common.format.NumericFlags, int)
{
org.wildfly.common.format.GeneralFlags v3;
org.wildfly.common.format.NumericFlag v18;
org.wildfly.common.format.NumericFlags v4;
int v10, v11, v12, v14, v15, v5, v6, v9;
java.lang.Number v2;
boolean v13, v17, v19, v8;
org.wildfly.common.format.GeneralFlag v16, v7;
org.wildfly.common.format.Printf v0;
java.lang.StringBuilder v1;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.Number;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: org.wildfly.common.format.NumericFlags;
v5 := @parameter4: int;
if v2 != null goto label1;
v6 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v5, v6, "null");
goto label8;
label1:
v7 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag ALTERNATE>;
v8 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v7);
v9 = staticinvoke <org.wildfly.common.format.Printf: int bitLengthOf(java.lang.Number)>(v2);
v10 = v9 + 2;
v11 = v10 / 3;
v12 = v5 - v11;
if v8 == 0 goto label2;
v13 = 1;
goto label3;
label2:
v13 = 0;
label3:
v14 = v12 - v13;
v15 = staticinvoke <java.lang.Math: int max(int,int)>(0, v14);
v16 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
v17 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v16);
v18 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag ZERO_PAD>;
v19 = virtualinvoke v4.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v18);
if v19 == 0 goto label5;
if v8 == 0 goto label4;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
label4:
staticinvoke <org.wildfly.common.format.Printf: void appendZeros(java.lang.StringBuilder,int)>(v1, v15);
goto label7;
label5:
if v17 == 0 goto label6;
if v8 == 0 goto label7;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
goto label7;
label6:
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v15);
if v8 == 0 goto label7;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
label7:
staticinvoke <org.wildfly.common.format.Printf: void appendOctal(java.lang.StringBuilder,java.lang.Number)>(v1, v2);
if v17 == 0 goto label8;
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v15);
label8:
return;
}
protected void formatHexInteger(java.lang.StringBuilder, java.lang.Number, org.wildfly.common.format.GeneralFlags, org.wildfly.common.format.NumericFlags, int)
{
org.wildfly.common.format.GeneralFlags v3;
org.wildfly.common.format.NumericFlag v20;
org.wildfly.common.format.NumericFlags v4;
byte v15;
int v11, v12, v13, v14, v16, v17, v5, v6;
java.lang.String v22, v23, v24;
java.lang.Number v2;
boolean v10, v19, v21, v8;
org.wildfly.common.format.GeneralFlag v18, v7, v9;
org.wildfly.common.format.Printf v0;
java.lang.StringBuilder v1;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.Number;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: org.wildfly.common.format.NumericFlags;
v5 := @parameter4: int;
if v2 != null goto label01;
v6 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v5, v6, "null");
goto label14;
label01:
v7 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
v8 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v7);
v9 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag ALTERNATE>;
v10 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v9);
v11 = staticinvoke <org.wildfly.common.format.Printf: int bitLengthOf(java.lang.Number)>(v2);
v12 = v11 + 3;
v13 = v12 / 4;
v14 = v5 - v13;
if v10 == 0 goto label02;
v15 = 2;
goto label03;
label02:
v15 = 0;
label03:
v16 = v14 - v15;
v17 = staticinvoke <java.lang.Math: int max(int,int)>(0, v16);
v18 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
v19 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v18);
v20 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag ZERO_PAD>;
v21 = virtualinvoke v4.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v20);
if v21 == 0 goto label07;
if v10 == 0 goto label06;
if v8 == 0 goto label04;
v22 = "0X";
goto label05;
label04:
v22 = "0x";
label05:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v22);
label06:
staticinvoke <org.wildfly.common.format.Printf: void appendZeros(java.lang.StringBuilder,int)>(v1, v17);
goto label13;
label07:
if v19 == 0 goto label10;
if v10 == 0 goto label13;
if v8 == 0 goto label08;
v23 = "0X";
goto label09;
label08:
v23 = "0x";
label09:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v23);
goto label13;
label10:
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v17);
if v10 == 0 goto label13;
if v8 == 0 goto label11;
v24 = "0X";
goto label12;
label11:
v24 = "0x";
label12:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v24);
label13:
staticinvoke <org.wildfly.common.format.Printf: void appendHex(java.lang.StringBuilder,java.lang.Number,boolean)>(v1, v2, v8);
if v19 == 0 goto label14;
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v17);
label14:
return;
}
protected void formatFloatingPointSci(java.lang.StringBuilder, java.lang.Number, org.wildfly.common.format.GeneralFlags, org.wildfly.common.format.NumericFlags, int, int)
{
org.wildfly.common.format.GeneralFlags v3;
java.text.DecimalFormatSymbols v10;
org.wildfly.common.format.NumericFlags v4;
java.util.Locale v9;
int v14, v15, v5, v6;
java.lang.String v12, v13;
java.lang.Number v2;
boolean v11, v8;
org.wildfly.common.format.GeneralFlag v7;
org.wildfly.common.format.Printf v0;
java.lang.StringBuilder v1;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.Number;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: org.wildfly.common.format.NumericFlags;
v5 := @parameter4: int;
v6 := @parameter5: int;
if v2 != null goto label01;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v5, v6, "null");
goto label11;
label01:
v7 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
v8 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v7);
v9 = v0.<org.wildfly.common.format.Printf: java.util.Locale locale>;
v10 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>(v9);
v11 = specialinvoke v0.<org.wildfly.common.format.Printf: boolean negativeExp(java.lang.Number)>(v2);
if v11 == 0 goto label04;
if v8 == 0 goto label02;
v12 = "E";
goto label03;
label02:
v12 = "e";
label03:
virtualinvoke v10.<java.text.DecimalFormatSymbols: void setExponentSeparator(java.lang.String)>(v12);
goto label07;
label04:
if v8 == 0 goto label05;
v13 = "E+";
goto label06;
label05:
v13 = "e+";
label06:
virtualinvoke v10.<java.text.DecimalFormatSymbols: void setExponentSeparator(java.lang.String)>(v13);
label07:
v14 = (int) -1;
if v6 != v14 goto label08;
v15 = 6;
goto label10;
label08:
if v6 != 0 goto label09;
v15 = 1;
goto label10;
label09:
v15 = v6;
label10:
specialinvoke v0.<org.wildfly.common.format.Printf: void formatDFP(java.lang.StringBuilder,java.lang.Number,org.wildfly.common.format.GeneralFlags,org.wildfly.common.format.NumericFlags,int,int,boolean,java.text.DecimalFormatSymbols,java.lang.String)>(v1, v2, v3, v4, v5, v15, 1, v10, "0.#E00");
label11:
return;
}
protected void formatFloatingPointDecimal(java.lang.StringBuilder, java.lang.Number, org.wildfly.common.format.GeneralFlags, org.wildfly.common.format.NumericFlags, int, int)
{
org.wildfly.common.format.GeneralFlags v3;
java.text.DecimalFormatSymbols v9;
org.wildfly.common.format.NumericFlags v4;
org.wildfly.common.format.Printf v0;
java.util.Locale v8;
int v5, v6, v7;
java.lang.StringBuilder v1;
java.lang.Number v2;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.Number;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: org.wildfly.common.format.NumericFlags;
v5 := @parameter4: int;
v6 := @parameter5: int;
if v2 != null goto label1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v5, v6, "null");
goto label4;
label1:
if v6 != 0 goto label2;
v7 = 1;
goto label3;
label2:
v7 = v6;
label3:
v8 = v0.<org.wildfly.common.format.Printf: java.util.Locale locale>;
v9 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>(v8);
specialinvoke v0.<org.wildfly.common.format.Printf: void formatDFP(java.lang.StringBuilder,java.lang.Number,org.wildfly.common.format.GeneralFlags,org.wildfly.common.format.NumericFlags,int,int,boolean,java.text.DecimalFormatSymbols,java.lang.String)>(v1, v2, v3, v4, v5, v7, 0, v9, "0.#");
label4:
return;
}
protected void formatFloatingPointGeneral(java.lang.StringBuilder, java.lang.Number, org.wildfly.common.format.GeneralFlags, org.wildfly.common.format.NumericFlags, int, int)
{
org.wildfly.common.format.NumericFlags v4;
java.math.BigDecimal v11, v8, v9;
byte v19, v21, v29, v31;
boolean v13, v14, v15, v18, v22, v23, v24, v28, v32, v7;
org.wildfly.common.format.Printf v0;
float v16, v17;
java.lang.StringBuilder v1;
org.wildfly.common.format.GeneralFlags v3;
java.lang.AssertionError v25;
int v10, v12, v5, v6;
java.lang.Number v2;
double v20, v26, v27, v30;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.Number;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: org.wildfly.common.format.NumericFlags;
v5 := @parameter4: int;
v6 := @parameter5: int;
if v2 != null goto label01;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v5, v6, "null");
goto label16;
label01:
v7 = v2 instanceof java.math.BigDecimal;
if v7 == 0 goto label05;
v8 = virtualinvoke v2.<java.math.BigDecimal: java.math.BigDecimal abs()>();
v9 = <org.wildfly.common.format.Printf: java.math.BigDecimal NEG_TEN_EM4>;
v10 = virtualinvoke v8.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(v9);
if v10 < 0 goto label02;
v11 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>(10L, v6);
v12 = virtualinvoke v8.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(v11);
if v12 < 0 goto label03;
label02:
v13 = 1;
goto label04;
label03:
v13 = 0;
label04:
v14 = v13;
goto label14;
label05:
v15 = v2 instanceof java.lang.Float;
if v15 == 0 goto label09;
v16 = virtualinvoke v2.<java.lang.Number: float floatValue()>();
v17 = staticinvoke <java.lang.Math: float abs(float)>(v16);
v18 = staticinvoke <java.lang.Float: boolean isFinite(float)>(v17);
if v18 == 0 goto label07;
v19 = v17 cmpg 0.001F;
if v19 < 0 goto label06;
v20 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, v6);
v21 = v17 cmpl v20;
if v21 < 0 goto label07;
label06:
v22 = 1;
goto label08;
label07:
v22 = 0;
label08:
v14 = v22;
goto label14;
label09:
v23 = <org.wildfly.common.format.Printf: boolean $assertionsDisabled>;
if v23 != 0 goto label10;
v24 = v2 instanceof java.lang.Double;
if v24 != 0 goto label10;
v25 = new java.lang.AssertionError;
specialinvoke v25.<java.lang.AssertionError: void <init>()>();
throw v25;
label10:
v26 = virtualinvoke v2.<java.lang.Number: double doubleValue()>();
v27 = staticinvoke <java.lang.Math: double abs(double)>(v26);
v28 = staticinvoke <java.lang.Double: boolean isFinite(double)>(v27);
if v28 == 0 goto label12;
v29 = v27 cmpg 0.0010000000474974513;
if v29 < 0 goto label11;
v30 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, v6);
v31 = v27 cmpl v30;
if v31 < 0 goto label12;
label11:
v32 = 1;
goto label13;
label12:
v32 = 0;
label13:
v14 = v32;
label14:
if v14 == 0 goto label15;
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatFloatingPointSci(java.lang.StringBuilder,java.lang.Number,org.wildfly.common.format.GeneralFlags,org.wildfly.common.format.NumericFlags,int,int)>(v1, v2, v3, v4, v5, v6);
goto label16;
label15:
virtualinvoke v0.<org.wildfly.common.format.Printf: void formatFloatingPointDecimal(java.lang.StringBuilder,java.lang.Number,org.wildfly.common.format.GeneralFlags,org.wildfly.common.format.NumericFlags,int,int)>(v1, v2, v3, v4, v5, v6);
label16:
return;
}
private void formatDFP(java.lang.StringBuilder, java.lang.Number, org.wildfly.common.format.GeneralFlags, org.wildfly.common.format.NumericFlags, int, int, boolean, java.text.DecimalFormatSymbols, java.lang.String)
{
java.text.DecimalFormatSymbols v8;
org.wildfly.common.format.NumericFlags v4;
boolean v10, v12, v17, v19, v21, v23, v32, v34, v39, v7;
java.math.RoundingMode v28;
java.text.NumberFormat$Field v36, v40;
org.wildfly.common.format.Printf v0;
java.text.AttributedCharacterIterator v29;
java.lang.StringBuilder v1;
org.wildfly.common.format.GeneralFlags v3;
org.wildfly.common.format.NumericFlag v16, v18, v20, v22, v33;
java.lang.AssertionError v42;
int v14, v24, v25, v26, v27, v30, v35, v43, v44, v46, v5, v6;
java.lang.String v13, v9;
java.lang.Number v2;
double v11;
org.wildfly.common.format.GeneralFlag v31;
java.text.DecimalFormat v15;
char v38, v45;
java.lang.Object v37, v41;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.Number;
v3 := @parameter2: org.wildfly.common.format.GeneralFlags;
v4 := @parameter3: org.wildfly.common.format.NumericFlags;
v5 := @parameter4: int;
v6 := @parameter5: int;
v7 := @parameter6: boolean;
v8 := @parameter7: java.text.DecimalFormatSymbols;
v9 := @parameter8: java.lang.String;
v10 = v2 instanceof java.math.BigDecimal;
if v10 != 0 goto label01;
v11 = virtualinvoke v2.<java.lang.Number: double doubleValue()>();
v12 = staticinvoke <java.lang.Double: boolean isFinite(double)>(v11);
if v12 != 0 goto label01;
v13 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(v11);
v14 = (int) -1;
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v3, v5, v14, v13);
return;
label01:
v15 = new java.text.DecimalFormat;
specialinvoke v15.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>(v9, v8);
v16 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag SIGN>;
v17 = virtualinvoke v4.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v16);
if v17 == 0 goto label02;
virtualinvoke v15.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>("+");
goto label04;
label02:
v18 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag SPACE_POSITIVE>;
v19 = virtualinvoke v4.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v18);
if v19 == 0 goto label03;
virtualinvoke v15.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>(" ");
goto label04;
label03:
virtualinvoke v15.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>("");
label04:
virtualinvoke v15.<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>("");
v20 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag NEGATIVE_PARENTHESES>;
v21 = virtualinvoke v4.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v20);
if v21 == 0 goto label05;
virtualinvoke v15.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>("(");
virtualinvoke v15.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>(")");
goto label06;
label05:
virtualinvoke v15.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>("-");
virtualinvoke v15.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>("");
label06:
v22 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag LOCALE_GROUPING_SEPARATORS>;
v23 = virtualinvoke v4.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v22);
virtualinvoke v15.<java.text.DecimalFormat: void setGroupingUsed(boolean)>(v23);
v24 = (int) -1;
if v6 != v24 goto label07;
v25 = 1;
goto label08;
label07:
v25 = v6;
label08:
virtualinvoke v15.<java.text.DecimalFormat: void setMinimumFractionDigits(int)>(v25);
v26 = (int) -1;
if v6 != v26 goto label09;
v27 = 2147483647;
goto label10;
label09:
v27 = v6;
label10:
virtualinvoke v15.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>(v27);
virtualinvoke v15.<java.text.DecimalFormat: void setMinimumIntegerDigits(int)>(1);
if v7 == 0 goto label11;
virtualinvoke v15.<java.text.DecimalFormat: void setMaximumIntegerDigits(int)>(1);
label11:
v28 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;
virtualinvoke v15.<java.text.DecimalFormat: void setRoundingMode(java.math.RoundingMode)>(v28);
v29 = virtualinvoke v15.<java.text.DecimalFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>(v2);
v30 = interfaceinvoke v29.<java.text.AttributedCharacterIterator: int getEndIndex()>();
v31 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
v32 = virtualinvoke v3.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v31);
v33 = <org.wildfly.common.format.NumericFlag: org.wildfly.common.format.NumericFlag ZERO_PAD>;
v34 = virtualinvoke v4.<org.wildfly.common.format.NumericFlags: boolean contains(java.lang.Enum)>(v33);
if v32 != 0 goto label12;
if v34 != 0 goto label12;
if v5 <= v30 goto label12;
v35 = v5 - v30;
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v35);
label12:
v36 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field SIGN>;
v37 = interfaceinvoke v29.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>(v36);
if v37 == null goto label13;
v38 = interfaceinvoke v29.<java.text.AttributedCharacterIterator: char current()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v38);
interfaceinvoke v29.<java.text.AttributedCharacterIterator: char next()>();
goto label12;
label13:
v39 = <org.wildfly.common.format.Printf: boolean $assertionsDisabled>;
if v39 != 0 goto label14;
v40 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field INTEGER>;
v41 = interfaceinvoke v29.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>(v40);
if v41 != null goto label14;
v42 = new java.lang.AssertionError;
specialinvoke v42.<java.lang.AssertionError: void <init>()>();
throw v42;
label14:
if v34 == 0 goto label15;
if v5 <= v30 goto label15;
v43 = v5 - v30;
staticinvoke <org.wildfly.common.format.Printf: void appendZeros(java.lang.StringBuilder,int)>(v1, v43);
label15:
v44 = interfaceinvoke v29.<java.text.AttributedCharacterIterator: int getIndex()>();
if v44 >= v30 goto label16;
v45 = interfaceinvoke v29.<java.text.AttributedCharacterIterator: char current()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v45);
interfaceinvoke v29.<java.text.AttributedCharacterIterator: char next()>();
goto label15;
label16:
if v32 == 0 goto label17;
if v5 <= v30 goto label17;
v46 = v5 - v30;
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v46);
label17:
return;
}
private boolean negativeExp(java.lang.Number)
{
java.math.BigDecimal v3, v5;
org.wildfly.common.format.Printf v0;
byte v10, v9;
int v4, v6;
java.lang.Number v1;
boolean v11, v2, v7;
double v8;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.Number;
v2 = v1 instanceof java.math.BigDecimal;
if v2 == 0 goto label3;
v3 = <java.math.BigDecimal: java.math.BigDecimal ONE>;
v4 = virtualinvoke v1.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(v3);
if v4 >= 0 goto label1;
v5 = <org.wildfly.common.format.Printf: java.math.BigDecimal NEG_ONE>;
v6 = virtualinvoke v1.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(v5);
if v6 <= 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
label3:
v8 = virtualinvoke v1.<java.lang.Number: double doubleValue()>();
v9 = -1.0 cmpg v8;
if v9 >= 0 goto label4;
v10 = v8 cmpg 1.0;
if v10 >= 0 goto label4;
v11 = 1;
goto label5;
label4:
v11 = 0;
label5:
return v11;
}
private static int bitLengthOf(java.lang.Number)
{
long v17;
java.lang.AssertionError v22;
short v3, v7;
byte v2;
int v10, v11, v13, v14, v15, v18, v19, v23, v4, v5, v8, v9;
java.lang.Number v0;
boolean v1, v12, v16, v20, v21, v6;
v0 := @parameter0: java.lang.Number;
v1 = v0 instanceof java.lang.Byte;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<java.lang.Number: byte byteValue()>();
v3 = v2 & 255;
v4 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(v3);
v5 = 32 - v4;
return v5;
label1:
v6 = v0 instanceof java.lang.Short;
if v6 == 0 goto label2;
v7 = virtualinvoke v0.<java.lang.Number: short shortValue()>();
v8 = (int) 65535;
v9 = v7 & v8;
v10 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(v9);
v11 = 32 - v10;
return v11;
label2:
v12 = v0 instanceof java.lang.Integer;
if v12 == 0 goto label3;
v13 = virtualinvoke v0.<java.lang.Number: int intValue()>();
v14 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(v13);
v15 = 32 - v14;
return v15;
label3:
v16 = v0 instanceof java.lang.Long;
if v16 == 0 goto label4;
v17 = virtualinvoke v0.<java.lang.Number: long longValue()>();
v18 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(v17);
v19 = 64 - v18;
return v19;
label4:
v20 = <org.wildfly.common.format.Printf: boolean $assertionsDisabled>;
if v20 != 0 goto label5;
v21 = v0 instanceof java.math.BigInteger;
if v21 != 0 goto label5;
v22 = new java.lang.AssertionError;
specialinvoke v22.<java.lang.AssertionError: void <init>()>();
throw v22;
label5:
v23 = virtualinvoke v0.<java.math.BigInteger: int bitLength()>();
return v23;
}
private static void appendOctal(java.lang.StringBuilder, java.lang.Number)
{
byte v25, v3;
boolean v11, v14, v17, v2, v27, v30, v33, v6;
java.lang.StringBuilder v0;
long v15, v19;
short v12, v4, v7;
int v18, v21, v22, v23, v24, v26, v28, v29, v31, v32, v8, v9;
java.lang.String v10, v13, v16, v20, v5;
java.lang.Number v1;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: java.lang.Number;
v2 = v1 instanceof java.lang.Byte;
if v2 == 0 goto label01;
v3 = virtualinvoke v1.<java.lang.Number: byte byteValue()>();
v4 = v3 & 255;
v5 = staticinvoke <java.lang.Integer: java.lang.String toOctalString(int)>(v4);
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v5);
goto label10;
label01:
v6 = v1 instanceof java.lang.Short;
if v6 == 0 goto label02;
v7 = virtualinvoke v1.<java.lang.Number: short shortValue()>();
v8 = (int) 65535;
v9 = v7 & v8;
v10 = staticinvoke <java.lang.Integer: java.lang.String toOctalString(int)>(v9);
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v10);
goto label10;
label02:
v11 = v1 instanceof java.lang.Integer;
if v11 == 0 goto label03;
v12 = virtualinvoke v1.<java.lang.Number: short shortValue()>();
v13 = staticinvoke <java.lang.Integer: java.lang.String toOctalString(int)>(v12);
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v13);
goto label10;
label03:
v14 = v1 instanceof java.lang.Long;
if v14 == 0 goto label04;
v15 = virtualinvoke v1.<java.lang.Number: long longValue()>();
v16 = staticinvoke <java.lang.Long: java.lang.String toOctalString(long)>(v15);
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v16);
goto label10;
label04:
v17 = v1 instanceof java.math.BigInteger;
if v17 == 0 goto label10;
v18 = virtualinvoke v1.<java.math.BigInteger: int bitLength()>();
if v18 > 64 goto label05;
v19 = virtualinvoke v1.<java.math.BigInteger: long longValue()>();
v20 = staticinvoke <java.lang.Long: java.lang.String toOctalString(long)>(v19);
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v20);
goto label10;
label05:
v21 = v18 + 2;
v22 = v21 / 3;
v23 = v22 * 3;
v24 = 0;
label06:
if v24 >= v23 goto label10;
v25 = 0;
v26 = v23 - v24;
v27 = virtualinvoke v1.<java.math.BigInteger: boolean testBit(int)>(v26);
if v27 == 0 goto label07;
v25 = 4;
label07:
v28 = v23 - v24;
v29 = v28 - 1;
v30 = virtualinvoke v1.<java.math.BigInteger: boolean testBit(int)>(v29);
if v30 == 0 goto label08;
v25 = v25 | 2;
label08:
v31 = v23 - v24;
v32 = v31 - 2;
v33 = virtualinvoke v1.<java.math.BigInteger: boolean testBit(int)>(v32);
if v33 == 0 goto label09;
v25 = v25 | 1;
label09:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v25);
v24 = v24 + 3;
goto label06;
label10:
return;
}
private static void appendHex(java.lang.StringBuilder, java.lang.Number, boolean)
{
byte v4, v43, v45;
boolean v14, v18, v2, v22, v3, v32, v35, v38, v41, v8;
java.lang.StringBuilder v0;
long v19, v24;
short v15, v5, v9;
int v10, v11, v23, v26, v27, v28, v29, v30, v31, v33, v34, v36, v37, v39, v40, v42, v44, v46;
java.lang.String v12, v13, v16, v17, v20, v21, v25, v6, v7;
java.lang.Number v1;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: java.lang.Number;
v2 := @parameter2: boolean;
v3 = v1 instanceof java.lang.Byte;
if v3 == 0 goto label03;
v4 = virtualinvoke v1.<java.lang.Number: byte byteValue()>();
v5 = v4 & 255;
v6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v5);
if v2 == 0 goto label01;
v7 = virtualinvoke v6.<java.lang.String: java.lang.String toUpperCase()>();
goto label02;
label01:
v7 = v6;
label02:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
goto label25;
label03:
v8 = v1 instanceof java.lang.Short;
if v8 == 0 goto label06;
v9 = virtualinvoke v1.<java.lang.Number: short shortValue()>();
v10 = (int) 65535;
v11 = v9 & v10;
v12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v11);
if v2 == 0 goto label04;
v13 = virtualinvoke v12.<java.lang.String: java.lang.String toUpperCase()>();
goto label05;
label04:
v13 = v12;
label05:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v13);
goto label25;
label06:
v14 = v1 instanceof java.lang.Integer;
if v14 == 0 goto label09;
v15 = virtualinvoke v1.<java.lang.Number: short shortValue()>();
v16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v15);
if v2 == 0 goto label07;
v17 = virtualinvoke v16.<java.lang.String: java.lang.String toUpperCase()>();
goto label08;
label07:
v17 = v16;
label08:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v17);
goto label25;
label09:
v18 = v1 instanceof java.lang.Long;
if v18 == 0 goto label12;
v19 = virtualinvoke v1.<java.lang.Number: long longValue()>();
v20 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(v19);
if v2 == 0 goto label10;
v21 = virtualinvoke v20.<java.lang.String: java.lang.String toUpperCase()>();
goto label11;
label10:
v21 = v20;
label11:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v21);
goto label25;
label12:
v22 = v1 instanceof java.math.BigInteger;
if v22 == 0 goto label25;
v23 = virtualinvoke v1.<java.math.BigInteger: int bitLength()>();
if v23 > 64 goto label13;
v24 = virtualinvoke v1.<java.math.BigInteger: long longValue()>();
v25 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(v24);
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v25);
goto label25;
label13:
v26 = v23 + 3;
v27 = v26 / 4;
v28 = v27 * 4;
v29 = 0;
label14:
if v29 >= v28 goto label25;
v30 = 0;
v31 = v28 - v29;
v32 = virtualinvoke v1.<java.math.BigInteger: boolean testBit(int)>(v31);
if v32 == 0 goto label15;
v30 = 8;
label15:
v33 = v28 - v29;
v34 = v33 - 1;
v35 = virtualinvoke v1.<java.math.BigInteger: boolean testBit(int)>(v34);
if v35 == 0 goto label16;
v30 = v30 | 4;
label16:
v36 = v28 - v29;
v37 = v36 - 2;
v38 = virtualinvoke v1.<java.math.BigInteger: boolean testBit(int)>(v37);
if v38 == 0 goto label17;
v30 = v30 | 2;
label17:
v39 = v28 - v29;
v40 = v39 - 3;
v41 = virtualinvoke v1.<java.math.BigInteger: boolean testBit(int)>(v40);
if v41 == 0 goto label18;
v30 = v30 | 1;
label18:
if v30 <= 9 goto label23;
v42 = v30;
if v2 == 0 goto label19;
v43 = 65;
goto label20;
label19:
v43 = 87;
label20:
v30 = v42 + v43;
if v30 <= 9 goto label23;
v44 = v30 - 10;
if v2 == 0 goto label21;
v45 = 65;
goto label22;
label21:
v45 = 97;
label22:
v46 = v44 + v45;
goto label24;
label23:
v46 = v30 + 48;
label24:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v46);
v29 = v29 + 4;
goto label14;
label25:
return;
}
private void appendChar(java.lang.StringBuilder, org.wildfly.common.format.GeneralFlags, int, int, char)
{
org.wildfly.common.format.GeneralFlags v2;
org.wildfly.common.format.GeneralFlag v10, v6;
char v5;
org.wildfly.common.format.Printf v0;
int v12, v13, v3, v4;
java.lang.StringBuilder v1;
java.lang.String v9;
boolean v11, v7, v8;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: org.wildfly.common.format.GeneralFlags;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: char;
v6 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
v7 = virtualinvoke v2.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v6);
if v7 == 0 goto label1;
v8 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(v5);
if v8 == 0 goto label1;
v9 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(v5);
specialinvoke v0.<org.wildfly.common.format.Printf: void appendStr(java.lang.StringBuilder,org.wildfly.common.format.GeneralFlags,int,int,java.lang.String)>(v1, v2, v3, v4, v9);
goto label4;
label1:
if v3 > 1 goto label2;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v5);
goto label4;
label2:
v10 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
v11 = virtualinvoke v2.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v10);
if v11 == 0 goto label3;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v5);
v12 = v3 - 1;
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v12);
goto label4;
label3:
v13 = v3 - 1;
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v13);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v5);
label4:
return;
}
private void appendStr(java.lang.StringBuilder, org.wildfly.common.format.GeneralFlags, int, int, java.lang.String)
{
org.wildfly.common.format.GeneralFlags v2;
java.util.Locale v8;
int v11, v12, v13, v14, v15, v16, v19, v20, v3, v4;
java.lang.String v10, v5, v9;
boolean v18, v7;
org.wildfly.common.format.GeneralFlag v17, v6;
org.wildfly.common.format.Printf v0;
java.lang.StringBuilder v1;
v0 := @this: org.wildfly.common.format.Printf;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: org.wildfly.common.format.GeneralFlags;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: java.lang.String;
v6 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag UPPERCASE>;
v7 = virtualinvoke v2.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v6);
if v7 == 0 goto label1;
v8 = v0.<org.wildfly.common.format.Printf: java.util.Locale locale>;
v9 = virtualinvoke v5.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(v8);
goto label2;
label1:
v9 = v5;
label2:
v10 = v9;
v11 = (int) -1;
if v3 != v11 goto label3;
v12 = (int) -1;
if v4 != v12 goto label3;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v9);
goto label7;
label3:
v13 = virtualinvoke v10.<java.lang.String: int length()>();
v14 = virtualinvoke v10.<java.lang.String: int codePointCount(int,int)>(0, v13);
v15 = (int) -1;
if v4 == v15 goto label4;
if v4 >= v14 goto label4;
v10 = virtualinvoke v10.<java.lang.String: java.lang.String substring(int,int)>(0, v4);
label4:
v16 = (int) -1;
if v3 == v16 goto label6;
if v14 >= v3 goto label6;
v17 = <org.wildfly.common.format.GeneralFlag: org.wildfly.common.format.GeneralFlag LEFT_JUSTIFY>;
v18 = virtualinvoke v2.<org.wildfly.common.format.GeneralFlags: boolean contains(java.lang.Enum)>(v17);
if v18 == 0 goto label5;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v10);
v19 = v3 - v14;
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v19);
goto label7;
label5:
v20 = v3 - v14;
staticinvoke <org.wildfly.common.format.Printf: void appendSpaces(java.lang.StringBuilder,int)>(v1, v20);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v10);
goto label7;
label6:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v10);
label7:
return;
}
private static transient java.lang.Object checkType(int, java.lang.Object, java.lang.Class, java.lang.Class[])
{
java.lang.Class[] v3;
java.util.IllegalFormatConversionException v12;
int v0, v5, v7, v8;
java.lang.Class v13, v2, v9;
java.lang.Object v1, v11, v6;
boolean v10, v4;
v0 := @parameter0: int;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Class;
v3 := @parameter3: java.lang.Class[];
if v1 != null goto label1;
return null;
label1:
v4 = virtualinvoke v2.<java.lang.Class: boolean isInstance(java.lang.Object)>(v1);
if v4 == 0 goto label5;
v5 = lengthof v3;
if v5 != 0 goto label2;
v6 = virtualinvoke v2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v1);
return v6;
label2:
v7 = lengthof v3;
v8 = 0;
label3:
if v8 >= v7 goto label5;
v9 = v3[v8];
v10 = virtualinvoke v9.<java.lang.Class: boolean isInstance(java.lang.Object)>(v1);
if v10 == 0 goto label4;
v11 = virtualinvoke v2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v1);
return v11;
label4:
v8 = v8 + 1;
goto label3;
label5:
v12 = new java.util.IllegalFormatConversionException;
v13 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
specialinvoke v12.<java.util.IllegalFormatConversionException: void <init>(char,java.lang.Class)>(v0, v13);
throw v12;
}
private static void appendFiller(java.lang.StringBuilder, java.lang.String, int)
{
int v2;
java.lang.StringBuilder v0;
java.lang.String v1;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
label1:
if v2 <= 32 goto label2;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);
v2 = v2 - 32;
goto label1;
label2:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v1, 0, v2);
return;
}
private static java.util.IllegalFormatPrecisionException precisionException(int)
{
int v0;
java.util.IllegalFormatPrecisionException v1;
v0 := @parameter0: int;
v1 = new java.util.IllegalFormatPrecisionException;
specialinvoke v1.<java.util.IllegalFormatPrecisionException: void <init>(int)>(v0);
return v1;
}
private static java.util.UnknownFormatConversionException unknownFormat(java.lang.String, int)
{
int v1, v2;
java.util.UnknownFormatConversionException v4;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = virtualinvoke v0.<java.lang.String: int offsetByCodePoints(int,int)>(v1, 1);
v3 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v1, v2);
v4 = staticinvoke <org.wildfly.common.format.Printf: java.util.UnknownFormatConversionException unknownFormat(java.lang.String)>(v3);
return v4;
}
private static java.util.UnknownFormatConversionException unknownFormat(java.lang.String)
{
java.util.UnknownFormatConversionException v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = new java.util.UnknownFormatConversionException;
specialinvoke v1.<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>(v0);
return v1;
}
static void <clinit>()
{
org.wildfly.common.format.Printf$2 v11;
org.wildfly.common.format.Printf$3 v12;
org.wildfly.common.format.Printf$1 v10;
java.math.BigDecimal v6, v7, v9;
org.wildfly.common.format.Printf v3;
java.util.Locale v5;
int v8;
java.lang.Class v0;
java.util.Locale$Category v4;
boolean v1, v2;
v0 = class "Lorg/wildfly/common/format/Printf;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.wildfly.common.format.Printf: boolean $assertionsDisabled> = v2;
v3 = new org.wildfly.common.format.Printf;
v4 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
v5 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>(v4);
specialinvoke v3.<org.wildfly.common.format.Printf: void <init>(java.util.Locale)>(v5);
<org.wildfly.common.format.Printf: org.wildfly.common.format.Printf DEFAULT> = v3;
v6 = <java.math.BigDecimal: java.math.BigDecimal ONE>;
v7 = virtualinvoke v6.<java.math.BigDecimal: java.math.BigDecimal negate()>();
<org.wildfly.common.format.Printf: java.math.BigDecimal NEG_ONE> = v7;
v8 = (int) -4;
v9 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>(10L, v8);
<org.wildfly.common.format.Printf: java.math.BigDecimal NEG_TEN_EM4> = v9;
v10 = new org.wildfly.common.format.Printf$1;
specialinvoke v10.<org.wildfly.common.format.Printf$1: void <init>()>();
<org.wildfly.common.format.Printf: java.time.temporal.TemporalField MILLIS_OF_INSTANT> = v10;
v11 = new org.wildfly.common.format.Printf$2;
specialinvoke v11.<org.wildfly.common.format.Printf$2: void <init>()>();
<org.wildfly.common.format.Printf: java.time.temporal.TemporalField YEAR_OF_CENTURY> = v11;
v12 = new org.wildfly.common.format.Printf$3;
specialinvoke v12.<org.wildfly.common.format.Printf$3: void <init>()>();
<org.wildfly.common.format.Printf: java.time.temporal.TemporalField CENTURY_OF_YEAR> = v12;
return;
}
}