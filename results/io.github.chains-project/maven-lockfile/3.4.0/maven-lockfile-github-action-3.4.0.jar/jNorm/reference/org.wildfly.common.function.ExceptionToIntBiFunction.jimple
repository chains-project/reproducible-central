public interface  org.wildfly.common.function.ExceptionToIntBiFunction extends java.lang.Object
{
public abstract int apply(java.lang.Object, java.lang.Object) throws java.lang.Exception;
public org.wildfly.common.function.ExceptionBiFunction andThen(org.wildfly.common.function.ExceptionIntFunction)
{
org.wildfly.common.function.ExceptionBiFunction v2;
org.wildfly.common.function.ExceptionToIntBiFunction v0;
org.wildfly.common.function.ExceptionIntFunction v1;
v0 := @this: org.wildfly.common.function.ExceptionToIntBiFunction;
v1 := @parameter0: org.wildfly.common.function.ExceptionIntFunction;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <org.wildfly.common.function.ExceptionToIntBiFunction$lambda_andThen_0__3256: org.wildfly.common.function.ExceptionBiFunction bootstrap$(org.wildfly.common.function.ExceptionToIntBiFunction,org.wildfly.common.function.ExceptionIntFunction)>(v0, v1);
return v2;
}
public org.wildfly.common.function.ExceptionBiFunction andThen(org.wildfly.common.function.ExceptionLongFunction)
{
org.wildfly.common.function.ExceptionBiFunction v2;
org.wildfly.common.function.ExceptionToIntBiFunction v0;
org.wildfly.common.function.ExceptionLongFunction v1;
v0 := @this: org.wildfly.common.function.ExceptionToIntBiFunction;
v1 := @parameter0: org.wildfly.common.function.ExceptionLongFunction;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <org.wildfly.common.function.ExceptionToIntBiFunction$lambda_andThen_1__3257: org.wildfly.common.function.ExceptionBiFunction bootstrap$(org.wildfly.common.function.ExceptionToIntBiFunction,org.wildfly.common.function.ExceptionLongFunction)>(v0, v1);
return v2;
}
}