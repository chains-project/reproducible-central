abstract class org.wildfly.common.iteration.Base64EncodingIterator extends org.wildfly.common.iteration.CodePointIterator
{
private final org.wildfly.common.iteration.ByteIterator iter;
private final boolean addPadding;
private int c0;
private int c1;
private int c2;
private int c3;
private int state;
private int offset;
static final boolean $assertionsDisabled;
void <init>(org.wildfly.common.iteration.ByteIterator, boolean)
{
org.wildfly.common.iteration.ByteIterator v1;
org.wildfly.common.iteration.Base64EncodingIterator v0;
boolean v2;
v0 := @this: org.wildfly.common.iteration.Base64EncodingIterator;
v1 := @parameter0: org.wildfly.common.iteration.ByteIterator;
v2 := @parameter1: boolean;
specialinvoke v0.<org.wildfly.common.iteration.CodePointIterator: void <init>()>();
v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter> = v1;
v0.<org.wildfly.common.iteration.Base64EncodingIterator: boolean addPadding> = v2;
return;
}
public boolean hasNext()
{
org.wildfly.common.iteration.ByteIterator v2;
org.wildfly.common.iteration.Base64EncodingIterator v0;
int v1, v4, v5;
boolean v3, v6;
v0 := @this: org.wildfly.common.iteration.Base64EncodingIterator;
v1 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state>;
if v1 != 0 goto label1;
v2 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v3 = virtualinvoke v2.<org.wildfly.common.iteration.ByteIterator: boolean hasNext()>();
if v3 != 0 goto label2;
label1:
v4 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state>;
if v4 <= 0 goto label3;
v5 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state>;
if v5 >= 13 goto label3;
label2:
v6 = 1;
goto label4;
label3:
v6 = 0;
label4:
return v6;
}
public boolean hasPrevious()
{
int v1;
org.wildfly.common.iteration.Base64EncodingIterator v0;
boolean v2;
v0 := @this: org.wildfly.common.iteration.Base64EncodingIterator;
v1 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int offset>;
if v1 <= 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
abstract int calc0(int);
abstract int calc1(int, int);
abstract int calc2(int, int);
abstract int calc3(int);
public int next() throws java.util.NoSuchElementException
{
java.lang.IllegalStateException v43;
org.wildfly.common.iteration.ByteIterator v10, v13, v17, v20, v24, v7;
byte v35, v40;
boolean v1, v14, v21, v34, v39, v6, v8;
org.wildfly.common.iteration.Base64EncodingIterator v0;
java.lang.AssertionError v9;
int v11, v12, v15, v16, v18, v19, v22, v23, v25, v26, v27, v28, v29, v3, v30, v31, v32, v33, v36, v37, v38, v4, v41, v42, v5;
java.util.NoSuchElementException v2;
v0 := @this: org.wildfly.common.iteration.Base64EncodingIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: boolean hasNext()>();
if v1 != 0 goto label01;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label01:
v3 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int offset>;
v4 = v3 + 1;
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int offset> = v4;
v5 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state>;
tableswitch(v5)
{
case 0: goto label02;
case 1: goto label06;
case 2: goto label07;
case 3: goto label08;
case 4: goto label09;
case 5: goto label10;
case 6: goto label11;
case 7: goto label14;
case 8: goto label15;
case 9: goto label16;
case 10: goto label17;
case 11: goto label18;
case 12: goto label21;
default: goto label22;
};
label02:
v6 = <org.wildfly.common.iteration.Base64EncodingIterator: boolean $assertionsDisabled>;
if v6 != 0 goto label03;
v7 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v8 = virtualinvoke v7.<org.wildfly.common.iteration.ByteIterator: boolean hasNext()>();
if v8 != 0 goto label03;
v9 = new java.lang.AssertionError;
specialinvoke v9.<java.lang.AssertionError: void <init>()>();
throw v9;
label03:
v10 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v11 = virtualinvoke v10.<org.wildfly.common.iteration.ByteIterator: int next()>();
v12 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc0(int)>(v11);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0> = v12;
v13 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v14 = virtualinvoke v13.<org.wildfly.common.iteration.ByteIterator: boolean hasNext()>();
if v14 != 0 goto label04;
v15 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc1(int,int)>(v11, 0);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1> = v15;
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 6;
v16 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v16;
label04:
v17 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v18 = virtualinvoke v17.<org.wildfly.common.iteration.ByteIterator: int next()>();
v19 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc1(int,int)>(v11, v18);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1> = v19;
v20 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v21 = virtualinvoke v20.<org.wildfly.common.iteration.ByteIterator: boolean hasNext()>();
if v21 != 0 goto label05;
v22 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc2(int,int)>(v18, 0);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2> = v22;
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 10;
v23 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v23;
label05:
v24 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v25 = virtualinvoke v24.<org.wildfly.common.iteration.ByteIterator: int next()>();
v26 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc2(int,int)>(v18, v25);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2> = v26;
v27 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc3(int)>(v25);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c3> = v27;
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 2;
v28 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v28;
label06:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 2;
v29 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v29;
label07:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 3;
v30 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1>;
return v30;
label08:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 4;
v31 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2>;
return v31;
label09:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 0;
v32 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c3>;
return v32;
label10:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 6;
v33 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v33;
label11:
v34 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: boolean addPadding>;
if v34 == 0 goto label12;
v35 = 7;
goto label13;
label12:
v35 = 13;
label13:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = v35;
v36 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1>;
return v36;
label14:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 8;
return 61;
label15:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 13;
return 61;
label16:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 10;
v37 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v37;
label17:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 11;
v38 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1>;
return v38;
label18:
v39 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: boolean addPadding>;
if v39 == 0 goto label19;
v40 = 12;
goto label20;
label19:
v40 = 14;
label20:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = v40;
v41 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2>;
return v41;
label21:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 14;
return 61;
label22:
v42 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state>;
v43 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException impossibleSwitchCase(int)>(v42);
throw v43;
}
public int peekNext() throws java.util.NoSuchElementException
{
java.lang.IllegalStateException v37;
org.wildfly.common.iteration.ByteIterator v11, v15, v18, v22, v5, v8;
boolean v1, v12, v19, v4, v6;
org.wildfly.common.iteration.Base64EncodingIterator v0;
java.lang.AssertionError v7;
int v10, v13, v14, v16, v17, v20, v21, v23, v24, v25, v26, v27, v28, v29, v3, v30, v31, v32, v33, v34, v35, v36, v9;
java.util.NoSuchElementException v2;
v0 := @this: org.wildfly.common.iteration.Base64EncodingIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: boolean hasNext()>();
if v1 != 0 goto label01;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label01:
v3 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state>;
tableswitch(v3)
{
case 0: goto label02;
case 1: goto label06;
case 2: goto label07;
case 3: goto label08;
case 4: goto label09;
case 5: goto label10;
case 6: goto label11;
case 7: goto label12;
case 8: goto label13;
case 9: goto label14;
case 10: goto label15;
case 11: goto label16;
case 12: goto label17;
default: goto label18;
};
label02:
v4 = <org.wildfly.common.iteration.Base64EncodingIterator: boolean $assertionsDisabled>;
if v4 != 0 goto label03;
v5 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v6 = virtualinvoke v5.<org.wildfly.common.iteration.ByteIterator: boolean hasNext()>();
if v6 != 0 goto label03;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label03:
v8 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v9 = virtualinvoke v8.<org.wildfly.common.iteration.ByteIterator: int next()>();
v10 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc0(int)>(v9);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0> = v10;
v11 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v12 = virtualinvoke v11.<org.wildfly.common.iteration.ByteIterator: boolean hasNext()>();
if v12 != 0 goto label04;
v13 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc1(int,int)>(v9, 0);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1> = v13;
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 5;
v14 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v14;
label04:
v15 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v16 = virtualinvoke v15.<org.wildfly.common.iteration.ByteIterator: int next()>();
v17 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc1(int,int)>(v9, v16);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1> = v17;
v18 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v19 = virtualinvoke v18.<org.wildfly.common.iteration.ByteIterator: boolean hasNext()>();
if v19 != 0 goto label05;
v20 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc2(int,int)>(v16, 0);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2> = v20;
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 9;
v21 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v21;
label05:
v22 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v23 = virtualinvoke v22.<org.wildfly.common.iteration.ByteIterator: int next()>();
v24 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc2(int,int)>(v16, v23);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2> = v24;
v25 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc3(int)>(v23);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c3> = v25;
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 1;
v26 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v26;
label06:
v27 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v27;
label07:
v28 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1>;
return v28;
label08:
v29 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2>;
return v29;
label09:
v30 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c3>;
return v30;
label10:
v31 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v31;
label11:
v32 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1>;
return v32;
label12:
return 61;
label13:
return 61;
label14:
v33 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v33;
label15:
v34 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1>;
return v34;
label16:
v35 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2>;
return v35;
label17:
return 61;
label18:
v36 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state>;
v37 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException impossibleSwitchCase(int)>(v36);
throw v37;
}
public int previous() throws java.util.NoSuchElementException
{
java.lang.IllegalStateException v26;
org.wildfly.common.iteration.ByteIterator v10, v6, v8;
org.wildfly.common.iteration.Base64EncodingIterator v0;
int v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v3, v4, v5, v7, v9;
java.util.NoSuchElementException v2;
boolean v1;
v0 := @this: org.wildfly.common.iteration.Base64EncodingIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: boolean hasPrevious()>();
if v1 != 0 goto label01;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label01:
v3 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int offset>;
v4 = v3 - 1;
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int offset> = v4;
v5 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state>;
tableswitch(v5)
{
case 0: goto label02;
case 1: goto label02;
case 2: goto label03;
case 3: goto label04;
case 4: goto label05;
case 5: goto label02;
case 6: goto label06;
case 7: goto label07;
case 8: goto label08;
case 9: goto label02;
case 10: goto label09;
case 11: goto label10;
case 12: goto label11;
case 13: goto label12;
case 14: goto label13;
case 15: goto label02;
default: goto label14;
};
label02:
v6 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v7 = virtualinvoke v6.<org.wildfly.common.iteration.ByteIterator: int previous()>();
v8 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v9 = virtualinvoke v8.<org.wildfly.common.iteration.ByteIterator: int previous()>();
v10 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v11 = virtualinvoke v10.<org.wildfly.common.iteration.ByteIterator: int previous()>();
v12 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc0(int)>(v11);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0> = v12;
v13 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc1(int,int)>(v11, v9);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1> = v13;
v14 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc2(int,int)>(v9, v7);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2> = v14;
v15 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc3(int)>(v7);
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c3> = v15;
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 4;
v16 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c3>;
return v16;
label03:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 1;
v17 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v17;
label04:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 2;
v18 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1>;
return v18;
label05:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 3;
v19 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2>;
return v19;
label06:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 5;
v20 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v20;
label07:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 6;
v21 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1>;
return v21;
label08:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 7;
return 61;
label09:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 9;
v22 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v22;
label10:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 10;
v23 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1>;
return v23;
label11:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 11;
v24 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2>;
return v24;
label12:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 8;
return 61;
label13:
v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state> = 12;
return 61;
label14:
v25 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state>;
v26 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException impossibleSwitchCase(int)>(v25);
throw v26;
}
public int peekPrevious() throws java.util.NoSuchElementException
{
java.lang.IllegalStateException v16;
org.wildfly.common.iteration.ByteIterator v4;
org.wildfly.common.iteration.Base64EncodingIterator v0;
int v10, v11, v12, v13, v14, v15, v3, v5, v6, v7, v8, v9;
java.util.NoSuchElementException v2;
boolean v1;
v0 := @this: org.wildfly.common.iteration.Base64EncodingIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: boolean hasPrevious()>();
if v1 != 0 goto label01;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label01:
v3 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state>;
tableswitch(v3)
{
case 0: goto label02;
case 1: goto label02;
case 2: goto label03;
case 3: goto label04;
case 4: goto label05;
case 5: goto label02;
case 6: goto label06;
case 7: goto label07;
case 8: goto label08;
case 9: goto label02;
case 10: goto label09;
case 11: goto label10;
case 12: goto label11;
case 13: goto label12;
case 14: goto label13;
case 15: goto label02;
default: goto label14;
};
label02:
v4 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: org.wildfly.common.iteration.ByteIterator iter>;
v5 = virtualinvoke v4.<org.wildfly.common.iteration.ByteIterator: int peekPrevious()>();
v6 = virtualinvoke v0.<org.wildfly.common.iteration.Base64EncodingIterator: int calc3(int)>(v5);
return v6;
label03:
v7 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v7;
label04:
v8 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1>;
return v8;
label05:
v9 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2>;
return v9;
label06:
v10 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v10;
label07:
v11 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1>;
return v11;
label08:
return 61;
label09:
v12 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c0>;
return v12;
label10:
v13 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c1>;
return v13;
label11:
v14 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int c2>;
return v14;
label12:
return 61;
label13:
return 61;
label14:
v15 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int state>;
v16 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException impossibleSwitchCase(int)>(v15);
throw v16;
}
public long getIndex()
{
int v1;
org.wildfly.common.iteration.Base64EncodingIterator v0;
v0 := @this: org.wildfly.common.iteration.Base64EncodingIterator;
v1 = v0.<org.wildfly.common.iteration.Base64EncodingIterator: int offset>;
return v1;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lorg/wildfly/common/iteration/Base64EncodingIterator;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.wildfly.common.iteration.Base64EncodingIterator: boolean $assertionsDisabled> = v2;
return;
}
}