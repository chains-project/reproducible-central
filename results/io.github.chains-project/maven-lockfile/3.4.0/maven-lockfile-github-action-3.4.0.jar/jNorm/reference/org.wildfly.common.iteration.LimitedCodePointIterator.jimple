final class org.wildfly.common.iteration.LimitedCodePointIterator extends org.wildfly.common.iteration.CodePointIterator
{
private final org.wildfly.common.iteration.CodePointIterator iter;
private final long size;
private long offset;
void <init>(org.wildfly.common.iteration.CodePointIterator, long)
{
long v2;
org.wildfly.common.iteration.LimitedCodePointIterator v0;
org.wildfly.common.iteration.CodePointIterator v1;
v0 := @this: org.wildfly.common.iteration.LimitedCodePointIterator;
v1 := @parameter0: org.wildfly.common.iteration.CodePointIterator;
v2 := @parameter1: long;
specialinvoke v0.<org.wildfly.common.iteration.CodePointIterator: void <init>()>();
v0.<org.wildfly.common.iteration.LimitedCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter> = v1;
v0.<org.wildfly.common.iteration.LimitedCodePointIterator: long size> = v2;
v0.<org.wildfly.common.iteration.LimitedCodePointIterator: long offset> = 0L;
return;
}
public boolean hasNext()
{
org.wildfly.common.iteration.LimitedCodePointIterator v0;
byte v3;
long v1, v2;
org.wildfly.common.iteration.CodePointIterator v4;
boolean v5, v6;
v0 := @this: org.wildfly.common.iteration.LimitedCodePointIterator;
v1 = v0.<org.wildfly.common.iteration.LimitedCodePointIterator: long offset>;
v2 = v0.<org.wildfly.common.iteration.LimitedCodePointIterator: long size>;
v3 = v1 cmp v2;
if v3 >= 0 goto label1;
v4 = v0.<org.wildfly.common.iteration.LimitedCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v5 = virtualinvoke v4.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v5 == 0 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
public boolean hasPrevious()
{
org.wildfly.common.iteration.LimitedCodePointIterator v0;
byte v2;
long v1;
boolean v3;
v0 := @this: org.wildfly.common.iteration.LimitedCodePointIterator;
v1 = v0.<org.wildfly.common.iteration.LimitedCodePointIterator: long offset>;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public int next()
{
org.wildfly.common.iteration.LimitedCodePointIterator v0;
int v6;
long v3, v4;
java.util.NoSuchElementException v2;
org.wildfly.common.iteration.CodePointIterator v5;
boolean v1;
v0 := @this: org.wildfly.common.iteration.LimitedCodePointIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.LimitedCodePointIterator: boolean hasNext()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<org.wildfly.common.iteration.LimitedCodePointIterator: long offset>;
v4 = v3 + 1L;
v0.<org.wildfly.common.iteration.LimitedCodePointIterator: long offset> = v4;
v5 = v0.<org.wildfly.common.iteration.LimitedCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v6 = virtualinvoke v5.<org.wildfly.common.iteration.CodePointIterator: int next()>();
return v6;
}
public int peekNext() throws java.util.NoSuchElementException
{
org.wildfly.common.iteration.LimitedCodePointIterator v0;
int v4;
java.util.NoSuchElementException v2;
org.wildfly.common.iteration.CodePointIterator v3;
boolean v1;
v0 := @this: org.wildfly.common.iteration.LimitedCodePointIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.LimitedCodePointIterator: boolean hasNext()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<org.wildfly.common.iteration.LimitedCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v4 = virtualinvoke v3.<org.wildfly.common.iteration.CodePointIterator: int peekNext()>();
return v4;
}
public int previous()
{
org.wildfly.common.iteration.LimitedCodePointIterator v0;
int v6;
long v3, v4;
java.util.NoSuchElementException v2;
org.wildfly.common.iteration.CodePointIterator v5;
boolean v1;
v0 := @this: org.wildfly.common.iteration.LimitedCodePointIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.LimitedCodePointIterator: boolean hasPrevious()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<org.wildfly.common.iteration.LimitedCodePointIterator: long offset>;
v4 = v3 - 1L;
v0.<org.wildfly.common.iteration.LimitedCodePointIterator: long offset> = v4;
v5 = v0.<org.wildfly.common.iteration.LimitedCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v6 = virtualinvoke v5.<org.wildfly.common.iteration.CodePointIterator: int previous()>();
return v6;
}
public int peekPrevious() throws java.util.NoSuchElementException
{
org.wildfly.common.iteration.LimitedCodePointIterator v0;
int v4;
java.util.NoSuchElementException v2;
org.wildfly.common.iteration.CodePointIterator v3;
boolean v1;
v0 := @this: org.wildfly.common.iteration.LimitedCodePointIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.LimitedCodePointIterator: boolean hasPrevious()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<org.wildfly.common.iteration.LimitedCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v4 = virtualinvoke v3.<org.wildfly.common.iteration.CodePointIterator: int peekPrevious()>();
return v4;
}
public long getIndex()
{
long v1;
org.wildfly.common.iteration.LimitedCodePointIterator v0;
v0 := @this: org.wildfly.common.iteration.LimitedCodePointIterator;
v1 = v0.<org.wildfly.common.iteration.LimitedCodePointIterator: long offset>;
return v1;
}
}