final class org.wildfly.common.iteration.SkippingCodePointIterator extends org.wildfly.common.iteration.CodePointIterator
{
private final org.wildfly.common.iteration.CodePointIterator iter;
private final java.util.function.IntPredicate predicate;
void <init>(org.wildfly.common.iteration.CodePointIterator, java.util.function.IntPredicate)
{
org.wildfly.common.iteration.CodePointIterator v1;
org.wildfly.common.iteration.SkippingCodePointIterator v0;
java.util.function.IntPredicate v2;
v0 := @this: org.wildfly.common.iteration.SkippingCodePointIterator;
v1 := @parameter0: org.wildfly.common.iteration.CodePointIterator;
v2 := @parameter1: java.util.function.IntPredicate;
specialinvoke v0.<org.wildfly.common.iteration.CodePointIterator: void <init>()>();
v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter> = v1;
v0.<org.wildfly.common.iteration.SkippingCodePointIterator: java.util.function.IntPredicate predicate> = v2;
return;
}
public boolean hasNext()
{
int v3;
org.wildfly.common.iteration.CodePointIterator v1;
org.wildfly.common.iteration.SkippingCodePointIterator v0;
boolean v2, v4, v5;
v0 := @this: org.wildfly.common.iteration.SkippingCodePointIterator;
v1 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v2 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: int peekNext()>();
v4 = specialinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: boolean skip(int)>(v3);
if v4 != 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public boolean hasPrevious()
{
int v3;
org.wildfly.common.iteration.CodePointIterator v1;
org.wildfly.common.iteration.SkippingCodePointIterator v0;
boolean v2, v4, v5;
v0 := @this: org.wildfly.common.iteration.SkippingCodePointIterator;
v1 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v2 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: boolean hasPrevious()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: int peekPrevious()>();
v4 = specialinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: boolean skip(int)>(v3);
if v4 != 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public int next()
{
int v4;
java.util.NoSuchElementException v2;
org.wildfly.common.iteration.CodePointIterator v3;
org.wildfly.common.iteration.SkippingCodePointIterator v0;
boolean v1;
v0 := @this: org.wildfly.common.iteration.SkippingCodePointIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: boolean hasNext()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v4 = virtualinvoke v3.<org.wildfly.common.iteration.CodePointIterator: int next()>();
return v4;
}
public int peekNext() throws java.util.NoSuchElementException
{
org.wildfly.common.iteration.CodePointIterator v1, v4;
int v5, v6;
java.util.NoSuchElementException v3;
org.wildfly.common.iteration.SkippingCodePointIterator v0;
boolean v2, v7;
v0 := @this: org.wildfly.common.iteration.SkippingCodePointIterator;
v1 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v2 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v2 != 0 goto label1;
v3 = new java.util.NoSuchElementException;
specialinvoke v3.<java.util.NoSuchElementException: void <init>()>();
throw v3;
label1:
v4 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v5 = virtualinvoke v4.<org.wildfly.common.iteration.CodePointIterator: int peekNext()>();
v6 = specialinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: int seekNext(int)>(v5);
v7 = specialinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: boolean skip(int)>(v6);
if v7 != 0 goto label2;
return v6;
label2:
return v6;
}
private int seekNext(int) throws java.util.NoSuchElementException
{
org.wildfly.common.iteration.CodePointIterator v2, v4, v8;
int v1, v5, v7;
org.wildfly.common.iteration.SkippingCodePointIterator v0;
boolean v3, v6;
v0 := @this: org.wildfly.common.iteration.SkippingCodePointIterator;
v1 := @parameter0: int;
v2 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v3 = virtualinvoke v2.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v3 != 0 goto label1;
return v1;
label1:
v4 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v5 = virtualinvoke v4.<org.wildfly.common.iteration.CodePointIterator: int next()>();
v6 = specialinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: boolean skip(int)>(v5);
if v6 == 0 goto label2;
v7 = specialinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: int seekNext(int)>(v5);
return v7;
label2:
v8 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
virtualinvoke v8.<org.wildfly.common.iteration.CodePointIterator: int previous()>();
return v5;
}
public int previous()
{
int v4;
java.util.NoSuchElementException v2;
org.wildfly.common.iteration.CodePointIterator v3;
org.wildfly.common.iteration.SkippingCodePointIterator v0;
boolean v1;
v0 := @this: org.wildfly.common.iteration.SkippingCodePointIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: boolean hasPrevious()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v4 = virtualinvoke v3.<org.wildfly.common.iteration.CodePointIterator: int previous()>();
return v4;
}
public int peekPrevious() throws java.util.NoSuchElementException
{
org.wildfly.common.iteration.CodePointIterator v1, v4;
int v5, v6;
java.util.NoSuchElementException v3;
org.wildfly.common.iteration.SkippingCodePointIterator v0;
boolean v2, v7;
v0 := @this: org.wildfly.common.iteration.SkippingCodePointIterator;
v1 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v2 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: boolean hasPrevious()>();
if v2 != 0 goto label1;
v3 = new java.util.NoSuchElementException;
specialinvoke v3.<java.util.NoSuchElementException: void <init>()>();
throw v3;
label1:
v4 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v5 = virtualinvoke v4.<org.wildfly.common.iteration.CodePointIterator: int peekPrevious()>();
v6 = specialinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: int seekPrev(int)>(v5);
v7 = specialinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: boolean skip(int)>(v6);
if v7 != 0 goto label2;
return v6;
label2:
return v6;
}
private int seekPrev(int) throws java.util.NoSuchElementException
{
org.wildfly.common.iteration.CodePointIterator v2, v4, v8;
int v1, v5, v7;
org.wildfly.common.iteration.SkippingCodePointIterator v0;
boolean v3, v6;
v0 := @this: org.wildfly.common.iteration.SkippingCodePointIterator;
v1 := @parameter0: int;
v2 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v3 = virtualinvoke v2.<org.wildfly.common.iteration.CodePointIterator: boolean hasPrevious()>();
if v3 != 0 goto label1;
return v1;
label1:
v4 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v5 = virtualinvoke v4.<org.wildfly.common.iteration.CodePointIterator: int previous()>();
v6 = specialinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: boolean skip(int)>(v5);
if v6 == 0 goto label2;
v7 = specialinvoke v0.<org.wildfly.common.iteration.SkippingCodePointIterator: int seekPrev(int)>(v5);
return v7;
label2:
v8 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
virtualinvoke v8.<org.wildfly.common.iteration.CodePointIterator: int next()>();
return v5;
}
public long getIndex()
{
long v2;
org.wildfly.common.iteration.CodePointIterator v1;
org.wildfly.common.iteration.SkippingCodePointIterator v0;
v0 := @this: org.wildfly.common.iteration.SkippingCodePointIterator;
v1 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: org.wildfly.common.iteration.CodePointIterator iter>;
v2 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: long getIndex()>();
return v2;
}
private boolean skip(int)
{
int v1;
org.wildfly.common.iteration.SkippingCodePointIterator v0;
java.util.function.IntPredicate v2;
boolean v3;
v0 := @this: org.wildfly.common.iteration.SkippingCodePointIterator;
v1 := @parameter0: int;
v2 = v0.<org.wildfly.common.iteration.SkippingCodePointIterator: java.util.function.IntPredicate predicate>;
v3 = interfaceinvoke v2.<java.util.function.IntPredicate: boolean test(int)>(v1);
return v3;
}
}