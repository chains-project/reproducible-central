public final class org.wildfly.common.net.Inet extends java.lang.Object
{
public static final java.net.Inet4Address INET4_ANY;
public static final java.net.Inet4Address INET4_LOOPBACK;
public static final java.net.Inet4Address INET4_BROADCAST;
public static final java.net.Inet6Address INET6_ANY;
public static final java.net.Inet6Address INET6_LOOPBACK;
private static final java.util.regex.Pattern NUMERIC;
static final boolean $assertionsDisabled;
private void <init>()
{
org.wildfly.common.net.Inet v0;
v0 := @this: org.wildfly.common.net.Inet;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.String toOptimalString(java.net.InetAddress)
{
java.net.InetAddress v0;
byte[] v2;
java.lang.String v3;
boolean v1;
v0 := @parameter0: java.net.InetAddress;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("inetAddress", v0);
v1 = v0 instanceof java.net.Inet6Address;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<java.net.InetAddress: byte[] getAddress()>();
v3 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalStringV6(byte[])>(v2);
goto label2;
label1:
v3 = virtualinvoke v0.<java.net.InetAddress: java.lang.String getHostAddress()>();
label2:
return v3;
}
public static java.lang.String toOptimalString(byte[])
{
byte[] v0;
short v3, v5, v7, v9;
byte v2, v4, v6, v8;
org.wildfly.common._private.CommonMessages v13;
int v1, v11, v14;
java.lang.String v10, v12;
java.lang.IllegalArgumentException v15;
v0 := @parameter0: byte[];
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("addressBytes", v0);
v1 = lengthof v0;
if v1 != 4 goto label1;
v2 = v0[0];
v3 = v2 & 255;
v4 = v0[1];
v5 = v4 & 255;
v6 = v0[2];
v7 = v6 & 255;
v8 = v0[3];
v9 = v8 & 255;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (short,short,short,short)>(v3, v5, v7, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001.\u0001.\u0001");
return v10;
label1:
v11 = lengthof v0;
if v11 != 16 goto label2;
v12 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalStringV6(byte[])>(v0);
return v12;
label2:
v13 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v14 = lengthof v0;
v15 = interfaceinvoke v13.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException invalidAddressBytes(int)>(v14);
throw v15;
}
public static java.lang.String toURLString(java.net.InetAddress, boolean)
{
java.net.InetAddress v0;
java.lang.String v2, v5, v7, v8, v9;
boolean v1, v3, v4, v6;
v0 := @parameter0: java.net.InetAddress;
v1 := @parameter1: boolean;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("inetAddress", v0);
if v1 == 0 goto label2;
v2 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String getHostNameIfResolved(java.net.InetAddress)>(v0);
if v2 == null goto label2;
v3 = v0 instanceof java.net.Inet6Address;
if v3 == 0 goto label1;
v4 = staticinvoke <org.wildfly.common.net.Inet: boolean isInet6Address(java.lang.String)>(v2);
if v4 == 0 goto label1;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[\u0001]");
return v5;
label1:
return v2;
label2:
v6 = v0 instanceof java.net.Inet6Address;
if v6 == 0 goto label3;
v7 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalString(java.net.InetAddress)>(v0);
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[\u0001]");
return v8;
label3:
v9 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalString(java.net.InetAddress)>(v0);
return v9;
}
public static java.lang.String toURLString(byte[])
{
byte[] v0;
short v3, v5, v7, v9;
byte v2, v4, v6, v8;
org.wildfly.common._private.CommonMessages v14;
int v1, v11, v15;
java.lang.String v10, v12, v13;
java.lang.IllegalArgumentException v16;
v0 := @parameter0: byte[];
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("addressBytes", v0);
v1 = lengthof v0;
if v1 != 4 goto label1;
v2 = v0[0];
v3 = v2 & 255;
v4 = v0[1];
v5 = v4 & 255;
v6 = v0[2];
v7 = v6 & 255;
v8 = v0[3];
v9 = v8 & 255;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (short,short,short,short)>(v3, v5, v7, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001.\u0001.\u0001");
return v10;
label1:
v11 = lengthof v0;
if v11 != 16 goto label2;
v12 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalStringV6(byte[])>(v0);
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[\u0001]");
return v13;
label2:
v14 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v15 = lengthof v0;
v16 = interfaceinvoke v14.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException invalidAddressBytes(int)>(v15);
throw v16;
}
public static java.net.Inet6Address toInet6Address(java.net.InetAddress)
{
byte[] v5, v6;
java.lang.IllegalStateException v10;
java.lang.AssertionError v4;
java.net.UnknownHostException v9;
java.net.InetAddress v0;
java.net.Inet6Address v8;
java.lang.String v7;
boolean v1, v2, v3;
v0 := @parameter0: java.net.InetAddress;
v1 = v0 instanceof java.net.Inet6Address;
if v1 == 0 goto label1;
return v0;
label1:
v2 = <org.wildfly.common.net.Inet: boolean $assertionsDisabled>;
if v2 != 0 goto label2;
v3 = v0 instanceof java.net.Inet4Address;
if v3 != 0 goto label2;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label2:
v5 = newarray (byte)[16];
v5[11] = -1;
v5[10] = -1;
v6 = virtualinvoke v0.<java.net.InetAddress: byte[] getAddress()>();
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v6, 0, v5, 12, 4);
label3:
v7 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String getHostNameIfResolved(java.net.InetAddress)>(v0);
v8 = staticinvoke <java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],int)>(v7, v5, 0);
label4:
return v8;
label5:
v9 := @caughtexception;
v10 = new java.lang.IllegalStateException;
specialinvoke v10.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v9);
throw v10;
catch java.net.UnknownHostException from label3 to label4 with label5;
}
public static java.lang.String getHostNameIfResolved(java.net.InetAddress)
{
java.net.InetAddress v0;
java.lang.String v2;
java.net.InetSocketAddress v1;
v0 := @parameter0: java.net.InetAddress;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("inetAddress", v0);
v1 = new java.net.InetSocketAddress;
specialinvoke v1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v0, 0);
v2 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String getHostNameIfResolved(java.net.InetSocketAddress)>(v1);
return v2;
}
public static java.lang.String getHostNameIfResolved(java.net.InetSocketAddress)
{
int v3;
java.lang.String v1, v2, v5;
java.net.InetSocketAddress v0;
boolean v4;
v0 := @parameter0: java.net.InetSocketAddress;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("socketAddress", v0);
v1 = virtualinvoke v0.<java.net.InetSocketAddress: java.lang.String getHostString()>();
v2 = virtualinvoke v0.<java.net.InetSocketAddress: java.lang.String toString()>();
v3 = virtualinvoke v2.<java.lang.String: int lastIndexOf(int)>(47);
if v3 != 0 goto label3;
v4 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v4 == 0 goto label1;
v5 = "";
goto label2;
label1:
v5 = null;
label2:
return v5;
label3:
return v1;
}
public static java.net.InetSocketAddress getResolved(java.net.URI, int, java.lang.Class) throws java.net.UnknownHostException
{
java.net.InetSocketAddress v7, v8, v9;
java.net.InetAddress v4;
int v1, v3, v5, v6;
java.lang.Class v2;
java.net.URI v0;
v0 := @parameter0: java.net.URI;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.Class;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("uri", v0);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("defaultPort", 1, v1);
v3 = (int) 65535;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("defaultPort", v3, v1);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("addressType", v2);
v4 = staticinvoke <org.wildfly.common.net.Inet: java.net.InetAddress getResolvedInetAddress(java.net.URI,java.lang.Class)>(v0, v2);
if v4 != null goto label1;
return null;
label1:
v5 = virtualinvoke v0.<java.net.URI: int getPort()>();
v6 = (int) -1;
if v5 == v6 goto label2;
v7 = new java.net.InetSocketAddress;
v8 = v7;
specialinvoke v7.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v4, v5);
goto label3;
label2:
v9 = new java.net.InetSocketAddress;
v8 = v9;
specialinvoke v9.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v4, v1);
label3:
return v8;
}
public static java.net.InetSocketAddress getResolved(java.net.URI, int) throws java.net.UnknownHostException
{
int v1;
java.net.URI v0;
java.net.InetSocketAddress v2;
v0 := @parameter0: java.net.URI;
v1 := @parameter1: int;
v2 = staticinvoke <org.wildfly.common.net.Inet: java.net.InetSocketAddress getResolved(java.net.URI,int,java.lang.Class)>(v0, v1, class "Ljava/net/InetAddress;");
return v2;
}
public static java.net.InetAddress getResolvedInetAddress(java.net.URI, java.lang.Class) throws java.net.UnknownHostException
{
java.net.InetAddress v4;
int v3;
java.lang.Class v1;
java.lang.String v2;
java.net.URI v0;
v0 := @parameter0: java.net.URI;
v1 := @parameter1: java.lang.Class;
v2 = virtualinvoke v0.<java.net.URI: java.lang.String getHost()>();
if v2 != null goto label1;
return null;
label1:
v3 = virtualinvoke v2.<java.lang.String: int length()>();
if v3 != 0 goto label2;
return null;
label2:
v4 = staticinvoke <org.wildfly.common.net.Inet: java.net.InetAddress getAddressByNameAndType(java.lang.String,java.lang.Class)>(v2, v1);
return v4;
}
public static java.net.InetAddress getResolvedInetAddress(java.net.URI) throws java.net.UnknownHostException
{
java.net.InetAddress v1;
java.net.URI v0;
v0 := @parameter0: java.net.URI;
v1 = staticinvoke <org.wildfly.common.net.Inet: java.net.InetAddress getResolvedInetAddress(java.net.URI,java.lang.Class)>(v0, class "Ljava/net/InetAddress;");
return v1;
}
public static java.net.InetSocketAddress getResolved(java.net.InetSocketAddress) throws java.net.UnknownHostException
{
java.net.InetSocketAddress v0, v1;
v0 := @parameter0: java.net.InetSocketAddress;
v1 = staticinvoke <org.wildfly.common.net.Inet: java.net.InetSocketAddress getResolved(java.net.InetSocketAddress,java.lang.Class)>(v0, class "Ljava/net/InetAddress;");
return v1;
}
public static java.net.InetSocketAddress getResolved(java.net.InetSocketAddress, java.lang.Class) throws java.net.UnknownHostException
{
java.net.InetSocketAddress v0, v7;
java.net.UnknownHostException v5;
java.net.InetAddress v3, v9;
int v10;
java.lang.Class v1;
java.lang.String v6, v8;
boolean v2, v4;
v0 := @parameter0: java.net.InetSocketAddress;
v1 := @parameter1: java.lang.Class;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("address", v0);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("addressType", v1);
v2 = virtualinvoke v0.<java.net.InetSocketAddress: boolean isUnresolved()>();
if v2 != 0 goto label2;
v3 = virtualinvoke v0.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v4 = virtualinvoke v1.<java.lang.Class: boolean isInstance(java.lang.Object)>(v3);
if v4 != 0 goto label1;
v5 = new java.net.UnknownHostException;
v6 = virtualinvoke v0.<java.net.InetSocketAddress: java.lang.String getHostString()>();
specialinvoke v5.<java.net.UnknownHostException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return v0;
label2:
v7 = new java.net.InetSocketAddress;
v8 = virtualinvoke v0.<java.net.InetSocketAddress: java.lang.String getHostString()>();
v9 = staticinvoke <org.wildfly.common.net.Inet: java.net.InetAddress getAddressByNameAndType(java.lang.String,java.lang.Class)>(v8, v1);
v10 = virtualinvoke v0.<java.net.InetSocketAddress: int getPort()>();
specialinvoke v7.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v9, v10);
return v7;
}
public static java.net.InetAddress getAddressByNameAndType(java.lang.String, java.lang.Class) throws java.net.UnknownHostException
{
java.net.InetAddress[] v4;
java.net.UnknownHostException v10;
java.net.InetAddress v2, v7;
int v5, v6;
java.lang.Class v1;
java.lang.Object v3, v9;
java.lang.String v0;
boolean v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Class;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("hostName", v0);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("addressType", v1);
if v1 != class "Ljava/net/InetAddress;" goto label1;
v2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(v0);
v3 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v2);
return v3;
label1:
v4 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>(v0);
v5 = lengthof v4;
v6 = 0;
label2:
if v6 >= v5 goto label4;
v7 = v4[v6];
v8 = virtualinvoke v1.<java.lang.Class: boolean isInstance(java.lang.Object)>(v7);
if v8 == 0 goto label3;
v9 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v7);
return v9;
label3:
v6 = v6 + 1;
goto label2;
label4:
v10 = new java.net.UnknownHostException;
specialinvoke v10.<java.net.UnknownHostException: void <init>(java.lang.String)>(v0);
throw v10;
}
public static java.net.InetAddress[] getAllAddressesByNameAndType(java.lang.String, java.lang.Class) throws java.net.UnknownHostException
{
java.net.InetAddress[] v2, v3;
java.net.InetAddress v14, v8;
int v12, v13, v4, v5, v6, v7;
java.lang.String v0;
boolean v15, v9;
java.net.UnknownHostException v10;
java.lang.Class v1;
java.lang.Object v11, v16;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Class;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("hostName", v0);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("addressType", v1);
if v1 != class "Ljava/net/InetAddress;" goto label1;
v2 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>(v0);
return v2;
label1:
v3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>(v0);
v4 = lengthof v3;
v5 = 0;
v6 = lengthof v3;
v7 = 0;
label2:
if v7 >= v6 goto label4;
v8 = v3[v7];
v9 = virtualinvoke v1.<java.lang.Class: boolean isInstance(java.lang.Object)>(v8);
if v9 == 0 goto label3;
v5 = v5 + 1;
label3:
v7 = v7 + 1;
goto label2;
label4:
if v5 != 0 goto label5;
v10 = new java.net.UnknownHostException;
specialinvoke v10.<java.net.UnknownHostException: void <init>(java.lang.String)>(v0);
throw v10;
label5:
v11 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v1, v5);
if v5 != v4 goto label6;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v3, 0, v11, 0, v4);
goto label9;
label6:
v12 = lengthof v3;
v13 = 0;
label7:
if v13 >= v12 goto label9;
v14 = v3[v13];
v15 = virtualinvoke v1.<java.lang.Class: boolean isInstance(java.lang.Object)>(v14);
if v15 == 0 goto label8;
v16 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v14);
v11[0] = v16;
label8:
v13 = v13 + 1;
goto label7;
label9:
return v11;
}
public static java.net.Inet4Address getInet4Address(int, int, int, int)
{
byte[] v4;
java.lang.IllegalStateException v8;
java.net.UnknownHostException v7;
java.net.InetAddress v6;
int v0, v1, v2, v3;
java.lang.String v5;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = newarray (byte)[4];
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("s1", 0, v0);
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("s1", 255, v0);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("s2", 0, v1);
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("s2", 255, v1);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("s3", 0, v2);
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("s3", 255, v2);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("s4", 0, v3);
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("s4", 255, v3);
v4[0] = v0;
v4[1] = v1;
v4[2] = v2;
v4[3] = v3;
label1:
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int,int)>(v0, v1, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001.\u0001.\u0001");
v6 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>(v5, v4);
label2:
return v6;
label3:
v7 := @caughtexception;
v8 = new java.lang.IllegalStateException;
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v7);
throw v8;
catch java.net.UnknownHostException from label1 to label2 with label3;
}
public static java.net.Inet6Address getInet6Address(int, int, int, int, int, int, int, int)
{
byte[] v8;
java.lang.IllegalStateException v28;
int v0, v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v3, v4, v5, v6, v7, v9;
java.lang.String v25;
java.net.UnknownHostException v27;
java.net.Inet6Address v26;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 := @parameter5: int;
v6 := @parameter6: int;
v7 := @parameter7: int;
v8 = newarray (byte)[16];
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("s1", 0, v0);
v9 = (int) 65535;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("s1", v9, v0);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("s2", 0, v1);
v10 = (int) 65535;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("s2", v10, v1);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("s3", 0, v2);
v11 = (int) 65535;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("s3", v11, v2);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("s4", 0, v3);
v12 = (int) 65535;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("s4", v12, v3);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("s5", 0, v4);
v13 = (int) 65535;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("s5", v13, v4);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("s6", 0, v5);
v14 = (int) 65535;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("s6", v14, v5);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("s7", 0, v6);
v15 = (int) 65535;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("s7", v15, v6);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("s8", 0, v7);
v16 = (int) 65535;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("s8", v16, v7);
v17 = v0 >> 8;
v8[0] = v17;
v8[1] = v0;
v18 = v1 >> 8;
v8[2] = v18;
v8[3] = v1;
v19 = v2 >> 8;
v8[4] = v19;
v8[5] = v2;
v20 = v3 >> 8;
v8[6] = v20;
v8[7] = v3;
v21 = v4 >> 8;
v8[8] = v21;
v8[9] = v4;
v22 = v5 >> 8;
v8[10] = v22;
v8[11] = v5;
v23 = v6 >> 8;
v8[12] = v23;
v8[13] = v6;
v24 = v7 >> 8;
v8[14] = v24;
v8[15] = v7;
label1:
v25 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalStringV6(byte[])>(v8);
v26 = staticinvoke <java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],int)>(v25, v8, 0);
label2:
return v26;
label3:
v27 := @caughtexception;
v28 = new java.lang.IllegalStateException;
specialinvoke v28.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v27);
throw v28;
catch java.net.UnknownHostException from label1 to label2 with label3;
}
public static boolean isInet6Address(java.lang.String)
{
byte[] v1;
java.lang.String v0;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.wildfly.common.net.Inet: byte[] parseInet6AddressToBytes(java.lang.String)>(v0);
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static java.net.Inet6Address parseInet6Address(java.lang.String)
{
java.net.Inet6Address v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet6Address parseInet6Address(java.lang.String,java.lang.String)>(v0, null);
return v1;
}
public static java.net.Inet6Address parseInet6Address(java.lang.String, java.lang.String)
{
byte[] v2;
java.lang.IllegalStateException v14, v6;
java.net.UnknownHostException v13, v5;
java.net.Inet6Address v4;
int v11, v7, v8, v9;
java.lang.String v0, v1, v10, v12, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.wildfly.common.net.Inet: byte[] parseInet6AddressToBytes(java.lang.String)>(v0);
if v2 != null goto label01;
return null;
label01:
if v1 != null goto label02;
v3 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalStringV6(byte[])>(v2);
goto label03;
label02:
v3 = v1;
label03:
v4 = staticinvoke <java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],int)>(v3, v2, 0);
label04:
goto label06;
label05:
v5 := @caughtexception;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v5);
throw v6;
label06:
v7 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(37);
v8 = (int) -1;
if v7 == v8 goto label12;
v9 = v7 + 1;
v10 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v9);
v11 = staticinvoke <org.wildfly.common.net.Inet: int getScopeId(java.lang.String,java.net.InetAddress)>(v10, v4);
if v11 != 0 goto label07;
return null;
label07:
if v1 != null goto label08;
v12 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalStringV6(byte[])>(v2);
goto label09;
label08:
v12 = v1;
label09:
v4 = staticinvoke <java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],int)>(v12, v2, v11);
label10:
goto label12;
label11:
v13 := @caughtexception;
v14 = new java.lang.IllegalStateException;
specialinvoke v14.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v13);
throw v14;
label12:
return v4;
catch java.net.UnknownHostException from label01 to label04 with label05;
catch java.net.UnknownHostException from label07 to label10 with label11;
}
public static java.net.Inet6Address parseInet6AddressOrFail(java.lang.String)
{
java.net.Inet6Address v1;
org.wildfly.common._private.CommonMessages v2;
java.lang.String v0;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet6Address parseInet6Address(java.lang.String,java.lang.String)>(v0, null);
if v1 != null goto label1;
v2 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v3 = interfaceinvoke v2.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException invalidAddress(java.lang.String)>(v0);
throw v3;
label1:
return v1;
}
public static java.net.Inet6Address parseInet6AddressOrFail(java.lang.String, java.lang.String)
{
java.net.Inet6Address v2;
org.wildfly.common._private.CommonMessages v3;
java.lang.String v0, v1;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet6Address parseInet6Address(java.lang.String,java.lang.String)>(v0, v1);
if v2 != null goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException invalidAddress(java.lang.String)>(v0);
throw v4;
label1:
return v2;
}
public static boolean isInet4Address(java.lang.String)
{
byte[] v1;
java.lang.String v0;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.wildfly.common.net.Inet: byte[] parseInet4AddressToBytes(java.lang.String)>(v0);
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static java.net.Inet4Address parseInet4Address(java.lang.String)
{
java.lang.String v0;
java.net.Inet4Address v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet4Address parseInet4Address(java.lang.String,java.lang.String)>(v0, null);
return v1;
}
public static java.net.Inet4Address parseInet4Address(java.lang.String, java.lang.String)
{
java.net.InetAddress v4;
byte[] v2;
java.lang.IllegalStateException v6;
java.lang.String v0, v1, v3;
java.net.UnknownHostException v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.wildfly.common.net.Inet: byte[] parseInet4AddressToBytes(java.lang.String)>(v0);
if v2 != null goto label1;
return null;
label1:
if v1 != null goto label2;
v3 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalString(byte[])>(v2);
goto label3;
label2:
v3 = v1;
label3:
v4 = staticinvoke <java.net.Inet4Address: java.net.InetAddress getByAddress(java.lang.String,byte[])>(v3, v2);
label4:
return v4;
label5:
v5 := @caughtexception;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v5);
throw v6;
catch java.net.UnknownHostException from label1 to label4 with label5;
}
public static java.net.Inet4Address parseInet4AddressOrFail(java.lang.String)
{
org.wildfly.common._private.CommonMessages v2;
java.lang.String v0;
java.lang.IllegalArgumentException v3;
java.net.Inet4Address v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet4Address parseInet4Address(java.lang.String,java.lang.String)>(v0, null);
if v1 != null goto label1;
v2 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v3 = interfaceinvoke v2.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException invalidAddress(java.lang.String)>(v0);
throw v3;
label1:
return v1;
}
public static java.net.Inet4Address parseInet4AddressOrFail(java.lang.String, java.lang.String)
{
org.wildfly.common._private.CommonMessages v3;
java.lang.String v0, v1;
java.lang.IllegalArgumentException v4;
java.net.Inet4Address v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet4Address parseInet4Address(java.lang.String,java.lang.String)>(v0, v1);
if v2 != null goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException invalidAddress(java.lang.String)>(v0);
throw v4;
label1:
return v2;
}
public static java.net.InetAddress parseInetAddress(java.lang.String)
{
java.net.InetAddress v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.wildfly.common.net.Inet: java.net.InetAddress parseInetAddress(java.lang.String,java.lang.String)>(v0, null);
return v1;
}
public static java.net.InetAddress parseInetAddress(java.lang.String, java.lang.String)
{
java.net.Inet6Address v4;
int v2, v3;
java.lang.String v0, v1;
java.net.Inet4Address v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(58);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet6Address parseInet6Address(java.lang.String,java.lang.String)>(v0, v1);
return v4;
label1:
v5 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet4Address parseInet4Address(java.lang.String,java.lang.String)>(v0, v1);
return v5;
}
public static java.net.InetAddress parseInetAddressOrFail(java.lang.String)
{
java.net.InetAddress v1;
org.wildfly.common._private.CommonMessages v2;
java.lang.String v0;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.wildfly.common.net.Inet: java.net.InetAddress parseInetAddress(java.lang.String,java.lang.String)>(v0, null);
if v1 != null goto label1;
v2 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v3 = interfaceinvoke v2.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException invalidAddress(java.lang.String)>(v0);
throw v3;
label1:
return v1;
}
public static java.net.InetAddress parseInetAddressOrFail(java.lang.String, java.lang.String)
{
java.net.InetAddress v2;
org.wildfly.common._private.CommonMessages v3;
java.lang.String v0, v1;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.wildfly.common.net.Inet: java.net.InetAddress parseInetAddress(java.lang.String,java.lang.String)>(v0, v1);
if v2 != null goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException invalidAddress(java.lang.String)>(v0);
throw v4;
label1:
return v2;
}
public static org.wildfly.common.net.CidrAddress parseCidrAddress(java.lang.String)
{
byte[] v8;
java.lang.NumberFormatException v6;
java.lang.IllegalArgumentException v10;
int v1, v2, v3, v5;
java.lang.String v0, v4, v7;
org.wildfly.common.net.CidrAddress v9;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(47);
v2 = (int) -1;
if v1 != v2 goto label1;
return null;
label1:
v3 = v1 + 1;
v4 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v3);
v5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v4);
label2:
goto label4;
label3:
v6 := @caughtexception;
return null;
label4:
v7 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v1);
v8 = staticinvoke <org.wildfly.common.net.Inet: byte[] parseInetAddressToBytes(java.lang.String)>(v7);
if v8 != null goto label5;
return null;
label5:
v9 = staticinvoke <org.wildfly.common.net.CidrAddress: org.wildfly.common.net.CidrAddress create(byte[],int,boolean)>(v8, v5, 0);
label6:
return v9;
label7:
v10 := @caughtexception;
return null;
catch java.lang.NumberFormatException from label1 to label2 with label3;
catch java.lang.IllegalArgumentException from label5 to label6 with label7;
}
public static byte[] parseInet6AddressToBytes(java.lang.String)
{
byte[] v89;
byte v45, v46, v86;
short v73, v88;
java.lang.String v0, v11, v13, v17, v21, v26, v28, v39, v43, v50, v52, v54, v59, v63, v72, v81, v85, v87;
java.lang.NumberFormatException v90;
java.nio.ByteBuffer v70;
boolean v1, v2, v3, v44, v51, v53, v55, v56, v60, v64;
java.lang.String[] v8, v82;
int v10, v12, v14, v15, v16, v18, v19, v20, v22, v23, v24, v25, v27, v30, v31, v32, v33, v34, v35, v36, v37, v38, v4, v40, v41, v42, v47, v48, v49, v5, v57, v58, v6, v61, v62, v65, v66, v67, v68, v69, v7, v71, v74, v75, v76, v77, v78, v79, v80, v83, v84, v9;
char v29;
v0 := @parameter0: java.lang.String;
if v0 == null goto label01;
v1 = virtualinvoke v0.<java.lang.String: boolean isEmpty()>();
if v1 == 0 goto label02;
label01:
return null;
label02:
v2 = virtualinvoke v0.<java.lang.String: boolean startsWith(java.lang.String)>("[");
if v2 == 0 goto label03;
v3 = virtualinvoke v0.<java.lang.String: boolean endsWith(java.lang.String)>("]");
if v3 == 0 goto label03;
v4 = virtualinvoke v0.<java.lang.String: int length()>();
v5 = v4 - 1;
v0 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(1, v5);
label03:
v6 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(37);
v7 = (int) -1;
if v6 == v7 goto label04;
v0 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v6);
label04:
v8 = virtualinvoke v0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(":", 10);
v9 = lengthof v8;
if v9 > 9 goto label05;
v10 = lengthof v8;
if v10 >= 3 goto label06;
label05:
return null;
label06:
v11 = v8[0];
v12 = virtualinvoke v11.<java.lang.String: int length()>();
if v12 != 0 goto label07;
v13 = v8[1];
v14 = virtualinvoke v13.<java.lang.String: int length()>();
if v14 == 0 goto label07;
return null;
label07:
v15 = lengthof v8;
v16 = v15 - 1;
v17 = v8[v16];
v18 = virtualinvoke v17.<java.lang.String: int length()>();
if v18 != 0 goto label08;
v19 = lengthof v8;
v20 = v19 - 2;
v21 = v8[v20];
v22 = virtualinvoke v21.<java.lang.String: int length()>();
if v22 == 0 goto label08;
return null;
label08:
v23 = 0;
label09:
v24 = lengthof v8;
if v23 >= v24 goto label14;
v25 = 0;
label10:
v26 = v8[v23];
v27 = virtualinvoke v26.<java.lang.String: int length()>();
if v25 >= v27 goto label13;
v28 = v8[v23];
v29 = virtualinvoke v28.<java.lang.String: char charAt(int)>(v25);
if v29 != 46 goto label11;
v30 = lengthof v8;
v31 = v30 - 1;
if v23 == v31 goto label11;
return null;
label11:
if v29 == 46 goto label12;
if v29 == 58 goto label12;
v32 = staticinvoke <java.lang.Character: int digit(char,int)>(v29, 16);
v33 = (int) -1;
if v32 != v33 goto label12;
return null;
label12:
v25 = v25 + 1;
goto label10;
label13:
v23 = v23 + 1;
goto label09;
label14:
v34 = (int) -1;
v35 = v34;
v36 = 0;
label15:
v37 = lengthof v8;
v38 = v37 - 1;
if v36 >= v38 goto label18;
v39 = v8[v36];
v40 = virtualinvoke v39.<java.lang.String: int length()>();
if v40 != 0 goto label17;
if v35 <= 0 goto label16;
return null;
label16:
if v35 == 0 goto label17;
v35 = v36;
label17:
v36 = v36 + 1;
goto label15;
label18:
v41 = lengthof v8;
v42 = v41 - 1;
v43 = v8[v42];
v44 = virtualinvoke v43.<java.lang.String: boolean contains(java.lang.CharSequence)>(".");
if v44 == 0 goto label19;
v45 = 7;
goto label20;
label19:
v45 = 8;
label20:
v46 = v45;
v47 = (int) -1;
if v35 != v47 goto label21;
v48 = lengthof v8;
if v48 == v45 goto label21;
return null;
label21:
v49 = lengthof v8;
if v49 != 3 goto label22;
v50 = v8[0];
v51 = virtualinvoke v50.<java.lang.String: boolean isEmpty()>();
if v51 == 0 goto label22;
v52 = v8[1];
v53 = virtualinvoke v52.<java.lang.String: boolean isEmpty()>();
if v53 == 0 goto label22;
v54 = v8[2];
v55 = virtualinvoke v54.<java.lang.String: boolean isEmpty()>();
if v55 == 0 goto label22;
v56 = 1;
goto label23;
label22:
v56 = 0;
label23:
if v56 == 0 goto label24;
v57 = 0;
v58 = 8;
goto label28;
label24:
v59 = v8[0];
v60 = virtualinvoke v59.<java.lang.String: boolean isEmpty()>();
if v60 != 0 goto label25;
v61 = lengthof v8;
v62 = v61 - 1;
v63 = v8[v62];
v64 = virtualinvoke v63.<java.lang.String: boolean isEmpty()>();
if v64 == 0 goto label26;
label25:
v57 = v35;
v65 = lengthof v8;
v66 = v46 - v65;
v58 = v66 + 2;
goto label28;
label26:
v67 = (int) -1;
if v35 <= v67 goto label27;
v57 = v35;
v68 = lengthof v8;
v69 = v46 - v68;
v58 = v69 + 1;
goto label28;
label27:
v57 = 0;
v58 = 0;
label28:
v70 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(16);
label29:
v71 = 0;
label30:
if v71 >= v57 goto label31;
v72 = v8[v71];
v73 = staticinvoke <org.wildfly.common.net.Inet: short parseHexadecimal(java.lang.String)>(v72);
virtualinvoke v70.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(v73);
v71 = v71 + 1;
goto label30;
label31:
v74 = v57;
label32:
v75 = v57 + v58;
if v74 >= v75 goto label33;
virtualinvoke v70.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(0);
v74 = v74 + 1;
goto label32;
label33:
v76 = v57 + v58;
label34:
if v76 >= v46 goto label40;
v77 = lengthof v8;
v78 = v46 - v76;
v79 = v77 - v78;
if v44 == 0 goto label38;
v80 = v46 - 1;
if v76 != v80 goto label38;
v81 = v8[v79];
v82 = virtualinvoke v81.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");
v83 = lengthof v82;
if v83 == 4 goto label36;
label35:
return null;
label36:
v84 = 0;
label37:
if v84 >= 4 goto label39;
v85 = v82[v84];
v86 = staticinvoke <org.wildfly.common.net.Inet: byte parseDecimal(java.lang.String)>(v85);
virtualinvoke v70.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(v86);
v84 = v84 + 1;
goto label37;
label38:
v87 = v8[v79];
v88 = staticinvoke <org.wildfly.common.net.Inet: short parseHexadecimal(java.lang.String)>(v87);
virtualinvoke v70.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(v88);
label39:
v76 = v76 + 1;
goto label34;
label40:
v89 = virtualinvoke v70.<java.nio.ByteBuffer: byte[] array()>();
label41:
return v89;
label42:
v90 := @caughtexception;
return null;
catch java.lang.NumberFormatException from label29 to label35 with label42;
catch java.lang.NumberFormatException from label36 to label41 with label42;
}
public static byte[] parseInet4AddressToBytes(java.lang.String)
{
byte[] v13;
java.lang.String[] v1;
byte v17;
int v12, v14, v15, v2, v3, v4, v6, v7, v9;
java.lang.String v0, v10, v16, v5, v8;
char v11;
java.lang.NumberFormatException v18;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", 5);
v2 = lengthof v1;
if v2 == 4 goto label01;
return null;
label01:
v3 = 0;
label02:
v4 = lengthof v1;
if v3 >= v4 goto label07;
v5 = v1[v3];
v6 = virtualinvoke v5.<java.lang.String: int length()>();
if v6 >= 1 goto label03;
return null;
label03:
v7 = 0;
label04:
v8 = v1[v3];
v9 = virtualinvoke v8.<java.lang.String: int length()>();
if v7 >= v9 goto label06;
v10 = v1[v3];
v11 = virtualinvoke v10.<java.lang.String: char charAt(int)>(v7);
v12 = staticinvoke <java.lang.Character: int digit(char,int)>(v11, 10);
if v12 >= 0 goto label05;
return null;
label05:
v7 = v7 + 1;
goto label04;
label06:
v3 = v3 + 1;
goto label02;
label07:
v13 = newarray (byte)[4];
label08:
v14 = 0;
label09:
v15 = lengthof v1;
if v14 >= v15 goto label10;
v16 = v1[v14];
v17 = staticinvoke <org.wildfly.common.net.Inet: byte parseDecimal(java.lang.String)>(v16);
v13[v14] = v17;
v14 = v14 + 1;
goto label09;
label10:
return v13;
label11:
v18 := @caughtexception;
return null;
catch java.lang.NumberFormatException from label08 to label10 with label11;
}
public static byte[] parseInetAddressToBytes(java.lang.String)
{
byte[] v3, v4;
int v1, v2;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(58);
v2 = (int) -1;
if v1 == v2 goto label1;
v3 = staticinvoke <org.wildfly.common.net.Inet: byte[] parseInet6AddressToBytes(java.lang.String)>(v0);
return v3;
label1:
v4 = staticinvoke <org.wildfly.common.net.Inet: byte[] parseInet4AddressToBytes(java.lang.String)>(v0);
return v4;
}
public static int getScopeId(java.net.InetAddress)
{
int v2;
java.net.InetAddress v0;
boolean v1;
v0 := @parameter0: java.net.InetAddress;
v1 = v0 instanceof java.net.Inet6Address;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<java.net.Inet6Address: int getScopeId()>();
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static int getScopeId(java.lang.String)
{
int v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.wildfly.common.net.Inet: int getScopeId(java.lang.String,java.net.InetAddress)>(v0, null);
return v1;
}
public static int getScopeId(java.lang.String, java.net.InetAddress)
{
java.net.NetworkInterface v7;
java.lang.NumberFormatException v6;
java.net.InetAddress v1;
java.util.regex.Matcher v3;
int v5, v8;
java.lang.String v0;
java.util.regex.Pattern v2;
boolean v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.net.InetAddress;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("scopeName", v0);
v2 = <org.wildfly.common.net.Inet: java.util.regex.Pattern NUMERIC>;
v3 = virtualinvoke v2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v0);
v4 = virtualinvoke v3.<java.util.regex.Matcher: boolean matches()>();
if v4 == 0 goto label4;
label1:
v5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v0);
label2:
return v5;
label3:
v6 := @caughtexception;
return 0;
label4:
v7 = staticinvoke <org.wildfly.common.net.Inet: java.net.NetworkInterface findInterfaceWithScopeId(java.lang.String)>(v0);
if v7 != null goto label5;
return 0;
label5:
v8 = staticinvoke <org.wildfly.common.net.Inet: int getScopeId(java.net.NetworkInterface,java.net.InetAddress)>(v7, v1);
return v8;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
public static java.net.NetworkInterface findInterfaceWithScopeId(java.lang.String)
{
java.net.SocketException v2;
java.util.Enumeration v1;
java.lang.Object v4;
java.lang.String v0, v5;
boolean v3, v6;
v0 := @parameter0: java.lang.String;
label1:
v1 = staticinvoke <java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return null;
label4:
v3 = interfaceinvoke v1.<java.util.Enumeration: boolean hasMoreElements()>();
if v3 == 0 goto label5;
v4 = interfaceinvoke v1.<java.util.Enumeration: java.lang.Object nextElement()>();
v5 = virtualinvoke v4.<java.net.NetworkInterface: java.lang.String getName()>();
v6 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>(v0);
if v6 == 0 goto label4;
return v4;
label5:
return null;
catch java.net.SocketException from label1 to label2 with label3;
}
public static int getScopeId(java.net.NetworkInterface)
{
int v1;
java.net.NetworkInterface v0;
v0 := @parameter0: java.net.NetworkInterface;
v1 = staticinvoke <org.wildfly.common.net.Inet: int getScopeId(java.net.NetworkInterface,java.net.InetAddress)>(v0, null);
return v1;
}
public static int getScopeId(java.net.NetworkInterface, java.net.InetAddress)
{
java.net.InetAddress v1;
int v5;
java.net.NetworkInterface v0;
java.lang.Object v4;
java.security.PrivilegedAction v3;
boolean v2;
v0 := @parameter0: java.net.NetworkInterface;
v1 := @parameter1: java.net.InetAddress;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("networkInterface", v0);
v2 = v1 instanceof java.net.Inet6Address;
if v2 != 0 goto label1;
v1 = null;
label1:
v3 = staticinvoke <org.wildfly.common.net.Inet$lambda_getScopeId_0__3299: java.security.PrivilegedAction bootstrap$(java.net.NetworkInterface,java.net.Inet6Address)>(v0, v1);
v4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v3);
if v4 != null goto label2;
v5 = 0;
goto label3;
label2:
v5 = virtualinvoke v4.<java.net.Inet6Address: int getScopeId()>();
label3:
return v5;
}
public static java.net.URI getURIFromAddress(java.lang.String, java.net.InetSocketAddress, int) throws java.net.URISyntaxException
{
java.net.InetSocketAddress v1;
int v2, v5, v8, v9;
java.lang.String v0, v3, v7;
java.net.URI v6;
boolean v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.net.InetSocketAddress;
v2 := @parameter2: int;
v3 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String getHostNameIfResolved(java.net.InetSocketAddress)>(v1);
v4 = staticinvoke <org.wildfly.common.net.Inet: boolean isInet6Address(java.lang.String)>(v3);
if v4 == 0 goto label1;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[\u0001]");
label1:
v5 = virtualinvoke v1.<java.net.InetSocketAddress: int getPort()>();
v6 = new java.net.URI;
v7 = v3;
if v5 != v2 goto label2;
v8 = (int) -1;
v9 = v8;
goto label3;
label2:
v9 = v5;
label3:
specialinvoke v6.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(v0, null, v7, v9, null, null, null);
return v6;
}
private static byte parseDecimal(java.lang.String)
{
int v1;
java.lang.NumberFormatException v2;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v0);
if v1 < 0 goto label1;
if v1 <= 255 goto label2;
label1:
v2 = new java.lang.NumberFormatException;
specialinvoke v2.<java.lang.NumberFormatException: void <init>()>();
throw v2;
label2:
return v1;
}
private static short parseHexadecimal(java.lang.String)
{
int v1, v2;
java.lang.NumberFormatException v3;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(v0, 16);
v2 = (int) 65535;
if v1 <= v2 goto label1;
v3 = new java.lang.NumberFormatException;
specialinvoke v3.<java.lang.NumberFormatException: void <init>()>();
throw v3;
label1:
return v1;
}
private static java.lang.String toOptimalStringV6(byte[])
{
byte[] v0;
byte v21, v25, v29, v33, v37, v4, v41, v45, v49, v9;
java.lang.StringBuilder v12, v16, v20, v23, v24, v27, v28, v31, v32, v36, v39, v40, v43, v44, v47, v48, v51, v57, v60, v61;
short v10, v22, v26, v30, v34, v38, v42, v46, v5, v50;
java.lang.String v53, v56, v59, v63, v65, v66;
int[] v1;
int v11, v13, v14, v15, v17, v18, v19, v2, v3, v35, v52, v54, v55, v58, v6, v62, v64, v7, v8;
v0 := @parameter0: byte[];
v1 = newarray (int)[8];
v2 = 0;
label01:
if v2 >= 8 goto label02;
v3 = v2 << 1;
v4 = v0[v3];
v5 = v4 & 255;
v6 = v5 << 8;
v7 = v2 << 1;
v8 = v7 + 1;
v9 = v0[v8];
v10 = v9 & 255;
v11 = v6 | v10;
v1[v2] = v11;
v2 = v2 + 1;
goto label01;
label02:
v12 = new java.lang.StringBuilder;
specialinvoke v12.<java.lang.StringBuilder: void <init>()>();
v13 = 0;
label03:
if v13 >= 8 goto label17;
v14 = v1[v13];
if v14 != 0 goto label14;
if v13 != 7 goto label04;
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
goto label16;
label04:
v13 = v13 + 1;
v15 = v1[v13];
if v15 != 0 goto label12;
v16 = virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
virtualinvoke v16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v13 = v13 + 1;
label05:
if v13 >= 8 goto label16;
v17 = v1[v13];
v18 = (int) 65535;
if v17 != v18 goto label09;
v19 = virtualinvoke v12.<java.lang.StringBuilder: int length()>();
if v19 != 2 goto label09;
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ffff");
if v13 != 5 goto label06;
v20 = virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v21 = v0[12];
v22 = v21 & 255;
v23 = virtualinvoke v20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v22);
v24 = virtualinvoke v23.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
v25 = v0[13];
v26 = v25 & 255;
v27 = virtualinvoke v24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v26);
v28 = virtualinvoke v27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
v29 = v0[14];
v30 = v29 & 255;
v31 = virtualinvoke v28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v30);
v32 = virtualinvoke v31.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
v33 = v0[15];
v34 = v33 & 255;
virtualinvoke v32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v34);
v13 = 8;
goto label11;
label06:
if v13 != 4 goto label07;
v35 = v1[5];
if v35 != 0 goto label07;
v36 = virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":0:");
v37 = v0[12];
v38 = v37 & 255;
v39 = virtualinvoke v36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v38);
v40 = virtualinvoke v39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
v41 = v0[13];
v42 = v41 & 255;
v43 = virtualinvoke v40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v42);
v44 = virtualinvoke v43.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
v45 = v0[14];
v46 = v45 & 255;
v47 = virtualinvoke v44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v46);
v48 = virtualinvoke v47.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
v49 = v0[15];
v50 = v49 & 255;
virtualinvoke v48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v50);
v13 = 8;
goto label11;
label07:
v13 = v13 + 1;
label08:
if v13 >= 8 goto label11;
v51 = virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v52 = v1[v13];
v53 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v52);
virtualinvoke v51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v53);
v13 = v13 + 1;
goto label08;
label09:
v54 = v1[v13];
if v54 == 0 goto label11;
v55 = v1[v13];
v56 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v55);
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v56);
v13 = v13 + 1;
label10:
if v13 >= 8 goto label11;
v57 = virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v58 = v1[v13];
v59 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v58);
virtualinvoke v57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v59);
v13 = v13 + 1;
goto label10;
label11:
v13 = v13 + 1;
goto label05;
label12:
if v13 <= 1 goto label13;
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
label13:
v60 = virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
v61 = virtualinvoke v60.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v62 = v1[v13];
v63 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v62);
virtualinvoke v61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v63);
goto label16;
label14:
if v13 <= 0 goto label15;
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
label15:
v64 = v1[v13];
v65 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v64);
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v65);
label16:
v13 = v13 + 1;
goto label03;
label17:
v66 = virtualinvoke v12.<java.lang.StringBuilder: java.lang.String toString()>();
return v66;
}
static void <clinit>()
{
java.net.Inet4Address v3, v4, v5;
java.net.Inet6Address v6, v7;
java.lang.Class v0;
java.util.regex.Pattern v8;
boolean v1, v2;
v0 = class "Lorg/wildfly/common/net/Inet;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.wildfly.common.net.Inet: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet4Address getInet4Address(int,int,int,int)>(0, 0, 0, 0);
<org.wildfly.common.net.Inet: java.net.Inet4Address INET4_ANY> = v3;
v4 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet4Address getInet4Address(int,int,int,int)>(127, 0, 0, 1);
<org.wildfly.common.net.Inet: java.net.Inet4Address INET4_LOOPBACK> = v4;
v5 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet4Address getInet4Address(int,int,int,int)>(255, 255, 255, 255);
<org.wildfly.common.net.Inet: java.net.Inet4Address INET4_BROADCAST> = v5;
v6 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet6Address getInet6Address(int,int,int,int,int,int,int,int)>(0, 0, 0, 0, 0, 0, 0, 0);
<org.wildfly.common.net.Inet: java.net.Inet6Address INET6_ANY> = v6;
v7 = staticinvoke <org.wildfly.common.net.Inet: java.net.Inet6Address getInet6Address(int,int,int,int,int,int,int,int)>(0, 0, 0, 0, 0, 0, 0, 1);
<org.wildfly.common.net.Inet: java.net.Inet6Address INET6_LOOPBACK> = v7;
v8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\d+");
<org.wildfly.common.net.Inet: java.util.regex.Pattern NUMERIC> = v8;
return;
}
}