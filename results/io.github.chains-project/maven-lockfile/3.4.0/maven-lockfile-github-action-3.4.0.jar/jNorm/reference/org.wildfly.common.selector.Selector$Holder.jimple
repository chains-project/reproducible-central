final class org.wildfly.common.selector.Selector$Holder extends java.util.concurrent.atomic.AtomicReference
{
private final java.lang.Class clazz;
private final org.wildfly.common.selector.SelectorPermission getPermission;
private final org.wildfly.common.selector.SelectorPermission setPermission;
private final org.wildfly.common.selector.SelectorPermission changePermission;
private final java.util.concurrent.atomic.AtomicReference lockRef;
void <init>(java.lang.Class)
{
org.wildfly.common.selector.SelectorPermission v3, v5, v7;
java.util.concurrent.atomic.AtomicReference v2;
org.wildfly.common.selector.Selector$Holder v0;
java.lang.Class v1;
java.lang.String v4, v6, v8;
v0 := @this: org.wildfly.common.selector.Selector$Holder;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<org.wildfly.common.selector.Selector$Holder: java.util.concurrent.atomic.AtomicReference lockRef> = v2;
staticinvoke <org.wildfly.common.Assert: java.lang.Object assertNotNull(java.lang.Object)>(v1);
v0.<org.wildfly.common.selector.Selector$Holder: java.lang.Class clazz> = v1;
v3 = new org.wildfly.common.selector.SelectorPermission;
v4 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
specialinvoke v3.<org.wildfly.common.selector.SelectorPermission: void <init>(java.lang.String,java.lang.String)>(v4, "get");
v0.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission getPermission> = v3;
v5 = new org.wildfly.common.selector.SelectorPermission;
v6 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
specialinvoke v5.<org.wildfly.common.selector.SelectorPermission: void <init>(java.lang.String,java.lang.String)>(v6, "set");
v0.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission setPermission> = v5;
v7 = new org.wildfly.common.selector.SelectorPermission;
v8 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
specialinvoke v7.<org.wildfly.common.selector.SelectorPermission: void <init>(java.lang.String,java.lang.String)>(v8, "change");
v0.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission changePermission> = v7;
return;
}
java.lang.Class getClazz()
{
java.lang.Class v1;
org.wildfly.common.selector.Selector$Holder v0;
v0 := @this: org.wildfly.common.selector.Selector$Holder;
v1 = v0.<org.wildfly.common.selector.Selector$Holder: java.lang.Class clazz>;
return v1;
}
org.wildfly.common.selector.SelectorPermission getGetPermission()
{
org.wildfly.common.selector.SelectorPermission v1;
org.wildfly.common.selector.Selector$Holder v0;
v0 := @this: org.wildfly.common.selector.Selector$Holder;
v1 = v0.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission getPermission>;
return v1;
}
org.wildfly.common.selector.SelectorPermission getSetPermission()
{
org.wildfly.common.selector.SelectorPermission v1;
org.wildfly.common.selector.Selector$Holder v0;
v0 := @this: org.wildfly.common.selector.Selector$Holder;
v1 = v0.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission setPermission>;
return v1;
}
org.wildfly.common.selector.SelectorPermission getChangePermission()
{
org.wildfly.common.selector.SelectorPermission v1;
org.wildfly.common.selector.Selector$Holder v0;
v0 := @this: org.wildfly.common.selector.Selector$Holder;
v1 = v0.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission changePermission>;
return v1;
}
void lock(java.lang.Object)
{
org.wildfly.common.selector.Selector$Holder v0;
java.lang.Object v1;
java.lang.SecurityException v4;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
v0 := @this: org.wildfly.common.selector.Selector$Holder;
v1 := @parameter0: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: java.lang.Object assertNotNull(java.lang.Object)>(v1);
v2 = v0.<org.wildfly.common.selector.Selector$Holder: java.util.concurrent.atomic.AtomicReference lockRef>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 != 0 goto label1;
v4 = new java.lang.SecurityException;
specialinvoke v4.<java.lang.SecurityException: void <init>(java.lang.String)>("Selector is locked");
throw v4;
label1:
return;
}
void unlock(java.lang.Object)
{
org.wildfly.common.selector.Selector$Holder v0;
java.lang.Object v1;
java.lang.SecurityException v4;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
v0 := @this: org.wildfly.common.selector.Selector$Holder;
v1 := @parameter0: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: java.lang.Object assertNotNull(java.lang.Object)>(v1);
v2 = v0.<org.wildfly.common.selector.Selector$Holder: java.util.concurrent.atomic.AtomicReference lockRef>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v1, null);
if v3 != 0 goto label1;
v4 = new java.lang.SecurityException;
specialinvoke v4.<java.lang.SecurityException: void <init>(java.lang.String)>("Selector could not be unlocked");
throw v4;
label1:
return;
}
}