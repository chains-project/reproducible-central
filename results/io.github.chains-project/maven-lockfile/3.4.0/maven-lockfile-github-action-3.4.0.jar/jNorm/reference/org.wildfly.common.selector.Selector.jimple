public abstract class org.wildfly.common.selector.Selector extends java.lang.Object
{
private static final org.wildfly.common.selector.Selector NULL;
private static final java.lang.ClassValue selVal;
protected void <init>()
{
org.wildfly.common.selector.Selector v0;
v0 := @this: org.wildfly.common.selector.Selector;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public abstract java.lang.Object get();
public static org.wildfly.common.selector.Selector nullSelector()
{
org.wildfly.common.selector.Selector v0;
v0 = <org.wildfly.common.selector.Selector: org.wildfly.common.selector.Selector NULL>;
return v0;
}
public static org.wildfly.common.selector.Selector selectorFor(java.lang.Class)
{
org.wildfly.common.selector.Selector v6;
org.wildfly.common.selector.SelectorPermission v4;
java.lang.ClassValue v1;
java.lang.Class v0;
java.lang.Object v2, v5;
java.lang.SecurityManager v3;
v0 := @parameter0: java.lang.Class;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("clazz", v0);
v1 = <org.wildfly.common.selector.Selector: java.lang.ClassValue selVal>;
v2 = virtualinvoke v1.<java.lang.ClassValue: java.lang.Object get(java.lang.Class)>(v0);
v3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v3 == null goto label1;
v4 = virtualinvoke v2.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission getGetPermission()>();
virtualinvoke v3.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>(v4);
label1:
v5 = virtualinvoke v2.<org.wildfly.common.selector.Selector$Holder: java.lang.Object get()>();
if v5 != null goto label2;
v6 = staticinvoke <org.wildfly.common.selector.Selector: org.wildfly.common.selector.Selector nullSelector()>();
goto label3;
label2:
v6 = v5;
label3:
return v6;
}
public static void setSelectorFor(java.lang.Class, org.wildfly.common.selector.Selector)
{
org.wildfly.common.selector.Selector v1;
org.wildfly.common.selector.SelectorPermission v11, v8;
java.lang.SecurityManager v10, v7;
java.lang.ClassValue v2;
java.lang.Class v0;
java.lang.Object v3, v6;
boolean v12, v4, v5, v9;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: org.wildfly.common.selector.Selector;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("clazz", v0);
v2 = <org.wildfly.common.selector.Selector: java.lang.ClassValue selVal>;
v3 = virtualinvoke v2.<java.lang.ClassValue: java.lang.Object get(java.lang.Class)>(v0);
v4 = 0;
v5 = 0;
label1:
v6 = virtualinvoke v3.<org.wildfly.common.selector.Selector$Holder: java.lang.Object get()>();
if v6 != v1 goto label2;
return;
label2:
if v6 != null goto label5;
if v4 != 0 goto label4;
v7 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v7 == null goto label3;
v8 = virtualinvoke v3.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission getSetPermission()>();
virtualinvoke v7.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>(v8);
label3:
v4 = 1;
label4:
v9 = virtualinvoke v3.<org.wildfly.common.selector.Selector$Holder: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v9 == 0 goto label1;
return;
label5:
if v5 != 0 goto label7;
v10 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v10 == null goto label6;
v11 = virtualinvoke v3.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission getChangePermission()>();
virtualinvoke v10.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>(v11);
label6:
v5 = 1;
label7:
v12 = virtualinvoke v3.<org.wildfly.common.selector.Selector$Holder: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v6, v1);
if v12 == 0 goto label1;
return;
}
public static org.wildfly.common.selector.Selector$Getter selectorGetterFor(java.lang.Class)
{
org.wildfly.common.selector.Selector$Getter v5;
org.wildfly.common.selector.SelectorPermission v4;
java.lang.ClassValue v1;
java.lang.Class v0;
java.lang.Object v2;
java.lang.SecurityManager v3;
v0 := @parameter0: java.lang.Class;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("clazz", v0);
v1 = <org.wildfly.common.selector.Selector: java.lang.ClassValue selVal>;
v2 = virtualinvoke v1.<java.lang.ClassValue: java.lang.Object get(java.lang.Class)>(v0);
v3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v3 == null goto label1;
v4 = virtualinvoke v2.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission getGetPermission()>();
virtualinvoke v3.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>(v4);
label1:
v5 = new org.wildfly.common.selector.Selector$Getter;
specialinvoke v5.<org.wildfly.common.selector.Selector$Getter: void <init>(org.wildfly.common.selector.Selector$Holder)>(v2);
return v5;
}
public static java.security.PrivilegedAction selectorGetterActionFor(java.lang.Class)
{
java.lang.Class v0;
java.security.PrivilegedAction v1;
v0 := @parameter0: java.lang.Class;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("clazz", v0);
v1 = staticinvoke <org.wildfly.common.selector.Selector$lambda_selectorGetterActionFor_0__3243: java.security.PrivilegedAction bootstrap$(java.lang.Class)>(v0);
return v1;
}
public static org.wildfly.common.selector.SelectorPermission getGetPermissionFor(java.lang.Class)
{
org.wildfly.common.selector.SelectorPermission v3;
java.lang.ClassValue v1;
java.lang.Class v0;
java.lang.Object v2;
v0 := @parameter0: java.lang.Class;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("clazz", v0);
v1 = <org.wildfly.common.selector.Selector: java.lang.ClassValue selVal>;
v2 = virtualinvoke v1.<java.lang.ClassValue: java.lang.Object get(java.lang.Class)>(v0);
v3 = virtualinvoke v2.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission getGetPermission()>();
return v3;
}
public static org.wildfly.common.selector.SelectorPermission getSetPermissionFor(java.lang.Class)
{
org.wildfly.common.selector.SelectorPermission v3;
java.lang.ClassValue v1;
java.lang.Class v0;
java.lang.Object v2;
v0 := @parameter0: java.lang.Class;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("clazz", v0);
v1 = <org.wildfly.common.selector.Selector: java.lang.ClassValue selVal>;
v2 = virtualinvoke v1.<java.lang.ClassValue: java.lang.Object get(java.lang.Class)>(v0);
v3 = virtualinvoke v2.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission getSetPermission()>();
return v3;
}
public static org.wildfly.common.selector.SelectorPermission getChangePermissionFor(java.lang.Class)
{
org.wildfly.common.selector.SelectorPermission v3;
java.lang.ClassValue v1;
java.lang.Class v0;
java.lang.Object v2;
v0 := @parameter0: java.lang.Class;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("clazz", v0);
v1 = <org.wildfly.common.selector.Selector: java.lang.ClassValue selVal>;
v2 = virtualinvoke v1.<java.lang.ClassValue: java.lang.Object get(java.lang.Class)>(v0);
v3 = virtualinvoke v2.<org.wildfly.common.selector.Selector$Holder: org.wildfly.common.selector.SelectorPermission getChangePermission()>();
return v3;
}
static void <clinit>()
{
org.wildfly.common.selector.Selector$1 v0;
org.wildfly.common.selector.Selector$2 v1;
v0 = new org.wildfly.common.selector.Selector$1;
specialinvoke v0.<org.wildfly.common.selector.Selector$1: void <init>()>();
<org.wildfly.common.selector.Selector: org.wildfly.common.selector.Selector NULL> = v0;
v1 = new org.wildfly.common.selector.Selector$2;
specialinvoke v1.<org.wildfly.common.selector.Selector$2: void <init>()>();
<org.wildfly.common.selector.Selector: java.lang.ClassValue selVal> = v1;
return;
}
}