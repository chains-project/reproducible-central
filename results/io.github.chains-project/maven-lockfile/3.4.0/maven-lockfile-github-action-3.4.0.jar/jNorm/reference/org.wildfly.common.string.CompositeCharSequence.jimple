public class org.wildfly.common.string.CompositeCharSequence extends java.lang.Object implements java.lang.CharSequence, java.io.Serializable
{
private static final long serialVersionUID;
private final java.util.List sequences;
private transient int hashCode;
public transient void <init>(java.lang.CharSequence[])
{
java.lang.CharSequence[] v1;
java.util.List v2;
org.wildfly.common.string.CompositeCharSequence v0;
v0 := @this: org.wildfly.common.string.CompositeCharSequence;
v1 := @parameter0: java.lang.CharSequence[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
specialinvoke v0.<org.wildfly.common.string.CompositeCharSequence: void <init>(java.util.List)>(v2);
return;
}
public void <init>(java.util.List)
{
java.util.List v1;
org.wildfly.common.string.CompositeCharSequence v0;
v0 := @this: org.wildfly.common.string.CompositeCharSequence;
v1 := @parameter0: java.util.List;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.wildfly.common.string.CompositeCharSequence: int hashCode> = 0;
v0.<org.wildfly.common.string.CompositeCharSequence: java.util.List sequences> = v1;
return;
}
public int length()
{
java.util.List v2;
java.util.Iterator v3;
org.wildfly.common.string.CompositeCharSequence v0;
int v1, v6;
java.lang.Object v5;
boolean v4;
v0 := @this: org.wildfly.common.string.CompositeCharSequence;
v1 = 0;
v2 = v0.<org.wildfly.common.string.CompositeCharSequence: java.util.List sequences>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.lang.CharSequence: int length()>();
v1 = v1 + v6;
goto label1;
label2:
return v1;
}
public char charAt(int)
{
java.lang.IndexOutOfBoundsException v10;
java.util.Iterator v4;
char v8;
java.util.List v3;
org.wildfly.common.string.CompositeCharSequence v0;
int v1, v2, v7, v9;
java.lang.Object v6;
boolean v5;
v0 := @this: org.wildfly.common.string.CompositeCharSequence;
v1 := @parameter0: int;
v2 = v1;
v3 = v0.<org.wildfly.common.string.CompositeCharSequence: java.util.List sequences>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label3;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.lang.CharSequence: int length()>();
if v2 >= v7 goto label2;
v8 = interfaceinvoke v6.<java.lang.CharSequence: char charAt(int)>(v2);
return v8;
label2:
v9 = interfaceinvoke v6.<java.lang.CharSequence: int length()>();
v2 = v2 - v9;
goto label1;
label3:
v10 = new java.lang.IndexOutOfBoundsException;
specialinvoke v10.<java.lang.IndexOutOfBoundsException: void <init>()>();
throw v10;
}
public java.lang.CharSequence subSequence(int, int)
{
java.lang.IndexOutOfBoundsException v4;
int v1, v12, v13, v14, v15, v17, v19, v2, v20, v3, v6, v7;
java.util.LinkedList v18, v5;
boolean v10;
java.lang.CharSequence v16;
java.util.Iterator v9;
java.util.List v8;
org.wildfly.common.string.CompositeCharSequence v0, v21;
java.lang.Object v11;
v0 := @this: org.wildfly.common.string.CompositeCharSequence;
v1 := @parameter0: int;
v2 := @parameter1: int;
if v1 < 0 goto label1;
if v1 > v2 goto label1;
v3 = virtualinvoke v0.<org.wildfly.common.string.CompositeCharSequence: int length()>();
if v2 <= v3 goto label2;
label1:
v4 = new java.lang.IndexOutOfBoundsException;
specialinvoke v4.<java.lang.IndexOutOfBoundsException: void <init>()>();
throw v4;
label2:
if v1 != v2 goto label3;
return "";
label3:
v5 = null;
v6 = v1;
v7 = v2;
v8 = v0.<org.wildfly.common.string.CompositeCharSequence: java.util.List sequences>;
v9 = interfaceinvoke v8.<java.util.List: java.util.Iterator iterator()>();
label4:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label8;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = interfaceinvoke v11.<java.lang.CharSequence: int length()>();
if v6 >= v12 goto label7;
if v7 <= 0 goto label7;
v13 = staticinvoke <java.lang.Math: int max(int,int)>(v6, 0);
v14 = interfaceinvoke v11.<java.lang.CharSequence: int length()>();
v15 = staticinvoke <java.lang.Math: int min(int,int)>(v7, v14);
v16 = interfaceinvoke v11.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(v13, v15);
if v5 != null goto label6;
if v6 < 0 goto label5;
v17 = interfaceinvoke v11.<java.lang.CharSequence: int length()>();
if v7 > v17 goto label5;
return v16;
label5:
v18 = new java.util.LinkedList;
specialinvoke v18.<java.util.LinkedList: void <init>()>();
v5 = v18;
label6:
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v16);
label7:
v19 = interfaceinvoke v11.<java.lang.CharSequence: int length()>();
v6 = v6 - v19;
v20 = interfaceinvoke v11.<java.lang.CharSequence: int length()>();
v7 = v7 - v20;
goto label4;
label8:
v21 = new org.wildfly.common.string.CompositeCharSequence;
specialinvoke v21.<org.wildfly.common.string.CompositeCharSequence: void <init>(java.util.List)>(v5);
return v21;
}
public int hashCode()
{
org.wildfly.common.string.CompositeCharSequence v0;
int v1, v2, v3, v4;
char v5;
v0 := @this: org.wildfly.common.string.CompositeCharSequence;
v1 = v0.<org.wildfly.common.string.CompositeCharSequence: int hashCode>;
if v1 != 0 goto label3;
v2 = 0;
label1:
v3 = virtualinvoke v0.<org.wildfly.common.string.CompositeCharSequence: int length()>();
if v2 >= v3 goto label2;
v4 = 31 * v1;
v5 = virtualinvoke v0.<org.wildfly.common.string.CompositeCharSequence: char charAt(int)>(v2);
v1 = v4 + v5;
v2 = v2 + 1;
goto label1;
label2:
v0.<org.wildfly.common.string.CompositeCharSequence: int hashCode> = v1;
label3:
return v1;
}
public boolean equals(java.lang.Object)
{
char v6, v7;
org.wildfly.common.string.CompositeCharSequence v0;
int v3, v4, v5;
java.lang.Object v1;
boolean v2;
v0 := @this: org.wildfly.common.string.CompositeCharSequence;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof java.lang.CharSequence;
if v2 != 0 goto label1;
return 0;
label1:
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v4 = virtualinvoke v0.<org.wildfly.common.string.CompositeCharSequence: int length()>();
if v4 == v3 goto label2;
return 0;
label2:
v5 = 0;
label3:
if v5 >= v3 goto label5;
v6 = virtualinvoke v0.<org.wildfly.common.string.CompositeCharSequence: char charAt(int)>(v5);
v7 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v5);
if v6 == v7 goto label4;
return 0;
label4:
v5 = v5 + 1;
goto label3;
label5:
return 1;
}
public java.lang.String toString()
{
java.util.Iterator v4;
java.nio.CharBuffer v2, v7;
java.util.List v3;
org.wildfly.common.string.CompositeCharSequence v0;
int v1;
char[] v8;
java.lang.Object v6;
java.lang.String v9;
boolean v5;
v0 := @this: org.wildfly.common.string.CompositeCharSequence;
v1 = virtualinvoke v0.<org.wildfly.common.string.CompositeCharSequence: int length()>();
v2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(v1);
v3 = v0.<org.wildfly.common.string.CompositeCharSequence: java.util.List sequences>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(v6);
virtualinvoke v2.<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>(v7);
goto label1;
label2:
v8 = virtualinvoke v2.<java.nio.CharBuffer: char[] array()>();
v9 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(v8);
return v9;
}
}