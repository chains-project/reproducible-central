public class org.yaml.snakeyaml.TypeDescription extends java.lang.Object
{
private static final org.yaml.snakeyaml.internal.Logger log;
private final java.lang.Class type;
private java.lang.Class impl;
private final org.yaml.snakeyaml.nodes.Tag tag;
private transient java.util.Set dumpProperties;
private transient org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils;
private transient boolean delegatesChecked;
private java.util.Map properties;
protected java.util.Set excludes;
protected java.lang.String[] includes;
protected org.yaml.snakeyaml.introspector.BeanAccess beanAccess;
public void <init>(java.lang.Class, org.yaml.snakeyaml.nodes.Tag)
{
java.lang.Class v1;
org.yaml.snakeyaml.TypeDescription v0;
org.yaml.snakeyaml.nodes.Tag v2;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: org.yaml.snakeyaml.nodes.Tag;
specialinvoke v0.<org.yaml.snakeyaml.TypeDescription: void <init>(java.lang.Class,org.yaml.snakeyaml.nodes.Tag,java.lang.Class)>(v1, v2, null);
return;
}
public void <init>(java.lang.Class, org.yaml.snakeyaml.nodes.Tag, java.lang.Class)
{
java.util.Map v4;
java.util.Set v5;
java.lang.Class v1, v3;
org.yaml.snakeyaml.TypeDescription v0;
org.yaml.snakeyaml.nodes.Tag v2;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: org.yaml.snakeyaml.nodes.Tag;
v3 := @parameter2: java.lang.Class;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v0.<org.yaml.snakeyaml.TypeDescription: java.util.Map properties> = v4;
v5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set excludes> = v5;
v0.<org.yaml.snakeyaml.TypeDescription: java.lang.String[] includes> = null;
v0.<org.yaml.snakeyaml.TypeDescription: java.lang.Class type> = v1;
v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.nodes.Tag tag> = v2;
v0.<org.yaml.snakeyaml.TypeDescription: java.lang.Class impl> = v3;
v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.BeanAccess beanAccess> = null;
return;
}
public void <init>(java.lang.Class, java.lang.String)
{
java.lang.Class v1;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v2;
org.yaml.snakeyaml.nodes.Tag v3;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v3.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>(v2);
specialinvoke v0.<org.yaml.snakeyaml.TypeDescription: void <init>(java.lang.Class,org.yaml.snakeyaml.nodes.Tag,java.lang.Class)>(v1, v3, null);
return;
}
public void <init>(java.lang.Class)
{
java.lang.Class v1;
org.yaml.snakeyaml.TypeDescription v0;
org.yaml.snakeyaml.nodes.Tag v2;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.Class;
v2 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v2.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.Class)>(v1);
specialinvoke v0.<org.yaml.snakeyaml.TypeDescription: void <init>(java.lang.Class,org.yaml.snakeyaml.nodes.Tag,java.lang.Class)>(v1, v2, null);
return;
}
public void <init>(java.lang.Class, java.lang.Class)
{
java.lang.Class v1, v2;
org.yaml.snakeyaml.TypeDescription v0;
org.yaml.snakeyaml.nodes.Tag v3;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Class;
v3 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v3.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.Class)>(v1);
specialinvoke v0.<org.yaml.snakeyaml.TypeDescription: void <init>(java.lang.Class,org.yaml.snakeyaml.nodes.Tag,java.lang.Class)>(v1, v3, v2);
return;
}
public org.yaml.snakeyaml.nodes.Tag getTag()
{
org.yaml.snakeyaml.TypeDescription v0;
org.yaml.snakeyaml.nodes.Tag v1;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 = v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.nodes.Tag tag>;
return v1;
}
public java.lang.Class getType()
{
java.lang.Class v1;
org.yaml.snakeyaml.TypeDescription v0;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 = v0.<org.yaml.snakeyaml.TypeDescription: java.lang.Class type>;
return v1;
}
public void putListPropertyType(java.lang.String, java.lang.Class)
{
java.lang.Class[] v3;
java.lang.Class v2;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 = newarray (java.lang.Class)[1];
v3[0] = v2;
virtualinvoke v0.<org.yaml.snakeyaml.TypeDescription: void addPropertyParameters(java.lang.String,java.lang.Class[])>(v1, v3);
return;
}
public void putMapPropertyType(java.lang.String, java.lang.Class, java.lang.Class)
{
java.lang.Class[] v4;
java.lang.Class v2, v3;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.lang.Class;
v4 = newarray (java.lang.Class)[2];
v4[0] = v2;
v4[1] = v3;
virtualinvoke v0.<org.yaml.snakeyaml.TypeDescription: void addPropertyParameters(java.lang.String,java.lang.Class[])>(v1, v4);
return;
}
public transient void addPropertyParameters(java.lang.String, java.lang.Class[])
{
java.util.Map v3, v5;
java.lang.Class[] v2;
java.lang.Object v6;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v1;
boolean v4;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class[];
v3 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Map properties>;
v4 = interfaceinvoke v3.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v4 != 0 goto label1;
virtualinvoke v0.<org.yaml.snakeyaml.TypeDescription: void substituteProperty(java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Class[])>(v1, null, null, null, v2);
goto label2;
label1:
v5 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Map properties>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
virtualinvoke v6.<org.yaml.snakeyaml.introspector.PropertySubstitute: void setActualTypeArguments(java.lang.Class[])>(v2);
label2:
return;
}
public java.lang.String toString()
{
java.lang.Class v1;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v3;
org.yaml.snakeyaml.nodes.Tag v2;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 = virtualinvoke v0.<org.yaml.snakeyaml.TypeDescription: java.lang.Class getType()>();
v2 = virtualinvoke v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.nodes.Tag getTag()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class,org.yaml.snakeyaml.nodes.Tag)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("TypeDescription for \u0001 (tag=\'\u0001\')");
return v3;
}
private void checkDelegates()
{
java.util.Iterator v3;
java.util.Collection v2;
org.yaml.snakeyaml.introspector.Property v7;
java.util.Map v1;
java.lang.Object v5;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v6;
boolean v4;
org.yaml.snakeyaml.error.YAMLException v8;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Map properties>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label5;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
label2:
v6 = virtualinvoke v5.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String getName()>();
v7 = specialinvoke v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.Property discoverProperty(java.lang.String)>(v6);
virtualinvoke v5.<org.yaml.snakeyaml.introspector.PropertySubstitute: void setDelegate(org.yaml.snakeyaml.introspector.Property)>(v7);
label3:
goto label1;
label4:
v8 := @caughtexception;
goto label1;
label5:
v0.<org.yaml.snakeyaml.TypeDescription: boolean delegatesChecked> = 1;
return;
catch org.yaml.snakeyaml.error.YAMLException from label2 to label3 with label4;
}
private org.yaml.snakeyaml.introspector.Property discoverProperty(java.lang.String)
{
org.yaml.snakeyaml.introspector.BeanAccess v3, v9;
org.yaml.snakeyaml.introspector.Property v10, v6;
java.lang.Class v5, v8;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v1;
org.yaml.snakeyaml.introspector.PropertyUtils v2, v4, v7;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils>;
if v2 == null goto label2;
v3 = v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.BeanAccess beanAccess>;
if v3 != null goto label1;
v4 = v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils>;
v5 = v0.<org.yaml.snakeyaml.TypeDescription: java.lang.Class type>;
v6 = virtualinvoke v4.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class,java.lang.String)>(v5, v1);
return v6;
label1:
v7 = v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils>;
v8 = v0.<org.yaml.snakeyaml.TypeDescription: java.lang.Class type>;
v9 = v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.BeanAccess beanAccess>;
v10 = virtualinvoke v7.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class,java.lang.String,org.yaml.snakeyaml.introspector.BeanAccess)>(v8, v1, v9);
return v10;
label2:
return null;
}
public org.yaml.snakeyaml.introspector.Property getProperty(java.lang.String)
{
java.util.Map v3, v5;
java.lang.Object v6;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v1;
boolean v2, v4;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.yaml.snakeyaml.TypeDescription: boolean delegatesChecked>;
if v2 != 0 goto label1;
specialinvoke v0.<org.yaml.snakeyaml.TypeDescription: void checkDelegates()>();
label1:
v3 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Map properties>;
v4 = interfaceinvoke v3.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v4 == 0 goto label2;
v5 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Map properties>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
goto label3;
label2:
v6 = specialinvoke v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.Property discoverProperty(java.lang.String)>(v1);
label3:
return v6;
}
public transient void substituteProperty(java.lang.String, java.lang.Class, java.lang.String, java.lang.String, java.lang.Class[])
{
java.lang.Class[] v5;
java.lang.Class v2;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v1, v3, v4;
org.yaml.snakeyaml.introspector.PropertySubstitute v6;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.lang.Class[];
v6 = new org.yaml.snakeyaml.introspector.PropertySubstitute;
specialinvoke v6.<org.yaml.snakeyaml.introspector.PropertySubstitute: void <init>(java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Class[])>(v1, v2, v3, v4, v5);
virtualinvoke v0.<org.yaml.snakeyaml.TypeDescription: void substituteProperty(org.yaml.snakeyaml.introspector.PropertySubstitute)>(v6);
return;
}
public void substituteProperty(org.yaml.snakeyaml.introspector.PropertySubstitute)
{
org.yaml.snakeyaml.introspector.PropertySubstitute v1;
java.util.LinkedHashMap v4;
java.util.Map v2, v3, v6;
java.lang.Class v5;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v7;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: org.yaml.snakeyaml.introspector.PropertySubstitute;
v2 = <java.util.Collections: java.util.Map EMPTY_MAP>;
v3 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Map properties>;
if v2 != v3 goto label1;
v4 = new java.util.LinkedHashMap;
specialinvoke v4.<java.util.LinkedHashMap: void <init>()>();
v0.<org.yaml.snakeyaml.TypeDescription: java.util.Map properties> = v4;
label1:
v5 = v0.<org.yaml.snakeyaml.TypeDescription: java.lang.Class type>;
virtualinvoke v1.<org.yaml.snakeyaml.introspector.PropertySubstitute: void setTargetType(java.lang.Class)>(v5);
v6 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Map properties>;
v7 = virtualinvoke v1.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String getName()>();
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, v1);
return;
}
public void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
{
org.yaml.snakeyaml.TypeDescription v0;
org.yaml.snakeyaml.introspector.PropertyUtils v1;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: org.yaml.snakeyaml.introspector.PropertyUtils;
v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils> = v1;
return;
}
public transient void setIncludes(java.lang.String[])
{
int v2;
java.lang.String[] v1, v3;
org.yaml.snakeyaml.TypeDescription v0;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.String[];
if v1 == null goto label1;
v2 = lengthof v1;
if v2 <= 0 goto label1;
v3 = v1;
goto label2;
label1:
v3 = null;
label2:
v0.<org.yaml.snakeyaml.TypeDescription: java.lang.String[] includes> = v3;
return;
}
public transient void setExcludes(java.lang.String[])
{
java.util.HashSet v3;
int v2;
java.util.Set v4, v5;
java.lang.String[] v1;
org.yaml.snakeyaml.TypeDescription v0;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.String[];
if v1 == null goto label1;
v2 = lengthof v1;
if v2 <= 0 goto label1;
v3 = new java.util.HashSet;
specialinvoke v3.<java.util.HashSet: void <init>()>();
v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set excludes> = v3;
v4 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set excludes>;
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v4, v1);
goto label2;
label1:
v5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set excludes> = v5;
label2:
return;
}
public java.util.Set getProperties()
{
org.yaml.snakeyaml.introspector.BeanAccess v15, v21;
java.util.Map v23, v38;
boolean v11, v24, v26, v29, v33, v36, v41, v45, v46, v49, v53;
java.util.Collection v39;
org.yaml.snakeyaml.introspector.Property v13;
java.util.Set v1, v10, v12, v14, v18, v2, v22, v25, v31, v34, v35, v43, v47, v51, v54, v55;
org.yaml.snakeyaml.introspector.PropertyUtils v16, v19, v3;
java.lang.String[] v4, v6;
int v7, v8;
java.lang.String v32, v44, v52, v9;
java.util.LinkedHashSet v27, v37, v5;
java.util.Iterator v28, v40, v48;
java.lang.Class v17, v20;
java.lang.Object v30, v42, v50;
org.yaml.snakeyaml.TypeDescription v0;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties>;
if v1 == null goto label01;
v2 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties>;
return v2;
label01:
v3 = v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils>;
if v3 == null goto label17;
v4 = v0.<org.yaml.snakeyaml.TypeDescription: java.lang.String[] includes>;
if v4 == null goto label05;
v5 = new java.util.LinkedHashSet;
specialinvoke v5.<java.util.LinkedHashSet: void <init>()>();
v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties> = v5;
v6 = v0.<org.yaml.snakeyaml.TypeDescription: java.lang.String[] includes>;
v7 = lengthof v6;
v8 = 0;
label02:
if v8 >= v7 goto label04;
v9 = v6[v8];
v10 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set excludes>;
v11 = interfaceinvoke v10.<java.util.Set: boolean contains(java.lang.Object)>(v9);
if v11 != 0 goto label03;
v12 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties>;
v13 = virtualinvoke v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.Property getProperty(java.lang.String)>(v9);
interfaceinvoke v12.<java.util.Set: boolean add(java.lang.Object)>(v13);
label03:
v8 = v8 + 1;
goto label02;
label04:
v14 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties>;
return v14;
label05:
v15 = v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.BeanAccess beanAccess>;
if v15 != null goto label06;
v16 = v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils>;
v17 = v0.<org.yaml.snakeyaml.TypeDescription: java.lang.Class type>;
v18 = virtualinvoke v16.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Set getProperties(java.lang.Class)>(v17);
goto label07;
label06:
v19 = v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils>;
v20 = v0.<org.yaml.snakeyaml.TypeDescription: java.lang.Class type>;
v21 = v0.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.BeanAccess beanAccess>;
v18 = virtualinvoke v19.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Set getProperties(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)>(v20, v21);
label07:
v22 = v18;
v23 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Map properties>;
v24 = interfaceinvoke v23.<java.util.Map: boolean isEmpty()>();
if v24 == 0 goto label11;
v25 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set excludes>;
v26 = interfaceinvoke v25.<java.util.Set: boolean isEmpty()>();
if v26 == 0 goto label08;
v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties> = v18;
return v18;
label08:
v27 = new java.util.LinkedHashSet;
specialinvoke v27.<java.util.LinkedHashSet: void <init>()>();
v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties> = v27;
v28 = interfaceinvoke v18.<java.util.Set: java.util.Iterator iterator()>();
label09:
v29 = interfaceinvoke v28.<java.util.Iterator: boolean hasNext()>();
if v29 == 0 goto label10;
v30 = interfaceinvoke v28.<java.util.Iterator: java.lang.Object next()>();
v31 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set excludes>;
v32 = virtualinvoke v30.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
v33 = interfaceinvoke v31.<java.util.Set: boolean contains(java.lang.Object)>(v32);
if v33 != 0 goto label09;
v34 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties>;
interfaceinvoke v34.<java.util.Set: boolean add(java.lang.Object)>(v30);
goto label09;
label10:
v35 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties>;
return v35;
label11:
v36 = v0.<org.yaml.snakeyaml.TypeDescription: boolean delegatesChecked>;
if v36 != 0 goto label12;
specialinvoke v0.<org.yaml.snakeyaml.TypeDescription: void checkDelegates()>();
label12:
v37 = new java.util.LinkedHashSet;
specialinvoke v37.<java.util.LinkedHashSet: void <init>()>();
v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties> = v37;
v38 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Map properties>;
v39 = interfaceinvoke v38.<java.util.Map: java.util.Collection values()>();
v40 = interfaceinvoke v39.<java.util.Collection: java.util.Iterator iterator()>();
label13:
v41 = interfaceinvoke v40.<java.util.Iterator: boolean hasNext()>();
if v41 == 0 goto label14;
v42 = interfaceinvoke v40.<java.util.Iterator: java.lang.Object next()>();
v43 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set excludes>;
v44 = virtualinvoke v42.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
v45 = interfaceinvoke v43.<java.util.Set: boolean contains(java.lang.Object)>(v44);
if v45 != 0 goto label13;
v46 = virtualinvoke v42.<org.yaml.snakeyaml.introspector.Property: boolean isReadable()>();
if v46 == 0 goto label13;
v47 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties>;
interfaceinvoke v47.<java.util.Set: boolean add(java.lang.Object)>(v42);
goto label13;
label14:
v48 = interfaceinvoke v22.<java.util.Set: java.util.Iterator iterator()>();
label15:
v49 = interfaceinvoke v48.<java.util.Iterator: boolean hasNext()>();
if v49 == 0 goto label16;
v50 = interfaceinvoke v48.<java.util.Iterator: java.lang.Object next()>();
v51 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set excludes>;
v52 = virtualinvoke v50.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
v53 = interfaceinvoke v51.<java.util.Set: boolean contains(java.lang.Object)>(v52);
if v53 != 0 goto label15;
v54 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties>;
interfaceinvoke v54.<java.util.Set: boolean add(java.lang.Object)>(v50);
goto label15;
label16:
v55 = v0.<org.yaml.snakeyaml.TypeDescription: java.util.Set dumpProperties>;
return v55;
label17:
return null;
}
public boolean setupPropertyType(java.lang.String, org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Node v2;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.yaml.snakeyaml.nodes.Node;
return 0;
}
public boolean setProperty(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.Exception
{
java.lang.Object v1, v3;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v2;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Object;
return 0;
}
public java.lang.Object newInstance(org.yaml.snakeyaml.nodes.Node)
{
java.lang.Object[] v6;
org.yaml.snakeyaml.internal.Logger v9;
java.lang.Class[] v4;
java.lang.reflect.Constructor v5;
java.lang.Exception v8;
org.yaml.snakeyaml.nodes.Node v1;
java.lang.Class v2, v3;
java.lang.Object v7;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v10;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = v0.<org.yaml.snakeyaml.TypeDescription: java.lang.Class impl>;
if v2 == null goto label4;
label1:
v3 = v0.<org.yaml.snakeyaml.TypeDescription: java.lang.Class impl>;
v4 = newarray (java.lang.Class)[0];
v5 = virtualinvoke v3.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v4);
virtualinvoke v5.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
v6 = newarray (java.lang.Object)[0];
v7 = virtualinvoke v5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v6);
label2:
return v7;
label3:
v8 := @caughtexception;
v9 = <org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.internal.Logger log>;
v10 = virtualinvoke v8.<java.lang.Exception: java.lang.String getLocalizedMessage()>();
virtualinvoke v9.<org.yaml.snakeyaml.internal.Logger: void warn(java.lang.String)>(v10);
v0.<org.yaml.snakeyaml.TypeDescription: java.lang.Class impl> = null;
label4:
return null;
catch java.lang.Exception from label1 to label2 with label3;
}
public java.lang.Object newInstance(java.lang.String, org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Node v2;
org.yaml.snakeyaml.TypeDescription v0;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.yaml.snakeyaml.nodes.Node;
return null;
}
public java.lang.Object finalizeConstruction(java.lang.Object)
{
java.lang.Object v1;
org.yaml.snakeyaml.TypeDescription v0;
v0 := @this: org.yaml.snakeyaml.TypeDescription;
v1 := @parameter0: java.lang.Object;
return v1;
}
static void <clinit>()
{
java.lang.Package v1;
org.yaml.snakeyaml.internal.Logger v3;
java.lang.Class v0;
java.lang.String v2;
v0 = class "Lorg/yaml/snakeyaml/TypeDescription;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.Package getPackage()>();
v2 = virtualinvoke v1.<java.lang.Package: java.lang.String getName()>();
v3 = staticinvoke <org.yaml.snakeyaml.internal.Logger: org.yaml.snakeyaml.internal.Logger getLogger(java.lang.String)>(v2);
<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.internal.Logger log> = v3;
return;
}
}