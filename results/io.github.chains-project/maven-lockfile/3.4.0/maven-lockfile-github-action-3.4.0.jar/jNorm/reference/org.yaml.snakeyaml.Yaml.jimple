public class org.yaml.snakeyaml.Yaml extends java.lang.Object
{
protected final org.yaml.snakeyaml.resolver.Resolver resolver;
private java.lang.String name;
protected org.yaml.snakeyaml.constructor.BaseConstructor constructor;
protected org.yaml.snakeyaml.representer.Representer representer;
protected org.yaml.snakeyaml.DumperOptions dumperOptions;
protected org.yaml.snakeyaml.LoaderOptions loadingConfig;
public void <init>()
{
org.yaml.snakeyaml.DumperOptions v4;
org.yaml.snakeyaml.constructor.Constructor v1;
org.yaml.snakeyaml.LoaderOptions v2;
org.yaml.snakeyaml.representer.Representer v3;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 = new org.yaml.snakeyaml.constructor.Constructor;
v2 = new org.yaml.snakeyaml.LoaderOptions;
specialinvoke v2.<org.yaml.snakeyaml.LoaderOptions: void <init>()>();
specialinvoke v1.<org.yaml.snakeyaml.constructor.Constructor: void <init>(org.yaml.snakeyaml.LoaderOptions)>(v2);
v3 = new org.yaml.snakeyaml.representer.Representer;
v4 = new org.yaml.snakeyaml.DumperOptions;
specialinvoke v4.<org.yaml.snakeyaml.DumperOptions: void <init>()>();
specialinvoke v3.<org.yaml.snakeyaml.representer.Representer: void <init>(org.yaml.snakeyaml.DumperOptions)>(v4);
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void <init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer)>(v1, v3);
return;
}
public void <init>(org.yaml.snakeyaml.DumperOptions)
{
org.yaml.snakeyaml.DumperOptions v1;
org.yaml.snakeyaml.constructor.Constructor v2;
org.yaml.snakeyaml.LoaderOptions v3;
org.yaml.snakeyaml.representer.Representer v4;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.DumperOptions;
v2 = new org.yaml.snakeyaml.constructor.Constructor;
v3 = new org.yaml.snakeyaml.LoaderOptions;
specialinvoke v3.<org.yaml.snakeyaml.LoaderOptions: void <init>()>();
specialinvoke v2.<org.yaml.snakeyaml.constructor.Constructor: void <init>(org.yaml.snakeyaml.LoaderOptions)>(v3);
v4 = new org.yaml.snakeyaml.representer.Representer;
specialinvoke v4.<org.yaml.snakeyaml.representer.Representer: void <init>(org.yaml.snakeyaml.DumperOptions)>(v1);
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void <init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions)>(v2, v4, v1);
return;
}
public void <init>(org.yaml.snakeyaml.LoaderOptions)
{
org.yaml.snakeyaml.DumperOptions v4, v5;
org.yaml.snakeyaml.constructor.Constructor v2;
org.yaml.snakeyaml.LoaderOptions v1;
org.yaml.snakeyaml.representer.Representer v3;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.LoaderOptions;
v2 = new org.yaml.snakeyaml.constructor.Constructor;
specialinvoke v2.<org.yaml.snakeyaml.constructor.Constructor: void <init>(org.yaml.snakeyaml.LoaderOptions)>(v1);
v3 = new org.yaml.snakeyaml.representer.Representer;
v4 = new org.yaml.snakeyaml.DumperOptions;
specialinvoke v4.<org.yaml.snakeyaml.DumperOptions: void <init>()>();
specialinvoke v3.<org.yaml.snakeyaml.representer.Representer: void <init>(org.yaml.snakeyaml.DumperOptions)>(v4);
v5 = new org.yaml.snakeyaml.DumperOptions;
specialinvoke v5.<org.yaml.snakeyaml.DumperOptions: void <init>()>();
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void <init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.LoaderOptions)>(v2, v3, v5, v1);
return;
}
public void <init>(org.yaml.snakeyaml.representer.Representer)
{
org.yaml.snakeyaml.constructor.Constructor v2;
org.yaml.snakeyaml.LoaderOptions v3;
org.yaml.snakeyaml.representer.Representer v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.representer.Representer;
v2 = new org.yaml.snakeyaml.constructor.Constructor;
v3 = new org.yaml.snakeyaml.LoaderOptions;
specialinvoke v3.<org.yaml.snakeyaml.LoaderOptions: void <init>()>();
specialinvoke v2.<org.yaml.snakeyaml.constructor.Constructor: void <init>(org.yaml.snakeyaml.LoaderOptions)>(v3);
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void <init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer)>(v2, v1);
return;
}
public void <init>(org.yaml.snakeyaml.constructor.BaseConstructor)
{
org.yaml.snakeyaml.DumperOptions v3;
org.yaml.snakeyaml.constructor.BaseConstructor v1;
org.yaml.snakeyaml.representer.Representer v2;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.constructor.BaseConstructor;
v2 = new org.yaml.snakeyaml.representer.Representer;
v3 = new org.yaml.snakeyaml.DumperOptions;
specialinvoke v3.<org.yaml.snakeyaml.DumperOptions: void <init>()>();
specialinvoke v2.<org.yaml.snakeyaml.representer.Representer: void <init>(org.yaml.snakeyaml.DumperOptions)>(v3);
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void <init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer)>(v1, v2);
return;
}
public void <init>(org.yaml.snakeyaml.constructor.BaseConstructor, org.yaml.snakeyaml.representer.Representer)
{
org.yaml.snakeyaml.DumperOptions v3;
org.yaml.snakeyaml.constructor.BaseConstructor v1;
org.yaml.snakeyaml.representer.Representer v2;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.constructor.BaseConstructor;
v2 := @parameter1: org.yaml.snakeyaml.representer.Representer;
v3 = staticinvoke <org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.DumperOptions initDumperOptions(org.yaml.snakeyaml.representer.Representer)>(v2);
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void <init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions)>(v1, v2, v3);
return;
}
private static org.yaml.snakeyaml.DumperOptions initDumperOptions(org.yaml.snakeyaml.representer.Representer)
{
org.yaml.snakeyaml.DumperOptions v1;
java.util.TimeZone v6;
org.yaml.snakeyaml.DumperOptions$FlowStyle v2;
org.yaml.snakeyaml.DumperOptions$ScalarStyle v3;
org.yaml.snakeyaml.representer.Representer v0;
org.yaml.snakeyaml.introspector.PropertyUtils v4;
boolean v5;
v0 := @parameter0: org.yaml.snakeyaml.representer.Representer;
v1 = new org.yaml.snakeyaml.DumperOptions;
specialinvoke v1.<org.yaml.snakeyaml.DumperOptions: void <init>()>();
v2 = virtualinvoke v0.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.DumperOptions$FlowStyle getDefaultFlowStyle()>();
virtualinvoke v1.<org.yaml.snakeyaml.DumperOptions: void setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v2);
v3 = virtualinvoke v0.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.DumperOptions$ScalarStyle getDefaultScalarStyle()>();
virtualinvoke v1.<org.yaml.snakeyaml.DumperOptions: void setDefaultScalarStyle(org.yaml.snakeyaml.DumperOptions$ScalarStyle)>(v3);
v4 = virtualinvoke v0.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
v5 = virtualinvoke v4.<org.yaml.snakeyaml.introspector.PropertyUtils: boolean isAllowReadOnlyProperties()>();
virtualinvoke v1.<org.yaml.snakeyaml.DumperOptions: void setAllowReadOnlyProperties(boolean)>(v5);
v6 = virtualinvoke v0.<org.yaml.snakeyaml.representer.Representer: java.util.TimeZone getTimeZone()>();
virtualinvoke v1.<org.yaml.snakeyaml.DumperOptions: void setTimeZone(java.util.TimeZone)>(v6);
return v1;
}
public void <init>(org.yaml.snakeyaml.representer.Representer, org.yaml.snakeyaml.DumperOptions)
{
org.yaml.snakeyaml.DumperOptions v2;
org.yaml.snakeyaml.constructor.Constructor v3;
org.yaml.snakeyaml.LoaderOptions v4;
org.yaml.snakeyaml.representer.Representer v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.representer.Representer;
v2 := @parameter1: org.yaml.snakeyaml.DumperOptions;
v3 = new org.yaml.snakeyaml.constructor.Constructor;
v4 = new org.yaml.snakeyaml.LoaderOptions;
specialinvoke v4.<org.yaml.snakeyaml.LoaderOptions: void <init>()>();
specialinvoke v3.<org.yaml.snakeyaml.constructor.Constructor: void <init>(org.yaml.snakeyaml.LoaderOptions)>(v4);
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void <init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions)>(v3, v1, v2);
return;
}
public void <init>(org.yaml.snakeyaml.constructor.BaseConstructor, org.yaml.snakeyaml.representer.Representer, org.yaml.snakeyaml.DumperOptions)
{
org.yaml.snakeyaml.DumperOptions v3;
org.yaml.snakeyaml.LoaderOptions v4;
org.yaml.snakeyaml.constructor.BaseConstructor v1;
org.yaml.snakeyaml.representer.Representer v2;
org.yaml.snakeyaml.resolver.Resolver v5;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.constructor.BaseConstructor;
v2 := @parameter1: org.yaml.snakeyaml.representer.Representer;
v3 := @parameter2: org.yaml.snakeyaml.DumperOptions;
v4 = virtualinvoke v1.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.LoaderOptions getLoadingConfig()>();
v5 = new org.yaml.snakeyaml.resolver.Resolver;
specialinvoke v5.<org.yaml.snakeyaml.resolver.Resolver: void <init>()>();
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void <init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.LoaderOptions,org.yaml.snakeyaml.resolver.Resolver)>(v1, v2, v3, v4, v5);
return;
}
public void <init>(org.yaml.snakeyaml.constructor.BaseConstructor, org.yaml.snakeyaml.representer.Representer, org.yaml.snakeyaml.DumperOptions, org.yaml.snakeyaml.LoaderOptions)
{
org.yaml.snakeyaml.DumperOptions v3;
org.yaml.snakeyaml.LoaderOptions v4;
org.yaml.snakeyaml.constructor.BaseConstructor v1;
org.yaml.snakeyaml.representer.Representer v2;
org.yaml.snakeyaml.resolver.Resolver v5;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.constructor.BaseConstructor;
v2 := @parameter1: org.yaml.snakeyaml.representer.Representer;
v3 := @parameter2: org.yaml.snakeyaml.DumperOptions;
v4 := @parameter3: org.yaml.snakeyaml.LoaderOptions;
v5 = new org.yaml.snakeyaml.resolver.Resolver;
specialinvoke v5.<org.yaml.snakeyaml.resolver.Resolver: void <init>()>();
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void <init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.LoaderOptions,org.yaml.snakeyaml.resolver.Resolver)>(v1, v2, v3, v4, v5);
return;
}
public void <init>(org.yaml.snakeyaml.constructor.BaseConstructor, org.yaml.snakeyaml.representer.Representer, org.yaml.snakeyaml.DumperOptions, org.yaml.snakeyaml.resolver.Resolver)
{
org.yaml.snakeyaml.DumperOptions v3;
org.yaml.snakeyaml.LoaderOptions v5;
org.yaml.snakeyaml.constructor.BaseConstructor v1;
org.yaml.snakeyaml.representer.Representer v2;
org.yaml.snakeyaml.resolver.Resolver v4;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.constructor.BaseConstructor;
v2 := @parameter1: org.yaml.snakeyaml.representer.Representer;
v3 := @parameter2: org.yaml.snakeyaml.DumperOptions;
v4 := @parameter3: org.yaml.snakeyaml.resolver.Resolver;
v5 = new org.yaml.snakeyaml.LoaderOptions;
specialinvoke v5.<org.yaml.snakeyaml.LoaderOptions: void <init>()>();
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void <init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.LoaderOptions,org.yaml.snakeyaml.resolver.Resolver)>(v1, v2, v3, v5, v4);
return;
}
public void <init>(org.yaml.snakeyaml.constructor.BaseConstructor, org.yaml.snakeyaml.representer.Representer, org.yaml.snakeyaml.DumperOptions, org.yaml.snakeyaml.LoaderOptions, org.yaml.snakeyaml.resolver.Resolver)
{
org.yaml.snakeyaml.DumperOptions$FlowStyle v23;
org.yaml.snakeyaml.DumperOptions$ScalarStyle v24;
org.yaml.snakeyaml.constructor.BaseConstructor v1, v15, v17;
java.lang.NullPointerException v10, v6, v7, v8, v9;
org.yaml.snakeyaml.Yaml v0;
org.yaml.snakeyaml.DumperOptions v3;
int v20, v21, v28;
org.yaml.snakeyaml.resolver.Resolver v5;
java.lang.String v29;
boolean v11, v13, v16, v18, v19, v26;
java.util.TimeZone v27;
org.yaml.snakeyaml.LoaderOptions v4;
org.yaml.snakeyaml.representer.Representer v2;
org.yaml.snakeyaml.introspector.PropertyUtils v12, v14, v25;
org.yaml.snakeyaml.error.YAMLException v22;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.constructor.BaseConstructor;
v2 := @parameter1: org.yaml.snakeyaml.representer.Representer;
v3 := @parameter2: org.yaml.snakeyaml.DumperOptions;
v4 := @parameter3: org.yaml.snakeyaml.LoaderOptions;
v5 := @parameter4: org.yaml.snakeyaml.resolver.Resolver;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 != null goto label1;
v6 = new java.lang.NullPointerException;
specialinvoke v6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Constructor must be provided");
throw v6;
label1:
if v2 != null goto label2;
v7 = new java.lang.NullPointerException;
specialinvoke v7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Representer must be provided");
throw v7;
label2:
if v3 != null goto label3;
v8 = new java.lang.NullPointerException;
specialinvoke v8.<java.lang.NullPointerException: void <init>(java.lang.String)>("DumperOptions must be provided");
throw v8;
label3:
if v4 != null goto label4;
v9 = new java.lang.NullPointerException;
specialinvoke v9.<java.lang.NullPointerException: void <init>(java.lang.String)>("LoaderOptions must be provided");
throw v9;
label4:
if v5 != null goto label5;
v10 = new java.lang.NullPointerException;
specialinvoke v10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Resolver must be provided");
throw v10;
label5:
v11 = virtualinvoke v1.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean isExplicitPropertyUtils()>();
if v11 != 0 goto label6;
v12 = virtualinvoke v2.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
virtualinvoke v1.<org.yaml.snakeyaml.constructor.BaseConstructor: void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)>(v12);
goto label7;
label6:
v13 = virtualinvoke v2.<org.yaml.snakeyaml.representer.Representer: boolean isExplicitPropertyUtils()>();
if v13 != 0 goto label7;
v14 = virtualinvoke v1.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
virtualinvoke v2.<org.yaml.snakeyaml.representer.Representer: void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)>(v14);
label7:
v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.constructor.BaseConstructor constructor> = v1;
v15 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.constructor.BaseConstructor constructor>;
v16 = virtualinvoke v4.<org.yaml.snakeyaml.LoaderOptions: boolean isAllowDuplicateKeys()>();
virtualinvoke v15.<org.yaml.snakeyaml.constructor.BaseConstructor: void setAllowDuplicateKeys(boolean)>(v16);
v17 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.constructor.BaseConstructor constructor>;
v18 = virtualinvoke v4.<org.yaml.snakeyaml.LoaderOptions: boolean isWrappedToRootException()>();
virtualinvoke v17.<org.yaml.snakeyaml.constructor.BaseConstructor: void setWrappedToRootException(boolean)>(v18);
v19 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: boolean getIndentWithIndicator()>();
if v19 != 0 goto label8;
v20 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: int getIndent()>();
v21 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: int getIndicatorIndent()>();
if v20 > v21 goto label8;
v22 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v22.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>("Indicator indent must be smaller then indent.");
throw v22;
label8:
v23 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: org.yaml.snakeyaml.DumperOptions$FlowStyle getDefaultFlowStyle()>();
virtualinvoke v2.<org.yaml.snakeyaml.representer.Representer: void setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v23);
v24 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: org.yaml.snakeyaml.DumperOptions$ScalarStyle getDefaultScalarStyle()>();
virtualinvoke v2.<org.yaml.snakeyaml.representer.Representer: void setDefaultScalarStyle(org.yaml.snakeyaml.DumperOptions$ScalarStyle)>(v24);
v25 = virtualinvoke v2.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
v26 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: boolean isAllowReadOnlyProperties()>();
virtualinvoke v25.<org.yaml.snakeyaml.introspector.PropertyUtils: void setAllowReadOnlyProperties(boolean)>(v26);
v27 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: java.util.TimeZone getTimeZone()>();
virtualinvoke v2.<org.yaml.snakeyaml.representer.Representer: void setTimeZone(java.util.TimeZone)>(v27);
v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.representer.Representer representer> = v2;
v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.DumperOptions dumperOptions> = v3;
v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.LoaderOptions loadingConfig> = v4;
v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.resolver.Resolver resolver> = v5;
v28 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v0);
v29 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v28) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Yaml:\u0001");
v0.<org.yaml.snakeyaml.Yaml: java.lang.String name> = v29;
return;
}
public java.lang.String dump(java.lang.Object)
{
java.util.Iterator v3;
java.lang.Object v1;
java.lang.String v4;
java.util.ArrayList v2;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.lang.Object;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(1);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<org.yaml.snakeyaml.Yaml: java.lang.String dumpAll(java.util.Iterator)>(v3);
return v4;
}
public org.yaml.snakeyaml.nodes.Node represent(java.lang.Object)
{
org.yaml.snakeyaml.nodes.Node v3;
org.yaml.snakeyaml.representer.Representer v2;
java.lang.Object v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.lang.Object;
v2 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.representer.Representer representer>;
v3 = virtualinvoke v2.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.nodes.Node represent(java.lang.Object)>(v1);
return v3;
}
public java.lang.String dumpAll(java.util.Iterator)
{
java.util.Iterator v1;
java.io.StringWriter v2;
java.lang.String v3;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.util.Iterator;
v2 = new java.io.StringWriter;
specialinvoke v2.<java.io.StringWriter: void <init>()>();
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void dumpAll(java.util.Iterator,java.io.Writer,org.yaml.snakeyaml.nodes.Tag)>(v1, v2, null);
v3 = virtualinvoke v2.<java.io.StringWriter: java.lang.String toString()>();
return v3;
}
public void dump(java.lang.Object, java.io.Writer)
{
java.util.Iterator v4;
java.io.Writer v2;
java.lang.Object v1;
java.util.ArrayList v3;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.io.Writer;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>(int)>(1);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v1);
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void dumpAll(java.util.Iterator,java.io.Writer,org.yaml.snakeyaml.nodes.Tag)>(v4, v2, null);
return;
}
public void dumpAll(java.util.Iterator, java.io.Writer)
{
java.io.Writer v2;
java.util.Iterator v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.util.Iterator;
v2 := @parameter1: java.io.Writer;
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void dumpAll(java.util.Iterator,java.io.Writer,org.yaml.snakeyaml.nodes.Tag)>(v1, v2, null);
return;
}
private void dumpAll(java.util.Iterator, java.io.Writer, org.yaml.snakeyaml.nodes.Tag)
{
java.util.Iterator v1;
java.io.IOException v13;
org.yaml.snakeyaml.nodes.Tag v3;
org.yaml.snakeyaml.Yaml v0;
org.yaml.snakeyaml.DumperOptions v6, v8;
org.yaml.snakeyaml.nodes.Node v12;
org.yaml.snakeyaml.serializer.Serializer v4;
org.yaml.snakeyaml.emitter.Emitter v5;
java.io.Writer v2;
org.yaml.snakeyaml.representer.Representer v10;
org.yaml.snakeyaml.resolver.Resolver v7;
java.lang.Object v11;
boolean v9;
org.yaml.snakeyaml.error.YAMLException v14;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.util.Iterator;
v2 := @parameter1: java.io.Writer;
v3 := @parameter2: org.yaml.snakeyaml.nodes.Tag;
v4 = new org.yaml.snakeyaml.serializer.Serializer;
v5 = new org.yaml.snakeyaml.emitter.Emitter;
v6 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.DumperOptions dumperOptions>;
specialinvoke v5.<org.yaml.snakeyaml.emitter.Emitter: void <init>(java.io.Writer,org.yaml.snakeyaml.DumperOptions)>(v2, v6);
v7 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.resolver.Resolver resolver>;
v8 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.DumperOptions dumperOptions>;
specialinvoke v4.<org.yaml.snakeyaml.serializer.Serializer: void <init>(org.yaml.snakeyaml.emitter.Emitable,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.nodes.Tag)>(v5, v7, v8, v3);
label1:
virtualinvoke v4.<org.yaml.snakeyaml.serializer.Serializer: void open()>();
label2:
v9 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label3;
v10 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.representer.Representer representer>;
v11 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
v12 = virtualinvoke v10.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.nodes.Node represent(java.lang.Object)>(v11);
virtualinvoke v4.<org.yaml.snakeyaml.serializer.Serializer: void serialize(org.yaml.snakeyaml.nodes.Node)>(v12);
goto label2;
label3:
virtualinvoke v4.<org.yaml.snakeyaml.serializer.Serializer: void close()>();
label4:
goto label6;
label5:
v13 := @caughtexception;
v14 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v14.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.Throwable)>(v13);
throw v14;
label6:
return;
catch java.io.IOException from label1 to label4 with label5;
}
public java.lang.String dumpAs(java.lang.Object, org.yaml.snakeyaml.nodes.Tag, org.yaml.snakeyaml.DumperOptions$FlowStyle)
{
java.util.Iterator v9;
java.io.StringWriter v8;
org.yaml.snakeyaml.DumperOptions$FlowStyle v3, v5;
org.yaml.snakeyaml.nodes.Tag v2;
java.util.ArrayList v7;
org.yaml.snakeyaml.Yaml v0;
org.yaml.snakeyaml.representer.Representer v10, v4, v6;
java.lang.Object v1;
java.lang.String v11;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: org.yaml.snakeyaml.nodes.Tag;
v3 := @parameter2: org.yaml.snakeyaml.DumperOptions$FlowStyle;
v4 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.representer.Representer representer>;
v5 = virtualinvoke v4.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.DumperOptions$FlowStyle getDefaultFlowStyle()>();
if v3 == null goto label1;
v6 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.representer.Representer representer>;
virtualinvoke v6.<org.yaml.snakeyaml.representer.Representer: void setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v3);
label1:
v7 = new java.util.ArrayList;
specialinvoke v7.<java.util.ArrayList: void <init>(int)>(1);
interfaceinvoke v7.<java.util.List: boolean add(java.lang.Object)>(v1);
v8 = new java.io.StringWriter;
specialinvoke v8.<java.io.StringWriter: void <init>()>();
v9 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
specialinvoke v0.<org.yaml.snakeyaml.Yaml: void dumpAll(java.util.Iterator,java.io.Writer,org.yaml.snakeyaml.nodes.Tag)>(v9, v8, v2);
v10 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.representer.Representer representer>;
virtualinvoke v10.<org.yaml.snakeyaml.representer.Representer: void setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v5);
v11 = virtualinvoke v8.<java.io.StringWriter: java.lang.String toString()>();
return v11;
}
public java.lang.String dumpAsMap(java.lang.Object)
{
org.yaml.snakeyaml.DumperOptions$FlowStyle v3;
java.lang.Object v1;
java.lang.String v4;
org.yaml.snakeyaml.nodes.Tag v2;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.lang.Object;
v2 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MAP>;
v3 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle BLOCK>;
v4 = virtualinvoke v0.<org.yaml.snakeyaml.Yaml: java.lang.String dumpAs(java.lang.Object,org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v1, v2, v3);
return v4;
}
public void serialize(org.yaml.snakeyaml.nodes.Node, java.io.Writer)
{
java.io.IOException v8;
org.yaml.snakeyaml.Yaml v0;
org.yaml.snakeyaml.DumperOptions v5, v7;
org.yaml.snakeyaml.nodes.Node v1;
org.yaml.snakeyaml.serializer.Serializer v3;
org.yaml.snakeyaml.emitter.Emitter v4;
java.io.Writer v2;
org.yaml.snakeyaml.resolver.Resolver v6;
org.yaml.snakeyaml.error.YAMLException v9;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 := @parameter1: java.io.Writer;
v3 = new org.yaml.snakeyaml.serializer.Serializer;
v4 = new org.yaml.snakeyaml.emitter.Emitter;
v5 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.DumperOptions dumperOptions>;
specialinvoke v4.<org.yaml.snakeyaml.emitter.Emitter: void <init>(java.io.Writer,org.yaml.snakeyaml.DumperOptions)>(v2, v5);
v6 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.resolver.Resolver resolver>;
v7 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.DumperOptions dumperOptions>;
specialinvoke v3.<org.yaml.snakeyaml.serializer.Serializer: void <init>(org.yaml.snakeyaml.emitter.Emitable,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.nodes.Tag)>(v4, v6, v7, null);
label1:
virtualinvoke v3.<org.yaml.snakeyaml.serializer.Serializer: void open()>();
virtualinvoke v3.<org.yaml.snakeyaml.serializer.Serializer: void serialize(org.yaml.snakeyaml.nodes.Node)>(v1);
virtualinvoke v3.<org.yaml.snakeyaml.serializer.Serializer: void close()>();
label2:
goto label4;
label3:
v8 := @caughtexception;
v9 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v9.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.Throwable)>(v8);
throw v9;
label4:
return;
catch java.io.IOException from label1 to label2 with label3;
}
public java.util.List serialize(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.Yaml$SilentEmitter v2;
java.io.IOException v6;
org.yaml.snakeyaml.Yaml v0;
org.yaml.snakeyaml.DumperOptions v5;
org.yaml.snakeyaml.nodes.Node v1;
org.yaml.snakeyaml.serializer.Serializer v3;
java.util.List v8;
org.yaml.snakeyaml.resolver.Resolver v4;
org.yaml.snakeyaml.error.YAMLException v7;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = new org.yaml.snakeyaml.Yaml$SilentEmitter;
specialinvoke v2.<org.yaml.snakeyaml.Yaml$SilentEmitter: void <init>()>();
v3 = new org.yaml.snakeyaml.serializer.Serializer;
v4 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.resolver.Resolver resolver>;
v5 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.DumperOptions dumperOptions>;
specialinvoke v3.<org.yaml.snakeyaml.serializer.Serializer: void <init>(org.yaml.snakeyaml.emitter.Emitable,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.nodes.Tag)>(v2, v4, v5, null);
label1:
virtualinvoke v3.<org.yaml.snakeyaml.serializer.Serializer: void open()>();
virtualinvoke v3.<org.yaml.snakeyaml.serializer.Serializer: void serialize(org.yaml.snakeyaml.nodes.Node)>(v1);
virtualinvoke v3.<org.yaml.snakeyaml.serializer.Serializer: void close()>();
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v7.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.Throwable)>(v6);
throw v7;
label4:
v8 = virtualinvoke v2.<org.yaml.snakeyaml.Yaml$SilentEmitter: java.util.List getEvents()>();
return v8;
catch java.io.IOException from label1 to label2 with label3;
}
public java.lang.Object load(java.lang.String)
{
org.yaml.snakeyaml.reader.StreamReader v2;
java.lang.Object v3;
java.lang.String v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.lang.String;
v2 = new org.yaml.snakeyaml.reader.StreamReader;
specialinvoke v2.<org.yaml.snakeyaml.reader.StreamReader: void <init>(java.lang.String)>(v1);
v3 = specialinvoke v0.<org.yaml.snakeyaml.Yaml: java.lang.Object loadFromReader(org.yaml.snakeyaml.reader.StreamReader,java.lang.Class)>(v2, class "Ljava/lang/Object;");
return v3;
}
public java.lang.Object load(java.io.InputStream)
{
org.yaml.snakeyaml.reader.UnicodeReader v3;
org.yaml.snakeyaml.reader.StreamReader v2;
java.lang.Object v4;
java.io.InputStream v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.io.InputStream;
v2 = new org.yaml.snakeyaml.reader.StreamReader;
v3 = new org.yaml.snakeyaml.reader.UnicodeReader;
specialinvoke v3.<org.yaml.snakeyaml.reader.UnicodeReader: void <init>(java.io.InputStream)>(v1);
specialinvoke v2.<org.yaml.snakeyaml.reader.StreamReader: void <init>(java.io.Reader)>(v3);
v4 = specialinvoke v0.<org.yaml.snakeyaml.Yaml: java.lang.Object loadFromReader(org.yaml.snakeyaml.reader.StreamReader,java.lang.Class)>(v2, class "Ljava/lang/Object;");
return v4;
}
public java.lang.Object load(java.io.Reader)
{
org.yaml.snakeyaml.reader.StreamReader v2;
java.lang.Object v3;
java.io.Reader v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.io.Reader;
v2 = new org.yaml.snakeyaml.reader.StreamReader;
specialinvoke v2.<org.yaml.snakeyaml.reader.StreamReader: void <init>(java.io.Reader)>(v1);
v3 = specialinvoke v0.<org.yaml.snakeyaml.Yaml: java.lang.Object loadFromReader(org.yaml.snakeyaml.reader.StreamReader,java.lang.Class)>(v2, class "Ljava/lang/Object;");
return v3;
}
public java.lang.Object loadAs(java.io.Reader, java.lang.Class)
{
org.yaml.snakeyaml.reader.StreamReader v3;
java.lang.Class v2;
java.lang.Object v4;
java.io.Reader v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: java.lang.Class;
v3 = new org.yaml.snakeyaml.reader.StreamReader;
specialinvoke v3.<org.yaml.snakeyaml.reader.StreamReader: void <init>(java.io.Reader)>(v1);
v4 = specialinvoke v0.<org.yaml.snakeyaml.Yaml: java.lang.Object loadFromReader(org.yaml.snakeyaml.reader.StreamReader,java.lang.Class)>(v3, v2);
return v4;
}
public java.lang.Object loadAs(java.lang.String, java.lang.Class)
{
org.yaml.snakeyaml.reader.StreamReader v3;
java.lang.Class v2;
java.lang.Object v4;
java.lang.String v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 = new org.yaml.snakeyaml.reader.StreamReader;
specialinvoke v3.<org.yaml.snakeyaml.reader.StreamReader: void <init>(java.lang.String)>(v1);
v4 = specialinvoke v0.<org.yaml.snakeyaml.Yaml: java.lang.Object loadFromReader(org.yaml.snakeyaml.reader.StreamReader,java.lang.Class)>(v3, v2);
return v4;
}
public java.lang.Object loadAs(java.io.InputStream, java.lang.Class)
{
org.yaml.snakeyaml.reader.UnicodeReader v4;
org.yaml.snakeyaml.reader.StreamReader v3;
java.lang.Class v2;
java.lang.Object v5;
java.io.InputStream v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.lang.Class;
v3 = new org.yaml.snakeyaml.reader.StreamReader;
v4 = new org.yaml.snakeyaml.reader.UnicodeReader;
specialinvoke v4.<org.yaml.snakeyaml.reader.UnicodeReader: void <init>(java.io.InputStream)>(v1);
specialinvoke v3.<org.yaml.snakeyaml.reader.StreamReader: void <init>(java.io.Reader)>(v4);
v5 = specialinvoke v0.<org.yaml.snakeyaml.Yaml: java.lang.Object loadFromReader(org.yaml.snakeyaml.reader.StreamReader,java.lang.Class)>(v3, v2);
return v5;
}
private java.lang.Object loadFromReader(org.yaml.snakeyaml.reader.StreamReader, java.lang.Class)
{
org.yaml.snakeyaml.parser.ParserImpl v4;
org.yaml.snakeyaml.LoaderOptions v5, v7;
org.yaml.snakeyaml.constructor.BaseConstructor v8, v9;
org.yaml.snakeyaml.Yaml v0;
org.yaml.snakeyaml.composer.Composer v3;
org.yaml.snakeyaml.reader.StreamReader v1;
org.yaml.snakeyaml.resolver.Resolver v6;
java.lang.Class v2;
java.lang.Object v10;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.reader.StreamReader;
v2 := @parameter1: java.lang.Class;
v3 = new org.yaml.snakeyaml.composer.Composer;
v4 = new org.yaml.snakeyaml.parser.ParserImpl;
v5 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
specialinvoke v4.<org.yaml.snakeyaml.parser.ParserImpl: void <init>(org.yaml.snakeyaml.reader.StreamReader,org.yaml.snakeyaml.LoaderOptions)>(v1, v5);
v6 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.resolver.Resolver resolver>;
v7 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
specialinvoke v3.<org.yaml.snakeyaml.composer.Composer: void <init>(org.yaml.snakeyaml.parser.Parser,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.LoaderOptions)>(v4, v6, v7);
v8 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.constructor.BaseConstructor constructor>;
virtualinvoke v8.<org.yaml.snakeyaml.constructor.BaseConstructor: void setComposer(org.yaml.snakeyaml.composer.Composer)>(v3);
v9 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.constructor.BaseConstructor constructor>;
v10 = virtualinvoke v9.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object getSingleData(java.lang.Class)>(v2);
return v10;
}
public java.lang.Iterable loadAll(java.io.Reader)
{
org.yaml.snakeyaml.parser.ParserImpl v3;
org.yaml.snakeyaml.LoaderOptions v5, v7;
org.yaml.snakeyaml.constructor.BaseConstructor v8;
java.io.Reader v1;
org.yaml.snakeyaml.Yaml v0;
org.yaml.snakeyaml.Yaml$YamlIterable v10;
org.yaml.snakeyaml.composer.Composer v2;
org.yaml.snakeyaml.reader.StreamReader v4;
org.yaml.snakeyaml.resolver.Resolver v6;
org.yaml.snakeyaml.Yaml$1 v9;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.io.Reader;
v2 = new org.yaml.snakeyaml.composer.Composer;
v3 = new org.yaml.snakeyaml.parser.ParserImpl;
v4 = new org.yaml.snakeyaml.reader.StreamReader;
specialinvoke v4.<org.yaml.snakeyaml.reader.StreamReader: void <init>(java.io.Reader)>(v1);
v5 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
specialinvoke v3.<org.yaml.snakeyaml.parser.ParserImpl: void <init>(org.yaml.snakeyaml.reader.StreamReader,org.yaml.snakeyaml.LoaderOptions)>(v4, v5);
v6 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.resolver.Resolver resolver>;
v7 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
specialinvoke v2.<org.yaml.snakeyaml.composer.Composer: void <init>(org.yaml.snakeyaml.parser.Parser,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.LoaderOptions)>(v3, v6, v7);
v8 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.constructor.BaseConstructor constructor>;
virtualinvoke v8.<org.yaml.snakeyaml.constructor.BaseConstructor: void setComposer(org.yaml.snakeyaml.composer.Composer)>(v2);
v9 = new org.yaml.snakeyaml.Yaml$1;
specialinvoke v9.<org.yaml.snakeyaml.Yaml$1: void <init>(org.yaml.snakeyaml.Yaml)>(v0);
v10 = new org.yaml.snakeyaml.Yaml$YamlIterable;
specialinvoke v10.<org.yaml.snakeyaml.Yaml$YamlIterable: void <init>(java.util.Iterator)>(v9);
return v10;
}
public java.lang.Iterable loadAll(java.lang.String)
{
java.io.StringReader v2;
java.lang.String v1;
java.lang.Iterable v3;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.lang.String;
v2 = new java.io.StringReader;
specialinvoke v2.<java.io.StringReader: void <init>(java.lang.String)>(v1);
v3 = virtualinvoke v0.<org.yaml.snakeyaml.Yaml: java.lang.Iterable loadAll(java.io.Reader)>(v2);
return v3;
}
public java.lang.Iterable loadAll(java.io.InputStream)
{
org.yaml.snakeyaml.reader.UnicodeReader v2;
java.lang.Iterable v3;
java.io.InputStream v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.io.InputStream;
v2 = new org.yaml.snakeyaml.reader.UnicodeReader;
specialinvoke v2.<org.yaml.snakeyaml.reader.UnicodeReader: void <init>(java.io.InputStream)>(v1);
v3 = virtualinvoke v0.<org.yaml.snakeyaml.Yaml: java.lang.Iterable loadAll(java.io.Reader)>(v2);
return v3;
}
public org.yaml.snakeyaml.nodes.Node compose(java.io.Reader)
{
org.yaml.snakeyaml.parser.ParserImpl v3;
org.yaml.snakeyaml.LoaderOptions v5, v7;
java.io.Reader v1;
org.yaml.snakeyaml.Yaml v0;
org.yaml.snakeyaml.nodes.Node v8;
org.yaml.snakeyaml.composer.Composer v2;
org.yaml.snakeyaml.reader.StreamReader v4;
org.yaml.snakeyaml.resolver.Resolver v6;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.io.Reader;
v2 = new org.yaml.snakeyaml.composer.Composer;
v3 = new org.yaml.snakeyaml.parser.ParserImpl;
v4 = new org.yaml.snakeyaml.reader.StreamReader;
specialinvoke v4.<org.yaml.snakeyaml.reader.StreamReader: void <init>(java.io.Reader)>(v1);
v5 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
specialinvoke v3.<org.yaml.snakeyaml.parser.ParserImpl: void <init>(org.yaml.snakeyaml.reader.StreamReader,org.yaml.snakeyaml.LoaderOptions)>(v4, v5);
v6 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.resolver.Resolver resolver>;
v7 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
specialinvoke v2.<org.yaml.snakeyaml.composer.Composer: void <init>(org.yaml.snakeyaml.parser.Parser,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.LoaderOptions)>(v3, v6, v7);
v8 = virtualinvoke v2.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node getSingleNode()>();
return v8;
}
public java.lang.Iterable composeAll(java.io.Reader)
{
org.yaml.snakeyaml.parser.ParserImpl v3;
org.yaml.snakeyaml.Yaml$NodeIterable v9;
org.yaml.snakeyaml.LoaderOptions v5, v7;
java.io.Reader v1;
org.yaml.snakeyaml.Yaml v0;
org.yaml.snakeyaml.composer.Composer v2;
org.yaml.snakeyaml.reader.StreamReader v4;
org.yaml.snakeyaml.resolver.Resolver v6;
org.yaml.snakeyaml.Yaml$2 v8;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.io.Reader;
v2 = new org.yaml.snakeyaml.composer.Composer;
v3 = new org.yaml.snakeyaml.parser.ParserImpl;
v4 = new org.yaml.snakeyaml.reader.StreamReader;
specialinvoke v4.<org.yaml.snakeyaml.reader.StreamReader: void <init>(java.io.Reader)>(v1);
v5 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
specialinvoke v3.<org.yaml.snakeyaml.parser.ParserImpl: void <init>(org.yaml.snakeyaml.reader.StreamReader,org.yaml.snakeyaml.LoaderOptions)>(v4, v5);
v6 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.resolver.Resolver resolver>;
v7 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
specialinvoke v2.<org.yaml.snakeyaml.composer.Composer: void <init>(org.yaml.snakeyaml.parser.Parser,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.LoaderOptions)>(v3, v6, v7);
v8 = new org.yaml.snakeyaml.Yaml$2;
specialinvoke v8.<org.yaml.snakeyaml.Yaml$2: void <init>(org.yaml.snakeyaml.Yaml,org.yaml.snakeyaml.composer.Composer)>(v0, v2);
v9 = new org.yaml.snakeyaml.Yaml$NodeIterable;
specialinvoke v9.<org.yaml.snakeyaml.Yaml$NodeIterable: void <init>(java.util.Iterator)>(v8);
return v9;
}
public void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag, java.util.regex.Pattern, java.lang.String)
{
org.yaml.snakeyaml.resolver.Resolver v4;
java.lang.String v3;
java.util.regex.Pattern v2;
org.yaml.snakeyaml.nodes.Tag v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Tag;
v2 := @parameter1: java.util.regex.Pattern;
v3 := @parameter2: java.lang.String;
v4 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.resolver.Resolver resolver>;
virtualinvoke v4.<org.yaml.snakeyaml.resolver.Resolver: void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String)>(v1, v2, v3);
return;
}
public void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag, java.util.regex.Pattern, java.lang.String, int)
{
int v4;
org.yaml.snakeyaml.resolver.Resolver v5;
java.lang.String v3;
java.util.regex.Pattern v2;
org.yaml.snakeyaml.nodes.Tag v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Tag;
v2 := @parameter1: java.util.regex.Pattern;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: int;
v5 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.resolver.Resolver resolver>;
virtualinvoke v5.<org.yaml.snakeyaml.resolver.Resolver: void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String,int)>(v1, v2, v3, v4);
return;
}
public java.lang.String toString()
{
java.lang.String v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 = v0.<org.yaml.snakeyaml.Yaml: java.lang.String name>;
return v1;
}
public java.lang.String getName()
{
java.lang.String v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 = v0.<org.yaml.snakeyaml.Yaml: java.lang.String name>;
return v1;
}
public void setName(java.lang.String)
{
java.lang.String v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.lang.String;
v0.<org.yaml.snakeyaml.Yaml: java.lang.String name> = v1;
return;
}
public java.lang.Iterable parse(java.io.Reader)
{
org.yaml.snakeyaml.parser.ParserImpl v2;
org.yaml.snakeyaml.Yaml$EventIterable v6;
org.yaml.snakeyaml.Yaml$3 v5;
org.yaml.snakeyaml.LoaderOptions v4;
org.yaml.snakeyaml.reader.StreamReader v3;
java.io.Reader v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: java.io.Reader;
v2 = new org.yaml.snakeyaml.parser.ParserImpl;
v3 = new org.yaml.snakeyaml.reader.StreamReader;
specialinvoke v3.<org.yaml.snakeyaml.reader.StreamReader: void <init>(java.io.Reader)>(v1);
v4 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
specialinvoke v2.<org.yaml.snakeyaml.parser.ParserImpl: void <init>(org.yaml.snakeyaml.reader.StreamReader,org.yaml.snakeyaml.LoaderOptions)>(v3, v4);
v5 = new org.yaml.snakeyaml.Yaml$3;
specialinvoke v5.<org.yaml.snakeyaml.Yaml$3: void <init>(org.yaml.snakeyaml.Yaml,org.yaml.snakeyaml.parser.Parser)>(v0, v2);
v6 = new org.yaml.snakeyaml.Yaml$EventIterable;
specialinvoke v6.<org.yaml.snakeyaml.Yaml$EventIterable: void <init>(java.util.Iterator)>(v5);
return v6;
}
public void setBeanAccess(org.yaml.snakeyaml.introspector.BeanAccess)
{
org.yaml.snakeyaml.introspector.BeanAccess v1;
org.yaml.snakeyaml.constructor.BaseConstructor v2;
org.yaml.snakeyaml.representer.Representer v4;
org.yaml.snakeyaml.introspector.PropertyUtils v3, v5;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.introspector.BeanAccess;
v2 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.constructor.BaseConstructor constructor>;
v3 = virtualinvoke v2.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
virtualinvoke v3.<org.yaml.snakeyaml.introspector.PropertyUtils: void setBeanAccess(org.yaml.snakeyaml.introspector.BeanAccess)>(v1);
v4 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.representer.Representer representer>;
v5 = virtualinvoke v4.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
virtualinvoke v5.<org.yaml.snakeyaml.introspector.PropertyUtils: void setBeanAccess(org.yaml.snakeyaml.introspector.BeanAccess)>(v1);
return;
}
public void addTypeDescription(org.yaml.snakeyaml.TypeDescription)
{
org.yaml.snakeyaml.constructor.BaseConstructor v2;
org.yaml.snakeyaml.representer.Representer v3;
org.yaml.snakeyaml.TypeDescription v1;
org.yaml.snakeyaml.Yaml v0;
v0 := @this: org.yaml.snakeyaml.Yaml;
v1 := @parameter0: org.yaml.snakeyaml.TypeDescription;
v2 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.constructor.BaseConstructor constructor>;
virtualinvoke v2.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.TypeDescription addTypeDescription(org.yaml.snakeyaml.TypeDescription)>(v1);
v3 = v0.<org.yaml.snakeyaml.Yaml: org.yaml.snakeyaml.representer.Representer representer>;
virtualinvoke v3.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.TypeDescription addTypeDescription(org.yaml.snakeyaml.TypeDescription)>(v1);
return;
}
}