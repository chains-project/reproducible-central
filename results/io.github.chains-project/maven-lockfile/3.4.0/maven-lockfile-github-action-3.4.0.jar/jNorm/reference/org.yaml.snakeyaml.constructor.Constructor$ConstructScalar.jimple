public class org.yaml.snakeyaml.constructor.Constructor$ConstructScalar extends org.yaml.snakeyaml.constructor.AbstractConstruct
{
final org.yaml.snakeyaml.constructor.Constructor this$0;
protected void <init>(org.yaml.snakeyaml.constructor.Constructor)
{
org.yaml.snakeyaml.constructor.Constructor$ConstructScalar v0;
org.yaml.snakeyaml.constructor.Constructor v1;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructScalar;
v1 := @parameter0: org.yaml.snakeyaml.constructor.Constructor;
v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0> = v1;
specialinvoke v0.<org.yaml.snakeyaml.constructor.AbstractConstruct: void <init>()>();
return;
}
public java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Node v1;
boolean v10, v12, v15, v17, v6, v8;
org.yaml.snakeyaml.constructor.ConstructorException v41;
java.lang.Exception v34, v40;
org.yaml.snakeyaml.error.Mark v45;
org.yaml.snakeyaml.error.YAMLException v27, v35;
java.lang.Object[] v39;
java.lang.reflect.Constructor v21, v24;
java.lang.reflect.Constructor[] v19;
org.yaml.snakeyaml.constructor.Constructor$ConstructScalar v0;
int v20, v22, v23, v26;
java.lang.String v28, v37, v38, v43, v44;
org.yaml.snakeyaml.constructor.Constructor v3, v32;
java.lang.Class[] v25, v29, v33;
org.yaml.snakeyaml.nodes.Tag v13, v14, v36, v42;
java.lang.Class v11, v16, v2, v30, v7, v9;
java.lang.Object v18, v31, v4, v5;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructScalar;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.ScalarNode: java.lang.Class getType()>();
v3 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0>;
v4 = virtualinvoke v3.<org.yaml.snakeyaml.constructor.Constructor: java.lang.Object newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node,boolean)>(v2, v1, 0);
v5 = <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object NOT_INSTANTIATED_OBJECT>;
if v4 == v5 goto label01;
return v4;
label01:
v6 = virtualinvoke v2.<java.lang.Class: boolean isPrimitive()>();
if v6 != 0 goto label02;
if v2 == class "Ljava/lang/String;" goto label02;
v7 = class "Ljava/lang/Number;";
v8 = virtualinvoke v7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v8 != 0 goto label02;
if v2 == class "Ljava/lang/Boolean;" goto label02;
v9 = class "Ljava/util/Date;";
v10 = virtualinvoke v9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v10 != 0 goto label02;
if v2 == class "Ljava/lang/Character;" goto label02;
if v2 == class "Ljava/math/BigInteger;" goto label02;
if v2 == class "Ljava/math/BigDecimal;" goto label02;
v11 = class "Ljava/lang/Enum;";
v12 = virtualinvoke v11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v12 != 0 goto label02;
v13 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag BINARY>;
v14 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.ScalarNode: org.yaml.snakeyaml.nodes.Tag getTag()>();
v15 = virtualinvoke v13.<org.yaml.snakeyaml.nodes.Tag: boolean equals(java.lang.Object)>(v14);
if v15 != 0 goto label02;
v16 = class "Ljava/util/Calendar;";
v17 = virtualinvoke v16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v17 != 0 goto label02;
if v2 != class "Ljava/util/UUID;" goto label03;
label02:
v18 = specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>(v2, v1);
goto label15;
label03:
v19 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();
v20 = 0;
v21 = null;
v22 = lengthof v19;
v23 = 0;
label04:
if v23 >= v22 goto label06;
v24 = v19[v23];
v25 = virtualinvoke v24.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
v26 = lengthof v25;
if v26 != 1 goto label05;
v20 = v20 + 1;
v21 = v24;
label05:
v23 = v23 + 1;
goto label04;
label06:
if v21 != null goto label07;
v27 = new org.yaml.snakeyaml.error.YAMLException;
v28 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No single argument constructor found for \u0001");
specialinvoke v27.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v28);
throw v27;
label07:
if v20 != 1 goto label08;
v29 = virtualinvoke v21.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
v30 = v29[0];
v31 = specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>(v30, v1);
goto label12;
label08:
v32 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0>;
v31 = virtualinvoke v32.<org.yaml.snakeyaml.constructor.Constructor: java.lang.String constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)>(v1);
label09:
v33 = newarray (java.lang.Class)[1];
v33[0] = class "Ljava/lang/String;";
v21 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v33);
label10:
goto label12;
label11:
v34 := @caughtexception;
v35 = new org.yaml.snakeyaml.error.YAMLException;
v36 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.ScalarNode: org.yaml.snakeyaml.nodes.Tag getTag()>();
v37 = virtualinvoke v34.<java.lang.Exception: java.lang.String getMessage()>();
v38 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.Tag,java.lang.String)>(v36, v37) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t construct a java object for scalar \u0001; No String constructor found. Exception=\u0001");
specialinvoke v35.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String,java.lang.Throwable)>(v38, v34);
throw v35;
label12:
virtualinvoke v21.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
v39 = newarray (java.lang.Object)[1];
v39[0] = v31;
v18 = virtualinvoke v21.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v39);
label13:
goto label15;
label14:
v40 := @caughtexception;
v41 = new org.yaml.snakeyaml.constructor.ConstructorException;
v42 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.ScalarNode: org.yaml.snakeyaml.nodes.Tag getTag()>();
v43 = virtualinvoke v40.<java.lang.Exception: java.lang.String getMessage()>();
v44 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.Tag,java.lang.String)>(v42, v43) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t construct a java object for scalar \u0001; exception=\u0001");
v45 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.ScalarNode: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v41.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)>(null, null, v44, v45, v40);
throw v41;
label15:
return v18;
catch java.lang.Exception from label09 to label10 with label11;
catch java.lang.Exception from label12 to label13 with label14;
}
private java.lang.Object constructStandardJavaInstance(java.lang.Class, org.yaml.snakeyaml.nodes.ScalarNode)
{
java.lang.Integer v63, v67;
java.math.BigDecimal v44;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlTimestamp v88;
byte v64;
java.lang.Long v37;
java.util.Map v10, v15, v28, v4, v47, v57, v95, v99;
java.math.BigInteger v74;
java.lang.Exception v39, v82;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat v91;
org.yaml.snakeyaml.error.YAMLException v102, v21, v40, v83;
java.lang.Object[] v35;
long v36;
java.lang.reflect.Constructor v34;
short v68;
java.lang.String v103, v23, v41, v45, v62, v66, v70, v73, v75, v78, v84, v85, v93;
org.yaml.snakeyaml.constructor.Constructor v14, v27, v3, v46, v56, v79, v9, v92, v94, v98;
java.lang.Class[] v32;
org.yaml.snakeyaml.LoaderOptions v80;
java.lang.RuntimeException v38;
org.yaml.snakeyaml.nodes.ScalarNode v2;
boolean v26, v77, v81, v87, v90, v97;
float v51;
org.yaml.snakeyaml.constructor.Constructor$ConstructScalar v0;
int v19, v20, v22, v71;
char v24;
org.yaml.snakeyaml.nodes.Tag v100, v11, v16, v29, v48, v5, v58, v96;
java.lang.Class v1, v13, v25, v33, v42, v43, v50, v52, v53, v54, v55, v61, v65, v69, v72, v76, v8, v86, v89;
java.lang.Object v101, v12, v17, v18, v30, v31, v49, v59, v6, v60, v7;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructScalar;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: org.yaml.snakeyaml.nodes.ScalarNode;
if v1 != class "Ljava/lang/String;" goto label01;
v3 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0>;
v4 = v3.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlConstructors>;
v5 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag STR>;
v6 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v5);
v7 = interfaceinvoke v6.<org.yaml.snakeyaml.constructor.Construct: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>(v2);
goto label36;
label01:
if v1 == class "Ljava/lang/Boolean;" goto label02;
v8 = <java.lang.Boolean: java.lang.Class TYPE>;
if v1 != v8 goto label03;
label02:
v9 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0>;
v10 = v9.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlConstructors>;
v11 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag BOOL>;
v12 = interfaceinvoke v10.<java.util.Map: java.lang.Object get(java.lang.Object)>(v11);
v7 = interfaceinvoke v12.<org.yaml.snakeyaml.constructor.Construct: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>(v2);
goto label36;
label03:
if v1 == class "Ljava/lang/Character;" goto label04;
v13 = <java.lang.Character: java.lang.Class TYPE>;
if v1 != v13 goto label07;
label04:
v14 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0>;
v15 = v14.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlConstructors>;
v16 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag STR>;
v17 = interfaceinvoke v15.<java.util.Map: java.lang.Object get(java.lang.Object)>(v16);
v18 = interfaceinvoke v17.<org.yaml.snakeyaml.constructor.Construct: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>(v2);
v19 = virtualinvoke v18.<java.lang.String: int length()>();
if v19 != 0 goto label05;
v7 = null;
goto label36;
label05:
v20 = virtualinvoke v18.<java.lang.String: int length()>();
if v20 == 1 goto label06;
v21 = new org.yaml.snakeyaml.error.YAMLException;
v22 = virtualinvoke v18.<java.lang.String: int length()>();
v23 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v18, v22) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid node Character: \'\u0001\'; length: \u0001");
specialinvoke v21.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v23);
throw v21;
label06:
v24 = virtualinvoke v18.<java.lang.String: char charAt(int)>(0);
v7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v24);
goto label36;
label07:
v25 = class "Ljava/util/Date;";
v26 = virtualinvoke v25.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v1);
if v26 == 0 goto label12;
v27 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0>;
v28 = v27.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlConstructors>;
v29 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag TIMESTAMP>;
v30 = interfaceinvoke v28.<java.util.Map: java.lang.Object get(java.lang.Object)>(v29);
v31 = interfaceinvoke v30.<org.yaml.snakeyaml.constructor.Construct: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>(v2);
if v1 != class "Ljava/util/Date;" goto label08;
v7 = v31;
goto label36;
label08:
v32 = newarray (java.lang.Class)[1];
v33 = <java.lang.Long: java.lang.Class TYPE>;
v32[0] = v33;
v34 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v32);
v35 = newarray (java.lang.Object)[1];
v36 = virtualinvoke v31.<java.util.Date: long getTime()>();
v37 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v36);
v35[0] = v37;
v7 = virtualinvoke v34.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v35);
label09:
goto label36;
label10:
v38 := @caughtexception;
throw v38;
label11:
v39 := @caughtexception;
v40 = new org.yaml.snakeyaml.error.YAMLException;
v41 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot construct: \'\u0001\'");
specialinvoke v40.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v41);
throw v40;
label12:
if v1 == class "Ljava/lang/Float;" goto label13;
if v1 == class "Ljava/lang/Double;" goto label13;
v42 = <java.lang.Float: java.lang.Class TYPE>;
if v1 == v42 goto label13;
v43 = <java.lang.Double: java.lang.Class TYPE>;
if v1 == v43 goto label13;
if v1 != class "Ljava/math/BigDecimal;" goto label16;
label13:
if v1 != class "Ljava/math/BigDecimal;" goto label14;
v44 = new java.math.BigDecimal;
v45 = virtualinvoke v2.<org.yaml.snakeyaml.nodes.ScalarNode: java.lang.String getValue()>();
specialinvoke v44.<java.math.BigDecimal: void <init>(java.lang.String)>(v45);
v7 = v44;
goto label36;
label14:
v46 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0>;
v47 = v46.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlConstructors>;
v48 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag FLOAT>;
v49 = interfaceinvoke v47.<java.util.Map: java.lang.Object get(java.lang.Object)>(v48);
v7 = interfaceinvoke v49.<org.yaml.snakeyaml.constructor.Construct: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>(v2);
if v1 == class "Ljava/lang/Float;" goto label15;
v50 = <java.lang.Float: java.lang.Class TYPE>;
if v1 != v50 goto label36;
label15:
v51 = virtualinvoke v7.<java.lang.Double: float floatValue()>();
v7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(v51);
goto label36;
label16:
if v1 == class "Ljava/lang/Byte;" goto label17;
if v1 == class "Ljava/lang/Short;" goto label17;
if v1 == class "Ljava/lang/Integer;" goto label17;
if v1 == class "Ljava/lang/Long;" goto label17;
if v1 == class "Ljava/math/BigInteger;" goto label17;
v52 = <java.lang.Byte: java.lang.Class TYPE>;
if v1 == v52 goto label17;
v53 = <java.lang.Short: java.lang.Class TYPE>;
if v1 == v53 goto label17;
v54 = <java.lang.Integer: java.lang.Class TYPE>;
if v1 == v54 goto label17;
v55 = <java.lang.Long: java.lang.Class TYPE>;
if v1 != v55 goto label26;
label17:
v56 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0>;
v57 = v56.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlConstructors>;
v58 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag INT>;
v59 = interfaceinvoke v57.<java.util.Map: java.lang.Object get(java.lang.Object)>(v58);
v60 = interfaceinvoke v59.<org.yaml.snakeyaml.constructor.Construct: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>(v2);
if v1 == class "Ljava/lang/Byte;" goto label18;
v61 = <java.lang.Byte: java.lang.Class TYPE>;
if v1 != v61 goto label19;
label18:
v62 = virtualinvoke v60.<java.lang.Object: java.lang.String toString()>();
v63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(v62);
v64 = virtualinvoke v63.<java.lang.Integer: byte byteValue()>();
v7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v64);
goto label36;
label19:
if v1 == class "Ljava/lang/Short;" goto label20;
v65 = <java.lang.Short: java.lang.Class TYPE>;
if v1 != v65 goto label21;
label20:
v66 = virtualinvoke v60.<java.lang.Object: java.lang.String toString()>();
v67 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(v66);
v68 = virtualinvoke v67.<java.lang.Integer: short shortValue()>();
v7 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(v68);
goto label36;
label21:
if v1 == class "Ljava/lang/Integer;" goto label22;
v69 = <java.lang.Integer: java.lang.Class TYPE>;
if v1 != v69 goto label23;
label22:
v70 = virtualinvoke v60.<java.lang.Object: java.lang.String toString()>();
v71 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v70);
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v71);
goto label36;
label23:
if v1 == class "Ljava/lang/Long;" goto label24;
v72 = <java.lang.Long: java.lang.Class TYPE>;
if v1 != v72 goto label25;
label24:
v73 = virtualinvoke v60.<java.lang.Object: java.lang.String toString()>();
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(v73);
goto label36;
label25:
v74 = new java.math.BigInteger;
v75 = virtualinvoke v60.<java.lang.Object: java.lang.String toString()>();
specialinvoke v74.<java.math.BigInteger: void <init>(java.lang.String)>(v75);
v7 = v74;
goto label36;
label26:
v76 = class "Ljava/lang/Enum;";
v77 = virtualinvoke v76.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v1);
if v77 == 0 goto label31;
v78 = virtualinvoke v2.<org.yaml.snakeyaml.nodes.ScalarNode: java.lang.String getValue()>();
label27:
v79 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0>;
v80 = v79.<org.yaml.snakeyaml.constructor.Constructor: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
v81 = virtualinvoke v80.<org.yaml.snakeyaml.LoaderOptions: boolean isEnumCaseSensitive()>();
if v81 == 0 goto label28;
v7 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(v1, v78);
goto label36;
label28:
v7 = staticinvoke <org.yaml.snakeyaml.util.EnumUtils: java.lang.Enum findEnumInsensitiveCase(java.lang.Class,java.lang.String)>(v1, v78);
label29:
goto label36;
label30:
v82 := @caughtexception;
v83 = new org.yaml.snakeyaml.error.YAMLException;
v84 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v85 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v78, v84) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to find enum value \'\u0001\' for enum class: \u0001");
specialinvoke v83.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v85);
throw v83;
label31:
v86 = class "Ljava/util/Calendar;";
v87 = virtualinvoke v86.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v1);
if v87 == 0 goto label32;
v88 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlTimestamp;
specialinvoke v88.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlTimestamp: void <init>()>();
virtualinvoke v88.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlTimestamp: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>(v2);
v7 = virtualinvoke v88.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlTimestamp: java.util.Calendar getCalendar()>();
goto label36;
label32:
v89 = class "Ljava/lang/Number;";
v90 = virtualinvoke v89.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v1);
if v90 == 0 goto label33;
v91 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat;
v92 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0>;
specialinvoke v91.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat: void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)>(v92);
v7 = virtualinvoke v91.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>(v2);
goto label36;
label33:
if class "Ljava/util/UUID;" != v1 goto label34;
v93 = virtualinvoke v2.<org.yaml.snakeyaml.nodes.ScalarNode: java.lang.String getValue()>();
v7 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>(v93);
goto label36;
label34:
v94 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0>;
v95 = v94.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlConstructors>;
v96 = virtualinvoke v2.<org.yaml.snakeyaml.nodes.ScalarNode: org.yaml.snakeyaml.nodes.Tag getTag()>();
v97 = interfaceinvoke v95.<java.util.Map: boolean containsKey(java.lang.Object)>(v96);
if v97 == 0 goto label35;
v98 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: org.yaml.snakeyaml.constructor.Constructor this$0>;
v99 = v98.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlConstructors>;
v100 = virtualinvoke v2.<org.yaml.snakeyaml.nodes.ScalarNode: org.yaml.snakeyaml.nodes.Tag getTag()>();
v101 = interfaceinvoke v99.<java.util.Map: java.lang.Object get(java.lang.Object)>(v100);
v7 = interfaceinvoke v101.<org.yaml.snakeyaml.constructor.Construct: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>(v2);
goto label36;
label35:
v102 = new org.yaml.snakeyaml.error.YAMLException;
v103 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unsupported class: \u0001");
specialinvoke v102.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v103);
throw v102;
label36:
return v7;
catch java.lang.RuntimeException from label08 to label09 with label10;
catch java.lang.Exception from label08 to label09 with label11;
catch java.lang.Exception from label27 to label29 with label30;
}
}