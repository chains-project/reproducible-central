public class org.yaml.snakeyaml.constructor.Constructor$ConstructSequence extends java.lang.Object implements org.yaml.snakeyaml.constructor.Construct
{
final org.yaml.snakeyaml.constructor.Constructor this$0;
protected void <init>(org.yaml.snakeyaml.constructor.Constructor)
{
org.yaml.snakeyaml.constructor.Constructor v1;
org.yaml.snakeyaml.constructor.Constructor$ConstructSequence v0;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructSequence;
v1 := @parameter0: org.yaml.snakeyaml.constructor.Constructor;
v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructSequence: org.yaml.snakeyaml.constructor.Constructor this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Node v1;
java.util.Set v8;
java.lang.Exception v56, v80;
org.yaml.snakeyaml.error.YAMLException v57, v6, v81, v82;
java.lang.Object[] v43, v78;
java.lang.reflect.Constructor v34;
java.util.ArrayList v27;
java.lang.String v86;
org.yaml.snakeyaml.constructor.Constructor v13, v15, v20, v25, v53, v58, v7;
java.lang.Class[] v37, v50, v61, v70;
org.yaml.snakeyaml.constructor.Constructor$ConstructSequence v0;
boolean v11, v12, v18, v19, v39, v4, v48, v5, v64, v68, v71, v77;
java.util.List v14, v16, v22, v28, v35, v41, v46, v59, v83;
java.lang.reflect.Constructor[] v31;
int v23, v29, v32, v33, v36, v38, v40, v42, v45, v52, v60, v62, v72, v73, v84;
java.util.Iterator v47, v63, v67;
java.lang.Class v10, v17, v2, v21, v3, v30, v51, v66, v74, v75, v76, v85, v9;
java.lang.Object v24, v26, v44, v49, v54, v55, v65, v69, v79;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructSequence;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = class "Ljava/util/Set;";
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v4 = virtualinvoke v2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v3);
if v4 == 0 goto label02;
v5 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v5 == 0 goto label01;
v6 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v6.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>("Set cannot be recursive.");
throw v6;
label01:
v7 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructSequence: org.yaml.snakeyaml.constructor.Constructor this$0>;
v8 = virtualinvoke v7.<org.yaml.snakeyaml.constructor.Constructor: java.util.Set constructSet(org.yaml.snakeyaml.nodes.SequenceNode)>(v1);
return v8;
label02:
v9 = class "Ljava/util/Collection;";
v10 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v11 = virtualinvoke v9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v10);
if v11 == 0 goto label04;
v12 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v12 == 0 goto label03;
v13 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructSequence: org.yaml.snakeyaml.constructor.Constructor this$0>;
v14 = virtualinvoke v13.<org.yaml.snakeyaml.constructor.Constructor: java.util.List newList(org.yaml.snakeyaml.nodes.SequenceNode)>(v1);
return v14;
label03:
v15 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructSequence: org.yaml.snakeyaml.constructor.Constructor this$0>;
v16 = virtualinvoke v15.<org.yaml.snakeyaml.constructor.Constructor: java.util.List constructSequence(org.yaml.snakeyaml.nodes.SequenceNode)>(v1);
return v16;
label04:
v17 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v18 = virtualinvoke v17.<java.lang.Class: boolean isArray()>();
if v18 == 0 goto label06;
v19 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v19 == 0 goto label05;
v20 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructSequence: org.yaml.snakeyaml.constructor.Constructor this$0>;
v21 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v22 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v23 = interfaceinvoke v22.<java.util.List: int size()>();
v24 = virtualinvoke v20.<org.yaml.snakeyaml.constructor.Constructor: java.lang.Object createArray(java.lang.Class,int)>(v21, v23);
return v24;
label05:
v25 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructSequence: org.yaml.snakeyaml.constructor.Constructor this$0>;
v26 = virtualinvoke v25.<org.yaml.snakeyaml.constructor.Constructor: java.lang.Object constructArray(org.yaml.snakeyaml.nodes.SequenceNode)>(v1);
return v26;
label06:
v27 = new java.util.ArrayList;
v28 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v29 = interfaceinvoke v28.<java.util.List: int size()>();
specialinvoke v27.<java.util.ArrayList: void <init>(int)>(v29);
v30 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v31 = virtualinvoke v30.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();
v32 = lengthof v31;
v33 = 0;
label07:
if v33 >= v32 goto label09;
v34 = v31[v33];
v35 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v36 = interfaceinvoke v35.<java.util.List: int size()>();
v37 = virtualinvoke v34.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
v38 = lengthof v37;
if v36 != v38 goto label08;
interfaceinvoke v27.<java.util.List: boolean add(java.lang.Object)>(v34);
label08:
v33 = v33 + 1;
goto label07;
label09:
v39 = interfaceinvoke v27.<java.util.List: boolean isEmpty()>();
if v39 != 0 goto label24;
v40 = interfaceinvoke v27.<java.util.List: int size()>();
if v40 != 1 goto label14;
v41 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v42 = interfaceinvoke v41.<java.util.List: int size()>();
v43 = newarray (java.lang.Object)[v42];
v44 = interfaceinvoke v27.<java.util.List: java.lang.Object get(int)>(0);
v45 = 0;
v46 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v47 = interfaceinvoke v46.<java.util.List: java.util.Iterator iterator()>();
label10:
v48 = interfaceinvoke v47.<java.util.Iterator: boolean hasNext()>();
if v48 == 0 goto label11;
v49 = interfaceinvoke v47.<java.util.Iterator: java.lang.Object next()>();
v50 = virtualinvoke v44.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
v51 = v50[v45];
virtualinvoke v49.<org.yaml.snakeyaml.nodes.Node: void setType(java.lang.Class)>(v51);
v52 = v45;
v45 = v45 + 1;
v53 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructSequence: org.yaml.snakeyaml.constructor.Constructor this$0>;
v54 = virtualinvoke v53.<org.yaml.snakeyaml.constructor.Constructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v49);
v43[v52] = v54;
goto label10;
label11:
virtualinvoke v44.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
v55 = virtualinvoke v44.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v43);
label12:
return v55;
label13:
v56 := @caughtexception;
v57 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v57.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.Throwable)>(v56);
throw v57;
label14:
v58 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructSequence: org.yaml.snakeyaml.constructor.Constructor this$0>;
v59 = virtualinvoke v58.<org.yaml.snakeyaml.constructor.Constructor: java.util.List constructSequence(org.yaml.snakeyaml.nodes.SequenceNode)>(v1);
v60 = interfaceinvoke v59.<java.util.List: int size()>();
v61 = newarray (java.lang.Class)[v60];
v62 = 0;
v63 = interfaceinvoke v59.<java.util.List: java.util.Iterator iterator()>();
label15:
v64 = interfaceinvoke v63.<java.util.Iterator: boolean hasNext()>();
if v64 == 0 goto label16;
v65 = interfaceinvoke v63.<java.util.Iterator: java.lang.Object next()>();
v66 = virtualinvoke v65.<java.lang.Object: java.lang.Class getClass()>();
v61[v62] = v66;
v62 = v62 + 1;
goto label15;
label16:
v67 = interfaceinvoke v27.<java.util.List: java.util.Iterator iterator()>();
label17:
v68 = interfaceinvoke v67.<java.util.Iterator: boolean hasNext()>();
if v68 == 0 goto label24;
v69 = interfaceinvoke v67.<java.util.Iterator: java.lang.Object next()>();
v70 = virtualinvoke v69.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
v71 = 1;
v72 = 0;
label18:
v73 = lengthof v70;
if v72 >= v73 goto label20;
v74 = v70[v72];
v75 = specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructSequence: java.lang.Class wrapIfPrimitive(java.lang.Class)>(v74);
v76 = v61[v72];
v77 = virtualinvoke v75.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v76);
if v77 != 0 goto label19;
v71 = 0;
goto label20;
label19:
v72 = v72 + 1;
goto label18;
label20:
if v71 == 0 goto label17;
label21:
virtualinvoke v69.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
v78 = interfaceinvoke v59.<java.util.List: java.lang.Object[] toArray()>();
v79 = virtualinvoke v69.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v78);
label22:
return v79;
label23:
v80 := @caughtexception;
v81 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v81.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.Throwable)>(v80);
throw v81;
label24:
v82 = new org.yaml.snakeyaml.error.YAMLException;
v83 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v84 = interfaceinvoke v83.<java.util.List: int size()>();
v85 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v86 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.lang.Class)>(v84, v85) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No suitable constructor with \u0001 arguments found for \u0001");
specialinvoke v82.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v86);
throw v82;
catch java.lang.Exception from label11 to label12 with label13;
catch java.lang.Exception from label21 to label22 with label23;
}
private java.lang.Class wrapIfPrimitive(java.lang.Class)
{
java.lang.Class v1, v10, v3, v4, v5, v6, v7, v8, v9;
java.lang.String v12;
org.yaml.snakeyaml.constructor.Constructor$ConstructSequence v0;
boolean v2;
org.yaml.snakeyaml.error.YAMLException v11;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructSequence;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v1.<java.lang.Class: boolean isPrimitive()>();
if v2 != 0 goto label1;
return v1;
label1:
v3 = <java.lang.Integer: java.lang.Class TYPE>;
if v1 != v3 goto label2;
return class "Ljava/lang/Integer;";
label2:
v4 = <java.lang.Float: java.lang.Class TYPE>;
if v1 != v4 goto label3;
return class "Ljava/lang/Float;";
label3:
v5 = <java.lang.Double: java.lang.Class TYPE>;
if v1 != v5 goto label4;
return class "Ljava/lang/Double;";
label4:
v6 = <java.lang.Boolean: java.lang.Class TYPE>;
if v1 != v6 goto label5;
return class "Ljava/lang/Boolean;";
label5:
v7 = <java.lang.Long: java.lang.Class TYPE>;
if v1 != v7 goto label6;
return class "Ljava/lang/Long;";
label6:
v8 = <java.lang.Character: java.lang.Class TYPE>;
if v1 != v8 goto label7;
return class "Ljava/lang/Character;";
label7:
v9 = <java.lang.Short: java.lang.Class TYPE>;
if v1 != v9 goto label8;
return class "Ljava/lang/Short;";
label8:
v10 = <java.lang.Byte: java.lang.Class TYPE>;
if v1 != v10 goto label9;
return class "Ljava/lang/Byte;";
label9:
v11 = new org.yaml.snakeyaml.error.YAMLException;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected primitive \u0001");
specialinvoke v11.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v12);
throw v11;
}
public void construct2ndStep(org.yaml.snakeyaml.nodes.Node, java.lang.Object)
{
org.yaml.snakeyaml.constructor.Constructor v6, v9;
org.yaml.snakeyaml.nodes.Node v1;
java.lang.Class v3, v4, v7;
java.lang.Object v2;
org.yaml.snakeyaml.constructor.Constructor$ConstructSequence v0;
boolean v5, v8;
org.yaml.snakeyaml.error.YAMLException v10;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructSequence;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 := @parameter1: java.lang.Object;
v3 = class "Ljava/util/List;";
v4 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v5 = virtualinvoke v3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v4);
if v5 == 0 goto label1;
v6 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructSequence: org.yaml.snakeyaml.constructor.Constructor this$0>;
virtualinvoke v6.<org.yaml.snakeyaml.constructor.Constructor: void constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)>(v1, v2);
goto label3;
label1:
v7 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v8 = virtualinvoke v7.<java.lang.Class: boolean isArray()>();
if v8 == 0 goto label2;
v9 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructSequence: org.yaml.snakeyaml.constructor.Constructor this$0>;
virtualinvoke v9.<org.yaml.snakeyaml.constructor.Constructor: java.lang.Object constructArrayStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.lang.Object)>(v1, v2);
goto label3;
label2:
v10 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v10.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>("Immutable objects cannot be recursive.");
throw v10;
label3:
return;
}
}