public class org.yaml.snakeyaml.constructor.Constructor extends org.yaml.snakeyaml.constructor.SafeConstructor
{
public void <init>(org.yaml.snakeyaml.LoaderOptions)
{
org.yaml.snakeyaml.LoaderOptions v1;
org.yaml.snakeyaml.constructor.Constructor v0;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor;
v1 := @parameter0: org.yaml.snakeyaml.LoaderOptions;
specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: void <init>(java.lang.Class,org.yaml.snakeyaml.LoaderOptions)>(class "Ljava/lang/Object;", v1);
return;
}
public void <init>(java.lang.Class, org.yaml.snakeyaml.LoaderOptions)
{
org.yaml.snakeyaml.constructor.Constructor v0;
org.yaml.snakeyaml.LoaderOptions v2;
java.lang.Class v1, v4;
org.yaml.snakeyaml.TypeDescription v3;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: org.yaml.snakeyaml.LoaderOptions;
v3 = new org.yaml.snakeyaml.TypeDescription;
v4 = staticinvoke <org.yaml.snakeyaml.constructor.Constructor: java.lang.Class checkRoot(java.lang.Class)>(v1);
specialinvoke v3.<org.yaml.snakeyaml.TypeDescription: void <init>(java.lang.Class)>(v4);
specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: void <init>(org.yaml.snakeyaml.TypeDescription,java.util.Collection,org.yaml.snakeyaml.LoaderOptions)>(v3, null, v2);
return;
}
private static java.lang.Class checkRoot(java.lang.Class)
{
java.lang.Class v0;
java.lang.NullPointerException v1;
v0 := @parameter0: java.lang.Class;
if v0 != null goto label1;
v1 = new java.lang.NullPointerException;
specialinvoke v1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Root class must be provided.");
throw v1;
label1:
return v0;
}
public void <init>(org.yaml.snakeyaml.TypeDescription, org.yaml.snakeyaml.LoaderOptions)
{
org.yaml.snakeyaml.LoaderOptions v2;
org.yaml.snakeyaml.TypeDescription v1;
org.yaml.snakeyaml.constructor.Constructor v0;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor;
v1 := @parameter0: org.yaml.snakeyaml.TypeDescription;
v2 := @parameter1: org.yaml.snakeyaml.LoaderOptions;
specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: void <init>(org.yaml.snakeyaml.TypeDescription,java.util.Collection,org.yaml.snakeyaml.LoaderOptions)>(v1, null, v2);
return;
}
public void <init>(org.yaml.snakeyaml.TypeDescription, java.util.Collection, org.yaml.snakeyaml.LoaderOptions)
{
java.lang.NullPointerException v4;
org.yaml.snakeyaml.constructor.Constructor$ConstructScalar v14;
org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject v6;
org.yaml.snakeyaml.nodes.NodeId v13, v16, v19;
java.util.Map v12, v15, v18, v5;
boolean v22, v9;
org.yaml.snakeyaml.constructor.Constructor$ConstructMapping v17;
java.util.Iterator v21;
org.yaml.snakeyaml.constructor.Constructor v0;
java.util.Collection v2;
org.yaml.snakeyaml.LoaderOptions v3;
org.yaml.snakeyaml.nodes.Tag v10;
java.lang.Class v11, v7, v8;
java.lang.Object v23;
org.yaml.snakeyaml.TypeDescription v1;
org.yaml.snakeyaml.constructor.Constructor$ConstructSequence v20;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor;
v1 := @parameter0: org.yaml.snakeyaml.TypeDescription;
v2 := @parameter1: java.util.Collection;
v3 := @parameter2: org.yaml.snakeyaml.LoaderOptions;
specialinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor: void <init>(org.yaml.snakeyaml.LoaderOptions)>(v3);
if v1 != null goto label1;
v4 = new java.lang.NullPointerException;
specialinvoke v4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Root type must be provided.");
throw v4;
label1:
v5 = v0.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlConstructors>;
v6 = new org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject;
specialinvoke v6.<org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject: void <init>(org.yaml.snakeyaml.constructor.Constructor)>(v0);
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, v6);
v7 = class "Ljava/lang/Object;";
v8 = virtualinvoke v1.<org.yaml.snakeyaml.TypeDescription: java.lang.Class getType()>();
v9 = virtualinvoke v7.<java.lang.Object: boolean equals(java.lang.Object)>(v8);
if v9 != 0 goto label2;
v10 = new org.yaml.snakeyaml.nodes.Tag;
v11 = virtualinvoke v1.<org.yaml.snakeyaml.TypeDescription: java.lang.Class getType()>();
specialinvoke v10.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.Class)>(v11);
v0.<org.yaml.snakeyaml.constructor.Constructor: org.yaml.snakeyaml.nodes.Tag rootTag> = v10;
label2:
v12 = v0.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlClassConstructors>;
v13 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId scalar>;
v14 = new org.yaml.snakeyaml.constructor.Constructor$ConstructScalar;
specialinvoke v14.<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: void <init>(org.yaml.snakeyaml.constructor.Constructor)>(v0);
interfaceinvoke v12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v13, v14);
v15 = v0.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlClassConstructors>;
v16 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId mapping>;
v17 = new org.yaml.snakeyaml.constructor.Constructor$ConstructMapping;
specialinvoke v17.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: void <init>(org.yaml.snakeyaml.constructor.Constructor)>(v0);
interfaceinvoke v15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v16, v17);
v18 = v0.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlClassConstructors>;
v19 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId sequence>;
v20 = new org.yaml.snakeyaml.constructor.Constructor$ConstructSequence;
specialinvoke v20.<org.yaml.snakeyaml.constructor.Constructor$ConstructSequence: void <init>(org.yaml.snakeyaml.constructor.Constructor)>(v0);
interfaceinvoke v18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v19, v20);
virtualinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: org.yaml.snakeyaml.TypeDescription addTypeDescription(org.yaml.snakeyaml.TypeDescription)>(v1);
if v2 == null goto label4;
v21 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label3:
v22 = interfaceinvoke v21.<java.util.Iterator: boolean hasNext()>();
if v22 == 0 goto label4;
v23 = interfaceinvoke v21.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: org.yaml.snakeyaml.TypeDescription addTypeDescription(org.yaml.snakeyaml.TypeDescription)>(v23);
goto label3;
label4:
return;
}
public void <init>(java.lang.String, org.yaml.snakeyaml.LoaderOptions) throws java.lang.ClassNotFoundException
{
org.yaml.snakeyaml.constructor.Constructor v0;
org.yaml.snakeyaml.LoaderOptions v2;
java.lang.Class v4;
java.lang.String v1, v3;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.yaml.snakeyaml.LoaderOptions;
v3 = staticinvoke <org.yaml.snakeyaml.constructor.Constructor: java.lang.String check(java.lang.String)>(v1);
v4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(v3);
specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: void <init>(java.lang.Class,org.yaml.snakeyaml.LoaderOptions)>(v4, v2);
return;
}
private static java.lang.String check(java.lang.String)
{
int v3;
java.lang.String v0, v2;
java.lang.NullPointerException v1;
org.yaml.snakeyaml.error.YAMLException v4;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
v1 = new java.lang.NullPointerException;
specialinvoke v1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Root type must be provided.");
throw v1;
label1:
v2 = virtualinvoke v0.<java.lang.String: java.lang.String trim()>();
v3 = virtualinvoke v2.<java.lang.String: int length()>();
if v3 != 0 goto label2;
v4 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v4.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>("Root type must be provided.");
throw v4;
label2:
return v0;
}
protected java.lang.Class getClassForNode(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.constructor.Constructor v0;
org.yaml.snakeyaml.nodes.Tag v12, v3, v5;
org.yaml.snakeyaml.nodes.Node v1;
java.util.Map v11, v2;
java.lang.Class v7;
java.lang.ClassNotFoundException v8;
java.lang.Object v4;
java.lang.String v10, v6;
org.yaml.snakeyaml.error.YAMLException v9;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = v0.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map typeTags>;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v4 != null goto label5;
v5 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v6 = virtualinvoke v5.<org.yaml.snakeyaml.nodes.Tag: java.lang.String getClassName()>();
label1:
v7 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: java.lang.Class getClassForName(java.lang.String)>(v6);
label2:
goto label4;
label3:
v8 := @caughtexception;
v9 = new org.yaml.snakeyaml.error.YAMLException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Class not found: \u0001");
specialinvoke v9.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v10);
throw v9;
label4:
v11 = v0.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map typeTags>;
v12 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v12, v7);
return v7;
label5:
return v4;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
}
protected java.lang.Class getClassForName(java.lang.String) throws java.lang.ClassNotFoundException
{
org.yaml.snakeyaml.constructor.Constructor v0;
java.lang.Thread v2;
java.lang.Class v4, v6;
java.lang.ClassNotFoundException v5;
java.lang.ClassLoader v3;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor;
v1 := @parameter0: java.lang.String;
label1:
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v3 = virtualinvoke v2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(v1, 1, v3);
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(v1);
return v6;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
}
}