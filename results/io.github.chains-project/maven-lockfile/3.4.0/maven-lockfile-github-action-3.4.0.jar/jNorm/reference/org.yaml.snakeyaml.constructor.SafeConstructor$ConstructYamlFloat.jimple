public class org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat extends org.yaml.snakeyaml.constructor.AbstractConstruct
{
final org.yaml.snakeyaml.constructor.SafeConstructor this$0;
public void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)
{
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat v0;
org.yaml.snakeyaml.constructor.SafeConstructor v1;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat;
v1 := @parameter0: org.yaml.snakeyaml.constructor.SafeConstructor;
v0.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat: org.yaml.snakeyaml.constructor.SafeConstructor this$0> = v1;
specialinvoke v0.<org.yaml.snakeyaml.constructor.AbstractConstruct: void <init>()>();
return;
}
public java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Node v1;
byte v9;
org.yaml.snakeyaml.constructor.SafeConstructor v2;
boolean v13, v18, v5;
org.yaml.snakeyaml.constructor.ConstructorException v6;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat v0;
org.yaml.snakeyaml.error.Mark v7, v8;
java.lang.Double v16, v19, v33, v34, v37;
java.lang.String[] v22;
int v14, v20, v21, v23, v25, v26, v27, v28;
java.lang.String v11, v12, v17, v29, v3, v4;
double v15, v24, v30, v31, v32, v35, v36;
char v10;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat: org.yaml.snakeyaml.constructor.SafeConstructor this$0>;
v3 = virtualinvoke v2.<org.yaml.snakeyaml.constructor.SafeConstructor: java.lang.String constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)>(v1);
v4 = virtualinvoke v3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("_", "");
v5 = virtualinvoke v4.<java.lang.String: boolean isEmpty()>();
if v5 == 0 goto label01;
v6 = new org.yaml.snakeyaml.constructor.ConstructorException;
v7 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
v8 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v6.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>("while constructing a float", v7, "found empty value", v8);
throw v6;
label01:
v9 = 1;
v10 = virtualinvoke v4.<java.lang.String: char charAt(int)>(0);
if v10 != 45 goto label02;
v9 = -1;
v4 = virtualinvoke v4.<java.lang.String: java.lang.String substring(int)>(1);
goto label03;
label02:
if v10 != 43 goto label03;
v4 = virtualinvoke v4.<java.lang.String: java.lang.String substring(int)>(1);
label03:
v11 = virtualinvoke v4.<java.lang.String: java.lang.String toLowerCase()>();
v12 = ".inf";
v13 = virtualinvoke v12.<java.lang.String: boolean equals(java.lang.Object)>(v11);
if v13 == 0 goto label06;
v14 = (int) -1;
if v9 != v14 goto label04;
v15 = #-Infinity;
goto label05;
label04:
v15 = #Infinity;
label05:
v16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v15);
return v16;
label06:
v17 = ".nan";
v18 = virtualinvoke v17.<java.lang.String: boolean equals(java.lang.Object)>(v11);
if v18 == 0 goto label07;
v19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#NaN);
return v19;
label07:
v20 = virtualinvoke v4.<java.lang.String: int indexOf(int)>(58);
v21 = (int) -1;
if v20 == v21 goto label10;
v22 = virtualinvoke v4.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");
v23 = 1;
v24 = 0.0;
v25 = 0;
v26 = lengthof v22;
label08:
if v25 >= v26 goto label09;
v27 = v26 - v25;
v28 = v27 - 1;
v29 = v22[v28];
v30 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(v29);
v31 = v30 * v23;
v24 = v24 + v31;
v23 = v23 * 60;
v25 = v25 + 1;
goto label08;
label09:
v32 = v9 * v24;
v33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v32);
return v33;
label10:
v34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(v4);
v35 = virtualinvoke v34.<java.lang.Double: double doubleValue()>();
v36 = v35 * v9;
v37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v36);
return v37;
}
}