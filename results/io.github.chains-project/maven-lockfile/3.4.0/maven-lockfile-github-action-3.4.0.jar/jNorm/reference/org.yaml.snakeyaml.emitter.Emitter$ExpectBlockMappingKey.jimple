class org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey extends java.lang.Object implements org.yaml.snakeyaml.emitter.EmitterState
{
private final boolean first;
final org.yaml.snakeyaml.emitter.Emitter this$0;
public void <init>(org.yaml.snakeyaml.emitter.Emitter, boolean)
{
org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey v0;
org.yaml.snakeyaml.emitter.Emitter v1;
boolean v2;
v0 := @this: org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey;
v1 := @parameter0: org.yaml.snakeyaml.emitter.Emitter;
v2 := @parameter1: boolean;
v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: boolean first> = v2;
return;
}
public void expect() throws java.io.IOException
{
org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey v0;
org.yaml.snakeyaml.events.Event v10, v5, v6;
org.yaml.snakeyaml.comments.CommentEventsCollector v3;
boolean v11, v22, v8;
org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingValue v31;
org.yaml.snakeyaml.util.ArrayStack v14, v18, v24, v30;
org.yaml.snakeyaml.emitter.Emitter v1, v12, v13, v16, v17, v2, v20, v21, v23, v26, v27, v28, v29, v32, v33, v4, v7, v9;
java.lang.Object v15, v19;
org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingSimpleValue v25;
v0 := @this: org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey;
v1 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
v2 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
v3 = v2.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
v4 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
v5 = v4.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.events.Event event>;
v6 = virtualinvoke v3.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.events.Event collectEventsAndPoll(org.yaml.snakeyaml.events.Event)>(v5);
v1.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.events.Event event> = v6;
v7 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v7.<org.yaml.snakeyaml.emitter.Emitter: void writeBlockComment()>();
v8 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: boolean first>;
if v8 != 0 goto label1;
v9 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
v10 = v9.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.events.Event event>;
v11 = v10 instanceof org.yaml.snakeyaml.events.MappingEndEvent;
if v11 == 0 goto label1;
v12 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
v13 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
v14 = v13.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.util.ArrayStack indents>;
v15 = virtualinvoke v14.<org.yaml.snakeyaml.util.ArrayStack: java.lang.Object pop()>();
v12.<org.yaml.snakeyaml.emitter.Emitter: java.lang.Integer indent> = v15;
v16 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
v17 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
v18 = v17.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.util.ArrayStack states>;
v19 = virtualinvoke v18.<org.yaml.snakeyaml.util.ArrayStack: java.lang.Object pop()>();
v16.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.emitter.EmitterState state> = v19;
goto label3;
label1:
v20 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
virtualinvoke v20.<org.yaml.snakeyaml.emitter.Emitter: void writeIndent()>();
v21 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
v22 = specialinvoke v21.<org.yaml.snakeyaml.emitter.Emitter: boolean checkSimpleKey()>();
if v22 == 0 goto label2;
v23 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
v24 = v23.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.util.ArrayStack states>;
v25 = new org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingSimpleValue;
v26 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v25.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingSimpleValue: void <init>(org.yaml.snakeyaml.emitter.Emitter)>(v26);
virtualinvoke v24.<org.yaml.snakeyaml.util.ArrayStack: void push(java.lang.Object)>(v25);
v27 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v27.<org.yaml.snakeyaml.emitter.Emitter: void expectNode(boolean,boolean,boolean)>(0, 1, 1);
goto label3;
label2:
v28 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
virtualinvoke v28.<org.yaml.snakeyaml.emitter.Emitter: void writeIndicator(java.lang.String,boolean,boolean,boolean)>("?", 1, 0, 1);
v29 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
v30 = v29.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.util.ArrayStack states>;
v31 = new org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingValue;
v32 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v31.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingValue: void <init>(org.yaml.snakeyaml.emitter.Emitter)>(v32);
virtualinvoke v30.<org.yaml.snakeyaml.util.ArrayStack: void push(java.lang.Object)>(v31);
v33 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v33.<org.yaml.snakeyaml.emitter.Emitter: void expectNode(boolean,boolean,boolean)>(0, 1, 0);
label3:
return;
}
}