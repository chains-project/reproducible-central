public final class org.yaml.snakeyaml.error.Mark extends java.lang.Object implements java.io.Serializable
{
private final java.lang.String name;
private final int index;
private final int line;
private final int column;
private final int[] buffer;
private final int pointer;
private static int[] toCodePoints(char[])
{
int[] v3;
int v1, v2, v4, v5, v6, v7, v8;
char[] v0;
v0 := @parameter0: char[];
v1 = lengthof v0;
v2 = staticinvoke <java.lang.Character: int codePointCount(char[],int,int)>(v0, 0, v1);
v3 = newarray (int)[v2];
v4 = 0;
v5 = 0;
label1:
v6 = lengthof v0;
if v4 >= v6 goto label2;
v7 = staticinvoke <java.lang.Character: int codePointAt(char[],int)>(v0, v4);
v3[v5] = v7;
v8 = staticinvoke <java.lang.Character: int charCount(int)>(v7);
v4 = v4 + v8;
v5 = v5 + 1;
goto label1;
label2:
return v3;
}
public void <init>(java.lang.String, int, int, int, char[], int)
{
org.yaml.snakeyaml.error.Mark v0;
int[] v7;
int v2, v3, v4, v6;
char[] v5;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.error.Mark;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: char[];
v6 := @parameter5: int;
v7 = staticinvoke <org.yaml.snakeyaml.error.Mark: int[] toCodePoints(char[])>(v5);
specialinvoke v0.<org.yaml.snakeyaml.error.Mark: void <init>(java.lang.String,int,int,int,int[],int)>(v1, v2, v3, v4, v7, v6);
return;
}
public void <init>(java.lang.String, int, int, int, int[], int)
{
org.yaml.snakeyaml.error.Mark v0;
int[] v5;
int v2, v3, v4, v6;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.error.Mark;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int[];
v6 := @parameter5: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.yaml.snakeyaml.error.Mark: java.lang.String name> = v1;
v0.<org.yaml.snakeyaml.error.Mark: int index> = v2;
v0.<org.yaml.snakeyaml.error.Mark: int line> = v3;
v0.<org.yaml.snakeyaml.error.Mark: int column> = v4;
v0.<org.yaml.snakeyaml.error.Mark: int[] buffer> = v5;
v0.<org.yaml.snakeyaml.error.Mark: int pointer> = v6;
return;
}
private boolean isLineBreak(int)
{
org.yaml.snakeyaml.error.Mark v0;
org.yaml.snakeyaml.scanner.Constant v2;
int v1;
boolean v3;
v0 := @this: org.yaml.snakeyaml.error.Mark;
v1 := @parameter0: int;
v2 = <org.yaml.snakeyaml.scanner.Constant: org.yaml.snakeyaml.scanner.Constant NULL_OR_LINEBR>;
v3 = virtualinvoke v2.<org.yaml.snakeyaml.scanner.Constant: boolean has(int)>(v1);
return v3;
}
public java.lang.String get_snippet(int, int)
{
byte v13, v23;
int[] v16, v18, v27, v7;
boolean v10, v20;
org.yaml.snakeyaml.error.Mark v0;
float v3, v4;
java.lang.StringBuilder v24;
int v1, v11, v12, v15, v17, v19, v2, v21, v22, v25, v26, v28, v29, v30, v31, v32, v33, v34, v5, v8, v9;
java.lang.String v14, v35, v6;
v0 := @this: org.yaml.snakeyaml.error.Mark;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v2 / 2.0F;
v4 = v3 - 1.0F;
v5 = v0.<org.yaml.snakeyaml.error.Mark: int pointer>;
v6 = "";
label01:
if v5 <= 0 goto label02;
v7 = v0.<org.yaml.snakeyaml.error.Mark: int[] buffer>;
v8 = v5 - 1;
v9 = v7[v8];
v10 = specialinvoke v0.<org.yaml.snakeyaml.error.Mark: boolean isLineBreak(int)>(v9);
if v10 != 0 goto label02;
v5 = v5 - 1;
v11 = v0.<org.yaml.snakeyaml.error.Mark: int pointer>;
v12 = v11 - v5;
v13 = v12 cmpl v4;
if v13 <= 0 goto label01;
v6 = " ... ";
v5 = v5 + 5;
label02:
v14 = "";
v15 = v0.<org.yaml.snakeyaml.error.Mark: int pointer>;
label03:
v16 = v0.<org.yaml.snakeyaml.error.Mark: int[] buffer>;
v17 = lengthof v16;
if v15 >= v17 goto label04;
v18 = v0.<org.yaml.snakeyaml.error.Mark: int[] buffer>;
v19 = v18[v15];
v20 = specialinvoke v0.<org.yaml.snakeyaml.error.Mark: boolean isLineBreak(int)>(v19);
if v20 != 0 goto label04;
v15 = v15 + 1;
v21 = v0.<org.yaml.snakeyaml.error.Mark: int pointer>;
v22 = v15 - v21;
v23 = v22 cmpl v4;
if v23 <= 0 goto label03;
v14 = " ... ";
v15 = v15 - 5;
label04:
v24 = new java.lang.StringBuilder;
specialinvoke v24.<java.lang.StringBuilder: void <init>()>();
v25 = 0;
label05:
if v25 >= v1 goto label06;
virtualinvoke v24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
v25 = v25 + 1;
goto label05;
label06:
virtualinvoke v24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v6);
v26 = v5;
label07:
if v26 >= v15 goto label08;
v27 = v0.<org.yaml.snakeyaml.error.Mark: int[] buffer>;
v28 = v27[v26];
virtualinvoke v24.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(v28);
v26 = v26 + 1;
goto label07;
label08:
virtualinvoke v24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v14);
virtualinvoke v24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
v29 = 0;
label09:
v30 = v0.<org.yaml.snakeyaml.error.Mark: int pointer>;
v31 = v1 + v30;
v32 = v31 - v5;
v33 = virtualinvoke v6.<java.lang.String: int length()>();
v34 = v32 + v33;
if v29 >= v34 goto label10;
virtualinvoke v24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
v29 = v29 + 1;
goto label09;
label10:
virtualinvoke v24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^");
v35 = virtualinvoke v24.<java.lang.StringBuilder: java.lang.String toString()>();
return v35;
}
public java.lang.String get_snippet()
{
org.yaml.snakeyaml.error.Mark v0;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.error.Mark;
v1 = virtualinvoke v0.<org.yaml.snakeyaml.error.Mark: java.lang.String get_snippet(int,int)>(4, 75);
return v1;
}
public java.lang.String toString()
{
org.yaml.snakeyaml.error.Mark v0;
int v3, v4, v5, v6;
java.lang.String v1, v2, v7;
v0 := @this: org.yaml.snakeyaml.error.Mark;
v1 = virtualinvoke v0.<org.yaml.snakeyaml.error.Mark: java.lang.String get_snippet()>();
v2 = v0.<org.yaml.snakeyaml.error.Mark: java.lang.String name>;
v3 = v0.<org.yaml.snakeyaml.error.Mark: int line>;
v4 = v3 + 1;
v5 = v0.<org.yaml.snakeyaml.error.Mark: int column>;
v6 = v5 + 1;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,int,java.lang.String)>(v2, v4, v6, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" in \u0001, line \u0001, column \u0001:\n\u0001");
return v7;
}
public java.lang.String getName()
{
org.yaml.snakeyaml.error.Mark v0;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.error.Mark;
v1 = v0.<org.yaml.snakeyaml.error.Mark: java.lang.String name>;
return v1;
}
public int getLine()
{
int v1;
org.yaml.snakeyaml.error.Mark v0;
v0 := @this: org.yaml.snakeyaml.error.Mark;
v1 = v0.<org.yaml.snakeyaml.error.Mark: int line>;
return v1;
}
public int getColumn()
{
int v1;
org.yaml.snakeyaml.error.Mark v0;
v0 := @this: org.yaml.snakeyaml.error.Mark;
v1 = v0.<org.yaml.snakeyaml.error.Mark: int column>;
return v1;
}
public int getIndex()
{
int v1;
org.yaml.snakeyaml.error.Mark v0;
v0 := @this: org.yaml.snakeyaml.error.Mark;
v1 = v0.<org.yaml.snakeyaml.error.Mark: int index>;
return v1;
}
public int[] getBuffer()
{
org.yaml.snakeyaml.error.Mark v0;
int[] v1;
v0 := @this: org.yaml.snakeyaml.error.Mark;
v1 = v0.<org.yaml.snakeyaml.error.Mark: int[] buffer>;
return v1;
}
public int getPointer()
{
int v1;
org.yaml.snakeyaml.error.Mark v0;
v0 := @this: org.yaml.snakeyaml.error.Mark;
v1 = v0.<org.yaml.snakeyaml.error.Mark: int pointer>;
return v1;
}
}