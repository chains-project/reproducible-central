public abstract class org.yaml.snakeyaml.events.CollectionStartEvent extends org.yaml.snakeyaml.events.NodeEvent
{
private final java.lang.String tag;
private final boolean implicit;
private final org.yaml.snakeyaml.DumperOptions$FlowStyle flowStyle;
public void <init>(java.lang.String, java.lang.String, boolean, org.yaml.snakeyaml.error.Mark, org.yaml.snakeyaml.error.Mark, org.yaml.snakeyaml.DumperOptions$FlowStyle)
{
org.yaml.snakeyaml.DumperOptions$FlowStyle v6;
java.lang.NullPointerException v7;
org.yaml.snakeyaml.error.Mark v4, v5;
java.lang.String v1, v2;
org.yaml.snakeyaml.events.CollectionStartEvent v0;
boolean v3;
v0 := @this: org.yaml.snakeyaml.events.CollectionStartEvent;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 := @parameter3: org.yaml.snakeyaml.error.Mark;
v5 := @parameter4: org.yaml.snakeyaml.error.Mark;
v6 := @parameter5: org.yaml.snakeyaml.DumperOptions$FlowStyle;
specialinvoke v0.<org.yaml.snakeyaml.events.NodeEvent: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)>(v1, v4, v5);
v0.<org.yaml.snakeyaml.events.CollectionStartEvent: java.lang.String tag> = v2;
v0.<org.yaml.snakeyaml.events.CollectionStartEvent: boolean implicit> = v3;
if v6 != null goto label1;
v7 = new java.lang.NullPointerException;
specialinvoke v7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Flow style must be provided.");
throw v7;
label1:
v0.<org.yaml.snakeyaml.events.CollectionStartEvent: org.yaml.snakeyaml.DumperOptions$FlowStyle flowStyle> = v6;
return;
}
public java.lang.String getTag()
{
java.lang.String v1;
org.yaml.snakeyaml.events.CollectionStartEvent v0;
v0 := @this: org.yaml.snakeyaml.events.CollectionStartEvent;
v1 = v0.<org.yaml.snakeyaml.events.CollectionStartEvent: java.lang.String tag>;
return v1;
}
public boolean getImplicit()
{
org.yaml.snakeyaml.events.CollectionStartEvent v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.events.CollectionStartEvent;
v1 = v0.<org.yaml.snakeyaml.events.CollectionStartEvent: boolean implicit>;
return v1;
}
public org.yaml.snakeyaml.DumperOptions$FlowStyle getFlowStyle()
{
org.yaml.snakeyaml.events.CollectionStartEvent v0;
org.yaml.snakeyaml.DumperOptions$FlowStyle v1;
v0 := @this: org.yaml.snakeyaml.events.CollectionStartEvent;
v1 = v0.<org.yaml.snakeyaml.events.CollectionStartEvent: org.yaml.snakeyaml.DumperOptions$FlowStyle flowStyle>;
return v1;
}
protected java.lang.String getArguments()
{
java.lang.String v1, v2, v4;
org.yaml.snakeyaml.events.CollectionStartEvent v0;
boolean v3;
v0 := @this: org.yaml.snakeyaml.events.CollectionStartEvent;
v1 = specialinvoke v0.<org.yaml.snakeyaml.events.NodeEvent: java.lang.String getArguments()>();
v2 = v0.<org.yaml.snakeyaml.events.CollectionStartEvent: java.lang.String tag>;
v3 = v0.<org.yaml.snakeyaml.events.CollectionStartEvent: boolean implicit>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,boolean)>(v1, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001, tag=\u0001, implicit=\u0001");
return v4;
}
public boolean isFlow()
{
org.yaml.snakeyaml.DumperOptions$FlowStyle v1, v2;
org.yaml.snakeyaml.events.CollectionStartEvent v0;
boolean v3;
v0 := @this: org.yaml.snakeyaml.events.CollectionStartEvent;
v1 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle FLOW>;
v2 = v0.<org.yaml.snakeyaml.events.CollectionStartEvent: org.yaml.snakeyaml.DumperOptions$FlowStyle flowStyle>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
}