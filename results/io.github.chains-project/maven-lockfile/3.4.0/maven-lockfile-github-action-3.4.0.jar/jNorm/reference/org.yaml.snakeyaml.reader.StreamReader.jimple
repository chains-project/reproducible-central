public class org.yaml.snakeyaml.reader.StreamReader extends java.lang.Object
{
private java.lang.String name;
private final java.io.Reader stream;
private int[] dataWindow;
private int dataLength;
private int pointer;
private boolean eof;
private int index;
private int line;
private int column;
private final char[] buffer;
private static final int BUFFER_SIZE;
public void <init>(java.lang.String)
{
org.yaml.snakeyaml.reader.StreamReader v0;
java.lang.String v1;
java.io.StringReader v2;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 := @parameter0: java.lang.String;
v2 = new java.io.StringReader;
specialinvoke v2.<java.io.StringReader: void <init>(java.lang.String)>(v1);
specialinvoke v0.<org.yaml.snakeyaml.reader.StreamReader: void <init>(java.io.Reader)>(v2);
v0.<org.yaml.snakeyaml.reader.StreamReader: java.lang.String name> = "\'string\'";
return;
}
public void <init>(java.io.Reader)
{
int[] v3;
char[] v4;
org.yaml.snakeyaml.reader.StreamReader v0;
java.io.Reader v1;
java.lang.NullPointerException v2;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 := @parameter0: java.io.Reader;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer> = 0;
v0.<org.yaml.snakeyaml.reader.StreamReader: int index> = 0;
v0.<org.yaml.snakeyaml.reader.StreamReader: int line> = 0;
v0.<org.yaml.snakeyaml.reader.StreamReader: int column> = 0;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Reader must be provided.");
throw v2;
label1:
v0.<org.yaml.snakeyaml.reader.StreamReader: java.lang.String name> = "\'reader\'";
v3 = newarray (int)[0];
v0.<org.yaml.snakeyaml.reader.StreamReader: int[] dataWindow> = v3;
v0.<org.yaml.snakeyaml.reader.StreamReader: int dataLength> = 0;
v0.<org.yaml.snakeyaml.reader.StreamReader: java.io.Reader stream> = v1;
v0.<org.yaml.snakeyaml.reader.StreamReader: boolean eof> = 0;
v4 = newarray (char)[1025];
v0.<org.yaml.snakeyaml.reader.StreamReader: char[] buffer> = v4;
return;
}
public static boolean isPrintable(java.lang.String)
{
int v1, v2, v3, v5;
java.lang.String v0;
boolean v4;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = 0;
label1:
if v2 >= v1 goto label3;
v3 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v2);
v4 = staticinvoke <org.yaml.snakeyaml.reader.StreamReader: boolean isPrintable(int)>(v3);
if v4 != 0 goto label2;
return 0;
label2:
v5 = staticinvoke <java.lang.Character: int charCount(int)>(v3);
v2 = v2 + v5;
goto label1;
label3:
return 1;
}
public static boolean isPrintable(int)
{
int v0, v1, v2, v3;
boolean v4;
v0 := @parameter0: int;
if v0 < 32 goto label1;
if v0 <= 126 goto label4;
label1:
if v0 == 9 goto label4;
if v0 == 10 goto label4;
if v0 == 13 goto label4;
if v0 == 133 goto label4;
if v0 < 160 goto label2;
v1 = (int) 55295;
if v0 <= v1 goto label4;
label2:
v2 = (int) 57344;
if v0 < v2 goto label3;
v3 = (int) 65533;
if v0 <= v3 goto label4;
label3:
if v0 < 65536 goto label5;
if v0 > 1114111 goto label5;
label4:
v4 = 1;
goto label6;
label5:
v4 = 0;
label6:
return v4;
}
public org.yaml.snakeyaml.error.Mark getMark()
{
org.yaml.snakeyaml.error.Mark v1;
int[] v6;
int v3, v4, v5, v7;
org.yaml.snakeyaml.reader.StreamReader v0;
java.lang.String v2;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 = new org.yaml.snakeyaml.error.Mark;
v2 = v0.<org.yaml.snakeyaml.reader.StreamReader: java.lang.String name>;
v3 = v0.<org.yaml.snakeyaml.reader.StreamReader: int index>;
v4 = v0.<org.yaml.snakeyaml.reader.StreamReader: int line>;
v5 = v0.<org.yaml.snakeyaml.reader.StreamReader: int column>;
v6 = v0.<org.yaml.snakeyaml.reader.StreamReader: int[] dataWindow>;
v7 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
specialinvoke v1.<org.yaml.snakeyaml.error.Mark: void <init>(java.lang.String,int,int,int,int[],int)>(v2, v3, v4, v5, v6, v7);
return v1;
}
public void forward()
{
org.yaml.snakeyaml.reader.StreamReader v0;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
virtualinvoke v0.<org.yaml.snakeyaml.reader.StreamReader: void forward(int)>(1);
return;
}
public void forward(int)
{
int[] v13, v4;
int v1, v14, v15, v16, v17, v18, v19, v2, v20, v5, v6, v7, v8, v9;
boolean v11, v12, v3;
org.yaml.snakeyaml.scanner.Constant v10;
org.yaml.snakeyaml.reader.StreamReader v0;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 := @parameter0: int;
v2 = 0;
label1:
if v2 >= v1 goto label5;
v3 = specialinvoke v0.<org.yaml.snakeyaml.reader.StreamReader: boolean ensureEnoughData()>();
if v3 == 0 goto label5;
v4 = v0.<org.yaml.snakeyaml.reader.StreamReader: int[] dataWindow>;
v5 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
v6 = v5 + 1;
v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer> = v6;
v7 = v4[v5];
v8 = v0.<org.yaml.snakeyaml.reader.StreamReader: int index>;
v9 = v8 + 1;
v0.<org.yaml.snakeyaml.reader.StreamReader: int index> = v9;
v10 = <org.yaml.snakeyaml.scanner.Constant: org.yaml.snakeyaml.scanner.Constant LINEBR>;
v11 = virtualinvoke v10.<org.yaml.snakeyaml.scanner.Constant: boolean has(int)>(v7);
if v11 != 0 goto label2;
if v7 != 13 goto label3;
v12 = specialinvoke v0.<org.yaml.snakeyaml.reader.StreamReader: boolean ensureEnoughData()>();
if v12 == 0 goto label3;
v13 = v0.<org.yaml.snakeyaml.reader.StreamReader: int[] dataWindow>;
v14 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
v15 = v13[v14];
if v15 == 10 goto label3;
label2:
v16 = v0.<org.yaml.snakeyaml.reader.StreamReader: int line>;
v17 = v16 + 1;
v0.<org.yaml.snakeyaml.reader.StreamReader: int line> = v17;
v0.<org.yaml.snakeyaml.reader.StreamReader: int column> = 0;
goto label4;
label3:
v18 = (int) 65279;
if v7 == v18 goto label4;
v19 = v0.<org.yaml.snakeyaml.reader.StreamReader: int column>;
v20 = v19 + 1;
v0.<org.yaml.snakeyaml.reader.StreamReader: int column> = v20;
label4:
v2 = v2 + 1;
goto label1;
label5:
return;
}
public int peek()
{
int[] v2;
int v3, v4;
org.yaml.snakeyaml.reader.StreamReader v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 = specialinvoke v0.<org.yaml.snakeyaml.reader.StreamReader: boolean ensureEnoughData()>();
if v1 == 0 goto label1;
v2 = v0.<org.yaml.snakeyaml.reader.StreamReader: int[] dataWindow>;
v3 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
v4 = v2[v3];
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public int peek(int)
{
int[] v3;
int v1, v4, v5, v6;
org.yaml.snakeyaml.reader.StreamReader v0;
boolean v2;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 := @parameter0: int;
v2 = specialinvoke v0.<org.yaml.snakeyaml.reader.StreamReader: boolean ensureEnoughData(int)>(v1);
if v2 == 0 goto label1;
v3 = v0.<org.yaml.snakeyaml.reader.StreamReader: int[] dataWindow>;
v4 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
v5 = v4 + v1;
v6 = v3[v5];
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
public java.lang.String prefix(int)
{
int[] v4, v7;
int v1, v10, v11, v12, v5, v8, v9;
org.yaml.snakeyaml.reader.StreamReader v0;
java.lang.String v3, v6;
boolean v2;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 := @parameter0: int;
if v1 != 0 goto label1;
return "";
label1:
v2 = specialinvoke v0.<org.yaml.snakeyaml.reader.StreamReader: boolean ensureEnoughData(int)>(v1);
if v2 == 0 goto label2;
v3 = new java.lang.String;
v4 = v0.<org.yaml.snakeyaml.reader.StreamReader: int[] dataWindow>;
v5 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
specialinvoke v3.<java.lang.String: void <init>(int[],int,int)>(v4, v5, v1);
return v3;
label2:
v6 = new java.lang.String;
v7 = v0.<org.yaml.snakeyaml.reader.StreamReader: int[] dataWindow>;
v8 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
v9 = v0.<org.yaml.snakeyaml.reader.StreamReader: int dataLength>;
v10 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
v11 = v9 - v10;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v1, v11);
specialinvoke v6.<java.lang.String: void <init>(int[],int,int)>(v7, v8, v12);
return v6;
}
public java.lang.String prefixForward(int)
{
int v1, v3, v4, v5, v6, v7, v8;
org.yaml.snakeyaml.reader.StreamReader v0;
java.lang.String v2;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.reader.StreamReader: java.lang.String prefix(int)>(v1);
v3 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
v4 = v3 + v1;
v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer> = v4;
v5 = v0.<org.yaml.snakeyaml.reader.StreamReader: int index>;
v6 = v5 + v1;
v0.<org.yaml.snakeyaml.reader.StreamReader: int index> = v6;
v7 = v0.<org.yaml.snakeyaml.reader.StreamReader: int column>;
v8 = v7 + v1;
v0.<org.yaml.snakeyaml.reader.StreamReader: int column> = v8;
return v2;
}
private boolean ensureEnoughData()
{
org.yaml.snakeyaml.reader.StreamReader v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 = specialinvoke v0.<org.yaml.snakeyaml.reader.StreamReader: boolean ensureEnoughData(int)>(0);
return v1;
}
private boolean ensureEnoughData(int)
{
int v1, v3, v4, v5, v6, v7, v8;
org.yaml.snakeyaml.reader.StreamReader v0;
boolean v2, v9;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 := @parameter0: int;
v2 = v0.<org.yaml.snakeyaml.reader.StreamReader: boolean eof>;
if v2 != 0 goto label1;
v3 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
v4 = v3 + v1;
v5 = v0.<org.yaml.snakeyaml.reader.StreamReader: int dataLength>;
if v4 < v5 goto label1;
specialinvoke v0.<org.yaml.snakeyaml.reader.StreamReader: void update()>();
label1:
v6 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
v7 = v6 + v1;
v8 = v0.<org.yaml.snakeyaml.reader.StreamReader: int dataLength>;
if v7 >= v8 goto label2;
v9 = 1;
goto label3;
label2:
v9 = 0;
label3:
return v9;
}
private void update()
{
int[] v11, v24, v7;
boolean v15, v25;
java.io.Reader v1, v16;
org.yaml.snakeyaml.error.YAMLException v31;
int v10, v13, v18, v19, v20, v21, v23, v26, v29, v3, v4, v5, v6, v8, v9;
java.lang.String v28;
char v14;
java.io.IOException v30;
char[] v12, v17, v2, v22;
org.yaml.snakeyaml.reader.StreamReader v0;
org.yaml.snakeyaml.reader.ReaderException v27;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
label01:
v1 = v0.<org.yaml.snakeyaml.reader.StreamReader: java.io.Reader stream>;
v2 = v0.<org.yaml.snakeyaml.reader.StreamReader: char[] buffer>;
v3 = virtualinvoke v1.<java.io.Reader: int read(char[],int,int)>(v2, 0, 1024);
if v3 <= 0 goto label08;
v4 = v0.<org.yaml.snakeyaml.reader.StreamReader: int dataLength>;
v5 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
v6 = v4 - v5;
v7 = v0.<org.yaml.snakeyaml.reader.StreamReader: int[] dataWindow>;
v8 = v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer>;
v9 = v0.<org.yaml.snakeyaml.reader.StreamReader: int dataLength>;
v10 = v9 + v3;
v11 = staticinvoke <java.util.Arrays: int[] copyOfRange(int[],int,int)>(v7, v8, v10);
v0.<org.yaml.snakeyaml.reader.StreamReader: int[] dataWindow> = v11;
v12 = v0.<org.yaml.snakeyaml.reader.StreamReader: char[] buffer>;
v13 = v3 - 1;
v14 = v12[v13];
v15 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v14);
if v15 == 0 goto label03;
v16 = v0.<org.yaml.snakeyaml.reader.StreamReader: java.io.Reader stream>;
v17 = v0.<org.yaml.snakeyaml.reader.StreamReader: char[] buffer>;
v18 = virtualinvoke v16.<java.io.Reader: int read(char[],int,int)>(v17, v3, 1);
v19 = (int) -1;
if v18 != v19 goto label02;
v0.<org.yaml.snakeyaml.reader.StreamReader: boolean eof> = 1;
goto label03;
label02:
v3 = v3 + 1;
label03:
v20 = 32;
v21 = 0;
label04:
if v21 >= v3 goto label07;
v22 = v0.<org.yaml.snakeyaml.reader.StreamReader: char[] buffer>;
v23 = staticinvoke <java.lang.Character: int codePointAt(char[],int)>(v22, v21);
v24 = v0.<org.yaml.snakeyaml.reader.StreamReader: int[] dataWindow>;
v24[v6] = v23;
v25 = staticinvoke <org.yaml.snakeyaml.reader.StreamReader: boolean isPrintable(int)>(v23);
if v25 == 0 goto label05;
v26 = staticinvoke <java.lang.Character: int charCount(int)>(v23);
v21 = v21 + v26;
goto label06;
label05:
v20 = v23;
v21 = v3;
label06:
v6 = v6 + 1;
goto label04;
label07:
v0.<org.yaml.snakeyaml.reader.StreamReader: int dataLength> = v6;
v0.<org.yaml.snakeyaml.reader.StreamReader: int pointer> = 0;
if v20 == 32 goto label11;
v27 = new org.yaml.snakeyaml.reader.ReaderException;
v28 = v0.<org.yaml.snakeyaml.reader.StreamReader: java.lang.String name>;
v29 = v6 - 1;
specialinvoke v27.<org.yaml.snakeyaml.reader.ReaderException: void <init>(java.lang.String,int,int,java.lang.String)>(v28, v29, v20, "special characters are not allowed");
throw v27;
label08:
v0.<org.yaml.snakeyaml.reader.StreamReader: boolean eof> = 1;
label09:
goto label11;
label10:
v30 := @caughtexception;
v31 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v31.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.Throwable)>(v30);
throw v31;
label11:
return;
catch java.io.IOException from label01 to label09 with label10;
}
public int getColumn()
{
int v1;
org.yaml.snakeyaml.reader.StreamReader v0;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 = v0.<org.yaml.snakeyaml.reader.StreamReader: int column>;
return v1;
}
public int getIndex()
{
int v1;
org.yaml.snakeyaml.reader.StreamReader v0;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 = v0.<org.yaml.snakeyaml.reader.StreamReader: int index>;
return v1;
}
public int getLine()
{
int v1;
org.yaml.snakeyaml.reader.StreamReader v0;
v0 := @this: org.yaml.snakeyaml.reader.StreamReader;
v1 = v0.<org.yaml.snakeyaml.reader.StreamReader: int line>;
return v1;
}
}